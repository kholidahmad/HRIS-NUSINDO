{"version":3,"file":"vg-media.d.ts","sources":["D:/project/projek_angular/hris_rni/node_modules/ngx-videogular/lib/core/vg-media/vg-media.d.ts"],"sourcesContent":["import { ChangeDetectorRef, OnInit, OnDestroy } from '@angular/core';\nimport { IPlayable, IMediaSubscriptions } from './i-playable';\nimport { Subscription, Subject } from 'rxjs';\nimport { VgAPI } from '../services/vg-api';\nimport { IMediaElement } from './i-media-element';\nexport declare class VgMedia implements OnInit, OnDestroy, IPlayable {\n    private api;\n    private ref;\n    elem: any;\n    vgMedia: IMediaElement;\n    vgMaster: boolean;\n    state: string;\n    time: any;\n    buffer: any;\n    track: any;\n    subscriptions: IMediaSubscriptions | any;\n    canPlay: boolean;\n    canPlayThrough: boolean;\n    isMetadataLoaded: boolean;\n    isWaiting: boolean;\n    isCompleted: boolean;\n    isLive: boolean;\n    isBufferDetected: boolean;\n    checkInterval: number;\n    currentPlayPos: number;\n    lastPlayPos: number;\n    checkBufferSubscription: any;\n    syncSubscription: Subscription;\n    canPlayAllSubscription: any;\n    playAtferSync: boolean;\n    mutationObs: Subscription;\n    canPlayObs: Subscription;\n    canPlayThroughObs: Subscription;\n    loadedMetadataObs: Subscription;\n    waitingObs: Subscription;\n    progressObs: Subscription;\n    endedObs: Subscription;\n    playingObs: Subscription;\n    playObs: Subscription;\n    pauseObs: Subscription;\n    timeUpdateObs: Subscription;\n    volumeChangeObs: Subscription;\n    errorObs: Subscription;\n    bufferDetected: Subject<boolean>;\n    playPromise: Promise<any>;\n    constructor(api: VgAPI, ref: ChangeDetectorRef);\n    ngOnInit(): void;\n    prepareSync(): void;\n    startSync(): void;\n    onMutation(mutations: Array<MutationRecord>): void;\n    loadMedia(): void;\n    play(): Promise<any>;\n    pause(): void;\n    get id(): any;\n    get duration(): number;\n    set currentTime(seconds: number);\n    get currentTime(): number;\n    set volume(volume: number);\n    get volume(): number;\n    set playbackRate(rate: number);\n    get playbackRate(): number;\n    get buffered(): TimeRanges;\n    get textTracks(): TextTrackList;\n    onCanPlay(event: any): void;\n    onCanPlayThrough(event: any): void;\n    onLoadMetadata(event: any): void;\n    onWait(event: any): void;\n    onComplete(event: any): void;\n    onStartPlaying(event: any): void;\n    onPlay(event: any): void;\n    onPause(event: any): void;\n    onTimeUpdate(event: any): void;\n    onProgress(event: any): void;\n    onVolumeChange(event: any): void;\n    onError(event: any): void;\n    bufferCheck(): void;\n    startBufferCheck(): void;\n    stopBufferCheck(): void;\n    seekTime(value: number, byPercent?: boolean): void;\n    addTextTrack(type: string, label?: string, language?: string, mode?: 'disabled' | 'hidden' | 'showing'): TextTrack;\n    ngOnDestroy(): void;\n}\n"],"names":[],"mappings":"AAAA;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;"}