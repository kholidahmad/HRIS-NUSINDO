import { ElementRef, SimpleChanges, OnChanges, OnDestroy, OnInit, EventEmitter } from '@angular/core';
import { VgAPI } from '../../core/services/vg-api';
import { Subscription } from 'rxjs';
import { IDRMLicenseServer } from '../vg-streaming.module';
import { BitrateOption } from '../../core/vg-core.module';
import * as ɵngcc0 from '@angular/core';
export declare class VgDASH implements OnInit, OnChanges, OnDestroy {
    private ref;
    API: VgAPI;
    vgDash: string;
    vgDRMToken: string;
    vgDRMLicenseServer: IDRMLicenseServer;
    onGetBitrates: EventEmitter<BitrateOption[]>;
    vgFor: string;
    target: any;
    dash: any;
    subscriptions: Subscription[];
    constructor(ref: ElementRef, API: VgAPI);
    ngOnInit(): void;
    onPlayerReady(): void;
    ngOnChanges(changes: SimpleChanges): void;
    createPlayer(): void;
    setBitrate(bitrate: BitrateOption): void;
    destroyPlayer(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<VgDASH>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<VgDASH, "[vgDash]", ["vgDash"], {
    "vgDash": "vgDash";
    "vgDRMToken": "vgDRMToken";
    "vgDRMLicenseServer": "vgDRMLicenseServer";
}, {
    "onGetBitrates": "onGetBitrates";
}, never>;
}

//# sourceMappingURL=vg-dash.d.ts.map