{"version":3,"file":"slider.component.d.ts","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-inputs/dist/es2015/slider/slider.component.d.ts"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { AfterViewInit, Renderer2, ElementRef, EventEmitter, OnChanges, OnDestroy, NgZone, Injector, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { LabelTemplateDirective } from './label-template.directive';\n/**\n * Represents the [Kendo UI Slider component for Angular]({% slug overview_slider %}).\n */\nexport declare class SliderComponent implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy {\n    private localizationService;\n    private injector;\n    private renderer;\n    private ngZone;\n    private hostElement;\n    /**\n     * @hidden\n     */\n    focusableId: string;\n    /**\n     * Sets the title of the **Increase** button of the Slider ([see example]({% slug sidebuttons_slider %}#toc-titles)).\n     */\n    incrementTitle: string;\n    /**\n     * Determines if the animation will be played on value change.\n     * Regardless of this setting, no animation will be played during the initial rendering.\n     */\n    animate: boolean;\n    /**\n     * Sets the title of the **Decrease** button of the Slider ([see example]({% slug sidebuttons_slider %}#toc-titles)).\n     */\n    decrementTitle: string;\n    /**\n     * Renders the arrow side buttons of the Slider ([see example]({% slug sidebuttons_slider %}#toc-hidden-state)).\n     * When `showButtons` is set to `false`, the buttons are not displayed.\n     */\n    showButtons: boolean;\n    /**\n     * Denotes the location of the tick marks in the Slider ([see example]({% slug ticks_slider %}#toc-placement)).\n     *\n     * The available options are:\n     * * `before`&mdash;The tick marks are located to the top side of the horizontal track or to the left side of a vertical track.\n     * * `after`&mdash;The tick marks are located to the bottom side of the horizontal track or to the right side of the vertical track.\n     * * `both`&mdash;The tick marks are located on both sides of the track.\n     * * `none`&mdash;The tick marks are not visible. The actual elements are not added to the DOM tree.\n     */\n    tickPlacement: string;\n    /**\n     * Defines the title of the ticks ([see example]({% slug ticks_slider %}#toc-titles)). The default title\n     * for each tick is its Slider value. If you use a callback function, the function accepts an argument\n     * that holds the value of the component and returns a string with the new title.\n     */\n    title: (value: number) => string;\n    /**\n     * Changes the `title` attribute of the drag handle so that it can be localized.\n     */\n    dragHandleTitle: string;\n    /**\n     * If `vertical` is set to `true`, the orientation of the Slider changes from horizontal to vertical\n     * ([see example]({% slug orientation_slider %})).\n     */\n    vertical: boolean;\n    /**\n     * The minimum value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).\n     * The attribute accepts both integers and floating-point numbers.\n     */\n    min: number;\n    /**\n     * The maximum value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).\n     * The attribute accepts both integers and floating-point numbers.\n     */\n    max: number;\n    /**\n     * The step value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).\n     * Accepts positive values only. Can be an integer or a floating-point number.\n     */\n    smallStep: number;\n    /**\n     * Specifies that every n<sup>th</sup> tick will be large and will have a label\n     * ([see example]({% slug predefinedsteps_slider %}#toc-large-steps)).\n     * Accepts positive integer values only.\n     */\n    largeStep: number;\n    /**\n     * Sets the width between each two ticks along the track ([see example]({% slug ticks_slider %}#toc-width)). The value\n     * has to be set in pixels. If no `fixedTickWidth` is provided, the Slider automatically adjusts the tick width to\n     * accommodate the elements within the size of the component.\n     */\n    fixedTickWidth: number;\n    /**\n     * Determines whether the Slider is disabled ([see example]({% slug disabledstate_slider %})).\n     */\n    disabled: boolean;\n    /**\n     * Determines whether the Slider is in its read-only state ([see example]({% slug readonly_slider %})).\n     */\n    readonly: boolean;\n    /**\n     * The current value of the Slider when it is initially displayed.\n     * The component can use either NgModel or the `value` binding but not both of them at the same time.\n     */\n    value: number;\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the Slider.\n     */\n    tabindex: number;\n    /**\n     * @hidden\n     */\n    tabIndex: number;\n    /**\n     * Fires each time the user focuses the `input` element.\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time the `input` element gets blurred.\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * Fires each time the user selects a new value.\n     */\n    valueChange: EventEmitter<any>;\n    wrapper: ElementRef;\n    track: ElementRef;\n    draghandle: ElementRef;\n    sliderSelection: ElementRef;\n    ticksContainer: ElementRef;\n    ticks: any;\n    decreaseButton: ElementRef;\n    increaseButton: ElementRef;\n    labelTemplate: LabelTemplateDirective;\n    direction: string;\n    readonly horizontalClass: boolean;\n    readonly verticalClass: boolean;\n    sliderClass: boolean;\n    widgetClass: boolean;\n    stateDefaultClass: boolean;\n    readonly disabledClass: boolean;\n    readonly ariaDisabled: boolean;\n    readonly ariaReadonly: boolean;\n    readonly ariaMin: number;\n    readonly ariaMax: number;\n    readonly ariaValue: number;\n    protected subscriptions: Subscription;\n    protected isFocused: boolean;\n    protected isDragged: boolean;\n    protected control: NgControl;\n    constructor(localizationService: LocalizationService, injector: Injector, renderer: Renderer2, ngZone: NgZone, hostElement: ElementRef);\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @hidden\n     */\n    handleFocus: () => void;\n    /**\n     * @hidden\n     */\n    handleBlur: () => void;\n    ngOnInit(): void;\n    /**\n     * Focuses the Slider.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"slider.focus()\">Focus</button>\n     *  <kendo-slider #slider></kendo-slider>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    focus(): void;\n    /**\n     * Blurs the Slider.\n     */\n    blur(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    readonly incrementMessage: string;\n    /**\n     * @hidden\n     */\n    readonly decrementMessage: string;\n    /**\n     * @hidden\n     */\n    readonly dragHandleMessage: string;\n    /**\n     * @hidden\n     */\n    onWrapClick: (args: any) => void;\n    /**\n     * @hidden\n     */\n    ifEnabled: Function;\n    /**\n     * @hidden\n     */\n    handleDragPress(args: any): void;\n    /**\n     * @hidden\n     */\n    onHandleDrag(args: any): void;\n    /**\n     * @hidden\n     */\n    onKeyDown: (e: any) => void;\n    /**\n     * @hidden\n     */\n    onHandleRelease(): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: number): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: () => any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: () => any): void;\n    /**\n     * @hidden\n     */\n    changeValue(value: number): void;\n    /**\n     * @hidden\n     */\n    sizeComponent(animate: boolean): void;\n    /**\n     * @hidden\n     */\n    readonly isDisabled: boolean;\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n    isEmpty(): boolean;\n    private readonly reverse;\n    private readonly keyBinding;\n    private focused;\n    private dragging;\n    private setValueChangeInterval;\n    private ngChange;\n    private ngTouched;\n    private decreaseValue;\n    private increaseValue;\n    private getProps;\n    private resetStyles;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+PA;"}