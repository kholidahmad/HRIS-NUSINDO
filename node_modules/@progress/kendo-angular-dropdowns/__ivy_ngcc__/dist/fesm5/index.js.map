{"version":3,"file":"index.js","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-dropdowns/dist/fesm5/index.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { Component, Renderer2, Input, Output, ViewChild, HostBinding, EventEmitter, Directive, TemplateRef, Injectable, ElementRef, ChangeDetectorRef, NgZone, ViewChildren, forwardRef, isDevMode, ContentChild, ViewContainerRef, InjectionToken, Optional, Inject, KeyValueDiffers, HostListener, NgModule } from '@angular/core';\nimport { isDocumentAvailable, isChanged, KendoInput, ResizeSensorModule } from '@progress/kendo-angular-common';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { LocalizationService, L10N_PREFIX, ComponentMessages } from '@progress/kendo-angular-l10n';\nimport { fromEvent, merge, Subject, of, Subscription, interval } from 'rxjs';\nimport { auditTime, tap, map, filter, partition, throttleTime, catchError, distinctUntilChanged, skipWhile, concatMap, take, takeUntil } from 'rxjs/operators';\nimport { PopupService, PopupModule } from '@progress/kendo-angular-popup';\nexport { PopupComponent } from '@progress/kendo-angular-popup';\nimport { __assign, __extends } from 'tslib';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\nvar Keys;\n(function (Keys) {\n    Keys[Keys[\"backspace\"] = 8] = \"backspace\";\n    Keys[Keys[\"tab\"] = 9] = \"tab\";\n    Keys[Keys[\"enter\"] = 13] = \"enter\";\n    Keys[Keys[\"shift\"] = 16] = \"shift\";\n    Keys[Keys[\"ctrl\"] = 17] = \"ctrl\";\n    Keys[Keys[\"alt\"] = 18] = \"alt\";\n    Keys[Keys[\"pause/break\"] = 19] = \"pause/break\";\n    Keys[Keys[\"caps lock\"] = 20] = \"caps lock\";\n    Keys[Keys[\"esc\"] = 27] = \"esc\";\n    Keys[Keys[\"space\"] = 32] = \"space\";\n    Keys[Keys[\"page up\"] = 33] = \"page up\";\n    Keys[Keys[\"page down\"] = 34] = \"page down\";\n    Keys[Keys[\"end\"] = 35] = \"end\";\n    Keys[Keys[\"home\"] = 36] = \"home\";\n    Keys[Keys[\"left\"] = 37] = \"left\";\n    Keys[Keys[\"up\"] = 38] = \"up\";\n    Keys[Keys[\"right\"] = 39] = \"right\";\n    Keys[Keys[\"down\"] = 40] = \"down\";\n    Keys[Keys[\"insert\"] = 45] = \"insert\";\n    Keys[Keys[\"delete\"] = 46] = \"delete\";\n    Keys[Keys[\"command\"] = 91] = \"command\";\n    Keys[Keys[\"left command\"] = 91] = \"left command\";\n    Keys[Keys[\"right command\"] = 93] = \"right command\";\n    Keys[Keys[\"numpad *\"] = 106] = \"numpad *\";\n    Keys[Keys[\"numpad +\"] = 107] = \"numpad +\";\n    Keys[Keys[\"numpad -\"] = 109] = \"numpad -\";\n    Keys[Keys[\"numpad .\"] = 110] = \"numpad .\";\n    Keys[Keys[\"numpad /\"] = 111] = \"numpad /\";\n    Keys[Keys[\"num lock\"] = 144] = \"num lock\";\n    Keys[Keys[\"scroll lock\"] = 145] = \"scroll lock\";\n    Keys[Keys[\"my computer\"] = 182] = \"my computer\";\n    Keys[Keys[\"my calculator\"] = 183] = \"my calculator\";\n    Keys[Keys[\";\"] = 186] = \";\";\n    Keys[Keys[\"=\"] = 187] = \"=\";\n    Keys[Keys[\",\"] = 188] = \",\";\n    Keys[Keys[\"-\"] = 189] = \"-\";\n    Keys[Keys[\".\"] = 190] = \".\";\n    Keys[Keys[\"/\"] = 191] = \"/\";\n    Keys[Keys[\"`\"] = 192] = \"`\";\n    Keys[Keys[\"[\"] = 219] = \"[\";\n    Keys[Keys[\"\\\\\"] = 220] = \"\\\\\";\n    Keys[Keys[\"]\"] = 221] = \"]\";\n    Keys[Keys[\"'\"] = 222] = \"'\";\n})(Keys || (Keys = {}));\n\n/* tslint:disable:no-null-keyword */\n/* tslint:disable:no-bitwise */\n/* tslint:disable:align */\n/**\n * @hidden\n */\nvar isPresent = function (value) { return value !== null && value !== undefined; };\n/**\n * @hidden\n */\nvar isNumber = function (value) { return !isNaN(value); };\n/**\n * @hidden\n */\nvar guid = function () {\n    var id = \"\";\n    var i;\n    var random;\n    for (i = 0; i < 32; i++) {\n        random = Math.random() * 16 | 0;\n        if (i === 8 || i === 12 || i === 16 || i === 20) {\n            id += \"-\";\n        }\n        id += (i === 12 ? 4 : (i === 16 ? (random & 3 | 8) : random)).toString(16);\n    }\n    return id;\n};\n/**\n * @hidden\n */\nvar combineStr = function (begin, end) {\n    return begin.concat(end.substr(end.toLowerCase().indexOf(begin.toLowerCase()) + begin.length));\n};\n/**\n * @hidden\n */\nvar isWindowAvailable = function () { return typeof window !== 'undefined'; };\n/**\n * @hidden\n */\nvar isArray = function (value) { return Array.isArray(value); };\n/**\n * @hidden\n */\nvar isObject = function (value) { return isPresent(value) && typeof value === 'object'; };\n/**\n * @hidden\n */\nvar isEmptyString = function (value) { return typeof value === 'string' && value.length === 0; };\n/**\n * @hidden\n */\nvar resolveValuesInArray = function (values, data, valueField) {\n    if (data === void 0) { data = []; }\n    return values\n        .map(function (value) {\n        return data.find(function (item) { return item[valueField] === value; });\n    })\n        .filter(function (value) { return value !== undefined; });\n};\n/**\n * @hidden\n */\nvar validateComplexValues = function (values, valueField) {\n    return isArray(values) && values.filter(function (item) {\n        return isObject(item) && item[valueField];\n    });\n};\n/**\n * @hidden\n */\nvar resolveAllValues = function (value, data, valueField) {\n    var customValues = validateComplexValues(value, valueField) || [];\n    var resolvedValues = resolveValuesInArray(value, data, valueField) || [];\n    return resolvedValues.concat(customValues);\n};\n/**\n * @hidden\n */\nvar isObjectArray = function (values) {\n    return isArray(values) && values.every(function (item) { return isObject(item); });\n};\n/**\n * @hidden\n */\nvar selectedIndices = function (values, data, valueField) {\n    var extractedValues = data.map(function (item) {\n        return isPresent(item) && isPresent(item[valueField]) ? item[valueField] : item;\n    });\n    return values.reduce(function (arr, item) {\n        var value = isPresent(item) && isPresent(item[valueField]) ? item[valueField] : item;\n        var index = extractedValues.indexOf(value);\n        if (index !== -1) {\n            arr.push(index);\n        }\n        return arr;\n    }, []);\n};\n/**\n * @hidden\n */\nvar getter = function (dataItem, field, usePrimitive) {\n    if (usePrimitive === void 0) { usePrimitive = false; }\n    if (isPresent(dataItem)) {\n        if (usePrimitive) {\n            return field && isPresent(dataItem[field]) ? dataItem[field] : dataItem;\n        }\n        else {\n            return field ? dataItem[field] : dataItem;\n        }\n    }\n};\n/**\n * @hidden\n */\nvar sameCharsOnly = function (word, character) {\n    for (var idx = 0; idx < word.length; idx++) {\n        if (word.charAt(idx) !== character) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * @hidden\n */\nvar shuffleData = function (data, splitIndex, defaultItem) {\n    var result = data;\n    if (defaultItem) {\n        result = [defaultItem].concat(result);\n    }\n    return result.slice(splitIndex).concat(result.slice(0, splitIndex));\n};\n/**\n * @hidden\n */\nvar matchText = function (text, word, ignoreCase) {\n    if (!isPresent(text)) {\n        return false;\n    }\n    var temp = String(text);\n    if (ignoreCase) {\n        temp = temp.toLowerCase();\n    }\n    return temp.indexOf(word) === 0;\n};\n\n/* tslint:disable:member-ordering */\n/**\n * @hidden\n */\nvar SearchBarComponent = /** @class */ (function () {\n    function SearchBarComponent(localization, renderer) {\n        this.localization = localization;\n        this.valueChange = new EventEmitter();\n        this.onBlur = new EventEmitter();\n        this.onFocus = new EventEmitter();\n        this.onClick = new EventEmitter();\n        this.onNavigate = new EventEmitter();\n        this.searchBarClass = true;\n        this._userInput = \"\";\n        this._previousValue = \"\";\n        this._placeholder = \"\";\n        this.direction = localization.rtl ? 'rtl' : 'ltr';\n        this.renderer = renderer;\n    }\n    Object.defineProperty(SearchBarComponent.prototype, \"userInput\", {\n        get: function () {\n            return this._userInput;\n        },\n        set: function (userInput) {\n            this._userInput = userInput || \"\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchBarComponent.prototype, \"value\", {\n        get: function () {\n            return this.input.nativeElement.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchBarComponent.prototype, \"placeholder\", {\n        get: function () {\n            return this._placeholder;\n        },\n        set: function (text) {\n            this._placeholder = text || '';\n            this.setInputSize();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SearchBarComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.localizationChangeSubscription = this.localization\n            .changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            return _this.direction = rtl ? 'rtl' : 'ltr';\n        });\n    };\n    SearchBarComponent.prototype.ngOnChanges = function (changes) {\n        var previousUserInput;\n        if (this.input && (changes.userInput || changes.suggestedText)) {\n            if (changes.userInput && changes.userInput.previousValue) {\n                if (this._previousValue === changes.userInput.previousValue) {\n                    previousUserInput = this._previousValue;\n                }\n                else {\n                    previousUserInput = changes.userInput.currentValue || \"\";\n                }\n            }\n            else {\n                previousUserInput = this._previousValue;\n            }\n            var caretIndex = this.input.nativeElement.selectionStart;\n            var caretAtEnd = previousUserInput.length === caretIndex;\n            this.writeInputValue(this.suggestedText ? combineStr(this.userInput, this.suggestedText) : this.userInput);\n            if (this.suggestedText) {\n                this.setInputSelection(this.userInput.length, this.suggestedText.length);\n            }\n            else if (caretAtEnd) {\n                this.setInputSelection(this.userInput.length, this.userInput.length);\n            }\n            else {\n                this.setInputSelection(caretIndex, caretIndex);\n            }\n            this._previousValue = this.userInput;\n        }\n    };\n    SearchBarComponent.prototype.ngOnDestroy = function () {\n        if (this.localizationChangeSubscription) {\n            this.localizationChangeSubscription.unsubscribe();\n        }\n    };\n    SearchBarComponent.prototype.writeInputValue = function (text) {\n        if (isDocumentAvailable()) {\n            this.renderer.setProperty(this.input.nativeElement, 'value', text);\n        }\n    };\n    SearchBarComponent.prototype.setInputSelection = function (start, end) {\n        if (isDocumentAvailable() && this.input.nativeElement === document.activeElement) {\n            try {\n                this.input.nativeElement.setSelectionRange(start, end);\n            }\n            catch (e) {\n                //Make sure that the element is in the DOM before you invoke its methods\n            }\n        }\n    };\n    SearchBarComponent.prototype.handleInput = function (event) {\n        var value = event.target.value;\n        if (value !== this.userInput) {\n            this._previousValue = value;\n            this.valueChange.emit(value);\n        }\n    };\n    SearchBarComponent.prototype.handleFocus = function (event) {\n        this.onFocus.emit(event);\n    };\n    SearchBarComponent.prototype.handleBlur = function (event) {\n        this.onBlur.emit(event);\n    };\n    SearchBarComponent.prototype.handleKeydown = function (event) {\n        var keyCode = event.keyCode;\n        var keys = [Keys.up, Keys.down, Keys.left, Keys.right, Keys.enter,\n            Keys.esc, Keys.delete, Keys.backspace, Keys.home, Keys.end];\n        if (keys.indexOf(keyCode) > -1) {\n            this.onNavigate.emit(event);\n        }\n    };\n    SearchBarComponent.prototype.focus = function () {\n        if (isDocumentAvailable()) {\n            this.input.nativeElement.focus();\n        }\n    };\n    SearchBarComponent.prototype.blur = function () {\n        if (isDocumentAvailable()) {\n            this.input.nativeElement.blur();\n        }\n    };\n    SearchBarComponent.prototype.setInputSize = function () {\n        var lengthOf = function (x) { return x ? x.length : 0; };\n        var input = this.input.nativeElement;\n        var placeholderLength = lengthOf(this.placeholder);\n        var textLength = lengthOf(this.value);\n        var size = Math.max(placeholderLength, textLength, 1);\n        this.renderer.setAttribute(input, 'size', size.toString());\n    };\n    SearchBarComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-searchbar',\n                    template: \"\\n        <input #input\\n            autocomplete=\\\"off\\\"\\n            [id]=\\\"id\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [readonly]=\\\"readonly\\\"\\n            [placeholder]=\\\"placeholder\\\"\\n            [class]=\\\"'k-input'\\\"\\n            (input)=\\\"handleInput($event)\\\"\\n            (focus)=\\\"handleFocus($event)\\\"\\n            (blur)=\\\"handleBlur($event)\\\"\\n            (keydown)=\\\"handleKeydown($event)\\\"\\n            [attr.tabIndex]=\\\"tabIndex\\\"\\n            [attr.dir]=\\\"direction\\\"\\n            [attr.role]=\\\"role\\\"\\n            [attr.aria-disabled]=\\\"disabled\\\"\\n            [attr.aria-readonly]=\\\"readonly\\\"\\n            aria-haspopup=\\\"listbox\\\"\\n            [attr.aria-expanded]=\\\"popupOpen\\\"\\n            [attr.aria-owns]=\\\"listId\\\"\\n            [attr.aria-describedby]=\\\"tagListId\\\"\\n            [attr.aria-activedescendant]=\\\"activeDescendant\\\"\\n            [attr.aria-label]=\\\"noDataLabel\\\"\\n        />\\n   \"\n                },] },\n    ];\n    /** @nocollapse */\n    SearchBarComponent.ctorParameters = function () { return [\n        { type: LocalizationService },\n        { type: Renderer2 }\n    ]; };\n    SearchBarComponent.propDecorators = {\n        id: [{ type: Input }],\n        listId: [{ type: Input }],\n        tagListId: [{ type: Input }],\n        activeDescendant: [{ type: Input }],\n        noDataLabel: [{ type: Input }],\n        disabled: [{ type: Input }],\n        readonly: [{ type: Input }],\n        tabIndex: [{ type: Input }],\n        popupOpen: [{ type: Input }],\n        role: [{ type: Input }],\n        userInput: [{ type: Input }],\n        suggestedText: [{ type: Input }],\n        valueChange: [{ type: Output }],\n        onBlur: [{ type: Output }],\n        onFocus: [{ type: Output }],\n        onClick: [{ type: Output }],\n        onNavigate: [{ type: Output }],\n        input: [{ type: ViewChild, args: [\"input\", { static: true },] }],\n        searchBarClass: [{ type: HostBinding, args: ['class.k-searchbar',] }],\n        placeholder: [{ type: Input }]\n    };\n    return SearchBarComponent;\n}());\n\n/* tslint:disable:max-line-length */\n/**\n * Renders the list item content. To define the item template, nest an `<ng-template>` tag\n * with the `kendo<ComponentName>ItemTemplate` directive inside the component tag. The template context is\n * set to the current component. To get a reference to the current data item, use the `let-dataItem` directive.\n *\n * - [Using `ItemTemplate` with the AutoComplete]({% slug templates_autocomplete %}#toc-item-template)\n * - [Using `ItemTemplate` with the ComboBox]({% slug templates_combobox %}#toc-item-template)\n * - [Using `ItemTemplate` with the DropDownList]({% slug templates_ddl %}#toc-item-template)\n * - [Using `ItemTemplate` with the MultiSelect]({% slug templates_multiselect %}#toc-item-template)\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-combobox [data]=\"listItems\">\n *    <ng-template kendoComboBoxItemTemplate let-dataItem>\n *      <span>{{dataItem}} option</span>\n *    </ng-template>\n *  </kendo-combobox>\n * `\n * })\n * class AppComponent {\n *   public listItems: Array<string> = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"];\n * }\n * ```\n */\nvar ItemTemplateDirective = /** @class */ (function () {\n    function ItemTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    ItemTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDropDownListItemTemplate],[kendoComboBoxItemTemplate],[kendoAutoCompleteItemTemplate],[kendoMultiSelectItemTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    ItemTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return ItemTemplateDirective;\n}());\n\n/* tslint:disable:max-line-length */\n/**\n * Renders the header content of the list. To define the header template, nest an `<ng-template>` tag\n * with the `kendo<ComponentName>HeaderTemplate` directive inside the component tag.\n *\n * - [Using `HeaderTemplate` with the AutoComplete]({% slug templates_autocomplete %}#toc-header-template)\n * - [Using `HeaderTemplate` with the ComboBox]({% slug templates_combobox %}#toc-header-template)\n * - [Using `HeaderTemplate` with the DropDownList]({% slug templates_ddl %}#toc-header-template)\n * - [Using `HeaderTemplate` with the MultiSelect]({% slug templates_multiselect %}#toc-header-template)\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-combobox [data]=\"listItems\">\n *    <ng-template kendoComboBoxHeaderTemplate>\n *      <h4>Header template</h4>\n *    </ng-template>\n *  </kendo-combobox>\n * `\n * })\n * class AppComponent {\n *   public listItems: Array<string> = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"];\n * }\n * ```\n */\nvar HeaderTemplateDirective = /** @class */ (function () {\n    function HeaderTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    HeaderTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDropDownListHeaderTemplate],[kendoComboBoxHeaderTemplate],[kendoAutoCompleteHeaderTemplate],[kendoMultiSelectHeaderTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    HeaderTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return HeaderTemplateDirective;\n}());\n\n/* tslint:disable:max-line-length */\n/**\n * Renders the footer content of the list. To define the footer template, nest an `<ng-template>` tag\n * with the `kendo<ComponentName>FooterTemplate` directive inside the component tag.\n *\n * - [Using `FooterTemplate` with the AutoComplete]({% slug templates_autocomplete %}#toc-footer-template)\n * - [Using `FooterTemplate` with the ComboBox]({% slug templates_combobox %}#toc-footer-template)\n * - [Using `FooterTemplate` with the DropDownList]({% slug templates_ddl %}#toc-footer-template)\n * - [Using `FooterTemplate` with the MultiSelect]({% slug templates_multiselect %}#toc-footer-template)\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-combobox [data]=\"listItems\">\n *    <ng-template kendoComboBoxFooterTemplate>\n *      <h4>Footer template</h4>\n *    </ng-template>\n *  </kendo-combobox>\n * `\n * })\n * class AppComponent {\n *   public listItems: Array<string> = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"];\n * }\n * ```\n */\nvar FooterTemplateDirective = /** @class */ (function () {\n    function FooterTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    FooterTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDropDownListFooterTemplate],[kendoComboBoxFooterTemplate],[kendoAutoCompleteFooterTemplate],[kendoMultiSelectFooterTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    FooterTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return FooterTemplateDirective;\n}());\n\n/* tslint:disable:max-line-length */\n/**\n * Renders the group header content. To define the group template, nest an `<ng-template>` tag\n * with the `kendo<ComponentName>GroupTemplate` directive inside the component tag. The template context is\n * set to the current component. To get a reference to the current data item, use the `let-groupName` directive.\n *\n * - [Using `GroupTemplate` with the AutoComplete]({% slug templates_autocomplete %}#toc-group-template)\n * - [Using `GroupTemplate` with the ComboBox]({% slug templates_combobox %}#toc-group-template)\n * - [Using `GroupTemplate` with the DropDownList]({% slug templates_ddl %}#toc-group-template)\n * - [Using `GroupTemplate` with the MultiSelect]({% slug templates_multiselect %}#toc-group-template)\n *\n * @example\n * ```ts\n * import { groupBy } from '@progress/kendo-data-query';\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-combobox [data]=\"groupedData\" [textField]=\"'name'\" [valueField]=\"'name'\">\n *    <ng-template kendoComboBoxGroupTemplate let-groupName>\n *      <span>Food type: {{groupName}} option</span>\n *    </ng-template>\n *  </kendo-combobox>\n * `\n * })\n * class AppComponent {\n *   public data = [\n *       { name: \"Pork\", category: \"Food\", subcategory: \"Meat\" },\n *       { name: \"Pepper\", category: \"Food\", subcategory: \"Vegetables\" },\n *       { name: \"Beef\", category: \"Food\", subcategory: \"Meat\" }\n *   ];\n *   public groupedData = groupBy(this.data, [{field: \"subcategory\"}]);\n * }\n * ```\n */\nvar GroupTemplateDirective = /** @class */ (function () {\n    function GroupTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    GroupTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDropDownListGroupTemplate],[kendoComboBoxGroupTemplate],[kendoAutoCompleteGroupTemplate],[kendoMultiSelectGroupTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    GroupTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return GroupTemplateDirective;\n}());\n\n/* tslint:disable:max-line-length */\n/**\n * Renders the fixed group header content. To define the fixed group template, nest an `<ng-template>` tag\n * with the `kendo<ComponentName>FixedGroupTemplate` directive inside the component tag. The template context is\n * set to the current component. To get a reference to the current data item, use the `let-groupName` directive.\n *\n * - [Using `FixedGroupTemplate` with the AutoComplete]({% slug templates_autocomplete %}#toc-fixed-group-template)\n * - [Using `FixedGroupTemplate` with the ComboBox]({% slug templates_combobox %}#toc-fixed-group-template)\n * - [Using `FixedGroupTemplate` with the DropDownList]({% slug templates_ddl %}#toc-fixed-group-template)\n * - [Using `FixedGroupTemplate` with the MultiSelect]({% slug templates_multiselect %}#toc-fixed-group-template)\n *\n * @example\n * ```ts\n * import { groupBy } from '@progress/kendo-data-query';\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-combobox [data]=\"groupedData\" [textField]=\"'name'\" [valueField]=\"'name'\">\n *    <ng-template kendoComboBoxFixedGroupTemplate let-groupName>\n *      <span>Food type: {{groupName}} option</span>\n *    </ng-template>\n *  </kendo-combobox>\n * `\n * })\n * class AppComponent {\n *   public data = [\n *       { name: \"Pork\", category: \"Food\", subcategory: \"Meat\" },\n *       { name: \"Pepper\", category: \"Food\", subcategory: \"Vegetables\" },\n *       { name: \"Beef\", category: \"Food\", subcategory: \"Meat\" }\n *   ];\n *   public groupedData = groupBy(this.data, [{field: \"subcategory\"}]);\n * }\n * ```\n */\nvar FixedGroupTemplateDirective = /** @class */ (function () {\n    function FixedGroupTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    FixedGroupTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDropDownListFixedGroupTemplate],[kendoComboBoxFixedGroupTemplate],[kendoAutoCompleteFixedGroupTemplate],[kendoMultiSelectFixedGroupTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    FixedGroupTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return FixedGroupTemplateDirective;\n}());\n\n/**\n * @hidden\n */\nvar SelectionService = /** @class */ (function () {\n    function SelectionService() {\n        this.onSelect = new EventEmitter();\n        this.onChange = new EventEmitter();\n        this.onFocus = new EventEmitter();\n        this.total = 0;\n        this.selectedIndices = [];\n    }\n    SelectionService.prototype.getTotal = function () {\n        return this.total;\n    };\n    SelectionService.prototype.isSelected = function (index) {\n        return isPresent(this.selectedIndices.find(function (current) { return current === index; }));\n    };\n    SelectionService.prototype.isFocused = function (index) {\n        return index === this.focused;\n    };\n    SelectionService.prototype.focus = function (index) {\n        if (this.isFocused(index)) {\n            return;\n        }\n        this.focused = index;\n        this.onFocus.emit(index);\n    };\n    SelectionService.prototype.select = function (index) {\n        if (this.isSelected(index)) {\n            return;\n        }\n        this.selectedIndices = [index];\n        this.focused = index;\n        this.onSelect.emit({\n            indices: [index],\n            newSelection: isPresent(index)\n        });\n    };\n    SelectionService.prototype.add = function (index) {\n        if (this.isSelected(index)) {\n            return;\n        }\n        this.selectedIndices.push(index);\n        this.focused = index;\n        this.onChange.emit({\n            added: index,\n            indices: this.selectedIndices.slice()\n        });\n    };\n    SelectionService.prototype.unselect = function (index) {\n        if (!this.isSelected(index)) {\n            return;\n        }\n        var position = this.selectedIndices.indexOf(index);\n        this.selectedIndices.splice(position, 1);\n        this.focused = index;\n        this.onChange.emit({\n            indices: this.selectedIndices.slice(),\n            removed: index\n        });\n    };\n    SelectionService.prototype.change = function (index) {\n        var newSelection = isPresent(index) && !this.isSelected(index);\n        this.selectedIndices = [index];\n        this.focused = index;\n        this.onChange.emit({\n            indices: [index],\n            newSelection: newSelection\n        });\n    };\n    SelectionService.prototype.resetSelection = function (index) {\n        this.selectedIndices = index instanceof Array ? index : [index];\n        this.focused = this.selectedIndices[this.selectedIndices.length - 1];\n    };\n    Object.defineProperty(SelectionService.prototype, \"selected\", {\n        get: function () {\n            return this.selectedIndices.slice();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionService.prototype, \"focused\", {\n        get: function () {\n            return this.focusedIndex;\n        },\n        set: function (index) {\n            if (this.focusedIndex !== index) {\n                this.focusedIndex = index;\n                this.onFocus.emit(index);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionService.decorators = [\n        { type: Injectable },\n    ];\n    return SelectionService;\n}());\n\n/**\n * @hidden\n */\nvar NavigationAction;\n(function (NavigationAction) {\n    NavigationAction[NavigationAction[\"Undefined\"] = 0] = \"Undefined\";\n    NavigationAction[NavigationAction[\"Open\"] = 1] = \"Open\";\n    NavigationAction[NavigationAction[\"Close\"] = 2] = \"Close\";\n    NavigationAction[NavigationAction[\"Enter\"] = 3] = \"Enter\";\n    NavigationAction[NavigationAction[\"Tab\"] = 4] = \"Tab\";\n    NavigationAction[NavigationAction[\"Esc\"] = 5] = \"Esc\";\n    NavigationAction[NavigationAction[\"Delete\"] = 6] = \"Delete\";\n    NavigationAction[NavigationAction[\"Backspace\"] = 7] = \"Backspace\";\n    NavigationAction[NavigationAction[\"Home\"] = 8] = \"Home\";\n    NavigationAction[NavigationAction[\"End\"] = 9] = \"End\";\n    NavigationAction[NavigationAction[\"Up\"] = 10] = \"Up\";\n    NavigationAction[NavigationAction[\"Down\"] = 11] = \"Down\";\n    NavigationAction[NavigationAction[\"Left\"] = 12] = \"Left\";\n    NavigationAction[NavigationAction[\"Right\"] = 13] = \"Right\";\n})(NavigationAction || (NavigationAction = {}));\n\n/**\n * @hidden\n */\nvar DataService = /** @class */ (function () {\n    function DataService() {\n        this.grouped = false;\n        this.groupIndices = [];\n    }\n    Object.defineProperty(DataService.prototype, \"data\", {\n        get: function () {\n            if (this.grouped) {\n                return this._flatData;\n            }\n            return this._data;\n        },\n        set: function (data) {\n            this._data = data;\n            this.grouped = this.isGrouped(data);\n            if (this.grouped) {\n                this.groupIndices = this.getGroupIndices(data);\n                this._flatData = this.flatten(data);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataService.prototype, \"itemsCount\", {\n        /**\n         * @hidden\n         * Used to get the actual items count, i.e. excluding the header items in case of grouping.\n         */\n        get: function () {\n            if (!isPresent(this.data) || this.data.length === 0) {\n                return 0;\n            }\n            var items = this.grouped ? this._flatData.filter(function (item) { return !item.header; }) : this.data;\n            return items.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     * Used to determine if the component received grouped data.\n     */\n    DataService.prototype.isGrouped = function (data) {\n        return (isPresent(data) && data.length !== 0) && isPresent(data[0]) && data[0].items !== undefined;\n    };\n    /**\n     * @hidden\n     * Used to calculate the last item index of each group.\n     */\n    DataService.prototype.getGroupIndices = function (data) {\n        var groupIndices = [];\n        for (var i = 0; i <= data.length - 1; i++) {\n            groupIndices[i] = (groupIndices[i - 1] || 0) + data[i].items.length;\n        }\n        return groupIndices;\n    };\n    /**\n     * @hidden\n     * Used to get a flat array containing all items matching certain criteria.\n     */\n    DataService.prototype.filter = function (predicate) {\n        var result = [];\n        if (this.isGrouped(this.data)) {\n            for (var i = 0; i <= this.groupIndices.length - 1; i++) {\n                var matches = this.data[i].items.filter(predicate);\n                if (matches) {\n                    result = result.concat(matches);\n                }\n            }\n        }\n        else {\n            result = this.data.filter(predicate);\n        }\n        return result;\n    };\n    /**\n     * @hidden\n     * Used to get the index of a given data item.\n     */\n    DataService.prototype.indexOf = function (item, startFrom) {\n        if (startFrom === void 0) { startFrom = 0; }\n        var predicate = function (element) {\n            return element === item;\n        };\n        if (this.grouped) {\n            predicate = function (element) {\n                return element.value === item;\n            };\n        }\n        return this.findIndex(predicate, startFrom);\n    };\n    /**\n     * @hidden\n     * Used to get the index of a data item based on an expression.\n     */\n    DataService.prototype.findIndex = function (predicate, startFrom) {\n        if (startFrom === void 0) { startFrom = 0; }\n        var index = -1;\n        if (this.grouped) {\n            var data = this._flatData.filter(function (item) { return !item.header && item.offsetIndex >= startFrom; });\n            index = data.findIndex(predicate);\n            index = data[index] ? data[index].offsetIndex : -1;\n        }\n        else {\n            var data = this.data.slice(startFrom);\n            var itemIndex = data.findIndex(predicate);\n            index = itemIndex !== -1 ? itemIndex + startFrom : -1;\n        }\n        return index;\n    };\n    /**\n     * @hidden\n     * Used to get the closest group header prior to an item index.\n     */\n    DataService.prototype.closestGroup = function (index) {\n        for (var i = index; i >= 0; i--) {\n            if (this._flatData[i].header) {\n                return this._flatData[i];\n            }\n        }\n    };\n    /**\n     * @hidden\n     * Used to get the first item matching the criteria.\n     */\n    DataService.prototype.find = function (predicate) {\n        var index = this.findIndex(predicate);\n        return this.itemAt(index);\n    };\n    /**\n     * @hidden\n     * Used to get the true index in a flattened data array.\n     */\n    DataService.prototype.flatIndex = function (index) {\n        if (this.itemsCount === 0) {\n            return -1;\n        }\n        if (this.grouped) {\n            var match = this._flatData.find(function (item) { return !item.header && item.offsetIndex === index; });\n            if (match) {\n                return match.index;\n            }\n        }\n        else {\n            return index;\n        }\n        return -1;\n    };\n    /**\n     * @hidden\n     * Used to get the item at the provided index.\n     */\n    DataService.prototype.itemAt = function (index) {\n        var dataItem;\n        if (this.itemsCount === 0) {\n            return dataItem;\n        }\n        if (this.grouped) {\n            var match = this._flatData.find(function (item) { return !item.header && item.offsetIndex === index; });\n            if (match) {\n                dataItem = match.value;\n            }\n        }\n        else {\n            dataItem = this.data[index];\n        }\n        return dataItem;\n    };\n    /**\n     * @hidden\n     * Used to get the group at the provided index.\n     */\n    DataService.prototype.groupAt = function (index) {\n        if (this.itemsCount === 0 || !this.isGrouped) {\n            return;\n        }\n        return this._flatData.find(function (item) { return item.header && item.index === index; });\n    };\n    /**\n     * @hidden\n     * Used to get the field by which the data is grouped.\n     */\n    DataService.prototype.groupField = function () {\n        if (this.itemsCount === 0 || !this.isGrouped) {\n            return;\n        }\n        return this._data[0].field;\n    };\n    /**\n     * @hidden\n     * Used to get the group to which a dataItem belongs.\n     */\n    DataService.prototype.itemGroup = function (item) {\n        if (!item || this.itemsCount === 0 || !this.isGrouped) {\n            return;\n        }\n        var fieldName = this.groupField();\n        if (fieldName) {\n            return item[fieldName];\n        }\n    };\n    DataService.prototype.flatten = function (data, group, offset, groupIndex) {\n        if (group === void 0) { group = undefined; }\n        if (offset === void 0) { offset = 0; }\n        if (groupIndex === void 0) { groupIndex = 0; }\n        var flat = [];\n        if (isPresent(group)) {\n            flat.push({\n                header: true,\n                index: groupIndex + offset,\n                offsetIndex: groupIndex,\n                value: group\n            });\n        }\n        for (var i = 0; i < data.length; i++) {\n            var result = [];\n            if (data[i].items) {\n                result = this.flatten(data[i].items, data[i].value, offset, i);\n                offset = offset + data[i].items.length;\n            }\n            else {\n                result.push({\n                    header: false,\n                    index: groupIndex + offset + i + 1,\n                    offsetIndex: offset + i,\n                    value: data[i]\n                });\n            }\n            flat = flat.concat(result);\n        }\n        return flat;\n    };\n    DataService.decorators = [\n        { type: Injectable },\n    ];\n    return DataService;\n}());\n\n/**\n * @hidden\n */\nvar DisabledItemsService = /** @class */ (function () {\n    function DisabledItemsService(dataService) {\n        this.dataService = dataService;\n        this.itemDisabled = null;\n    }\n    DisabledItemsService.prototype.isIndexDisabled = function (index) {\n        if (this.itemDisabled) {\n            var item = this.dataService.itemAt(index);\n            if (isPresent(item)) {\n                return this.itemDisabled({ dataItem: item, index: index });\n            }\n            else if (isPresent(this.defaultItem)) {\n                return this.itemDisabled({ dataItem: this.defaultItem, index: -1 });\n            }\n        }\n    };\n    DisabledItemsService.prototype.isItemDisabled = function (item) {\n        if (this.itemDisabled) {\n            var index = this.dataService.indexOf(item);\n            if (index !== -1) {\n                return this.itemDisabled({ dataItem: item, index: index });\n            }\n            else if (isPresent(this.defaultItem)) {\n                return this.itemDisabled({ dataItem: this.defaultItem, index: -1 });\n            }\n        }\n    };\n    DisabledItemsService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    DisabledItemsService.ctorParameters = function () { return [\n        { type: DataService }\n    ]; };\n    return DisabledItemsService;\n}());\n\nvar MIN_INDEX = 0;\n/**\n * @hidden\n */\nvar NavigationEvent = /** @class */ (function () {\n    /**\n     * The index of the item to which the user navigated.\n     */\n    function NavigationEvent(index, originalEvent) {\n        this.index = index;\n        this.originalEvent = originalEvent;\n    }\n    return NavigationEvent;\n}());\n/**\n * @hidden\n */\nvar NavigationService = /** @class */ (function () {\n    function NavigationService(disabledItemsService, selectionService) {\n        this.disabledItemsService = disabledItemsService;\n        this.selectionService = selectionService;\n        this.open = new EventEmitter();\n        this.close = new EventEmitter();\n        this.enter = new EventEmitter();\n        this.tab = new EventEmitter();\n        this.esc = new EventEmitter();\n        this.up = new EventEmitter();\n        this.right = new EventEmitter();\n        this.down = new EventEmitter();\n        this.left = new EventEmitter();\n        this.delete = new EventEmitter();\n        this.backspace = new EventEmitter();\n        this.home = new EventEmitter();\n        this.end = new EventEmitter();\n    }\n    NavigationService.prototype.process = function (args) {\n        var keyCode = args.originalEvent.keyCode;\n        var altKey = args.originalEvent.altKey;\n        var index;\n        var action = NavigationAction.Undefined;\n        if (altKey && keyCode === Keys.down) {\n            action = NavigationAction.Open;\n        }\n        else if (altKey && keyCode === Keys.up) {\n            action = NavigationAction.Close;\n        }\n        else if (keyCode === Keys.enter) {\n            action = NavigationAction.Enter;\n        }\n        else if (keyCode === Keys.esc) {\n            action = NavigationAction.Esc;\n        }\n        else if (keyCode === Keys.tab) {\n            action = NavigationAction.Tab;\n        }\n        else if (keyCode === Keys.up) {\n            index = this.next({ current: args.current, start: args.min, end: args.max, step: -1 });\n            action = NavigationAction.Up;\n        }\n        else if (keyCode === Keys.left) {\n            index = this.next({ current: args.current, start: args.min, end: args.max, step: -1 });\n            action = NavigationAction.Left;\n        }\n        else if (keyCode === Keys.down) {\n            index = this.next({ current: args.current, start: args.min, end: args.max, step: 1 });\n            action = NavigationAction.Down;\n        }\n        else if (keyCode === Keys.right) {\n            index = this.next({ current: args.current, start: args.min, end: args.max, step: 1 });\n            action = NavigationAction.Right;\n        }\n        else if (keyCode === Keys.home) {\n            index = this.isDisabled(MIN_INDEX) ? args.current : MIN_INDEX;\n            action = NavigationAction.Home;\n        }\n        else if (keyCode === Keys.end) {\n            index = this.isDisabled(args.max) ? args.current : args.max;\n            action = NavigationAction.End;\n        }\n        else if (keyCode === Keys.delete) {\n            action = NavigationAction.Delete;\n        }\n        else if (keyCode === Keys.backspace) {\n            action = NavigationAction.Backspace;\n        }\n        var eventData = new NavigationEvent(index, args.originalEvent);\n        if (action !== NavigationAction.Undefined) {\n            this[NavigationAction[action].toLowerCase()].emit(eventData);\n        }\n        return action;\n    };\n    NavigationService.prototype.next = function (args) {\n        var current = args.current, start = args.start, end = args.end, step = args.step;\n        var nextIndex = !isPresent(current) ? start : this.clampIndex(current + step, start, end);\n        var firstFocusableIndex = this.firstFocusableIndex(nextIndex, start, end, step);\n        if (isPresent(firstFocusableIndex)) {\n            return firstFocusableIndex;\n        }\n        if (this.selectionService.isSelected(current) && current >= start) {\n            return current;\n        }\n        var inversedStep = -1 * step;\n        return this.firstFocusableIndex(nextIndex, start, end, inversedStep);\n    };\n    NavigationService.prototype.clampIndex = function (index, min, max) {\n        if (!isPresent(index) || index < min) {\n            return min;\n        }\n        if (index > max) {\n            return max;\n        }\n        return index;\n    };\n    NavigationService.prototype.firstFocusableIndex = function (startIndex, min, max, step) {\n        while (min <= startIndex && startIndex <= max) {\n            if (!this.isDisabled(startIndex)) {\n                return startIndex;\n            }\n            startIndex += step;\n        }\n        return undefined;\n    };\n    NavigationService.prototype.isDisabled = function (index) {\n        if (this.disabledItemsService) {\n            return this.disabledItemsService.isIndexDisabled(index);\n        }\n    };\n    NavigationService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    NavigationService.ctorParameters = function () { return [\n        { type: DisabledItemsService },\n        { type: SelectionService }\n    ]; };\n    return NavigationService;\n}());\n\n/* tslint:disable:max-line-length */\n/**\n * Renders content when no data is available. To define the no-data template, nest a `<ng-template>` tag\n * with the `kendo<ComponentName>NoDataTemplate` directive inside the component tag.\n *\n * - [Using `NoDataTemplate` with the AutoComplete]({% slug templates_autocomplete %}#toc-no-data-template)\n * - [Using `NoDataTemplate` with the ComboBox]({% slug templates_combobox %}#toc-no-data-template)\n * - [Using `NoDataTemplate` with the DropDownList]({% slug templates_ddl %}#toc-no-data-template)\n * - [Using `NoDataTemplate` with the MultiSelect]({% slug templates_multiselect %}#toc-no-data-template)\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-combobox [data]=\"listItems\">\n *    <ng-template kendoComboBoxNoDataTemplate>\n *      <h4>No data!</h4>\n *    </ng-template>\n *  </kendo-combobox>\n * `\n * })\n * class AppComponent {\n *   public listItems: Array<string> = [];\n * }\n * ```\n */\nvar NoDataTemplateDirective = /** @class */ (function () {\n    function NoDataTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NoDataTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDropDownListNoDataTemplate],[kendoComboBoxNoDataTemplate],[kendoAutoCompleteNoDataTemplate],[kendoMultiSelectNoDataTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    NoDataTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return NoDataTemplateDirective;\n}());\n\n/**\n * @hidden\n */\nvar PreventableEvent = /** @class */ (function () {\n    function PreventableEvent() {\n        this.prevented = false;\n    }\n    /**\n     * Prevents the default action for a specified event.\n     * In this way, the source component suppresses the built-in behavior that follows the event.\n     */\n    PreventableEvent.prototype.preventDefault = function () {\n        this.prevented = true;\n    };\n    /**\n     * If the event is prevented by any of its subscribers, returns `true`.\n     *\n     * @returns `true` if the default action was prevented. Otherwise, returns `false`.\n     */\n    PreventableEvent.prototype.isDefaultPrevented = function () {\n        return this.prevented;\n    };\n    return PreventableEvent;\n}());\n\n/**\n * Defines the mandatory properties of the `kendoDropDownFilter` directive\n * so that `kendoDropDownFilter` can be used with any of the DropDowns components\n * which implement the `FilterableDropDownComponentBase` class.\n *\n * @hidden\n */\nvar FilterableDropDownComponentBase = /** @class */ (function () {\n    function FilterableDropDownComponentBase() {\n    }\n    return FilterableDropDownComponentBase;\n}());\n\n/**\n * @hidden\n */\nvar ListItemDirective = /** @class */ (function () {\n    function ListItemDirective(element) {\n        this.element = element;\n    }\n    ListItemDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '\"li[role=option], li[role=group]\"' // tslint:disable-line\n                },] },\n    ];\n    /** @nocollapse */\n    ListItemDirective.ctorParameters = function () { return [\n        { type: ElementRef }\n    ]; };\n    return ListItemDirective;\n}());\n\n/**\n * @hidden\n */\nvar ListComponent = /** @class */ (function () {\n    /* tslint:disable:member-ordering */\n    function ListComponent(dataService, wrapper, selectionService, disabledItemsService, cdr, zone, renderer) {\n        this.dataService = dataService;\n        this.wrapper = wrapper;\n        this.selectionService = selectionService;\n        this.disabledItemsService = disabledItemsService;\n        this.cdr = cdr;\n        this.zone = zone;\n        this.renderer = renderer;\n        this.selected = [];\n        this.focused = -1;\n        this.show = true;\n        this.multipleSelection = false;\n        this.onClick = new EventEmitter();\n        this.pageChange = new EventEmitter();\n        this.startFrom = 0;\n        this.lastLoaded = 0;\n        this.lastScrollTop = 0;\n        this.scrollToFocused = false;\n        this.selectSubscription = merge(this.selectionService.onSelect.pipe(map(function (args) { return args.indices[0]; })), this.selectionService.onFocus).subscribe(this.scrollToItem.bind(this));\n    }\n    Object.defineProperty(ListComponent.prototype, \"data\", {\n        get: function () {\n            return this._data;\n        },\n        set: function (data) {\n            this._data = data[0] && data[0].header ? data.slice(0) : data;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"items\", {\n        get: function () {\n            return this._items;\n        },\n        set: function (items) {\n            this._items = items;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"pageSize\", {\n        get: function () {\n            if (this.virtual.pageSize) {\n                return this.virtual.pageSize;\n            }\n            var size = Math.round(this.height / this.virtual.itemHeight);\n            return size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"scrollHeight\", {\n        get: function () {\n            return (this.dataService.grouped ? this.virtual.total - 1 : this.virtual.total) * this.virtual.itemHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ListComponent.prototype.ngOnChanges = function (changes) {\n        if (isChanged('data', changes, false)) {\n            if (this.lastLoaded <= 0) {\n                this.lastLoaded = this.data.length - 1;\n                this.scrollToFocused = !changes.data.isFirstChange();\n            }\n        }\n    };\n    ListComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.zone.runOutsideAngular(function () {\n            _this.scrollSubscription = fromEvent(_this.content.nativeElement, \"scroll\").pipe(auditTime(100), tap(_this.prefetchData.bind(_this)), tap(_this.findCurrentGroup.bind(_this))).subscribe(function () {\n                _this.lastScrollTop = _this.content.nativeElement.scrollTop;\n            });\n        });\n    };\n    ListComponent.prototype.ngAfterViewChecked = function () {\n        if (this.virtual) {\n            this.positionItems();\n        }\n        if (this.items && this.scrollToFocused) {\n            this.scrollToFocused = false;\n            var scrollTarget = this.items.length && this.selectionService.focused === -1 ? 0 : this.selectionService.focused;\n            this.scrollToItem(scrollTarget);\n        }\n        if (this.dataService.grouped) {\n            this.findCurrentGroup();\n        }\n    };\n    ListComponent.prototype.ngOnDestroy = function () {\n        this.selectSubscription.unsubscribe();\n        if (this.scrollSubscription) {\n            this.scrollSubscription.unsubscribe();\n        }\n    };\n    ListComponent.prototype.firstVisibleItem = function () {\n        var content = this.content.nativeElement;\n        var contentParent = content.offsetParent;\n        var offsetY = (contentParent ? contentParent.offsetTop : 0) + content.offsetTop + 1;\n        var offsetX = (contentParent ? contentParent.offsetLeft : 0) + content.offsetLeft + 1;\n        var item = document.elementFromPoint(offsetX, offsetY);\n        return item;\n    };\n    ListComponent.prototype.findCurrentGroup = function () {\n        if (!this.dataService.grouped) {\n            this.currentGroup = undefined;\n            return;\n        }\n        var item = this.firstVisibleItem();\n        if (item) {\n            var index = void 0;\n            if (item.getAttribute(\"role\") === \"group\") {\n                index = parseInt(item.getAttribute(\"group-index\"), 10);\n                this.currentGroup = this.dataService.groupAt(index).value;\n            }\n            else {\n                index = parseInt(item.getAttribute(\"index\"), 10);\n                this.currentGroup = this.dataService.itemGroup(this.dataService.itemAt(index));\n            }\n        }\n        else {\n            this.currentGroup = undefined;\n        }\n        this.cdr.detectChanges();\n    };\n    ListComponent.prototype.prefetchData = function () {\n        if (!this.virtual) {\n            return;\n        }\n        var visibleItems = Math.trunc(this.content.nativeElement.clientHeight / this.virtual.itemHeight);\n        var offsetY = this.content.nativeElement.scrollTop;\n        var start = Math.trunc(offsetY / this.virtual.itemHeight);\n        var down = offsetY > this.lastScrollTop;\n        var nextPage = (start + visibleItems >= this.lastLoaded) && this.lastLoaded < this.virtual.total - 1;\n        var leftOver = this.pageSize - (this.lastLoaded - this.startFrom);\n        var prevPage = this.lastLoaded - this.pageSize + visibleItems >= start - leftOver;\n        if (down && nextPage) {\n            this.changePage(start);\n        }\n        if (!down && prevPage) {\n            this.changePage(start - this.pageSize + visibleItems + 1);\n        }\n    };\n    ListComponent.prototype.changePage = function (start) {\n        var _this = this;\n        this.zone.run(function () {\n            var end = _this.pageSize + start;\n            if (end > _this.virtual.total) {\n                start--;\n                end = _this.virtual.total;\n            }\n            if (start < 0) {\n                start = 0;\n            }\n            _this.startFrom = start;\n            _this.lastLoaded = end;\n            _this.pageChange.emit({ skip: start, take: _this.pageSize });\n        });\n    };\n    ListComponent.prototype.index = function (groupIndex, itemIndex) {\n        return groupIndex > 0 ? (this.dataService.groupIndices[groupIndex - 1] + itemIndex) : itemIndex;\n    };\n    ListComponent.prototype.getText = function (dataItem) {\n        return getter(dataItem, this.textField);\n    };\n    ListComponent.prototype.getValue = function (dataItem) {\n        return getter(dataItem, this.valueField);\n    };\n    ListComponent.prototype.isDisabled = function (index) {\n        return this.disabledItemsService.isIndexDisabled(index);\n    };\n    ListComponent.prototype.scrollToItem = function (index) {\n        if (this.virtual && index > -1) {\n            var flatIndex = index;\n            if (this.dataService.grouped) {\n                flatIndex = this.dataService.flatIndex(index);\n            }\n            this.scrollToIndex(flatIndex);\n            return;\n        }\n        var items = this.items.toArray();\n        if (isPresent(items[index]) && index !== -1) {\n            this.scroll(items[index].element);\n        }\n    };\n    ListComponent.prototype.scrollToIndex = function (index) {\n        var content = this.content.nativeElement;\n        var contentScrollTop = content.scrollTop;\n        var itemOffsetTop = index * this.virtual.itemHeight;\n        var itemOffsetHeight = this.virtual.itemHeight;\n        var contentOffsetHeight = content.clientHeight;\n        var bottomDistance = itemOffsetTop + itemOffsetHeight;\n        if (contentScrollTop > itemOffsetTop) {\n            contentScrollTop = itemOffsetTop;\n        }\n        else if (bottomDistance > (contentScrollTop + contentOffsetHeight)) {\n            contentScrollTop = (bottomDistance - contentOffsetHeight);\n        }\n        content.scrollTop = contentScrollTop;\n    };\n    ListComponent.prototype.scroll = function (item) {\n        if (!item) {\n            return;\n        }\n        var nativeElement = item.nativeElement;\n        var content = this.content.nativeElement, itemOffsetTop = nativeElement.offsetTop, itemOffsetHeight = nativeElement.offsetHeight, contentScrollTop = content.scrollTop, contentOffsetHeight = content.clientHeight, bottomDistance = itemOffsetTop + itemOffsetHeight;\n        if (contentScrollTop > itemOffsetTop) {\n            contentScrollTop = itemOffsetTop;\n        }\n        else if (bottomDistance > (contentScrollTop + contentOffsetHeight)) {\n            contentScrollTop = (bottomDistance - contentOffsetHeight);\n        }\n        content.scrollTop = contentScrollTop;\n    };\n    ListComponent.prototype.positionItems = function () {\n        var _this = this;\n        this.items.forEach(function (item, index) {\n            var offsetY = (index + _this.startFrom) * _this.virtual.itemHeight;\n            _this.renderer.setStyle(item.element.nativeElement, \"transform\", \"translateY(\" + offsetY + \"px\");\n        });\n    };\n    ListComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-list',\n                    template: \"\\n    <div *ngIf=\\\"dataService.grouped\\\"\\n        class='k-outer-group-header k-first'\\n        [ngClass]=\\\"{'k-virtual-item': virtual}\\\"\\n        [ngStyle]=\\\"{\\n            'height.px': virtual?.itemHeight,\\n            'minHeight.px' : virtual?.itemHeight,\\n            'boxSizing' : virtual ? 'border-box' : 'inherit'}\\\"\\n        >\\n        <ng-template *ngIf=\\\"fixedGroupTemplate\\\"\\n            [templateContext]=\\\"{\\n                templateRef: fixedGroupTemplate.templateRef,\\n                $implicit: currentGroup\\n            }\\\">\\n        </ng-template>\\n        <ng-template [ngIf]=\\\"!fixedGroupTemplate\\\"><strong>{{ currentGroup }}</strong> </ng-template>\\n    </div>\\n    <div #content\\n         [ngClass]=\\\"{ 'k-virtual-content': virtual, 'k-list-scroller': !virtual }\\\"\\n         [style.maxHeight.px]=\\\"height\\\"\\n         unselectable=\\\"on\\\">\\n    <ul #list\\n        role=\\\"listbox\\\"\\n        class=\\\"k-list k-reset\\\"\\n        [ngClass]=\\\"{ 'k-virtual-list': virtual }\\\"\\n        [attr.id]=\\\"id\\\"\\n        [attr.aria-hidden]=\\\"!show\\\">\\n         <ng-template *ngIf=\\\"!dataService.grouped && show\\\" ngFor let-dataItem let-itemIndex=\\\"index\\\" [ngForOf]=\\\"data\\\">\\n            <li\\n                role=\\\"option\\\"\\n                kendoDropDownsSelectable\\n                [height]=\\\"virtual?.itemHeight\\\"\\n                [index]=\\\"itemIndex + startFrom\\\"\\n                [multipleSelection]=\\\"multipleSelection\\\"\\n                [attr.id]=\\\"optionPrefix + '-' + getValue(dataItem)\\\"\\n                [attr.tabIndex]=\\\"-1\\\"\\n                class=\\\"k-item\\\"\\n                [ngClass]=\\\"{ 'k-virtual-item': virtual, 'k-state-disabled': isDisabled(itemIndex) }\\\">\\n                <ng-template *ngIf=\\\"template\\\"\\n                    [templateContext]=\\\"{\\n                        templateRef: template.templateRef,\\n                        $implicit: dataItem\\n                    }\\\">\\n                </ng-template>\\n                <ng-template [ngIf]=\\\"!template\\\">{{ getText(dataItem) }}</ng-template>\\n            </li>\\n         </ng-template>\\n         <ng-template *ngIf=\\\"dataService.grouped\\\" ngFor let-dataItem let-itemIndex=\\\"index\\\" [ngForOf]=\\\"data\\\">\\n            <li\\n                *ngIf=\\\"dataItem.header && dataItem.index > 0\\\"\\n                role=\\\"group\\\"\\n                class='k-outer-group-header'\\n                [ngClass]=\\\"{ 'k-virtual-item': virtual }\\\"\\n                [ngStyle]=\\\"{\\n                    'height.px': virtual?.itemHeight,\\n                    'minHeight.px' : virtual?.itemHeight,\\n                    'boxSizing' : virtual ? 'border-box' : 'inherit'}\\\"\\n                [attr.group-index]=\\\"dataItem.index\\\"\\n                [attr.id]=\\\"optionPrefix + '-' + getValue(dataItem.value)\\\"\\n                [attr.tabIndex]=\\\"-1\\\">\\n                    <ng-template *ngIf=\\\"groupTemplate\\\"\\n                          [templateContext]=\\\"{\\n                            templateRef: groupTemplate.templateRef,\\n                            $implicit: dataItem.value\\n                    }\\\">\\n                    </ng-template>\\n                    <ng-template [ngIf]=\\\"!groupTemplate\\\"><strong> {{ dataItem.value }}</strong> </ng-template>\\n              </li>\\n            <li\\n                *ngIf=\\\"!dataItem.header\\\"\\n                role=\\\"option\\\"\\n                kendoDropDownsSelectable\\n                [height]=\\\"virtual?.itemHeight\\\"\\n                [index]=\\\"dataItem.offsetIndex\\\"\\n                [multipleSelection]=\\\"multipleSelection\\\"\\n                [attr.absolute-index]=\\\"dataItem.index\\\"\\n                [attr.id]=\\\"optionPrefix + '-' + getValue(dataItem.value)\\\"\\n                [attr.tabIndex]=\\\"-1\\\"\\n                class=\\\"k-item\\\"\\n                [ngClass]=\\\"{ 'k-virtual-item': virtual, 'k-state-disabled': isDisabled(dataItem.offsetIndex) }\\\">\\n                <ng-template *ngIf=\\\"template\\\"\\n                    [templateContext]=\\\"{\\n                        templateRef: template.templateRef,\\n                        $implicit: dataItem.value\\n                    }\\\">\\n                </ng-template>\\n                <ng-template [ngIf]=\\\"!template\\\">{{ getText(dataItem.value) }}</ng-template>\\n            </li>\\n        </ng-template>\\n    </ul>\\n    <div *ngIf=\\\"virtual\\\" class=\\\"k-height-container\\\" role=\\\"presentation\\\">\\n        <div [style.height.px]=\\\"scrollHeight\\\"></div>\\n    </div>\\n    </div>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    ListComponent.ctorParameters = function () { return [\n        { type: DataService },\n        { type: ElementRef },\n        { type: SelectionService },\n        { type: DisabledItemsService },\n        { type: ChangeDetectorRef },\n        { type: NgZone },\n        { type: Renderer2 }\n    ]; };\n    ListComponent.propDecorators = {\n        selected: [{ type: Input }],\n        focused: [{ type: Input }],\n        textField: [{ type: Input }],\n        valueField: [{ type: Input }],\n        height: [{ type: Input }],\n        template: [{ type: Input }],\n        groupTemplate: [{ type: Input }],\n        fixedGroupTemplate: [{ type: Input }],\n        show: [{ type: Input }],\n        id: [{ type: Input }],\n        optionPrefix: [{ type: Input }],\n        multipleSelection: [{ type: Input }],\n        virtual: [{ type: Input }],\n        data: [{ type: Input }],\n        onClick: [{ type: Output }],\n        pageChange: [{ type: Output }],\n        items: [{ type: ViewChildren, args: [ListItemDirective,] }],\n        content: [{ type: ViewChild, args: ['content',] }],\n        list: [{ type: ViewChild, args: ['list',] }]\n    };\n    return ListComponent;\n}());\n\n/**\n * @hidden\n */\nvar DEFAULTS = {\n    pageSize: 50,\n    itemHeight: 28\n};\n/**\n * @hidden\n */\nvar normalizeVirtualizationSettings = function (settings) {\n    if (settings === true) {\n        return DEFAULTS;\n    }\n    if (!settings) {\n        return null;\n    }\n    return __assign({ pageSize: DEFAULTS.pageSize }, settings);\n};\n\n/* tslint:disable:no-null-keyword */\nvar NO_VALUE = \"\";\n/**\n * @hidden\n */\nvar AUTOCOMPLETE_VALUE_ACCESSOR = {\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    // tslint:disable-next-line:no-use-before-declare\n    useExisting: forwardRef(function () { return AutoCompleteComponent; })\n};\n/**\n * Represents the [Kendo UI AutoComplete component for Angular]({% slug overview_autocomplete %}).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-autocomplete\n *      [data]=\"listItems\"\n *      [placeholder]=\"placeholder\"\n *  >\n * `\n * })\n * class AppComponent {\n *   public placeholder: string = 'Type \"it\" for suggestions';\n *   public listItems: Array<string> = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"];\n * }\n * ```\n */\nvar AutoCompleteComponent = /** @class */ (function () {\n    function AutoCompleteComponent(localization, dataService, popupService, selectionService, navigationService, disabledItemsService, _zone, cdr, renderer, wrapper) {\n        this.localization = localization;\n        this.dataService = dataService;\n        this.popupService = popupService;\n        this.selectionService = selectionService;\n        this.navigationService = navigationService;\n        this.disabledItemsService = disabledItemsService;\n        this._zone = _zone;\n        this.cdr = cdr;\n        this.renderer = renderer;\n        /**\n         * Defines whether the first match from the suggestions list will be automatically focused.\n         * By default, `highlightFirst` is set to `true`.\n         */\n        this.highlightFirst = true;\n        /**\n         * @hidden\n         */\n        this.focusableId = \"k-\" + guid();\n        /**\n         * The hint which is displayed when the component is empty.\n         */\n        this.placeholder = \"\";\n        /**\n         * Sets the height of the suggestions list. By default, `listHeight` is 200px.\n         *\n         * > The `listHeight` property affects only the list of suggestions and not the whole popup container.\n         * > To set the height of the popup container, use `popupSettings.height`.\n         */\n        this.listHeight = 200;\n        /**\n         * @hidden\n         *\n         * If set to `true`, renders a button on hovering over the component.\n         * Clicking this button resets the value of the component to `undefined` and triggers the `change` event.\n         */\n        this.clearButton = true;\n        /**\n         * Sets the disabled state of the component.\n         */\n        this.disabled = false;\n        /**\n         * Sets the read-only state of the component.\n         */\n        this.readonly = false;\n        /**\n         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        this.tabindex = 0;\n        /**\n         * Enables the [filtering]({% slug filtering_autocomplete %}) functionality.\n         * If set to `true`, the component emits the `filterChange` event.\n         */\n        this.filterable = false;\n        /**\n         * Fires each time the value is changed&mdash;\n         * when the component is blurred or the value is cleared through the **Clear** button\n         * ([see example]({% slug overview_autocomplete %}#toc-events)).\n         * When the value of the component is programmatically changed to `ngModel` or `formControl`\n         * through its API or form binding, the `valueChange` event is not triggered because it\n         * might cause a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time the user types in the input field.\n         * You can filter the source based on the passed filtration value\n         * ([see example]({% slug overview_autocomplete %}#toc-events)).\n         */\n        this.filterChange = new EventEmitter();\n        /**\n         * Fires each time the popup is about to open.\n         * This event is preventable. If you cancel it, the popup will remain closed.\n         */\n        this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close.\n         * This event is preventable. If you cancel it, the popup will remain open.\n         */\n        this.close = new EventEmitter();\n        /**\n         * Fires each time the user focuses the AutoComplete.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the AutoComplete gets blurred.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        this.widgetClasses = true;\n        this.listBoxId = guid();\n        this.optionPrefix = guid();\n        this.onChangeCallback = function (_value) { };\n        this.onTouchedCallback = function (_) { };\n        this.popupMouseDownHandler = function (event) { return event.preventDefault(); };\n        this._popupSettings = { animate: true };\n        this._open = false;\n        this._value = \"\";\n        this._previousValue = NO_VALUE;\n        this._filtering = false;\n        this.valueChangeSubject = new Subject();\n        this._isFocused = false;\n        this.direction = localization.rtl ? 'rtl' : 'ltr';\n        this.wrapper = wrapper.nativeElement;\n        this.data = [];\n        this.subscribeEvents();\n        this.selectionService.resetSelection([-1]);\n    }\n    Object.defineProperty(AutoCompleteComponent.prototype, \"width\", {\n        get: function () {\n            var wrapperOffsetWidth = 0;\n            if (isDocumentAvailable()) {\n                wrapperOffsetWidth = this.wrapper.offsetWidth;\n            }\n            var width = this.popupSettings.width || wrapperOffsetWidth;\n            var minWidth = isNaN(wrapperOffsetWidth) ? wrapperOffsetWidth : wrapperOffsetWidth + \"px\";\n            var maxWidth = isNaN(width) ? width : width + \"px\";\n            return { min: minWidth, max: maxWidth };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteComponent.prototype, \"height\", {\n        get: function () {\n            var popupHeight = this.popupSettings.height;\n            return isPresent(popupHeight) ? popupHeight + \"px\" : 'auto';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteComponent.prototype, \"listContainerClasses\", {\n        get: function () {\n            var containerClasses = ['k-list-container', 'k-reset'];\n            if (this.popupSettings.popupClass) {\n                containerClasses.push(this.popupSettings.popupClass);\n            }\n            return containerClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteComponent.prototype, \"suggestion\", {\n        get: function () {\n            if (!this.text || !this.suggestedText) {\n                this.suggestedText = undefined;\n                return;\n            }\n            var hasMatch = this.suggestedText.toLowerCase().startsWith(this.text.toLowerCase());\n            var shouldSuggest = this.suggest && !this.backspacePressed;\n            if (shouldSuggest && hasMatch) {\n                return this.suggestedText;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteComponent.prototype, \"appendTo\", {\n        get: function () {\n            var appendTo = this.popupSettings.appendTo;\n            if (!appendTo || appendTo === 'root') {\n                return undefined;\n            }\n            return appendTo === 'component' ? this.container : appendTo;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Toggles the visibility of the popup.\n     * If you use the `toggle` method to open or close the popup, the `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    AutoCompleteComponent.prototype.toggle = function (open) {\n        var _this = this;\n        Promise.resolve(null).then(function () {\n            _this._toggle(open);\n        });\n    };\n    Object.defineProperty(AutoCompleteComponent.prototype, \"isOpen\", {\n        /**\n         * Returns the current open state of the popup.\n         */\n        get: function () {\n            return this._open;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    AutoCompleteComponent.prototype.togglePopup = function (open) {\n        var isDisabled = this.disabled || this.readonly;\n        var sameState = this.isOpen === open;\n        if (isDisabled || sameState) {\n            return;\n        }\n        var isDefaultPrevented = this.triggerPopupEvents(open);\n        if (!isDefaultPrevented) {\n            this._toggle(open);\n        }\n    };\n    Object.defineProperty(AutoCompleteComponent.prototype, \"activeDescendant\", {\n        get: function () {\n            if (!this.isOpen || !isPresent(this.selectionService.focused) || this.selectionService.focused === -1) {\n                return null;\n            }\n            var dataItem = this.dataService.itemAt(this.selectionService.focused);\n            return this.optionPrefix + \"-\" + getter(dataItem, this.valueField);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteComponent.prototype, \"noDataLabel\", {\n        get: function () {\n            if (this.data.length === 0) {\n                return this.noDataText;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteComponent.prototype, \"clearTitle\", {\n        get: function () {\n            return this.localization.get('clearTitle');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteComponent.prototype, \"data\", {\n        get: function () {\n            var virtual = this.virtual;\n            if (virtual) {\n                var start = virtual.skip || 0;\n                var end = start + virtual.pageSize;\n                // Use length instead of itemsCount because of the grouping.\n                virtual.total = this.dataService.data.length;\n                return this.dataService.data.slice(start, end);\n            }\n            return this.dataService.data;\n        },\n        /**\n         * Sets the data of the AutoComplete.\n         *\n         * > The data has to be provided in an array-like list.\n         */\n        set: function (data) {\n            this.dataService.data = data || [];\n            if (this.virtual) {\n                this.virtual.skip = 0;\n            }\n            this.setState(this.value);\n            if (this.filterable) {\n                this.selectionService.focused = this.isOpen && this.data.length && this.highlightFirst ? this.firstFocusableIndex(0) : -1;\n            }\n            if (this.suggest && this.dataService.itemsCount > 0) {\n                this.suggestedText = getter(this.dataService.itemAt(0), this.valueField);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteComponent.prototype, \"value\", {\n        get: function () {\n            return this._value || NO_VALUE;\n        },\n        /**\n         * Sets the value of the AutoComplete.\n         */\n        set: function (newValue) {\n            this.verifySettings(newValue);\n            this._value = newValue || NO_VALUE;\n            this.cdr.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteComponent.prototype, \"popupSettings\", {\n        get: function () {\n            return this._popupSettings;\n        },\n        /**\n         * Configures the popup of the AutoComplete.\n         *\n         * The available options are:\n         * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n         * - `width: Number | String`&mdash;Sets the width of the popup container. By default, the width of the host element is used. If set to `auto`, the component automatically adjusts the width of the popup and no item labels are wrapped. The `auto` mode is not supported when virtual scrolling is enabled.\n         * - `height: Number`&mdash;Sets the height of the popup container.\n         * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n         * - `appendTo: \"root\" | \"component\" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.\n         */\n        set: function (settings) {\n            this._popupSettings = Object.assign({ animate: true }, settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteComponent.prototype, \"itemDisabled\", {\n        /**\n         * Defines a Boolean function that is executed for each data item in the component\n         * ([see examples]({% slug disableditems_autocomplete %})).\n         * Determines whether the item will be disabled.\n         */\n        set: function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"itemDisabled must be a function, but received \" + JSON.stringify(fn) + \".\");\n            }\n            this.disabledItemsService.itemDisabled = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteComponent.prototype, \"virtual\", {\n        get: function () {\n            return this._virtualSettings;\n        },\n        /**\n         * Enables the [virtualization]({% slug virtualization_autocomplete %}) functionality.\n         */\n        set: function (settings) {\n            this._virtualSettings = normalizeVirtualizationSettings(settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteComponent.prototype, \"isFocused\", {\n        get: function () {\n            return this._isFocused;\n        },\n        set: function (isFocused) {\n            this._isFocused = isFocused;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteComponent.prototype, \"isDisabled\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteComponent.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AutoCompleteComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.renderer.removeAttribute(this.wrapper, \"tabindex\");\n        this.localizationChangeSubscription = this.localization\n            .changes\n            .subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.direction = rtl ? 'rtl' : 'ltr';\n            _this.setMessages();\n        });\n        this.setMessages();\n    };\n    AutoCompleteComponent.prototype.ngOnDestroy = function () {\n        this.destroyPopup();\n        this.unsubscribeEvents();\n        clearTimeout(this.messagesTimeout);\n        if (this.localizationChangeSubscription) {\n            this.localizationChangeSubscription.unsubscribe();\n        }\n    };\n    AutoCompleteComponent.prototype.ngOnChanges = function (changes) {\n        var virtual = this.virtual;\n        var requestInitialData = virtual && changes.data && changes.data.isFirstChange();\n        if (requestInitialData) {\n            this.pageChange({ skip: 0, take: virtual.pageSize });\n        }\n        var STATE_PROPS = /(value|valueField)/g;\n        if (STATE_PROPS.test(Object.keys(changes).join())) {\n            this.setState(this.value);\n        }\n    };\n    /**\n     * Resets the value of the AutoComplete.\n     * If you use the `reset` method to clear the value of the component,\n     * the model will not update automatically and the `selectionChange` and `valueChange` events will not be fired.\n     */\n    AutoCompleteComponent.prototype.reset = function () {\n        this.setState(NO_VALUE);\n    };\n    /**\n     * @hidden\n     */\n    AutoCompleteComponent.prototype.clearValue = function (event) {\n        event.stopImmediatePropagation();\n        this.focus();\n        this.change(NO_VALUE);\n        if (this.filterable) {\n            this.filterChange.emit('');\n        }\n        this.selectionService.resetSelection([]);\n    };\n    /**\n     * @hidden\n     */\n    AutoCompleteComponent.prototype.writeValue = function (value) {\n        this.setState(value);\n    };\n    /**\n     * @hidden\n     */\n    AutoCompleteComponent.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    /**\n     * @hidden\n     */\n    AutoCompleteComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouchedCallback = fn;\n    };\n    /**\n     * @hidden\n     */\n    AutoCompleteComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    /**\n     * Focuses the AutoComplete.\n     */\n    AutoCompleteComponent.prototype.focus = function () {\n        if (!this.disabled) {\n            this.searchbar.focus();\n        }\n    };\n    /**\n     * Blurs the AutoComplete.\n     */\n    AutoCompleteComponent.prototype.blur = function () {\n        if (!this.disabled) {\n            this.searchbar.blur();\n        }\n    };\n    /**\n     * @hidden\n     */\n    AutoCompleteComponent.prototype.onResize = function () {\n        if (this._open) {\n            var popupWrapper = this.popupRef.popupElement;\n            var _a = this.width, min = _a.min, max = _a.max;\n            popupWrapper.style.minWidth = min;\n            popupWrapper.style.width = max;\n        }\n    };\n    AutoCompleteComponent.prototype.emitChange = function () {\n        if (this.value === this._previousValue) {\n            return;\n        }\n        this._previousValue = this.value;\n        this.onChangeCallback(this.value);\n        this.valueChange.emit(this.value);\n    };\n    AutoCompleteComponent.prototype.verifySettings = function (newValue) {\n        if (!isDevMode()) {\n            return;\n        }\n        if (isPresent(newValue) && typeof newValue !== \"string\") {\n            throw new Error(\"Expected value of type string. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/autocomplete/#toc-value\");\n        }\n    };\n    AutoCompleteComponent.prototype.search = function (text, startFrom) {\n        if (startFrom === void 0) { startFrom = 0; }\n        var index;\n        if (text.length && this.dataService.itemsCount) {\n            index = this.dataService.findIndex(this.findIndexPredicate(text), startFrom);\n        }\n        else {\n            index = -1;\n        }\n        if (this.disabledItemsService.isIndexDisabled(index)) {\n            if (index + 1 < this.dataService.itemsCount) {\n                this.search(text, index + 1);\n            }\n            else {\n                this.selectionService.focus(-1);\n            }\n        }\n        else {\n            this.selectionService.focus(index);\n            if (this.suggest) {\n                this.suggestedText = getter(this.dataService.itemAt(index), this.valueField);\n            }\n        }\n    };\n    AutoCompleteComponent.prototype.navigate = function (index) {\n        if (!this.isOpen) {\n            return;\n        }\n        this.selectionService.focus(index);\n    };\n    /**\n     * @hidden\n     */\n    AutoCompleteComponent.prototype.handleNavigate = function (event) {\n        var focused = isNaN(this.selectionService.focused) ? this.firstFocusableIndex(0) : this.selectionService.focused;\n        if (this.disabled || this.readonly || isNaN(focused)) {\n            return;\n        }\n        var action = this.navigationService.process({\n            current: focused,\n            max: this.dataService.itemsCount - 1,\n            min: 0,\n            originalEvent: event\n        });\n        if (action !== NavigationAction.Undefined &&\n            action !== NavigationAction.Backspace &&\n            action !== NavigationAction.Delete &&\n            action !== NavigationAction.Home &&\n            action !== NavigationAction.End &&\n            action !== NavigationAction.Left &&\n            action !== NavigationAction.Right &&\n            ((action === NavigationAction.Enter && this.isOpen) || action !== NavigationAction.Enter)) {\n            event.preventDefault();\n        }\n    };\n    AutoCompleteComponent.prototype.handleEnter = function (event) {\n        var focused = this.selectionService.focused;\n        var value;\n        this._filtering = false;\n        if (this.isOpen) {\n            event.originalEvent.preventDefault();\n        }\n        if (focused >= 0) {\n            value = getter(this.dataService.itemAt(focused), this.valueField);\n        }\n        else {\n            var match = this.suggest && this.suggestedText && this.data.length &&\n                getter(this.dataService.itemAt(0), this.valueField, true).toLowerCase() === this.searchbar.value.toLowerCase();\n            if (this.isOpen && match) {\n                value = this.suggestedText;\n            }\n            else {\n                value = this.searchbar.value;\n            }\n        }\n        this.change(value);\n    };\n    AutoCompleteComponent.prototype.handleEscape = function () {\n        this.togglePopup(false);\n        this.selectionService.focused = -1;\n        this.suggestedText = null;\n    };\n    /**\n     * @hidden\n     */\n    AutoCompleteComponent.prototype.searchBarChange = function (text) {\n        var currentTextLength = isPresent(this.text) ? this.text.length : 0;\n        this.backspacePressed = (text.length < currentTextLength) ? true : false;\n        this.text = text;\n        this.togglePopup(text.length > 0);\n        this._filtering = true;\n        if (!this.highlightFirst) {\n            this.selectionService.focused = -1;\n        }\n        if (this.filterable) {\n            this.filterChange.emit(text);\n        }\n        else if (this.highlightFirst) {\n            this.search(text);\n        }\n    };\n    /**\n     * @hidden\n     */\n    AutoCompleteComponent.prototype.handleFocus = function () {\n        this.isFocused = true;\n        this.onFocus.emit();\n    };\n    /**\n     * @hidden\n     */\n    AutoCompleteComponent.prototype.handleBlur = function () {\n        this._filtering = false;\n        var focused = this.filterable ? this.selectionService.focused : -1;\n        var dataItem;\n        var text;\n        if (focused !== -1) {\n            dataItem = this.dataService.itemAt(focused);\n            text = getter(dataItem, this.valueField, true) || \"\";\n        }\n        else {\n            text = this.searchbar.value;\n        }\n        var exactMatch = text === this.searchbar.value;\n        var insensitiveMatch = text.toLowerCase() === this.searchbar.value.toLowerCase();\n        if (!exactMatch && insensitiveMatch) {\n            this.selectionService.resetSelection([]);\n        }\n        this.change(this.searchbar.value);\n        this.togglePopup(false);\n        this.isFocused = false;\n        this.onBlur.emit();\n        this.onTouchedCallback();\n    };\n    /**\n     * @hidden\n     */\n    AutoCompleteComponent.prototype.pageChange = function (event) {\n        var virtual = this.virtual;\n        virtual.skip = event.skip;\n    };\n    AutoCompleteComponent.prototype.setState = function (newValue) {\n        if (this._filtering) {\n            return;\n        }\n        this.value = newValue;\n        this._previousValue = this.value;\n        this.text = this.value;\n    };\n    AutoCompleteComponent.prototype.change = function (value) {\n        this.togglePopup(false);\n        this.valueChangeSubject.next(value);\n    };\n    AutoCompleteComponent.prototype.subscribeEvents = function () {\n        var _this = this;\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.valueChangeSubscription = this.valueChangeSubject.pipe(filter(function (candidate) {\n            return !(_this.value === candidate && _this.text === candidate);\n        }))\n            .subscribe(function (value) {\n            _this.value = value;\n            _this.text = value;\n            _this.emitChange();\n        });\n        this.changeSubscription = this.selectionService.onChange.subscribe(this.handleItemChange.bind(this));\n        this.focusSubscription = this.selectionService.onFocus.subscribe(this.handleItemFocus.bind(this));\n        this.navigationSubscription = merge(this.navigationService.up, this.navigationService.down).subscribe(function (event) { return _this.navigate(event.index); });\n        this.closeSubscription = this.navigationService.close.subscribe(function () { return _this.togglePopup(false); });\n        this.enterSubscription = this.navigationService.enter.subscribe(this.handleEnter.bind(this));\n        this.escSubscription = this.navigationService.esc.subscribe(this.handleEscape.bind(this));\n    };\n    AutoCompleteComponent.prototype.unsubscribeEvents = function () {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.changeSubscription.unsubscribe();\n        this.navigationSubscription.unsubscribe();\n        this.closeSubscription.unsubscribe();\n        this.enterSubscription.unsubscribe();\n        this.escSubscription.unsubscribe();\n        this.valueChangeSubscription.unsubscribe();\n        this.focusSubscription.unsubscribe();\n    };\n    AutoCompleteComponent.prototype.handleItemChange = function (event) {\n        var index = event.indices.length ? event.indices[0] : undefined;\n        this._filtering = false;\n        this.selectionService.resetSelection([-1]);\n        if (!isPresent(index)) {\n            return;\n        }\n        var text = getter(this.dataService.itemAt(index), this.valueField);\n        this.change(text);\n    };\n    AutoCompleteComponent.prototype.handleItemFocus = function (_event) {\n        var focused = this.selectionService.focused;\n        var shouldSuggest = Boolean(this.suggest && this.data && this.data.length && focused >= 0);\n        if (shouldSuggest) {\n            this.suggestedText = getter(this.dataService.itemAt(focused), this.valueField);\n        }\n    };\n    AutoCompleteComponent.prototype.createPopup = function () {\n        var _this = this;\n        if (this.virtual) {\n            this.virtual.skip = 0;\n        }\n        var horizontalAlign = this.direction === \"rtl\" ? \"right\" : \"left\";\n        var anchorPosition = { horizontal: horizontalAlign, vertical: \"bottom\" };\n        var popupPosition = { horizontal: horizontalAlign, vertical: \"top\" };\n        this.popupRef = this.popupService.open({\n            anchor: this.wrapper,\n            animate: this.popupSettings.animate,\n            appendTo: this.appendTo,\n            content: this.popupTemplate,\n            popupClass: this.listContainerClasses,\n            positionMode: 'absolute',\n            popupAlign: popupPosition,\n            anchorAlign: anchorPosition\n        });\n        var popupWrapper = this.popupRef.popupElement;\n        var _a = this.width, min = _a.min, max = _a.max;\n        popupWrapper.addEventListener('mousedown', this.popupMouseDownHandler);\n        popupWrapper.style.minWidth = min;\n        popupWrapper.style.width = max;\n        popupWrapper.style.height = this.height;\n        popupWrapper.setAttribute(\"dir\", this.direction);\n        this.popupRef.popupOpen.subscribe(function () {\n            _this.cdr.detectChanges();\n            _this.optionsList.scrollToItem(_this.selectionService.focused);\n        });\n        this.popupRef.popupAnchorViewportLeave.subscribe(function () { return _this.togglePopup(false); });\n    };\n    AutoCompleteComponent.prototype.destroyPopup = function () {\n        if (this.popupRef) {\n            this.popupRef.popupElement\n                .removeEventListener('mousedown', this.popupMouseDownHandler);\n            this.popupRef.close();\n            this.popupRef = null;\n        }\n    };\n    AutoCompleteComponent.prototype._toggle = function (open) {\n        this._open = (open === undefined) ? !this._open : open;\n        this.destroyPopup();\n        if (this._open) {\n            this.createPopup();\n        }\n    };\n    AutoCompleteComponent.prototype.triggerPopupEvents = function (open) {\n        var eventArgs = new PreventableEvent();\n        if (open) {\n            this.open.emit(eventArgs);\n        }\n        else {\n            this.close.emit(eventArgs);\n        }\n        return eventArgs.isDefaultPrevented();\n    };\n    AutoCompleteComponent.prototype.firstFocusableIndex = function (index) {\n        var maxIndex = this.data.length - 1;\n        if (this.disabledItemsService.isIndexDisabled(index)) {\n            return (index < maxIndex) ? this.firstFocusableIndex(index + 1) : undefined;\n        }\n        else {\n            return index;\n        }\n    };\n    AutoCompleteComponent.prototype.findIndexPredicate = function (text) {\n        var _this = this;\n        if (this.dataService.grouped) {\n            return function (item) {\n                var itemText = getter(item.value, _this.valueField);\n                itemText = !isPresent(itemText) ? \"\" : itemText.toString().toLowerCase();\n                return itemText.startsWith(text.toLowerCase());\n            };\n        }\n        else {\n            return function (item) {\n                var itemText = getter(item, _this.valueField);\n                itemText = !isPresent(itemText) ? \"\" : itemText.toString().toLowerCase();\n                return itemText.startsWith(text.toLowerCase());\n            };\n        }\n    };\n    AutoCompleteComponent.prototype.setMessages = function () {\n        var _this = this;\n        this._zone.runOutsideAngular(function () {\n            clearTimeout(_this.messagesTimeout);\n            _this.messagesTimeout = setTimeout(function () {\n                _this.noDataText = _this.localization.get('noDataText');\n                _this.cdr.detectChanges();\n            });\n        });\n    };\n    AutoCompleteComponent.decorators = [\n        { type: Component, args: [{\n                    exportAs: 'kendoAutoComplete',\n                    providers: [\n                        AUTOCOMPLETE_VALUE_ACCESSOR,\n                        DataService,\n                        SelectionService,\n                        NavigationService,\n                        DisabledItemsService,\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.autocomplete'\n                        },\n                        {\n                            provide: FilterableDropDownComponentBase, useExisting: forwardRef(function () { return AutoCompleteComponent; })\n                        },\n                        {\n                            provide: KendoInput, useExisting: forwardRef(function () { return AutoCompleteComponent; })\n                        }\n                    ],\n                    selector: 'kendo-autocomplete',\n                    template: \"\\n        <ng-container kendoAutoCompleteLocalizedMessages\\n            i18n-noDataText=\\\"kendo.autocomplete.noDataText|The text displayed in the popup when there are no items\\\"\\n            noDataText=\\\"NO DATA FOUND\\\"\\n\\n            i18n-clearTitle=\\\"kendo.autocomplete.clearTitle|The title of the clear button\\\"\\n            clearTitle=\\\"clear\\\"\\n        >\\n        </ng-container>\\n        <kendo-searchbar #searchbar\\n            [role]=\\\"'combobox'\\\"\\n            [id]=\\\"focusableId\\\"\\n            [listId]=\\\"listBoxId\\\"\\n            [activeDescendant]=\\\"activeDescendant\\\"\\n            [noDataLabel]=\\\"noDataLabel\\\"\\n            [userInput]=\\\"text\\\"\\n            [suggestedText]=\\\"suggestion\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [readonly]=\\\"readonly\\\"\\n            [tabIndex]=\\\"tabIndex\\\"\\n            [popupOpen]=\\\"isOpen\\\"\\n            [placeholder]=\\\"placeholder\\\"\\n            (onNavigate)=\\\"handleNavigate($event)\\\"\\n            (valueChange)=\\\"searchBarChange($event)\\\"\\n            (onBlur)=\\\"handleBlur()\\\"\\n            (onFocus)=\\\"handleFocus()\\\"\\n        ></kendo-searchbar>\\n        <span *ngIf=\\\"!loading && !readonly && (clearButton && text?.length)\\\" class=\\\"k-icon k-clear-value k-i-close\\\" [attr.title]=\\\"clearTitle\\\" role=\\\"button\\\" tabindex=\\\"-1\\\" (click)=\\\"clearValue($event)\\\" (mousedown)=\\\"$event.preventDefault()\\\">\\n</span>\\n        <span *ngIf=\\\"loading\\\" class=\\\"k-icon k-i-loading\\\"></span>\\n        <ng-template #popupTemplate>\\n            <!--header template-->\\n            <ng-template *ngIf=\\\"headerTemplate\\\"\\n                [templateContext]=\\\"{\\n                    templateRef: headerTemplate.templateRef\\n                }\\\">\\n            </ng-template>\\n            <!--list-->\\n            <kendo-list\\n                #optionsList\\n                [id]=\\\"listBoxId\\\"\\n                [optionPrefix]=\\\"optionPrefix\\\"\\n                [data]=\\\"data\\\"\\n                [textField]=\\\"valueField\\\"\\n                [valueField]=\\\"valueField\\\"\\n                [template]=\\\"template\\\"\\n                [groupTemplate]=\\\"groupTemplate\\\"\\n                [fixedGroupTemplate]=\\\"fixedGroupTemplate\\\"\\n                [height]=\\\"listHeight\\\"\\n                [show]=\\\"isOpen\\\"\\n                [virtual]=\\\"virtual\\\"\\n                (pageChange)=\\\"pageChange($event)\\\"\\n            >\\n            </kendo-list>\\n            <!--no-data template-->\\n            <div class=\\\"k-nodata\\\" *ngIf=\\\"data.length === 0\\\">\\n                <ng-template [ngIf]=\\\"noDataTemplate\\\"\\n                    [templateContext]=\\\"{\\n                        templateRef: noDataTemplate?.templateRef\\n                    }\\\">\\n                </ng-template>\\n                <ng-template [ngIf]=\\\"!noDataTemplate\\\">\\n                    <div>{{ noDataText }}</div>\\n                </ng-template>\\n            </div>\\n            <!--footer template-->\\n            <ng-template *ngIf=\\\"footerTemplate\\\"\\n                [templateContext]=\\\"{\\n                    templateRef: footerTemplate.templateRef\\n                }\\\">\\n            </ng-template>\\n        </ng-template>\\n        <ng-template [ngIf]=\\\"isOpen\\\">\\n            <kendo-resize-sensor (resize)=\\\"onResize()\\\"></kendo-resize-sensor>\\n        </ng-template>\\n        <ng-container #container></ng-container>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    AutoCompleteComponent.ctorParameters = function () { return [\n        { type: LocalizationService },\n        { type: DataService },\n        { type: PopupService },\n        { type: SelectionService },\n        { type: NavigationService },\n        { type: DisabledItemsService },\n        { type: NgZone },\n        { type: ChangeDetectorRef },\n        { type: Renderer2 },\n        { type: ElementRef }\n    ]; };\n    AutoCompleteComponent.propDecorators = {\n        highlightFirst: [{ type: Input }],\n        focusableId: [{ type: Input }],\n        data: [{ type: Input }],\n        value: [{ type: Input }],\n        valueField: [{ type: Input }],\n        placeholder: [{ type: Input }],\n        popupSettings: [{ type: Input }],\n        listHeight: [{ type: Input }],\n        loading: [{ type: Input }],\n        clearButton: [{ type: Input }],\n        suggest: [{ type: Input }],\n        disabled: [{ type: Input }],\n        itemDisabled: [{ type: Input }],\n        readonly: [{ type: Input }],\n        tabindex: [{ type: Input }],\n        tabIndex: [{ type: Input, args: [\"tabIndex\",] }],\n        filterable: [{ type: Input }],\n        virtual: [{ type: Input }],\n        valueChange: [{ type: Output }],\n        filterChange: [{ type: Output }],\n        open: [{ type: Output }],\n        close: [{ type: Output }],\n        onFocus: [{ type: Output, args: ['focus',] }],\n        onBlur: [{ type: Output, args: ['blur',] }],\n        template: [{ type: ContentChild, args: [ItemTemplateDirective,] }],\n        headerTemplate: [{ type: ContentChild, args: [HeaderTemplateDirective,] }],\n        footerTemplate: [{ type: ContentChild, args: [FooterTemplateDirective,] }],\n        noDataTemplate: [{ type: ContentChild, args: [NoDataTemplateDirective,] }],\n        groupTemplate: [{ type: ContentChild, args: [GroupTemplateDirective,] }],\n        fixedGroupTemplate: [{ type: ContentChild, args: [FixedGroupTemplateDirective,] }],\n        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],\n        popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],\n        searchbar: [{ type: ViewChild, args: [SearchBarComponent,] }],\n        optionsList: [{ type: ViewChild, args: ['optionsList',] }],\n        widgetClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-autocomplete',] }, { type: HostBinding, args: ['class.k-header',] }],\n        isFocused: [{ type: HostBinding, args: ['class.k-state-focused',] }],\n        isDisabled: [{ type: HostBinding, args: ['class.k-state-disabled',] }],\n        dir: [{ type: HostBinding, args: ['attr.dir',] }]\n    };\n    return AutoCompleteComponent;\n}());\n\n/**\n * @hidden\n */\nvar TOUCH_ENABLED = new InjectionToken('dropdowns-touch-enabled');\n\n/**\n * @hidden\n */\n/* tslint:disable:max-line-length */\n/* tslint:disable:variable-name */\nvar MultiselectMessages = {\n    'array': 'Expected values of array type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/multiselect/#value-selection',\n    'object': 'Expected values of Object type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/multiselect/#value-selection',\n    'primitive': 'Expected values of primitive type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/multiselect/#value-selection',\n    'textAndValue': 'Expected textField and valueField options to be set. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/multiselect/#toc-bind-to-arrays-of-complex-data'\n};\n/**\n * @hidden\n */\n/* tslint:disable:max-line-length */\n/* tslint:disable:variable-name */\nvar ComboBoxMessages = {\n    'object': 'Expected value of type Object. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/combobox/#toc-value-selection',\n    'primitive': 'Expected value of primitive type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/combobox/#toc-value-selection',\n    'textAndValue': 'Expected textField and valueField options to be set. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/combobox/#toc-bind-to-arrays-of-complex-data',\n    'noItemHeight': 'Expected virtual.itemHeight of type number.'\n};\n/**\n * @hidden\n */\n/* tslint:disable:max-line-length */\n/* tslint:disable:variable-name */\nvar DropDownListMessages = {\n    'defaultItem': 'defaultItem and data items must be of same type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/api/DropDownListComponent/#toc-defaultitem',\n    'object': 'Expected value of type Object. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/dropdownlist/#toc-value-selection',\n    'primitive': 'Expected value of primitive type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/dropdownlist/#toc-value-selection',\n    'textAndValue': 'Expected textField and valueField options to be set. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/dropdownlist/#toc-bind-to-arrays-of-complex-data'\n};\n\n/* tslint:disable:no-null-keyword */\n/**\n * @hidden\n */\nvar COMBOBOX_VALUE_ACCESSOR = {\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    // tslint:disable-next-line:no-use-before-declare\n    useExisting: forwardRef(function () { return ComboBoxComponent; })\n};\n/**\n * Represents the [Kendo UI ComboBox component for Angular]({% slug overview_combobox %}).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-combobox [data]=\"listItems\">\n *  </kendo-combobox>\n * `\n * })\n * class AppComponent {\n *   public listItems: Array<string> = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"];\n * }\n * ```\n */\nvar ComboBoxComponent = /** @class */ (function () {\n    function ComboBoxComponent(localization, popupService, selectionService, navigationService, disabledItemsService, dataService, _zone, cdr, renderer, wrapper, touchEnabled) {\n        this.localization = localization;\n        this.popupService = popupService;\n        this.selectionService = selectionService;\n        this.navigationService = navigationService;\n        this.disabledItemsService = disabledItemsService;\n        this.dataService = dataService;\n        this._zone = _zone;\n        this.cdr = cdr;\n        this.renderer = renderer;\n        this.touchEnabled = touchEnabled;\n        this.selected = [];\n        /**\n         * @hidden\n         */\n        this.focusableId = \"k-\" + guid();\n        /**\n         * Specifies whether the ComboBox allows user-defined values that are not present in the dataset\n         * ([more information and examples]({% slug custom_values_combobox %})).\n         * Defaults to `false`.\n         */\n        this.allowCustom = false;\n        /**\n         * A user-defined callback which returns normalized custom values.\n         * Typically used when the data items are different from type `string`.\n         * @param { Any } value - The custom value defined by the user.\n         * @returns { Any }\n         *\n         * @example\n         * ```ts\n         * import { map } from 'rxjs/operators';\n         *\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *   <kendo-combobox\n         *       [allowCustom]=\"true\"\n         *       [data]=\"listItems\"\n         *       [textField]=\"'text'\"\n         *       [valueField]=\"'value'\"\n         *       [valueNormalizer]=\"valueNormalizer\"\n         *       (valueChange)=\"onValueChange($event)\"\n         *   >\n         *   </kendo-combobox>\n         * `\n         * })\n         *\n         * class AppComponent {\n         *   public listItems: Array<{ text: string, value: number }> = [\n         *       { text: \"Small\", value: 1 },\n         *       { text: \"Medium\", value: 2 },\n         *       { text: \"Large\", value: 3 }\n         *   ];\n         *\n         *   public onValueChange(value) {\n         *       console.log(\"valueChange : \", value);\n         *   }\n         *\n         *   public valueNormalizer = (text$: Observable<string>) => text$.pipe(map((text: string) => {\n         *      return { ProductID: null, ProductName: text };\n         *   }));\n         *\n         * }\n         * ```\n         */\n        this.valueNormalizer = function (text) {\n            return text.pipe(map(function (userInput) { return userInput; }));\n        };\n        /**\n         * The hint that is displayed when the component is empty.\n         *\n         */\n        this.placeholder = \"\";\n        /**\n         * Sets the height of the suggestions list. By default, `listHeight` is 200px.\n         *\n         * > The `listHeight` property affects only the list of suggestions and not the whole popup container.\n         * > To set the height of the popup container, use `popupSettings.height`.\n         */\n        this.listHeight = 200;\n        /**\n         * Enables the auto-completion of the text based on the first data item.\n         */\n        this.suggest = false;\n        /**\n         * If set to `true`, renders a button on hovering over the component.\n         * Clicking this button resets the value of the component to `undefined` and triggers the `change` event.\n         */\n        this.clearButton = true;\n        /**\n         * Sets the disabled state of the component.\n         */\n        this.disabled = false;\n        /**\n         * Sets the read-only state of the component.\n         */\n        this.readonly = false;\n        /**\n         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        this.tabindex = 0;\n        /**\n         * Enables the [filtering]({% slug filtering_combobox %}) functionality.\n         * If set to `true`, the component emits the `filterChange` event.\n         */\n        this.filterable = false;\n        /**\n         * Fires each time the value is changed&mdash;\n         * when the component is blurred or the value is cleared through the **Clear** button\n         * ([see example]({% slug overview_combobox %}#toc-events)).\n         * When the value of the component is programmatically changed to `ngModel` or `formControl`\n         * through its API or form binding, the `valueChange` event is not triggered because it\n         * might cause a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time an item selection is changed\n         * ([see example]({% slug overview_combobox %}#toc-events)).\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Fires each time the user types in the input field.\n         * You can filter the source based on the passed filtration value\n         * ([see example]({% slug overview_combobox %}#toc-events)).\n         */\n        this.filterChange = new EventEmitter();\n        /**\n         * Fires each time the popup is about to open.\n         * This event is preventable. If you cancel it, the popup will remain closed.\n         */\n        this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close.\n         * This event is preventable. If you cancel it, the popup will remain open.\n         */\n        this.close = new EventEmitter();\n        /**\n         * Fires each time the user focuses the ComboBox.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the ComboBox gets blurred.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        this.widgetClasses = true;\n        this.isFocused = false;\n        this.listBoxId = guid();\n        this.optionPrefix = guid();\n        this.onChangeCallback = function (_) { };\n        this.onTouchedCallback = function (_) { };\n        this._filtering = false;\n        this._text = \"\";\n        this._open = false;\n        this._popupSettings = { animate: true };\n        this.popupMouseDownHandler = function (event) { return event.preventDefault(); };\n        this.customValueSubject = new Subject();\n        this.valueSubject = new Subject();\n        this.clearValueSubject = new Subject();\n        this.selectionSubject = new Subject();\n        this.subs = new Subscription();\n        this.direction = localization.rtl ? 'rtl' : 'ltr';\n        this.wrapper = wrapper.nativeElement;\n        this.data = [];\n    }\n    Object.defineProperty(ComboBoxComponent.prototype, \"width\", {\n        get: function () {\n            var wrapperOffsetWidth = 0;\n            if (isDocumentAvailable()) {\n                wrapperOffsetWidth = this.wrapper.offsetWidth;\n            }\n            var width = this.popupSettings.width || wrapperOffsetWidth;\n            var minWidth = isNaN(wrapperOffsetWidth) ? wrapperOffsetWidth : wrapperOffsetWidth + \"px\";\n            var maxWidth = isNaN(width) ? width : width + \"px\";\n            return { min: minWidth, max: maxWidth };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"height\", {\n        get: function () {\n            var popupHeight = this.popupSettings.height;\n            return isPresent(popupHeight) ? popupHeight + \"px\" : 'auto';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"text\", {\n        get: function () {\n            return this._text;\n        },\n        set: function (text) {\n            this._text = isPresent(text) ? text.toString() : \"\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.togglePopup = function (open) {\n        var isDisabled = this.disabled || this.readonly;\n        var sameState = this.isOpen === open;\n        if (isDisabled || sameState) {\n            return;\n        }\n        var isDefaultPrevented = this.triggerPopupEvents(open);\n        if (!isDefaultPrevented) {\n            this._toggle(open);\n        }\n    };\n    Object.defineProperty(ComboBoxComponent.prototype, \"activeDescendant\", {\n        get: function () {\n            if (!this.isOpen || !isPresent(this.selectionService.focused) || this.selectionService.focused === -1) {\n                return null;\n            }\n            var dataItem = this.dataService.itemAt(this.selectionService.focused);\n            return this.optionPrefix + \"-\" + (dataItem ? getter(dataItem, this.valueField) : \"\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"noDataLabel\", {\n        get: function () {\n            if (this.data.length === 0) {\n                return this.noDataText;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"clearTitle\", {\n        get: function () {\n            return this.localization.get('clearTitle');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"appendTo\", {\n        get: function () {\n            var appendTo = this.popupSettings.appendTo;\n            if (!appendTo || appendTo === 'root') {\n                return undefined;\n            }\n            return appendTo === 'component' ? this.container : appendTo;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"data\", {\n        get: function () {\n            var virtual = this.virtual;\n            if (virtual) {\n                var start = virtual.skip || 0;\n                var end = start + virtual.pageSize;\n                // Use length instead of itemsCount because of the grouping.\n                virtual.total = this.dataService.data.length;\n                return this.dataService.data.slice(start, end);\n            }\n            return this.dataService.data;\n        },\n        /**\n         * Sets the data of the ComboBox.\n         *\n         * > The data has to be provided in an array-like list.\n         */\n        set: function (data) {\n            this.dataService.data = data || [];\n            if (this.virtual) {\n                this.virtual.skip = 0;\n            }\n            this.setState();\n            if (this._filtering) {\n                var queryAndDataPresent = this.text.length > 0 && this.dataService.itemsCount > 0;\n                var index = queryAndDataPresent ? this.firstFocusableIndex(0) : -1;\n                this.selectionService.focused = index;\n            }\n            if (this.suggest && this.dataService.itemsCount && this.text) {\n                this.suggestedText = getter(this.dataService.itemAt(0), this.textField);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        /**\n         * Sets the value of the ComboBox.\n         * It can either be of the primitive (string, numbers) or of the complex (objects) type.\n         * To define the type, use the `valuePrimitive` option.\n         *\n         * > All selected values which are not present in the dataset are considered custom values.\n         * > When the `Enter` key is pressed or the component loses focus, custom values get dismissed unless `allowCustom` is set to `true`.\n         */\n        set: function (newValue) {\n            this.verifySettings(newValue);\n            this._value = newValue;\n            this.cdr.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"popupSettings\", {\n        get: function () {\n            return this._popupSettings;\n        },\n        /**\n         * Configures the popup of the ComboBox.\n         *\n         * The available options are:\n         * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n         * - `width: Number | String`&mdash;Sets the width of the popup container. By default, the width of the host element is used. If set to `auto`, the component automatically adjusts the width of the popup and no item labels are wrapped. The `auto` mode is not supported when virtual scrolling is enabled.\n         * - `height: Number`&mdash;Sets the height of the popup container.\n         * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n         * - `appendTo: \"root\" | \"component\" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.\n         */\n        set: function (settings) {\n            this._popupSettings = Object.assign({ animate: true }, settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"itemDisabled\", {\n        /**\n         * Defines a Boolean function that is executed for each data item in the component\n         * ([see examples]({% slug disableditems_combobox %})). Determines whether the item will be disabled.\n         */\n        set: function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"itemDisabled must be a function, but received \" + JSON.stringify(fn) + \".\");\n            }\n            this.disabledItemsService.itemDisabled = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"virtual\", {\n        get: function () {\n            return this._virtualSettings;\n        },\n        /**\n         * Enables the [virtualization]({% slug virtualization_combobox %}) functionality.\n         */\n        set: function (settings) {\n            this._virtualSettings = normalizeVirtualizationSettings(settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"clearable\", {\n        get: function () {\n            return this.clearButton;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComboBoxComponent.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ComboBoxComponent.prototype.ngOnInit = function () {\n        this.renderer.removeAttribute(this.wrapper, \"tabindex\");\n        this.attachStreams();\n        this.createSelectionStream();\n        this.createValueStream();\n        this.setMessages();\n    };\n    ComboBoxComponent.prototype.createValueStream = function () {\n        var _this = this;\n        var valueStream = this.valueSubject.pipe(filter(function (candidate) {\n            var valueFrom = _this.prop(_this.valueField, _this.valuePrimitive);\n            var textFrom = _this.prop(_this.textField, _this.valuePrimitive);\n            var current = valueFrom(_this.value);\n            var newValue = valueFrom(candidate);\n            var newText = textFrom(candidate);\n            if (!isPresent(_this.value) && !isPresent(newValue)) {\n                return false;\n            }\n            if (isPresent(newText)) {\n                newText = newText.toString();\n            }\n            if (current === newValue && _this.text === newText) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }), map(function (candidate) {\n            var valueFrom = _this.prop(_this.valueField, _this.valuePrimitive);\n            var textFrom = _this.prop(_this.textField, _this.valuePrimitive);\n            var newValue = valueFrom(candidate);\n            var newText = textFrom(candidate);\n            return {\n                dataItem: candidate,\n                text: newText,\n                value: _this.valuePrimitive ? newValue : candidate\n            };\n        }));\n        var customValueStreams = partition(function () { return _this.allowCustom; })(this.customValueSubject.pipe(throttleTime(300)));\n        var allowCustomValueStream = customValueStreams[0].pipe(tap(function () {\n            _this.loading = true;\n            _this.disabled = true;\n            _this.cdr.detectChanges();\n        }), filter(function () {\n            var valueFrom = _this.prop(_this.valueField, _this.valuePrimitive);\n            var hasChange = _this.text !== valueFrom(_this.value);\n            _this.loading = hasChange;\n            _this.disabled = hasChange;\n            return hasChange;\n        }), this.valueNormalizer, map(function (normalizedValue) {\n            return {\n                custom: true,\n                dataItem: normalizedValue,\n                text: _this.text,\n                value: normalizedValue\n            };\n        }));\n        var disableCustomValueStream = customValueStreams[1].pipe(map(function () {\n            return {\n                custom: true,\n                dataItem: undefined,\n                text: undefined,\n                value: undefined\n            };\n        }));\n        var clearValueStream = this.clearValueSubject.pipe(map(function () { return ({\n            dataItem: undefined,\n            text: undefined,\n            value: undefined\n        }); }));\n        if (this.valueSubscription) {\n            this.valueSubscription.unsubscribe();\n        }\n        var merged = merge(valueStream, allowCustomValueStream, disableCustomValueStream, clearValueStream);\n        this.valueSubscription = merged.pipe(catchError(function () {\n            _this.dataItem = undefined;\n            _this.value = undefined;\n            _this.text = undefined;\n            _this.loading = false;\n            _this.disabled = false;\n            _this.emitSelectionChange(undefined);\n            _this.emitValueChange();\n            _this.createValueStream();\n            return of(null);\n        }))\n            .subscribe(function (state) {\n            _this.dataItem = state.dataItem;\n            _this.value = state.value;\n            var textCleared = (isPresent(_this.text) && _this.text.length) && !isPresent(state.text);\n            _this.text = state.text;\n            _this.loading = false;\n            _this.disabled = false;\n            if (_this.filterable && !isPresent(state.value) && textCleared) {\n                _this.filterChange.emit(\"\");\n            }\n            if (state.custom) {\n                _this.selectionService.focused = -1;\n            }\n            _this.emitSelectionChange(state.custom ? undefined : _this.dataItem);\n            _this.emitValueChange();\n        });\n    };\n    ComboBoxComponent.prototype.attachStreams = function () {\n        var _this = this;\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.subs.add(this.localization\n            .changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.direction = rtl ? 'rtl' : 'ltr';\n            _this.setMessages();\n        }));\n        this.subs.add(merge(this.navigationService.up, this.navigationService.down, this.navigationService.home, this.navigationService.end)\n            .pipe(filter(function (event) { return isPresent(event.index); }))\n            .subscribe(function (event) { return _this.navigate(event.index); }));\n        this.subs.add(this.navigationService.open.subscribe(this.handleNavigationOpen.bind(this)));\n        this.subs.add(this.navigationService.close.subscribe(function () { return _this.togglePopup(false); }));\n        this.subs.add(this.navigationService.esc.subscribe(this.handleEscape.bind(this)));\n        this.subs.add(this.navigationService.enter.pipe(tap(function (event) {\n            if (_this.isOpen) {\n                event.originalEvent.preventDefault();\n            }\n        }))\n            .subscribe(this.handleEnter.bind(this)));\n        this.subs.add(merge(this.selectionService.onChange, this.selectionService.onSelect.pipe(filter(function (_) { return !_this.isOpen; })))\n            .pipe(tap(function (_) {\n            _this._filtering = false;\n            _this.togglePopup(false);\n        }), map(function (event) { return _this.dataService.itemAt(event.indices[0]); }))\n            .subscribe(function (dataItem) {\n            _this.change(dataItem);\n        }));\n        this.subs.add(this.selectionService.onSelect.pipe(filter(function (_) { return _this.isOpen; }), tap(function (_) { return _this._filtering = false; }), map(function (event) { return _this.dataService.itemAt(event.indices[0]); }))\n            .subscribe(function (dataItem) {\n            _this.updateState({ dataItem: dataItem });\n            _this.emitSelectionChange(dataItem);\n        }));\n    };\n    ComboBoxComponent.prototype.ngOnDestroy = function () {\n        this.destroyPopup();\n        clearTimeout(this.messagesTimeout);\n        this.subs.unsubscribe();\n        [this.valueSubscription, this.selectionSubscription].forEach(function (sub) { return isPresent(sub) && sub.unsubscribe(); });\n    };\n    ComboBoxComponent.prototype.ngOnChanges = function (changes) {\n        var virtual = this.virtual;\n        var requestInitialData = virtual && changes.data && changes.data.isFirstChange();\n        if (requestInitialData) {\n            this.pageChange({ skip: 0, take: virtual.pageSize });\n        }\n        if (this.valuePrimitive === undefined) {\n            this.valuePrimitive = this.valueField ? false : true;\n        }\n        this.verifySettings(this.value);\n        if (isChanged(\"valueNormalizer\", changes)) {\n            this.createValueStream();\n        }\n        if (isChanged(\"value\", changes)) {\n            this.createSelectionStream();\n        }\n        if (this.valuePrimitive === undefined) {\n            this.valuePrimitive = this.valueField ? false : true;\n        }\n        var STATE_PROPS = /(value|textField|valueField|valuePrimitive)/g;\n        if (STATE_PROPS.test(Object.keys(changes).join())) {\n            this.setState();\n        }\n    };\n    /**\n     * Focuses the ComboBox.\n     */\n    ComboBoxComponent.prototype.focus = function () {\n        if (!this.disabled) {\n            this.searchbar.focus();\n        }\n    };\n    /**\n     * Blurs the ComboBox.\n     */\n    ComboBoxComponent.prototype.blur = function () {\n        if (!this.disabled) {\n            this.searchbar.blur();\n        }\n    };\n    /**\n     * Toggles the visibility of the popup. If you use the `toggle` method to open or close the popup,\n     * the `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    ComboBoxComponent.prototype.toggle = function (open) {\n        var _this = this;\n        Promise.resolve(null).then(function () {\n            _this._toggle(open);\n            _this.cdr.markForCheck();\n        });\n    };\n    Object.defineProperty(ComboBoxComponent.prototype, \"isOpen\", {\n        /**\n         * Returns the current open state of the popup.\n         */\n        get: function () {\n            return this._open;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Resets the value of the ComboBox.\n     * If you use the `reset` method to clear the value of the component,\n     * the model will not update automatically and the `selectionChange` and `valueChange` events will not be fired.\n     */\n    ComboBoxComponent.prototype.reset = function () {\n        this.value = undefined;\n        this.clearState();\n        this.resetSelection();\n        this.createSelectionStream();\n    };\n    /**\n     * @hidden\n     *\n     * Used by the TextBoxContainer to determine if the floating label\n     * should be rendered in the input when the component is not focused.\n     */\n    ComboBoxComponent.prototype.isEmpty = function () {\n        var textEmpty = !isPresent(this.text) || isEmptyString(this.text);\n        var valueEmpty = !isPresent(this.value) || isEmptyString(this.value);\n        return textEmpty && valueEmpty;\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.clearValue = function (event) {\n        event.stopImmediatePropagation();\n        this.focus();\n        this._filtering = true;\n        this._previousDataItem = undefined;\n        this.selectionService.resetSelection([]);\n        this.clearValueSubject.next();\n        this._filtering = false;\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.writeValue = function (value) {\n        this.text = \"\";\n        this.value = value === null ? undefined : value;\n        this.setState();\n        this.createSelectionStream();\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouchedCallback = fn;\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    Object.defineProperty(ComboBoxComponent.prototype, \"buttonClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.loading ? 'k-i-loading' : this.iconClass || 'k-i-arrow-s';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.onResize = function () {\n        if (this.isOpen) {\n            var popupWrapper = this.popupRef.popupElement;\n            var _a = this.width, min = _a.min, max = _a.max;\n            popupWrapper.style.minWidth = min;\n            popupWrapper.style.width = max;\n        }\n    };\n    ComboBoxComponent.prototype.verifySettings = function (newValue) {\n        var valueOrText = !isPresent(this.valueField) !== !isPresent(this.textField);\n        if (!isDevMode()) {\n            return;\n        }\n        if (this.valuePrimitive === true && isPresent(newValue) && typeof newValue === \"object\") {\n            throw new Error(ComboBoxMessages.primitive);\n        }\n        if (this.valuePrimitive === false && isPresent(newValue) && typeof newValue !== \"object\") {\n            throw new Error(ComboBoxMessages.object);\n        }\n        if (valueOrText) {\n            throw new Error(ComboBoxMessages.textAndValue);\n        }\n        if (this.virtual && isNaN(this.virtual.itemHeight)) {\n            throw new Error(ComboBoxMessages.noItemHeight);\n        }\n    };\n    ComboBoxComponent.prototype.setState = function () {\n        // Filtering in process, do nothing.\n        if (this._filtering) {\n            return;\n        }\n        var value = this.value;\n        var valueField = this.valueField;\n        var primitive = this.valuePrimitive;\n        var resolved = this.findDataItem({ primitive: primitive, valueField: valueField, value: value });\n        if (isPresent(resolved.dataItem)) {\n            this.updateState({ dataItem: resolved.dataItem, confirm: true });\n            this.resetSelection(resolved.index);\n        }\n        else if (isPresent(value) && this.allowCustom) {\n            this.updateState({ dataItem: value });\n            this.resetSelection(-1);\n        }\n        else if (this._previousDataItem && this.value) {\n            this.updateState({ dataItem: this._previousDataItem });\n            this.resetSelection();\n        }\n        else {\n            this.clearState();\n            this.resetSelection(-1);\n        }\n    };\n    ComboBoxComponent.prototype.updateState = function (_a) {\n        var dataItem = _a.dataItem, _b = _a.confirm, confirm = _b === void 0 ? false : _b;\n        this.dataItem = dataItem;\n        this.text = this.prop(this.textField, this.valuePrimitive)(dataItem);\n        if (confirm) {\n            this._previousDataItem = dataItem;\n        }\n    };\n    ComboBoxComponent.prototype.clearState = function () {\n        this.text = undefined;\n        this.dataItem = undefined;\n    };\n    ComboBoxComponent.prototype.resetSelection = function (index) {\n        var clear = !isPresent(index) || index < 0;\n        this.selectionService.resetSelection(clear ? [] : [index]);\n        this.selectionService.focused = index;\n    };\n    ComboBoxComponent.prototype.firstFocusableIndex = function (index) {\n        var maxIndex = this.data.length - 1;\n        if (this.disabledItemsService.isIndexDisabled(index)) {\n            return (index < maxIndex) ? this.firstFocusableIndex(index + 1) : undefined;\n        }\n        else {\n            return index;\n        }\n    };\n    ComboBoxComponent.prototype.findIndexPredicate = function (text) {\n        var _this = this;\n        if (this.dataService.grouped) {\n            return function (item) {\n                var itemText = _this.prop(_this.textField, _this.valuePrimitive)(item.value);\n                itemText = !isPresent(itemText) ? \"\" : itemText.toString().toLowerCase();\n                return itemText.startsWith(text.toLowerCase());\n            };\n        }\n        else {\n            return function (item) {\n                var itemText = _this.prop(_this.textField, _this.valuePrimitive)(item);\n                itemText = !isPresent(itemText) ? \"\" : itemText.toString().toLowerCase();\n                return itemText.startsWith(text.toLowerCase());\n            };\n        }\n    };\n    ComboBoxComponent.prototype.prop = function (field, usePrimitive) {\n        return function (dataItem) {\n            if (isPresent(dataItem)) {\n                if (usePrimitive) {\n                    return field && isObject(dataItem) ? dataItem[field] : dataItem;\n                }\n                else {\n                    return dataItem[field];\n                }\n            }\n            return null;\n        };\n    };\n    ComboBoxComponent.prototype.findDataItem = function (_a) {\n        var primitive = _a.primitive, valueField = _a.valueField, value = _a.value;\n        var result = {\n            dataItem: null,\n            index: -1\n        };\n        var prop = this.prop(valueField, primitive);\n        var comparer;\n        if (this.dataService.grouped) {\n            comparer = function (element) {\n                return prop(element.value) === prop(value);\n            };\n        }\n        else {\n            comparer = function (element) {\n                return prop(element) === prop(value);\n            };\n        }\n        var index = this.dataService.findIndex(comparer);\n        result.dataItem = this.dataService.itemAt(index);\n        result.index = index;\n        return result;\n    };\n    ComboBoxComponent.prototype.search = function (text, startFrom) {\n        if (startFrom === void 0) { startFrom = 0; }\n        var index;\n        if (text.length && this.dataService.itemsCount) {\n            index = this.dataService.findIndex(this.findIndexPredicate(text), startFrom);\n        }\n        else {\n            index = -1;\n        }\n        if (this.disabledItemsService.isIndexDisabled(index)) {\n            if (index + 1 < this.dataService.itemsCount) {\n                this.search(text, index + 1);\n            }\n            else {\n                this.selectionService.focus(-1);\n            }\n        }\n        else {\n            this.selectionService.focus(index);\n            if (this.suggest) {\n                this.suggestedText = getter(this.dataService.itemAt(index), this.textField);\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.getSuggestion = function () {\n        var hasSelected = !!this.selectionService.selected.length;\n        var shouldSuggest = this.suggest && !this.backspacePressed && this.suggestedText && this.text;\n        if (!hasSelected && shouldSuggest && this.suggestedText.toLowerCase().startsWith(this.text.toLowerCase())) {\n            return this.suggestedText;\n        }\n        else {\n            this.suggestedText = undefined;\n        }\n    };\n    ComboBoxComponent.prototype.navigate = function (index) {\n        if (this.dataService.itemsCount === 0) {\n            return;\n        }\n        this.text = this.prop(this.textField, this.valuePrimitive)(this.dataService.itemAt(index));\n        this.selectionService.select(index);\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.handleNavigate = function (event) {\n        var hasSelected = isPresent(this.selectionService.selected[0]);\n        var focused = isNaN(this.selectionService.focused) ? this.firstFocusableIndex(0) : this.selectionService.focused;\n        var offset = 0;\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        if (event.keyCode === Keys.home || event.keyCode === Keys.end) {\n            return;\n        }\n        if (!hasSelected) {\n            if (event.keyCode === Keys.down) {\n                offset = -1;\n            }\n            else if (event.keyCode === Keys.up) {\n                offset = 1;\n            }\n        }\n        var action = this.navigationService.process({\n            current: offset + focused,\n            max: this.dataService.itemsCount - 1,\n            min: 0,\n            originalEvent: event\n        });\n        if (action !== NavigationAction.Undefined &&\n            action !== NavigationAction.Left &&\n            action !== NavigationAction.Right &&\n            action !== NavigationAction.Backspace &&\n            action !== NavigationAction.Delete &&\n            ((action === NavigationAction.Enter && this.isOpen) || action !== NavigationAction.Enter)) {\n            event.preventDefault();\n        }\n    };\n    ComboBoxComponent.prototype.handleEnter = function () {\n        var text = this.text;\n        var focused = this.selectionService.focused;\n        var hasFocused = isPresent(focused) && focused !== -1;\n        var previousText = getter(this._previousDataItem, this.textField) || \"\";\n        var focusedItemText = getter(this.dataService.itemAt(focused), this.textField);\n        var textHasChanged = text !== previousText;\n        this.togglePopup(false);\n        this._filtering = false;\n        if (this.allowCustom && textHasChanged) {\n            if (text === focusedItemText || this.useSuggestion()) {\n                this.selectionService.change(focused);\n            }\n            else {\n                this.change(text, true);\n            }\n        }\n        if (!this.allowCustom) {\n            if (hasFocused) {\n                this.selectionService.change(focused);\n            }\n            else if (textHasChanged) {\n                this.change(text, true);\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.handleBlur = function () {\n        this._filtering = false;\n        var currentText = this.searchbar.value; // The value is updated, but the Angular `change` event is not emitted yet and `this.text` is not updated. Fails on suggested text.\n        if (!currentText && !isPresent(this._previousDataItem) && !isPresent(this.dataItem)) {\n            this.togglePopup(false);\n            this.isFocused = false;\n            this.onBlur.emit();\n            this.onTouchedCallback();\n            return;\n        }\n        var focused = this.selectionService.focused;\n        var itemText;\n        var isItemFocused = focused !== -1 && focused !== undefined;\n        if (isItemFocused) {\n            itemText = getter(this.dataService.itemAt(focused), this.textField);\n            itemText = !isPresent(itemText) ? \"\" : itemText.toString().toLowerCase();\n        }\n        if (itemText === currentText.toLowerCase()) {\n            this.selectionService.change(focused);\n        }\n        else {\n            this.change(currentText, true);\n        }\n        this.togglePopup(false);\n        this.isFocused = false;\n        this.onBlur.emit();\n        this.onTouchedCallback();\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.handleEscape = function () {\n        this.togglePopup(false);\n        // clear the focus only if the focused item is not selected\n        var hasSelected = this.selectionService.selected.length > 0;\n        if (!hasSelected) {\n            this.suggestedText = null;\n            this.selectionService.focused = -1;\n        }\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.handleNavigationOpen = function () {\n        this.restoreItemFocus();\n        this.togglePopup(true);\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.searchBarChange = function (text) {\n        var currentTextLength = this.text ? this.text.length : 0;\n        this.backspacePressed = (text.length < currentTextLength) ? true : false;\n        this.text = text;\n        // Reset the selection prior to filter. If a match is present, it will be resolved. If a match is not present, it is not needed.\n        this.selectionService.resetSelection([]);\n        this.togglePopup(true);\n        this._filtering = true;\n        if (this.filterable) {\n            this.filterChange.emit(text);\n        }\n        else {\n            this.search(text);\n        }\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.handleFocus = function () {\n        this.isFocused = true;\n        this.onFocus.emit();\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.pageChange = function (event) {\n        var virtual = this.virtual;\n        virtual.skip = event.skip;\n    };\n    ComboBoxComponent.prototype.change = function (candidate, isCustom) {\n        if (isCustom === void 0) { isCustom = false; }\n        if (isCustom) {\n            this.customValueSubject.next(candidate);\n        }\n        else {\n            this.valueSubject.next(candidate);\n        }\n    };\n    ComboBoxComponent.prototype.emitSelectionChange = function (dataItem) {\n        this.selectionSubject.next(dataItem);\n    };\n    ComboBoxComponent.prototype.emitValueChange = function () {\n        this.onChangeCallback(this.value);\n        this.valueChange.emit(this.value);\n        this._previousDataItem = this.dataItem;\n    };\n    /**\n     * @hidden\n     */\n    ComboBoxComponent.prototype.selectClick = function () {\n        if (!this.touchEnabled) {\n            this.searchbar.focus();\n        }\n        if (!this.isOpen) {\n            this.restoreItemFocus();\n        }\n        this.togglePopup(!this.isOpen);\n    };\n    Object.defineProperty(ComboBoxComponent.prototype, \"listContainerClasses\", {\n        get: function () {\n            var containerClasses = ['k-list-container', 'k-reset'];\n            if (this.popupSettings.popupClass) {\n                containerClasses.push(this.popupSettings.popupClass);\n            }\n            return containerClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Focuses the first match when there's text in the input field, but no focused item.\n     */\n    ComboBoxComponent.prototype.restoreItemFocus = function () {\n        var hasFocus = isPresent(this.selectionService.focused) && this.selectionService.focused > -1;\n        if (!hasFocus && this.text && this.dataService.itemsCount) {\n            if (this.filterable) {\n                this.selectionService.focused = this.firstFocusableIndex(0);\n            }\n            else {\n                this.search(this.text);\n            }\n        }\n    };\n    ComboBoxComponent.prototype.useSuggestion = function () {\n        if (!(this.suggest && isPresent(this.searchbar.value))) {\n            return false;\n        }\n        var focusedDataItem = this.dataService.itemAt(this.selectionService.focused);\n        var focusedItemText = this.prop(this.textField, this.valuePrimitive)(focusedDataItem);\n        if (!isPresent(focusedItemText)) {\n            return false;\n        }\n        return this.searchbar.value.toLowerCase() === focusedItemText.toLowerCase();\n    };\n    ComboBoxComponent.prototype.destroyPopup = function () {\n        if (this.popupRef) {\n            this.popupRef.popupElement\n                .removeEventListener('mousedown', this.popupMouseDownHandler);\n            this.popupRef.close();\n            this.popupRef = null;\n        }\n    };\n    ComboBoxComponent.prototype.createPopup = function () {\n        var _this = this;\n        if (this.virtual) {\n            this.virtual.skip = 0;\n        }\n        var horizontalAlign = this.direction === \"rtl\" ? \"right\" : \"left\";\n        var anchorPosition = { horizontal: horizontalAlign, vertical: \"bottom\" };\n        var popupPosition = { horizontal: horizontalAlign, vertical: \"top\" };\n        this.popupRef = this.popupService.open({\n            anchor: this.wrapper,\n            animate: this.popupSettings.animate,\n            appendTo: this.appendTo,\n            content: this.popupTemplate,\n            popupClass: this.listContainerClasses,\n            positionMode: 'absolute',\n            anchorAlign: anchorPosition,\n            popupAlign: popupPosition\n        });\n        var popupWrapper = this.popupRef.popupElement;\n        var _a = this.width, min = _a.min, max = _a.max;\n        popupWrapper.addEventListener('mousedown', this.popupMouseDownHandler);\n        popupWrapper.style.minWidth = min;\n        popupWrapper.style.width = max;\n        popupWrapper.style.height = this.height;\n        popupWrapper.setAttribute(\"dir\", this.direction);\n        this.popupRef.popupOpen.subscribe(function () {\n            _this.cdr.detectChanges();\n            _this.optionsList.scrollToItem(_this.selectionService.focused);\n        });\n        this.popupRef.popupAnchorViewportLeave.subscribe(function () { return _this.togglePopup(false); });\n    };\n    ComboBoxComponent.prototype._toggle = function (open) {\n        this._open = (open === undefined) ? !this._open : open;\n        this.destroyPopup();\n        if (this._open) {\n            this.createPopup();\n        }\n    };\n    ComboBoxComponent.prototype.triggerPopupEvents = function (open) {\n        var eventArgs = new PreventableEvent();\n        if (open) {\n            this.open.emit(eventArgs);\n        }\n        else {\n            this.close.emit(eventArgs);\n        }\n        return eventArgs.isDefaultPrevented();\n    };\n    ComboBoxComponent.prototype.setMessages = function () {\n        var _this = this;\n        this._zone.runOutsideAngular(function () {\n            clearTimeout(_this.messagesTimeout);\n            _this.messagesTimeout = setTimeout(function () {\n                _this.noDataText = _this.localization.get('noDataText');\n                _this.cdr.detectChanges();\n            });\n        });\n    };\n    ComboBoxComponent.prototype.createSelectionStream = function () {\n        var _this = this;\n        if (isPresent(this.selectionSubscription)) {\n            this.selectionSubscription.unsubscribe();\n        }\n        this.selectionSubscription = this.selectionSubject\n            .pipe(distinctUntilChanged())\n            .subscribe(function (dataItem) { return _this.selectionChange.emit(dataItem); });\n    };\n    ComboBoxComponent.decorators = [\n        { type: Component, args: [{\n                    exportAs: 'kendoComboBox',\n                    providers: [\n                        COMBOBOX_VALUE_ACCESSOR,\n                        DataService,\n                        SelectionService,\n                        NavigationService,\n                        DisabledItemsService,\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.combobox'\n                        },\n                        {\n                            provide: FilterableDropDownComponentBase, useExisting: forwardRef(function () { return ComboBoxComponent; })\n                        },\n                        {\n                            provide: KendoInput, useExisting: forwardRef(function () { return ComboBoxComponent; })\n                        }\n                    ],\n                    selector: 'kendo-combobox',\n                    template: \"\\n        <ng-container kendoComboBoxLocalizedMessages\\n            i18n-noDataText=\\\"kendo.combobox.noDataText|The text displayed in the popup when there are no items\\\"\\n            noDataText=\\\"NO DATA FOUND\\\"\\n\\n            i18n-clearTitle=\\\"kendo.combobox.clearTitle|The title of the clear button\\\"\\n            clearTitle=\\\"clear\\\"\\n        >\\n        </ng-container>\\n        <span #wrapper unselectable=\\\"on\\\"\\n            class=\\\"k-dropdown-wrap\\\"\\n            [ngClass]=\\\"{ 'k-state-default': !disabled, 'k-state-disabled': disabled, 'k-state-focused': isFocused }\\\"\\n        >\\n          <kendo-searchbar #searchbar\\n              [role]=\\\"'combobox'\\\"\\n              [id]=\\\"focusableId\\\"\\n              [listId]=\\\"listBoxId\\\"\\n              [activeDescendant]=\\\"activeDescendant\\\"\\n              [noDataLabel]=\\\"noDataLabel\\\"\\n              [userInput]=\\\"text\\\"\\n              [suggestedText]=\\\"getSuggestion()\\\"\\n              [disabled]=\\\"disabled\\\"\\n              [readonly]=\\\"readonly\\\"\\n              [tabIndex]=\\\"tabIndex\\\"\\n              [popupOpen]=\\\"isOpen\\\"\\n              [placeholder]=\\\"placeholder\\\"\\n              (onNavigate)=\\\"handleNavigate($event)\\\"\\n              (valueChange)=\\\"searchBarChange($event)\\\"\\n              (onBlur)=\\\"handleBlur()\\\"\\n              (onFocus)=\\\"handleFocus()\\\"\\n          ></kendo-searchbar>\\n          <span *ngIf=\\\"!loading && !readonly && (clearButton && text?.length)\\\" class=\\\"k-icon k-clear-value k-i-close\\\" [attr.title]=\\\"clearTitle\\\" role=\\\"button\\\" tabindex=\\\"-1\\\" (click)=\\\"clearValue($event)\\\" (mousedown)=\\\"$event.preventDefault()\\\"></span>\\n          <span unselectable=\\\"on\\\"\\n              class=\\\"k-select\\\"\\n              (click)=\\\"selectClick()\\\"\\n              (mousedown)=\\\"$event.preventDefault()\\\" >\\n              <span class=\\\"k-icon\\\" [ngClass]=\\\"buttonClasses\\\">\\n               </span>\\n          </span>\\n          <ng-template #popupTemplate>\\n              <!--header template-->\\n              <ng-template *ngIf=\\\"headerTemplate\\\"\\n                  [templateContext]=\\\"{\\n                      templateRef: headerTemplate.templateRef\\n                  }\\\">\\n              </ng-template>\\n              <!--list-->\\n              <kendo-list\\n                  #optionsList\\n                  [id]=\\\"listBoxId\\\"\\n                  [optionPrefix]=\\\"optionPrefix\\\"\\n                  [data]=\\\"data\\\"\\n                  [textField]=\\\"textField\\\"\\n                  [valueField]=\\\"valueField\\\"\\n                  [template]=\\\"template\\\"\\n                  [groupTemplate]=\\\"groupTemplate\\\"\\n                  [fixedGroupTemplate]=\\\"fixedGroupTemplate\\\"\\n                  [height]=\\\"listHeight\\\"\\n                  [show]=\\\"isOpen\\\"\\n                  [virtual]=\\\"virtual\\\"\\n                  (pageChange)=\\\"pageChange($event)\\\"\\n              >\\n              </kendo-list>\\n              <!--no-data template-->\\n              <div class=\\\"k-nodata\\\" *ngIf=\\\"data.length === 0\\\">\\n                  <ng-template [ngIf]=\\\"noDataTemplate\\\"\\n                      [templateContext]=\\\"{\\n                          templateRef: noDataTemplate ? noDataTemplate.templateRef : undefined\\n                      }\\\">\\n                  </ng-template>\\n                  <ng-template [ngIf]=\\\"!noDataTemplate\\\">\\n                      <div>{{ noDataText }}</div>\\n                  </ng-template>\\n              </div>\\n              <!--footer template-->\\n              <ng-template *ngIf=\\\"footerTemplate\\\"\\n                  [templateContext]=\\\"{\\n                      templateRef: footerTemplate.templateRef\\n                  }\\\">\\n              </ng-template>\\n          </ng-template>\\n        </span>\\n        <ng-template [ngIf]=\\\"isOpen\\\">\\n            <kendo-resize-sensor (resize)=\\\"onResize()\\\"></kendo-resize-sensor>\\n        </ng-template>\\n        <ng-container #container></ng-container>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    ComboBoxComponent.ctorParameters = function () { return [\n        { type: LocalizationService },\n        { type: PopupService },\n        { type: SelectionService },\n        { type: NavigationService },\n        { type: DisabledItemsService },\n        { type: DataService },\n        { type: NgZone },\n        { type: ChangeDetectorRef },\n        { type: Renderer2 },\n        { type: ElementRef },\n        { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [TOUCH_ENABLED,] }] }\n    ]; };\n    ComboBoxComponent.propDecorators = {\n        focusableId: [{ type: Input }],\n        allowCustom: [{ type: Input }],\n        data: [{ type: Input }],\n        value: [{ type: Input }],\n        textField: [{ type: Input }],\n        valueField: [{ type: Input }],\n        valuePrimitive: [{ type: Input }],\n        valueNormalizer: [{ type: Input }],\n        placeholder: [{ type: Input }],\n        popupSettings: [{ type: Input }],\n        listHeight: [{ type: Input }],\n        iconClass: [{ type: Input }],\n        loading: [{ type: Input }],\n        suggest: [{ type: Input }],\n        clearButton: [{ type: Input }],\n        disabled: [{ type: Input }],\n        itemDisabled: [{ type: Input }],\n        readonly: [{ type: Input }],\n        tabindex: [{ type: Input }],\n        tabIndex: [{ type: Input, args: [\"tabIndex\",] }],\n        filterable: [{ type: Input }],\n        virtual: [{ type: Input }],\n        valueChange: [{ type: Output }],\n        selectionChange: [{ type: Output }],\n        filterChange: [{ type: Output }],\n        open: [{ type: Output }],\n        close: [{ type: Output }],\n        onFocus: [{ type: Output, args: ['focus',] }],\n        onBlur: [{ type: Output, args: ['blur',] }],\n        template: [{ type: ContentChild, args: [ItemTemplateDirective,] }],\n        headerTemplate: [{ type: ContentChild, args: [HeaderTemplateDirective,] }],\n        footerTemplate: [{ type: ContentChild, args: [FooterTemplateDirective,] }],\n        noDataTemplate: [{ type: ContentChild, args: [NoDataTemplateDirective,] }],\n        groupTemplate: [{ type: ContentChild, args: [GroupTemplateDirective,] }],\n        fixedGroupTemplate: [{ type: ContentChild, args: [FixedGroupTemplateDirective,] }],\n        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],\n        popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],\n        searchbar: [{ type: ViewChild, args: [SearchBarComponent,] }],\n        optionsList: [{ type: ViewChild, args: ['optionsList',] }],\n        widgetClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-combobox',] }, { type: HostBinding, args: ['class.k-header',] }],\n        clearable: [{ type: HostBinding, args: ['class.k-combobox-clearable',] }],\n        dir: [{ type: HostBinding, args: ['attr.dir',] }]\n    };\n    return ComboBoxComponent;\n}());\n\n/* tslint:disable:max-line-length */\n/**\n * Renders the selected value of the DropDownList\n * ([see example]({% slug templates_ddl %}#toc-value-template)).\n * The template context is set to the current component.\n * To get a reference to the current data item, use the `let-dataItem` directive.\n *\n * > The `ValueTemplate` directive can only be used with the DropDownList component.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-dropdownlist [data]=\"listItems\">\n *    <ng-template kendoDropDownListValueTemplate let-dataItem>\n *      <span>{{dataItem}} option</span>\n *    </ng-template>\n *  </kendo-dropdownlist>\n * `\n * })\n * class AppComponent {\n *   public listItems: Array<string> = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"];\n * }\n * ```\n */\nvar ValueTemplateDirective = /** @class */ (function () {\n    function ValueTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    ValueTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDropDownListValueTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    ValueTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return ValueTemplateDirective;\n}());\n\n/* tslint:disable:max-line-length */\n/**\n * @hidden\n */\nvar DROPDOWNLIST_VALUE_ACCESSOR = {\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    // tslint:disable-next-line:no-use-before-declare\n    useExisting: forwardRef(function () { return DropDownListComponent; })\n};\n/**\n * Represents the [Kendo UI DropDownList component for Angular]({% slug overview_ddl %}).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-dropdownlist [data]=\"listItems\">\n *  </kendo-dropdownlist>\n * `\n * })\n * class AppComponent {\n *   public listItems: Array<string> = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"];\n * }\n * ```\n */\nvar DropDownListComponent = /** @class */ (function () {\n    function DropDownListComponent(localization, popupService, selectionService, navigationService, disabledItemsService, dataService, _zone, renderer, hostElement, cdr, touchEnabled) {\n        this.localization = localization;\n        this.popupService = popupService;\n        this.selectionService = selectionService;\n        this.navigationService = navigationService;\n        this.disabledItemsService = disabledItemsService;\n        this.dataService = dataService;\n        this._zone = _zone;\n        this.renderer = renderer;\n        this.hostElement = hostElement;\n        this.cdr = cdr;\n        this.touchEnabled = touchEnabled;\n        /**\n         * @hidden\n         */\n        this.focusableId = \"k-\" + guid();\n        /**\n         * Sets the height of the options list. By default, `listHeight` is 200px.\n         *\n         * > The `listHeight` property affects only the list of options and not the whole popup container.\n         * > To set the height of the popup container, use `popupSettings.height`.\n         */\n        this.listHeight = 200;\n        /**\n         * Sets the disabled state of the component.\n         */\n        this.disabled = false;\n        /**\n         * Sets the read-only state of the component.\n         */\n        this.readonly = false;\n        /**\n         * Enables the [filtering]({% slug filtering_ddl %}) functionality of the DropDownList.\n         */\n        this.filterable = false;\n        /**\n         * Enables a case-insensitive search. When filtration is disabled, use this option.\n         */\n        this.ignoreCase = true;\n        /**\n         * Sets the delay before an item search is performed. When filtration is disabled, use this option.\n         */\n        this.delay = 500;\n        /**\n         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        this.tabindex = 0;\n        /**\n         * Fires each time the value is changed ([see example]({% slug overview_ddl %}#toc-events)).\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time the user types in the input field\n         * ([see example]({% slug overview_ddl %}#toc-events)).\n         * You can filter the source based on the passed filtration value.\n         * When the value of the component is programmatically changed to `ngModel` or `formControl`\n         * through its API or form binding, the `valueChange` event is not triggered because it\n         * might cause a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.\n         */\n        this.filterChange = new EventEmitter();\n        /**\n         * Fires each time the item selection is changed\n         * ([see example]({% slug overview_ddl %}#toc-events)).\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Fires each time the popup is about to open\n         * ([see example]({% slug openstate_ddl %}#toc-preventing-opening-and-closing)).\n         * This event is preventable. If you cancel it, the popup will remain closed.\n         */\n        this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close\n         * ([see example]({% slug openstate_ddl %}#toc-preventing-opening-and-closing)).\n         * This event is preventable. If you cancel it, the popup will remain open.\n         */\n        this.close = new EventEmitter();\n        /**\n         * Fires each time the user focuses the DropDownList.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the DropDownList gets blurred.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        this.widgetClasses = true;\n        this.groupIndices = [];\n        this.listBoxId = guid();\n        this.optionPrefix = guid();\n        this.valueLabelId = guid();\n        this.filterText = \"\";\n        this.isFocused = false;\n        this.onTouchedCallback = function (_) { };\n        this.onChangeCallback = function (_) { };\n        this.word = \"\";\n        this.last = \"\";\n        this.filterFocused = new EventEmitter();\n        this.filterBlurred = new EventEmitter();\n        this.wrapperFocused = new EventEmitter();\n        this.wrapperBlurred = new EventEmitter();\n        this.selectionSubscription = new Subscription();\n        this._open = false;\n        this._popupSettings = { animate: true };\n        this.direction = localization.rtl ? 'rtl' : 'ltr';\n        this.data = [];\n        this.subscribeEvents();\n        this.hostElement = hostElement.nativeElement;\n        this.popupMouseDownHandler = this.onMouseDown.bind(this);\n    }\n    Object.defineProperty(DropDownListComponent.prototype, \"width\", {\n        get: function () {\n            var wrapperWidth = isDocumentAvailable() ? this.wrapper.nativeElement.offsetWidth : 0;\n            var width = this.popupSettings.width || wrapperWidth;\n            var minWidth = isNaN(wrapperWidth) ? wrapperWidth : wrapperWidth + \"px\";\n            var maxWidth = isNaN(width) ? width : width + \"px\";\n            return { min: minWidth, max: maxWidth };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"height\", {\n        get: function () {\n            var popupHeight = this.popupSettings.height;\n            return isPresent(popupHeight) ? popupHeight + \"px\" : 'auto';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"widgetTabIndex\", {\n        get: function () {\n            if (this.disabled) {\n                return undefined;\n            }\n            var providedTabIndex = Number(this.tabIndex);\n            var defaultTabIndex = 0;\n            return !isNaN(providedTabIndex) ? providedTabIndex : defaultTabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"ariaExpanded\", {\n        get: function () {\n            return this.isOpen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"ariaOwns\", {\n        get: function () {\n            if (!this.isOpen) {\n                return;\n            }\n            return this.listBoxId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"ariaActivedescendant\", {\n        get: function () {\n            if (!isPresent(this.dataItem)) {\n                return;\n            }\n            return this.optionPrefix + \"-\" + getter(this.dataItem, this.valueField);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"noDataLabel\", {\n        get: function () {\n            if (this.dataService.itemsCount === 0) {\n                return this.noDataText;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"appendTo\", {\n        get: function () {\n            var appendTo = this.popupSettings.appendTo;\n            if (!appendTo || appendTo === 'root') {\n                return undefined;\n            }\n            return appendTo === 'component' ? this.container : appendTo;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"data\", {\n        get: function () {\n            var virtual = this.virtual;\n            if (virtual) {\n                var start = virtual.skip || 0;\n                var end = start + virtual.pageSize;\n                // Use length instead of itemsCount because of the grouping.\n                virtual.total = this.dataService.data.length;\n                return this.dataService.data.slice(start, end);\n            }\n            return this.dataService.data;\n        },\n        /**\n         * Sets the data of the DropDownList.\n         *\n         * > The data has to be provided in an array-like list.\n         */\n        set: function (data) {\n            this.dataService.data = data || [];\n            if (this.virtual) {\n                this.virtual.skip = 0;\n            }\n            this.setState();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        /**\n         * Sets the value of the DropDownList.\n         * It can either be of the primitive (string, numbers) or of the complex (objects) type.\n         * To define the type, use the `valuePrimitive` option.\n         *\n         * > All selected values which are not present in the source are ignored.\n         */\n        set: function (newValue) {\n            this._value = newValue;\n            this.cdr.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"popupSettings\", {\n        get: function () {\n            return this._popupSettings;\n        },\n        /**\n         * Configures the popup of the DropDownList.\n         *\n         * The available options are:\n         * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n         * - `width: Number | String`&mdash;Sets the width of the popup container. By default, the width of the host element is used. If set to `auto`, the component automatically adjusts the width of the popup and no item labels are wrapped. The `auto` mode is not supported when virtual scrolling is enabled.\n         * - `height: Number`&mdash;Sets the height of the popup container.\n         * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n         * - `appendTo: \"root\" | \"component\" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.\n         */\n        set: function (settings) {\n            this._popupSettings = Object.assign({ animate: true }, settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"itemDisabled\", {\n        /**\n         * Defines a Boolean function that is executed for each data item in the component\n         * ([see examples]({% slug disableditems_ddl %})). Determines whether the item will be disabled.\n         */\n        set: function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"itemDisabled must be a function, but received \" + JSON.stringify(fn) + \".\");\n            }\n            this.disabledItemsService.itemDisabled = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"virtual\", {\n        get: function () {\n            return this._virtualSettings;\n        },\n        /**\n         * Enables the [virtualization]({% slug virtualization_ddl %}) functionality.\n         */\n        set: function (settings) {\n            this._virtualSettings = normalizeVirtualizationSettings(settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.blurComponent = function () {\n        this.wrapperBlurred.emit();\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.blurFilterInput = function () {\n        this.filterBlurred.emit();\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.focusComponent = function () {\n        this.wrapperFocused.emit();\n        if (!this.isFocused) {\n            this.isFocused = true;\n            this.onFocus.emit();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.keydown = function (event) {\n        var firstIndex = isPresent(this.defaultItem) ? -1 : 0;\n        var focused = isNaN(this.selectionService.focused) ? this.firstFocusableIndex(firstIndex) : this.selectionService.focused;\n        var offset = 0;\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        var isHomeEnd = event.keyCode === Keys.home || event.keyCode === Keys.end;\n        var isFilterFocused = this.filterable && this.isFocused && this.isOpen;\n        if (isFilterFocused && isHomeEnd) {\n            return;\n        }\n        var hasSelected = isPresent(this.selectionService.selected[0]);\n        var focusedItemNotSelected = isPresent(this.selectionService.focused) && !this.selectionService.isSelected(this.selectionService.focused);\n        if (!hasSelected || focusedItemNotSelected) {\n            if (event.keyCode === Keys.down || event.keyCode === Keys.right) {\n                offset = -1;\n            }\n            else if (event.keyCode === Keys.up || event.keyCode === Keys.left) {\n                offset = 1;\n            }\n        }\n        var eventData = event;\n        var action = this.navigationService.process({\n            current: focused + offset,\n            max: this.dataService.itemsCount - 1,\n            min: this.defaultItem ? -1 : 0,\n            originalEvent: eventData\n        });\n        var leftRightKeys = (action === NavigationAction.Left) || (action === NavigationAction.Right);\n        if (action !== NavigationAction.Undefined &&\n            action !== NavigationAction.Tab &&\n            action !== NavigationAction.Backspace &&\n            action !== NavigationAction.Delete &&\n            !(leftRightKeys && this.filterable) &&\n            action !== NavigationAction.Enter //enter when popup is opened is handled before `handleEnter`\n        ) {\n            eventData.preventDefault();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.keypress = function (event) {\n        if (this.disabled || this.readonly || this.filterable) {\n            return;\n        }\n        this.onKeyPress(event);\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.click = function () {\n        this.focus();\n        this.togglePopup(!this.isOpen);\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.onResize = function () {\n        if (this._open) {\n            var popupWrapper = this.popupRef.popupElement;\n            var _a = this.width, min = _a.min, max = _a.max;\n            popupWrapper.style.minWidth = min;\n            popupWrapper.style.width = max;\n        }\n    };\n    Object.defineProperty(DropDownListComponent.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DropDownListComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.renderer.removeAttribute(this.hostElement, \"tabindex\");\n        this.localizationChangesSubscription = this.localization\n            .changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.direction = rtl ? 'rtl' : 'ltr';\n            _this.setMessages();\n        });\n        this.setMessages();\n    };\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n    DropDownListComponent.prototype.isEmpty = function () {\n        var value = this.value;\n        return !(value === 0 || value === false || value || this.defaultItem);\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.onFilterFocus = function () {\n        this.filterFocused.emit();\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.ngOnDestroy = function () {\n        this.destroyPopup();\n        this.unsubscribeEvents();\n        clearTimeout(this.messagesTimeout);\n        if (this.localizationChangesSubscription) {\n            this.localizationChangesSubscription.unsubscribe();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.ngOnChanges = function (_changes) {\n        var virtual = this.virtual;\n        var requestInitialData = virtual && _changes.data && _changes.data.isFirstChange();\n        if (requestInitialData) {\n            this.pageChange({ skip: 0, take: virtual.pageSize });\n        }\n        if (this.valuePrimitive === undefined) {\n            this.valuePrimitive = this.valueField ? false : true;\n        }\n        if (_changes.hasOwnProperty(\"value\")) {\n            this.verifySettings(_changes.value.currentValue);\n            if (!isPresent(this.value)) {\n                this._previousDataItem = undefined;\n            }\n        }\n        if (_changes.hasOwnProperty(\"defaultItem\")) {\n            this.disabledItemsService.defaultItem = this.defaultItem;\n        }\n        var STATE_PROPS = /(value|textField|valueField|valuePrimitive|defaultItem|itemDisabled)/g;\n        if (STATE_PROPS.test(Object.keys(_changes).join())) {\n            this.setState();\n        }\n    };\n    /**\n     * Focuses the DropDownList.\n     */\n    DropDownListComponent.prototype.focus = function () {\n        if (!this.disabled) {\n            this.wrapper.nativeElement.focus();\n        }\n    };\n    /**\n     * Blurs the DropDownList.\n     */\n    DropDownListComponent.prototype.blur = function () {\n        if (!this.disabled) {\n            this.wrapper.nativeElement.blur();\n        }\n    };\n    /**\n     * Toggles the visibility of the popup\n     * ([see example]({% slug openstate_ddl %}#toc-setting-the-initially-opened-component)).\n     * If you use the `toggle` method to open or close the popup, the `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    DropDownListComponent.prototype.toggle = function (open) {\n        var _this = this;\n        // The Promise is required to open the popup on load.\n        // Otherwise, the \"Expression has changed...\" type error will be thrown.\n        Promise.resolve(null).then(function () {\n            _this._toggle(open);\n        });\n    };\n    DropDownListComponent.prototype._toggle = function (open) {\n        this._open = (open === undefined) ? !this._open : open;\n        this.destroyPopup();\n        if (this._open) {\n            this.createPopup();\n        }\n    };\n    DropDownListComponent.prototype.triggerPopupEvents = function (open) {\n        var eventArgs = new PreventableEvent();\n        if (open) {\n            this.open.emit(eventArgs);\n        }\n        else {\n            this.close.emit(eventArgs);\n        }\n        return eventArgs.isDefaultPrevented();\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.togglePopup = function (open) {\n        var isDisabled = this.disabled || this.readonly;\n        var sameState = this.isOpen === open;\n        if (isDisabled || sameState) {\n            return;\n        }\n        var isDefaultPrevented = this.triggerPopupEvents(open);\n        if (!isDefaultPrevented) {\n            if (!open && this.filterable && this.isFocused) {\n                this.focus();\n            }\n            this._toggle(open);\n        }\n    };\n    Object.defineProperty(DropDownListComponent.prototype, \"isOpen\", {\n        /**\n         * Returns the current open state of the popup.\n         */\n        get: function () {\n            return this._open;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Resets the value of the DropDownList.\n     * If you use the `reset` method to clear the value of the component,\n     * the model will not update automatically and the `selectionChange` and `valueChange` events will not be fired.\n     */\n    DropDownListComponent.prototype.reset = function () {\n        this._previousDataItem = undefined;\n        this.value = undefined;\n        this.setState();\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.writeValue = function (value) {\n        this.verifySettings(value);\n        this.value = value === null ? undefined : value;\n        if (!isPresent(value)) {\n            this._previousDataItem = undefined;\n        }\n        this.setState();\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouchedCallback = fn;\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    Object.defineProperty(DropDownListComponent.prototype, \"buttonClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.loading ? 'k-i-loading' : this.iconClass || 'k-i-arrow-s';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"listContainerClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var containerClasses = ['k-list-container', 'k-reset'];\n            if (this.popupSettings.popupClass) {\n                containerClasses.push(this.popupSettings.popupClass);\n            }\n            return containerClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"isDisabledDefaultItem\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.disabledItemsService.isItemDisabled(this.defaultItem);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.getText = function () {\n        return this.text;\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.getDefaultItemText = function () {\n        return getter(this.defaultItem, this.textField);\n    };\n    DropDownListComponent.prototype.createPopup = function () {\n        var _this = this;\n        if (this.virtual) {\n            this.virtual.skip = 0;\n        }\n        var horizontalAlign = this.direction === \"rtl\" ? \"right\" : \"left\";\n        var anchorPosition = { horizontal: horizontalAlign, vertical: \"bottom\" };\n        var popupPosition = { horizontal: horizontalAlign, vertical: \"top\" };\n        this.popupRef = this.popupService.open({\n            anchor: this.wrapper,\n            anchorAlign: anchorPosition,\n            animate: this.popupSettings.animate,\n            appendTo: this.appendTo,\n            content: this.popupTemplate,\n            popupAlign: popupPosition,\n            popupClass: this.listContainerClasses,\n            positionMode: 'absolute'\n        });\n        var popupWrapper = this.popupRef.popupElement;\n        var _a = this.width, min = _a.min, max = _a.max;\n        popupWrapper.addEventListener('mousedown', this.popupMouseDownHandler);\n        popupWrapper.style.minWidth = min;\n        popupWrapper.style.width = max;\n        popupWrapper.style.height = this.height;\n        popupWrapper.setAttribute(\"dir\", this.direction);\n        this.popupRef.popupOpen.subscribe(function () {\n            _this.cdr.detectChanges();\n            _this.optionsList.scrollToItem(_this.selectionService.focused);\n        });\n        if (!this.filterable) {\n            this.popupRef.popupAnchorViewportLeave.subscribe(function () { return _this.togglePopup(false); });\n        }\n    };\n    DropDownListComponent.prototype.destroyPopup = function () {\n        if (this.popupRef) {\n            this.popupRef.popupElement\n                .removeEventListener('mousedown', this.popupMouseDownHandler);\n            this.popupRef.close();\n            this.popupRef = null;\n        }\n    };\n    DropDownListComponent.prototype.updateState = function (_a) {\n        var dataItem = _a.dataItem, _b = _a.confirm, confirm = _b === void 0 ? false : _b;\n        this.dataItem = dataItem;\n        this.text = this.prop(this.textField, this.valuePrimitive)(dataItem);\n        if (confirm) {\n            this._previousDataItem = dataItem;\n        }\n    };\n    DropDownListComponent.prototype.clearState = function () {\n        this.text = undefined;\n        this.dataItem = undefined;\n    };\n    DropDownListComponent.prototype.resetSelection = function (index) {\n        var clear = !isPresent(index);\n        this.selectionService.resetSelection(clear ? [] : [index]);\n        this.selectionService.focused = clear ? this.firstFocusableIndex(0) : index;\n    };\n    DropDownListComponent.prototype.onSelectionChange = function (_a) {\n        var dataItem = _a.dataItem;\n        this.updateState({ dataItem: dataItem });\n        this.selectionChange.emit(dataItem);\n        /* forces firefox/nvda, forefox/jaws, ie/jaws to read the new value when\n         the popup is closed and the value is changed with the arrow keys (up/down) */\n        this.valueLabelId = guid();\n    };\n    DropDownListComponent.prototype.subscribeEvents = function () {\n        var _this = this;\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        // Item selection when the popup is open.\n        this.selectionSubscription.add(this.selectionService.onSelect.pipe(filter(function (_) { return _this.isOpen; }), map(this.itemFromEvent.bind(this)))\n            .subscribe(this.onSelectionChange.bind(this)));\n        // Item selection when the popup is closed | clicked | enter, and so on.\n        this.selectionSubscription.add(merge(this.selectionService.onSelect.pipe(filter(function (_) { return !_this.isOpen; })), this.selectionService.onChange).pipe(map(this.itemFromEvent.bind(this)), tap(function (_) { return _this.togglePopup(false); }))\n            .subscribe(function (_a) {\n            var dataItem = _a.dataItem, newValue = _a.value, newSelection = _a.newSelection;\n            if (newSelection) {\n                _this.onSelectionChange({ dataItem: dataItem });\n            }\n            var shouldUsePrevious = !isPresent(dataItem) && _this._previousDataItem;\n            var shouldUseNewValue = newValue !== _this.prop(_this.valueField, _this.valuePrimitive)(_this.value);\n            if (shouldUsePrevious) {\n                _this.updateState({ dataItem: _this._previousDataItem });\n                _this.resetSelection();\n            }\n            else if (shouldUseNewValue) {\n                _this.value = _this.valuePrimitive ? newValue : dataItem;\n                _this._previousDataItem = dataItem;\n                _this.emitChange(_this.value);\n            }\n            _this.clearFilter();\n        }));\n        this.navigationSubscription = merge(this.navigationService.up, this.navigationService.down, this.navigationService.left.pipe(skipWhile(function () { return _this.filterable; })), this.navigationService.right.pipe(skipWhile(function () { return _this.filterable; })), this.navigationService.home, this.navigationService.end)\n            .pipe(filter(function (event) { return !isNaN(event.index); }))\n            .subscribe(function (event) { return _this.selectionService.select(event.index); });\n        this.openSubscription = this.navigationService.open.subscribe(function () { return _this.togglePopup(true); });\n        this.closeSubscription = this.navigationService.close.subscribe(function () {\n            _this.togglePopup(false);\n            _this.focus();\n        });\n        this.enterSubscription = this.navigationService.enter\n            .pipe(tap(function (event) { return event.originalEvent.preventDefault(); }))\n            .subscribe(this.handleEnter.bind(this));\n        this.escSubscription = this.navigationService.esc\n            .subscribe(this.handleEscape.bind(this));\n        this.filterBlurredSubscription = this.filterBlurred.pipe(concatMap(function () { return interval(10).pipe(take(1), takeUntil(_this.wrapperFocused)); }))\n            .subscribe(function () {\n            _this.wrapperBlurred.emit();\n        });\n        this._zone.runOutsideAngular(function () {\n            _this.componentBlurredSubscription =\n                merge(_this.wrapperBlurred.pipe(concatMap(function () { return interval(10).pipe(take(1), takeUntil(_this.filterFocused)); })), _this.navigationService.tab).pipe(tap(function (event) { return event instanceof NavigationEvent && _this.focus(); }), filter(function () { return _this.isFocused; }))\n                    .subscribe(function () { return _this._zone.run(function () {\n                    _this.componentBlur();\n                }); });\n        });\n    };\n    DropDownListComponent.prototype.unsubscribeEvents = function () {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.navigationSubscription.unsubscribe();\n        this.openSubscription.unsubscribe();\n        this.closeSubscription.unsubscribe();\n        this.enterSubscription.unsubscribe();\n        this.escSubscription.unsubscribe();\n        this.componentBlurredSubscription.unsubscribe();\n        this.filterBlurredSubscription.unsubscribe();\n        if (this.selectionSubscription) {\n            this.selectionSubscription.unsubscribe();\n        }\n    };\n    DropDownListComponent.prototype.itemFromEvent = function (event) {\n        var index = event.indices[0];\n        var dataItem = this.dataService.itemAt(index);\n        dataItem = isPresent(dataItem) ? dataItem : this.currentOrDefault(index);\n        var value = this.prop(this.valueField, this.valuePrimitive)(dataItem);\n        var newSelection = event.newSelection;\n        return {\n            dataItem: dataItem,\n            index: index,\n            newSelection: newSelection,\n            value: value\n        };\n    };\n    DropDownListComponent.prototype.currentOrDefault = function (selectedIndex) {\n        var defaultItemIndex = -1;\n        if (isPresent(this.dataItem) && selectedIndex !== defaultItemIndex) {\n            return this.dataItem;\n        }\n        else {\n            return this.defaultItem;\n        }\n    };\n    DropDownListComponent.prototype.firstFocusableIndex = function (index) {\n        var maxIndex = this.dataService.itemsCount - 1;\n        if (this.disabledItemsService.isIndexDisabled(index)) {\n            return (index < maxIndex) ? this.firstFocusableIndex(index + 1) : undefined;\n        }\n        else {\n            return index;\n        }\n    };\n    DropDownListComponent.prototype.handleEnter = function () {\n        if (this.isOpen) {\n            this.selectionService.change(this.selectionService.focused);\n            this.focus();\n        }\n        else {\n            this.togglePopup(true);\n        }\n    };\n    DropDownListComponent.prototype.handleEscape = function () {\n        this.selectionService.change(this.selectionService.selected[0]);\n        this.focus();\n    };\n    DropDownListComponent.prototype.clearFilter = function () {\n        if (!(this.filterable && this.filterText)) {\n            return;\n        }\n        this.filterText = \"\";\n        this.cdr.markForCheck();\n        this.filterChange.emit(this.filterText);\n    };\n    DropDownListComponent.prototype.verifySettings = function (newValue) {\n        var valueOrText = !isPresent(this.valueField) !== !isPresent(this.textField);\n        if (!isDevMode()) {\n            return;\n        }\n        if (this.defaultItem && this.valueField && typeof this.defaultItem !== \"object\") {\n            throw new Error(DropDownListMessages.defaultItem);\n        }\n        if (this.valuePrimitive === true && isPresent(newValue) && typeof newValue === \"object\") {\n            throw new Error(DropDownListMessages.primitive);\n        }\n        if (this.valuePrimitive === false && isPresent(newValue) && typeof newValue !== \"object\") {\n            throw new Error(DropDownListMessages.object);\n        }\n        if (valueOrText) {\n            throw new Error(DropDownListMessages.textAndValue);\n        }\n    };\n    DropDownListComponent.prototype.componentBlur = function () {\n        this.isFocused = false;\n        this.selectionService.change(this.selectionService.selected[0]);\n        this.onBlur.emit();\n        this.onTouchedCallback();\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.onMouseDown = function (event) {\n        var tagName = event.target.tagName.toLowerCase();\n        if (tagName !== \"input\") {\n            event.preventDefault();\n        }\n    };\n    DropDownListComponent.prototype.onKeyPress = function (event) {\n        if (event.which === 0 || event.keyCode === Keys.enter) {\n            return;\n        }\n        var character = String.fromCharCode(event.charCode || event.keyCode);\n        if (this.ignoreCase) {\n            character = character.toLowerCase();\n        }\n        if (character === \" \") {\n            event.preventDefault();\n        }\n        this.word += character;\n        this.last = character;\n        this.search();\n    };\n    DropDownListComponent.prototype.search = function () {\n        var _this = this;\n        clearTimeout(this.typingTimeout);\n        if (!this.filterable) {\n            this.typingTimeout = setTimeout(function () { _this.word = \"\"; }, this.delay);\n            this.selectNext();\n        }\n    };\n    DropDownListComponent.prototype.selectNext = function () {\n        var _this = this;\n        var data = this.dataService\n            .filter(function (item) { return isPresent(item) && !item.header && !_this.disabledItemsService.isItemDisabled(item); })\n            .map(function (item) {\n            if (_this.dataService.grouped) {\n                return { item: item.value, itemIndex: item.offsetIndex };\n            }\n            return { item: item, itemIndex: _this.dataService.indexOf(item) };\n        });\n        var isInLoop = sameCharsOnly(this.word, this.last);\n        var dataLength = data.length;\n        var hasSelected = !isNaN(this.selectionService.selected[0]);\n        var startIndex = !hasSelected ? 0 : this.selectionService.selected[0];\n        var text, index, defaultItem;\n        if (this.defaultItem && !this.disabledItemsService.isItemDisabled(this.defaultItem)) {\n            defaultItem = { item: this.defaultItem, itemIndex: -1 };\n            dataLength += 1;\n            startIndex += 1;\n        }\n        startIndex += isInLoop && hasSelected ? 1 : 0;\n        data = shuffleData(data, startIndex, defaultItem);\n        index = 0;\n        for (; index < dataLength; index++) {\n            text = getter(data[index].item, this.textField);\n            var loopMatch = Boolean(isInLoop && matchText(text, this.last, this.ignoreCase));\n            var nextMatch = Boolean(matchText(text, this.word, this.ignoreCase));\n            if (loopMatch || nextMatch) {\n                index = data[index].itemIndex;\n                break;\n            }\n        }\n        if (index !== dataLength) {\n            this.navigate(index);\n        }\n    };\n    DropDownListComponent.prototype.emitChange = function (value) {\n        this.onChangeCallback(value);\n        this.valueChange.emit(value);\n    };\n    DropDownListComponent.prototype.navigate = function (index) {\n        this.selectionService.select(index);\n    };\n    DropDownListComponent.prototype.prop = function (field, usePrimitive) {\n        return function (dataItem) {\n            if (isPresent(dataItem)) {\n                if (usePrimitive) {\n                    return field && isObject(dataItem) ? dataItem[field] : dataItem;\n                }\n                else {\n                    return dataItem[field];\n                }\n            }\n            return null;\n        };\n    };\n    DropDownListComponent.prototype.findDataItem = function (_a) {\n        var primitive = _a.primitive, valueField = _a.valueField, value = _a.value;\n        var result = {\n            dataItem: null,\n            index: -1\n        };\n        var prop = this.prop(valueField, primitive);\n        var comparer;\n        if (this.dataService.grouped) {\n            comparer = function (element) {\n                return prop(element.value) === prop(value);\n            };\n        }\n        else {\n            comparer = function (element) {\n                return prop(element) === prop(value);\n            };\n        }\n        var index = this.dataService.findIndex(comparer);\n        result.dataItem = this.dataService.itemAt(index);\n        result.index = index;\n        return result;\n    };\n    DropDownListComponent.prototype.setState = function () {\n        var value = this.value;\n        var valueField = this.valueField;\n        var textField = this.textField;\n        var primitive = this.valuePrimitive;\n        if (this.defaultItem) {\n            var defaultValue = this.prop(valueField, primitive)(this.defaultItem);\n            var currentValue = this.prop(valueField, primitive)(value);\n            if (!isPresent(value) || (currentValue === defaultValue)) {\n                this.updateState({ dataItem: this.defaultItem, confirm: true });\n                this.resetSelection(-1);\n                if (this.filterable && this.filterText && this.dataService.itemsCount) {\n                    this.selectionService.focused = this.firstFocusableIndex(0);\n                }\n                return;\n            }\n        }\n        var resolved = this.findDataItem({ primitive: primitive, valueField: valueField, value: value });\n        // The data and value are of same shape,\n        // for example, value: 'foo', data: ['foo', 'bar']\n        // or value: { value: 1, text: 'foo' }, data: [{ value: 1, text: 'foo' }].\n        var ofSameType = !(primitive && textField);\n        if (resolved.dataItem) {\n            this.updateState({ dataItem: resolved.dataItem, confirm: true });\n            this.resetSelection(resolved.index);\n        }\n        else if (isPresent(value) && ofSameType) {\n            this.updateState({ dataItem: value });\n            this.resetSelection();\n        }\n        else if (this._previousDataItem) {\n            this.updateState({ dataItem: this._previousDataItem });\n            this.resetSelection();\n        }\n        else {\n            this.clearState();\n            this.resetSelection();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.handleFilter = function (event) {\n        this.filterChange.emit(event.target.value);\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.pageChange = function (event) {\n        var virtual = this.virtual;\n        virtual.skip = event.skip;\n    };\n    DropDownListComponent.prototype.setMessages = function () {\n        var _this = this;\n        this._zone.runOutsideAngular(function () {\n            clearTimeout(_this.messagesTimeout);\n            _this.messagesTimeout = setTimeout(function () {\n                _this.noDataText = _this.localization.get('noDataText');\n                _this.cdr.detectChanges();\n            });\n        });\n    };\n    DropDownListComponent.decorators = [\n        { type: Component, args: [{\n                    exportAs: 'kendoDropDownList',\n                    providers: [\n                        DROPDOWNLIST_VALUE_ACCESSOR,\n                        DataService,\n                        SelectionService,\n                        NavigationService,\n                        DisabledItemsService,\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.dropdownlist'\n                        },\n                        {\n                            provide: FilterableDropDownComponentBase, useExisting: forwardRef(function () { return DropDownListComponent; })\n                        },\n                        {\n                            provide: KendoInput, useExisting: forwardRef(function () { return DropDownListComponent; })\n                        }\n                    ],\n                    selector: 'kendo-dropdownlist',\n                    template: \"\\n        <ng-container kendoDropDownListLocalizedMessages\\n            i18n-noDataText=\\\"kendo.dropdownlist.noDataText|The text displayed in the popup when there are no items\\\"\\n            noDataText=\\\"NO DATA FOUND\\\"\\n        >\\n        </ng-container>\\n        <span #wrapper unselectable=\\\"on\\\"\\n          role=\\\"listbox\\\"\\n          [id]=\\\"focusableId\\\"\\n          [ngClass]=\\\"{\\n            'k-dropdown-wrap': true,\\n            'k-state-default': !this.disabled,\\n            'k-state-disabled': this.disabled,\\n            'k-state-focused': this.isFocused\\n          }\\\"\\n          [attr.dir]=\\\"direction\\\"\\n          [attr.readonly]=\\\"readonly\\\"\\n          [attr.tabindex]=\\\"widgetTabIndex\\\"\\n          [attr.aria-disabled]=\\\"disabled\\\"\\n          [attr.aria-readonly]=\\\"readonly\\\"\\n          aria-haspopup=\\\"listbox\\\"\\n          [attr.aria-expanded]=\\\"ariaExpanded\\\"\\n          [attr.aria-owns]=\\\"ariaOwns\\\"\\n          [attr.aria-activedescendant]=\\\"ariaActivedescendant\\\"\\n          [attr.aria-describedby]=\\\"valueLabelId\\\"\\n          [attr.aria-label]=\\\"noDataLabel\\\"\\n          (focus)=\\\"focusComponent()\\\"\\n          (blur)=\\\"blurComponent()\\\"\\n          (keydown)=\\\"keydown($event)\\\"\\n          (keypress)=\\\"keypress($event)\\\"\\n          (click)=\\\"click()\\\"\\n        >\\n            <span class=\\\"k-input\\\" unselectable=\\\"on\\\" [id]=\\\"valueLabelId\\\">\\n               <ng-template *ngIf=\\\"valueTemplate\\\"\\n                   [templateContext]=\\\"{\\n                       templateRef: valueTemplate.templateRef,\\n                       $implicit: dataItem\\n                   }\\\">\\n               </ng-template>\\n               <ng-template [ngIf]=\\\"!valueTemplate\\\">{{ getText() }}</ng-template>\\n           </span>\\n           <span class=\\\"k-select\\\" unselectable=\\\"on\\\">\\n               <span class=\\\"k-icon\\\"\\n                    [ngClass]=\\\"buttonClasses\\\">\\n                </span>\\n           </span>\\n           <ng-template #popupTemplate>\\n               <!--filterable-->\\n\\n               <ng-template [ngIf]=\\\"filterable\\\">\\n                   <span class=\\\"k-list-filter\\\" (click)=\\\"$event.stopImmediatePropagation()\\\">\\n                       <input\\n                           [attr.aria-owns]=\\\"ariaOwns\\\"\\n                           [attr.aria-activedescendant]=\\\"ariaActivedescendant\\\"\\n                           [attr.aria-label]=\\\"noDataLabel\\\"\\n                           tabindex=\\\"-1\\\"\\n                           [filterInput]=\\\"isFocused && !touchEnabled\\\"\\n                           [dir]=\\\"direction\\\"\\n                           [(ngModel)]=\\\"filterText\\\"\\n                           class=\\\"k-textbox\\\"\\n                           (keydown)=\\\"keydown($event)\\\"\\n                           (input)=\\\"handleFilter($event)\\\"\\n                           (focus)=\\\"onFilterFocus()\\\"\\n                           (blur)=\\\"blurFilterInput()\\\" />\\n                       <span class=\\\"k-icon k-i-search\\\" unselectable=\\\"on\\\"></span>\\n                   </span>\\n               </ng-template>\\n               <!--default item-->\\n               <ng-template [ngIf]=\\\"defaultItem && !itemTemplate\\\">\\n                   <div class=\\\"k-list-optionlabel\\\" [ngClass]=\\\"{ 'k-state-disabled': isDisabledDefaultItem }\\\" kendoDropDownsSelectable [index]=\\\"-1\\\">\\n                       {{ getDefaultItemText() }}\\n                   </div>\\n               </ng-template>\\n               <ng-template [ngIf]=\\\"defaultItem && itemTemplate\\\">\\n                   <div class=\\\"k-list-optionlabel\\\" [ngClass]=\\\"{ 'k-state-disabled': isDisabledDefaultItem }\\\" kendoDropDownsSelectable [index]=\\\"-1\\\">\\n                       <ng-template\\n                           [templateContext]=\\\"{\\n                               templateRef: itemTemplate.templateRef,\\n                               $implicit: defaultItem\\n                           }\\\">\\n                       </ng-template>\\n                   </div>\\n               </ng-template>\\n               <!--header template-->\\n               <ng-template *ngIf=\\\"headerTemplate\\\"\\n                   [templateContext]=\\\"{\\n                       templateRef: headerTemplate.templateRef\\n                   }\\\">\\n               </ng-template>\\n               <!--list-->\\n               <kendo-list\\n                   #optionsList\\n                   [id]=\\\"listBoxId\\\"\\n                   [optionPrefix]=\\\"optionPrefix\\\"\\n                   [data]=\\\"data\\\"\\n                   [textField]=\\\"textField\\\"\\n                   [valueField]=\\\"valueField\\\"\\n                   [template]=\\\"itemTemplate\\\"\\n                   [groupTemplate]=\\\"groupTemplate\\\"\\n                   [fixedGroupTemplate]=\\\"fixedGroupTemplate\\\"\\n                   [height]=\\\"listHeight\\\"\\n                   [show]=\\\"isOpen\\\"\\n                   [virtual]=\\\"virtual\\\"\\n                   (pageChange)=\\\"pageChange($event)\\\"\\n                   >\\n               </kendo-list>\\n               <!--no-data template-->\\n               <div class=\\\"k-nodata\\\" *ngIf=\\\"data.length === 0\\\">\\n                   <ng-template [ngIf]=\\\"noDataTemplate\\\"\\n                       [templateContext]=\\\"{\\n                           templateRef: noDataTemplate ? noDataTemplate.templateRef : undefined\\n                       }\\\">\\n                   </ng-template>\\n                   <ng-template [ngIf]=\\\"!noDataTemplate\\\">\\n                       <div>{{ noDataText }}</div>\\n                   </ng-template>\\n               </div>\\n               <!--footer template-->\\n               <ng-template *ngIf=\\\"footerTemplate\\\"\\n                   [templateContext]=\\\"{\\n                       templateRef: footerTemplate.templateRef\\n                   }\\\">\\n               </ng-template>\\n            </ng-template>\\n        </span>\\n        <ng-template [ngIf]=\\\"isOpen\\\">\\n            <kendo-resize-sensor (resize)=\\\"onResize()\\\"></kendo-resize-sensor>\\n        </ng-template>\\n        <ng-container #container></ng-container>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    DropDownListComponent.ctorParameters = function () { return [\n        { type: LocalizationService },\n        { type: PopupService },\n        { type: SelectionService },\n        { type: NavigationService },\n        { type: DisabledItemsService },\n        { type: DataService },\n        { type: NgZone },\n        { type: Renderer2 },\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [TOUCH_ENABLED,] }] }\n    ]; };\n    DropDownListComponent.propDecorators = {\n        focusableId: [{ type: Input }],\n        iconClass: [{ type: Input }],\n        loading: [{ type: Input }],\n        data: [{ type: Input }],\n        value: [{ type: Input }],\n        textField: [{ type: Input }],\n        valueField: [{ type: Input }],\n        popupSettings: [{ type: Input }],\n        listHeight: [{ type: Input }],\n        defaultItem: [{ type: Input }],\n        disabled: [{ type: Input }],\n        itemDisabled: [{ type: Input }],\n        readonly: [{ type: Input }],\n        filterable: [{ type: Input }],\n        virtual: [{ type: Input }],\n        ignoreCase: [{ type: Input }],\n        delay: [{ type: Input }],\n        valuePrimitive: [{ type: Input }],\n        tabindex: [{ type: Input }],\n        tabIndex: [{ type: Input, args: [\"tabIndex\",] }],\n        valueChange: [{ type: Output }],\n        filterChange: [{ type: Output }],\n        selectionChange: [{ type: Output }],\n        open: [{ type: Output }],\n        close: [{ type: Output }],\n        onFocus: [{ type: Output, args: ['focus',] }],\n        onBlur: [{ type: Output, args: ['blur',] }],\n        itemTemplate: [{ type: ContentChild, args: [ItemTemplateDirective,] }],\n        groupTemplate: [{ type: ContentChild, args: [GroupTemplateDirective,] }],\n        fixedGroupTemplate: [{ type: ContentChild, args: [FixedGroupTemplateDirective,] }],\n        valueTemplate: [{ type: ContentChild, args: [ValueTemplateDirective,] }],\n        headerTemplate: [{ type: ContentChild, args: [HeaderTemplateDirective,] }],\n        footerTemplate: [{ type: ContentChild, args: [FooterTemplateDirective,] }],\n        noDataTemplate: [{ type: ContentChild, args: [NoDataTemplateDirective,] }],\n        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],\n        popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],\n        wrapper: [{ type: ViewChild, args: ['wrapper',] }],\n        optionsList: [{ type: ViewChild, args: ['optionsList',] }],\n        widgetClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-dropdown',] }, { type: HostBinding, args: ['class.k-header',] }],\n        dir: [{ type: HostBinding, args: ['attr.dir',] }]\n    };\n    return DropDownListComponent;\n}());\n\n/* tslint:disable:max-line-length */\n/**\n * Renders the content of the custom list item in the MultiSelect\n * ([see example]({% slug templates_multiselect %}#toc-customizing-the-item-content)).\n * The template context is set to the current component.\n * To get a reference to the current text that is typed by the\n * user, use the `let-customItem` directive.\n *\n * > The `CustomItemTemplate` directive can only be used with the MultiSelect component.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-multiselect [data]=\"listItems\" [allowCustom]=\"true\">\n *    <ng-template kendoMultiSelectCustomItemTemplate let-customItem>\n *      <span>New Item: {{customItem}}</span>\n *    </ng-template>\n *  </kendo-multiselect>\n * `\n * })\n * class AppComponent {\n *   public listItems: Array<string> = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"];\n * }\n * ```\n *\n */\nvar CustomItemTemplateDirective = /** @class */ (function () {\n    function CustomItemTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    CustomItemTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoMultiSelectCustomItemTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    CustomItemTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return CustomItemTemplateDirective;\n}());\n\n/* tslint:disable:max-line-length */\n/**\n * Renders the selected tag value of the MultiSelect\n * ([see example]({% slug templates_multiselect %}#toc-tag-template)).\n * The template context is set to the current component.\n * To get a reference to the current data item, use the `let-dataItem` directive.\n *\n * > The `TagTemplate` directive can only be used with the MultiSelect component.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-multiselect [data]=\"items\">\n *    <ng-template kendoMultiSelectTagTemplate let-dataItem>\n *      <span>{{dataItem}} option</span>\n *    </ng-template>\n *  </kendo-multiselect>\n * `\n * })\n * class AppComponent {\n *   public items: Array<string> = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"];\n * }\n * ```\n */\nvar TagTemplateDirective = /** @class */ (function () {\n    function TagTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    TagTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoMultiSelectTagTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    TagTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return TagTemplateDirective;\n}());\n\n/* tslint:disable:max-line-length */\n/**\n * Renders the grouped tag values in the MultiSelect\n * ([see example]({% slug summarytagmode_multiselect %})).\n * The template context is set to the current component.\n * To get a reference to the current grouped\n * data items collection, use the `let-dataItems` directive.\n *\n * > The `GroupTagTemplate` directive can only be used with the MultiSelect component.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-multiselect kendoMultiSelectSummaryTag [data]=\"items\">\n *    <ng-template kendoMultiSelectGroupTagTemplate let-dataItems>\n *      <span>{{dataItems.length}} item(s) selected</span>\n *    </ng-template>\n *  </kendo-multiselect>\n * `\n * })\n * class AppComponent {\n *   public items: Array<string> = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"];\n * }\n * ```\n */\nvar GroupTagTemplateDirective = /** @class */ (function () {\n    function GroupTagTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    GroupTagTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoMultiSelectGroupTagTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    GroupTagTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return GroupTagTemplateDirective;\n}());\n\n/**\n * Arguments for the `removeTag` event. The `removeTag` event fires when a tag is about\n * to the removed. If you cancel the event, the removal is prevented.\n */\nvar RemoveTagEvent = /** @class */ (function (_super) {\n    __extends(RemoveTagEvent, _super);\n    /**\n     * Constructs the event arguments for the `remove` event.\n     * @param dataItem - The data item or an array of data items that will be removed.\n     */\n    function RemoveTagEvent(dataItem) {\n        var _this = _super.call(this) || this;\n        _this.dataItem = dataItem;\n        return _this;\n    }\n    return RemoveTagEvent;\n}(PreventableEvent));\n\n/* tslint:disable:max-line-length */\nvar MULTISELECT_VALUE_ACCESSOR = {\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    // tslint:disable-next-line:no-use-before-declare\n    useExisting: forwardRef(function () { return MultiSelectComponent; })\n};\n/**\n * Represents the [Kendo UI MultiSelect component for Angular]({% slug overview_multiselect %}).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-multiselect [data]=\"listItems\">\n *  </kendo-multiselect>\n * `\n * })\n * class AppComponent {\n *   public listItems: Array<string> = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"];\n * }\n * ```\n */\nvar MultiSelectComponent = /** @class */ (function () {\n    function MultiSelectComponent(localization, popupService, dataService, selectionService, navigationService, disabledItemsService, cdr, differs, renderer, hostElement, _zone, touchEnabled) {\n        var _this = this;\n        this.localization = localization;\n        this.popupService = popupService;\n        this.dataService = dataService;\n        this.selectionService = selectionService;\n        this.navigationService = navigationService;\n        this.disabledItemsService = disabledItemsService;\n        this.cdr = cdr;\n        this.differs = differs;\n        this.renderer = renderer;\n        this.hostElement = hostElement;\n        this._zone = _zone;\n        this.touchEnabled = touchEnabled;\n        this.listBoxId = guid();\n        this.tagListId = guid();\n        this.tagPrefix = \"tag-\" + guid();\n        this.optionPrefix = \"option-\" + guid();\n        this.focusedTagIndex = undefined;\n        /**\n         * @hidden\n         */\n        this.focusableId = \"k-\" + guid();\n        /**\n         * Determines whether to close the options list of the MultiSelect after the item selection is finished\n         * ([see example]({% slug openstate_multiselect %}#toc-keeping-the-options-list-open-while-on-focus)).\n         * @default true\n         */\n        this.autoClose = true;\n        /**\n         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        this.tabindex = 0;\n        /**\n         * Sets the disabled state of the component.\n         */\n        this.disabled = false;\n        /**\n         * Sets the read-only state of the component.\n         */\n        this.readonly = false;\n        /**\n         * Enables the [filtering]({% slug filtering_multiselect %}) functionality of the MultiSelect.\n         */\n        this.filterable = false;\n        /**\n         * Sets the height of the suggestions list. By default, `listHeight` is 200px.\n         *\n         * > The `listHeight` property affects only the list of suggestions and not the whole popup container.\n         * > To set the height of the popup container, use `popupSettings.height`.\n         */\n        this.listHeight = 200;\n        /**\n         * If set to `true`, renders a button on hovering over the component.\n         * Clicking this button resets the value of the component to an empty array and triggers the `change` event.\n         */\n        this.clearButton = true;\n        /**\n         * A user-defined callback function which receives an array of selected data items and maps them to an array of tags.\n         *\n         * @param { Any[] } dataItems - The selected data items from the list.\n         * @returns { Any[] } - The tags that will be rendered by the component.\n         */\n        this.tagMapper = function (tags) { return tags || []; };\n        /**\n         * Specifies whether the MultiSelect allows user-defined values that are not present in the dataset\n         * ([more information and examples]({% slug custom_values_multiselect %})).\n         * Defaults to `false`.\n         */\n        this.allowCustom = false;\n        /**\n         * A user-defined callback function which returns normalized custom values.\n         * Typically used when the data items are different from type `string`.\n         *\n         * @param { Any } value - The custom value that is defined by the user.\n         * @returns { Any }\n         *\n         * @example\n         * ```ts\n         * import { map } from 'rxjs/operators';\n         *\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *   <kendo-multiselect\n         *       [allowCustom]=\"true\"\n         *       [data]=\"listItems\"\n         *       [textField]=\"'text'\"\n         *       [valueField]=\"'value'\"\n         *       [valueNormalizer]=\"valueNormalizer\"\n         *       (valueChange)=\"onValueChange($event)\"\n         *   >\n         *   </kendo-multiselect>\n         * `\n         * })\n         *\n         * class AppComponent {\n         *   public listItems: Array<{ text: string, value: number }> = [\n         *       { text: \"Small\", value: 1 },\n         *       { text: \"Medium\", value: 2 },\n         *       { text: \"Large\", value: 3 }\n         *   ];\n         *\n         *   public onValueChange(value) {\n         *       console.log(\"valueChange : \", value);\n         *   }\n         *\n         *   public valueNormalizer = (text$: Observable<string>) => text$.pipe(map((text: string) => {\n         *      return {\n         *         value: Math.floor(Math.random() * (1000 - 100) + 1000), //generate unique valueField\n         *         text: text };\n         *   }));\n         *\n         * }\n         * ```\n         */\n        this.valueNormalizer = function (text) { return text.pipe(map(function (userInput) {\n            var comparer = function (item) { return typeof item === 'string' && userInput.toLowerCase() === item.toLowerCase(); };\n            var matchingValue = _this.value.find(comparer);\n            if (matchingValue) {\n                return matchingValue;\n            }\n            var matchingItem = _this.dataService.find(comparer);\n            return matchingItem ? matchingItem : userInput;\n        })); };\n        /**\n         * Fires each time the user types in the input field.\n         * You can filter the source based on the passed filtration value.\n         */\n        this.filterChange = new EventEmitter();\n        /**\n         * Fires each time the value is changed&mdash;\n         * when the component is blurred or the value is cleared through the **Clear** button\n         * ([see example]({% slug overview_multiselect %}#toc-events)).\n         * When the value of the component is programmatically changed to `ngModel` or `formControl`\n         * through its API or form binding, the `valueChange` event is not triggered because it\n         * might cause a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time the popup is about to open\n         * ([see example]({% slug openstate_multiselect %}#toc-preventing-opening-and-closing)).\n         * This event is preventable. If you cancel it, the popup will remain closed.\n         */\n        this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close\n         * ([see example]({% slug openstate_multiselect %}#toc-preventing-opening-and-closing)).\n         * This event is preventable. If you cancel it, the popup will remain open.\n         */\n        this.close = new EventEmitter();\n        /**\n         * Fires each time the user focuses the MultiSelect.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the MultiSelect gets blurred.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time a tag is about to be removed.\n         * This event is preventable. If you cancel it, the tag will not be removed.\n         */\n        this.removeTag = new EventEmitter();\n        this.widgetClasses = true;\n        this.onChangeCallback = function (_) { };\n        this.onTouchedCallback = function (_) { };\n        this._placeholder = '';\n        this._open = false;\n        this._value = [];\n        this._popupSettings = { animate: true };\n        this.isFocused = false;\n        this.selectedDataItems = [];\n        this.customValueSubject = new Subject();\n        this.observableSubscriptions = new Subscription();\n        this.hostElement = hostElement.nativeElement;\n        this.popupMouseDownHandler = this.onMouseDown.bind(this);\n        this.data = [];\n        this.direction = this.localization.rtl ? 'rtl' : 'ltr';\n        this.subscribeEvents();\n    }\n    /**\n     * Focuses the MultiSelect.\n     */\n    MultiSelectComponent.prototype.focus = function () {\n        if (!this.disabled) {\n            this.searchbar.focus();\n        }\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.onSearchBarFocus = function () {\n        if (!this.isFocused) {\n            this.isFocused = true;\n            this.onFocus.emit();\n        }\n    };\n    /**\n     * Blurs the MultiSelect.\n     */\n    MultiSelectComponent.prototype.blur = function () {\n        if (!this.disabled) {\n            this.searchbar.blur();\n        }\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.onSearchBarBlur = function () {\n        if (this.isFocused) {\n            this.closePopup();\n            this.isFocused = false;\n            if (!this.allowCustom) {\n                this.clearFilter();\n            }\n            this.onBlur.emit();\n            this.onTouchedCallback();\n        }\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.wrapperMousedown = function (event) {\n        var inputElement = this.searchbar.input.nativeElement;\n        if (event.button === 0) {\n            if (this.isFocused && this.isOpen && event.target === inputElement) {\n                return;\n            }\n            if (!this.touchEnabled || (this.touchEnabled && event.target.tagName !== 'SPAN')) {\n                this.searchbar.focus();\n            }\n            this.togglePopup(!this.isOpen);\n            event.preventDefault();\n        }\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.onMouseDown = function (event) {\n        event.preventDefault();\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.onResize = function () {\n        if (this._open) {\n            var popupWrapper = this.popupRef.popupElement;\n            var _a = this.width, min = _a.min, max = _a.max;\n            popupWrapper.style.minWidth = min;\n            popupWrapper.style.width = max;\n        }\n    };\n    Object.defineProperty(MultiSelectComponent.prototype, \"appendTo\", {\n        get: function () {\n            var appendTo = this.popupSettings.appendTo;\n            if (!appendTo || appendTo === 'root') {\n                return undefined;\n            }\n            return appendTo === 'component' ? this.container : appendTo;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"data\", {\n        get: function () {\n            var virtual = this.virtual;\n            if (virtual) {\n                var start = virtual.skip || 0;\n                var end = start + virtual.pageSize;\n                //Use length instead of itemsCount because of grouping\n                virtual.total = this.dataService.data.length;\n                return this.dataService.data.slice(start, end);\n            }\n            return this.dataService.data;\n        },\n        /**\n         * Sets the data of the MultiSelect.\n         *\n         * > The data has to be provided in an array-like list of items.\n         */\n        set: function (data) {\n            this.dataService.data = data || [];\n            if (this.virtual) {\n                this.virtual.skip = 0;\n            }\n            this.setState(this.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        /**\n         * Sets the value of the MultiSelect. It can be either of the primitive (string, numbers) or of the complex (objects) type.\n         * To define the type, use the `valuePrimitive` option.\n         *\n         * > All selected values which are not present in the source are ignored.\n         */\n        set: function (values) {\n            this._value = values ? values : [];\n            if (!this.differ && this.value) {\n                this.differ = this.differs.find(this.value).create();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"placeholder\", {\n        get: function () {\n            return this.selectedDataItems.length ? '' : this._placeholder;\n        },\n        /**\n         * The hint which is displayed when the component is empty.\n         * When the values are selected, it disappears.\n         */\n        set: function (text) {\n            this._placeholder = text || '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"itemDisabled\", {\n        /**\n         * Defines a Boolean function that is executed for each data item in the component\n         * ([see examples]({% slug disableditems_multiselect %})). Determines whether the item will be disabled.\n         */\n        set: function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"itemDisabled must be a function, but received \" + JSON.stringify(fn) + \".\");\n            }\n            this.disabledItemsService.itemDisabled = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"virtual\", {\n        get: function () {\n            return this._virtualSettings;\n        },\n        /**\n         * Enables the [virtualization]({% slug virtualization_multiselect %}) functionality.\n         */\n        set: function (settings) {\n            this._virtualSettings = normalizeVirtualizationSettings(settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"popupSettings\", {\n        get: function () {\n            return this._popupSettings;\n        },\n        /**\n         * Configures the popup of the MultiSelect.\n         *\n         * The available options are:\n         * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n         * - `width: Number | String`&mdash;Sets the width of the popup container. By default, the width of the host element is used. If set to `auto`, the component automatically adjusts the width of the popup and no item labels are wrapped. The `auto` mode is not supported when virtual scrolling is enabled.\n         * - `height: Number`&mdash;Sets the height of the popup container.\n         * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n         * - `appendTo: \"root\" | \"component\" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.\n         */\n        set: function (settings) {\n            this._popupSettings = Object.assign({ animate: true }, settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"focusedClass\", {\n        get: function () {\n            return this.isFocused;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"disabledClass\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"listContainerClasses\", {\n        get: function () {\n            var containerClasses = ['k-list-container', 'k-reset'];\n            if (this.popupSettings.popupClass) {\n                containerClasses.push(this.popupSettings.popupClass);\n            }\n            return containerClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"width\", {\n        get: function () {\n            var wrapperOffsetWidth = 0;\n            if (isDocumentAvailable()) {\n                wrapperOffsetWidth = this.wrapper.nativeElement.offsetWidth;\n            }\n            var width = this.popupSettings.width || wrapperOffsetWidth;\n            var minWidth = isNaN(wrapperOffsetWidth) ? wrapperOffsetWidth : wrapperOffsetWidth + \"px\";\n            var maxWidth = isNaN(width) ? width : width + \"px\";\n            return { min: minWidth, max: maxWidth };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"height\", {\n        get: function () {\n            var popupHeight = this.popupSettings.height;\n            return isPresent(popupHeight) ? popupHeight + \"px\" : 'auto';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"activeDescendant\", {\n        get: function () {\n            var focusedTagIndex = this.focusedTagIndex;\n            var focusedListIndex = this.selectionService.focused;\n            var prefix;\n            var item;\n            if (isPresent(focusedTagIndex) && !this.isOpen) {\n                item = this.tags[focusedTagIndex];\n                prefix = this.tagPrefix;\n            }\n            else if (isPresent(focusedListIndex) && focusedListIndex !== -1 && this.isOpen) {\n                item = this.dataService.itemAt(focusedListIndex);\n                prefix = this.optionPrefix;\n            }\n            else {\n                return null;\n            }\n            return prefix + \"-\" + this.prop(this.valueField, this.valuePrimitive)(item);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"noDataLabel\", {\n        get: function () {\n            if (this.dataService.itemsCount === 0) {\n                return this.noDataText;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"clearTitle\", {\n        get: function () {\n            return this.localization.get('clearTitle');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.verifySettings = function () {\n        var valueOrText = !isPresent(this.valueField) !== !isPresent(this.textField);\n        if (!isDevMode() || this.value.length === 0) {\n            return;\n        }\n        if (!isArray(this.value)) {\n            throw new Error(MultiselectMessages.array);\n        }\n        if (this.valuePrimitive === true && isObjectArray(this.value)) {\n            throw new Error(MultiselectMessages.primitive);\n        }\n        if (this.valuePrimitive === false && !isObjectArray(this.value)) {\n            throw new Error(MultiselectMessages.object);\n        }\n        if (valueOrText) {\n            throw new Error(MultiselectMessages.textAndValue);\n        }\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.change = function (event) {\n        var isCustomItem = (isPresent(event.added) || isPresent(event.removed)) && (event.added === -1 || event.removed === -1);\n        if (isCustomItem) {\n            this.addCustomValue(this.text);\n            return; // The change is emited asynchronosly.\n        }\n        // Existing items.\n        if (isPresent(event.added)) {\n            var dataItem = this.dataService.itemAt(event.added);\n            var newItem = (this.valuePrimitive && isPresent(dataItem) && isPresent(dataItem[this.valueField])) ? dataItem[this.valueField] : dataItem;\n            this.value = this.value.concat([newItem]);\n            this.cdr.markForCheck();\n        }\n        if (isPresent(event.removed)) {\n            var dataItem_1 = this.dataService.itemAt(event.removed);\n            var prop_1 = this.prop(this.valueField, this.valuePrimitive);\n            var filter_1 = function (item) { return prop_1(item) !== prop_1(dataItem_1); };\n            this.value = this.value.filter(filter_1);\n            this.selectedDataItems = this.selectedDataItems.filter(filter_1);\n            this.tags = this.tagMapper(this.selectedDataItems.slice());\n            this.cdr.detectChanges();\n        }\n        this.emitValueChange();\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.setState = function (value) {\n        var _this = this;\n        var objectArray = isObjectArray(value);\n        var data = this.dataService.data;\n        if (this.dataService.grouped) {\n            data = data.filter(function (item) { return !item.header; }).map(function (item) { return item.value; });\n        }\n        var selection = selectedIndices(this.value, data, this.valueField);\n        this.selectionService.resetSelection(selection);\n        if (this.isOpen && this.selectionService.focused === undefined) {\n            this.selectionService.focused = this.dataService.itemsCount ? this.firstFocusableIndex(0) : this.allowCustom ? -1 : undefined;\n        }\n        if (!this.text) {\n            if (!(isPresent(value) && value.length)) {\n                this.selectedDataItems = [];\n            }\n            if (this.valuePrimitive && !this.valueField) {\n                this.selectedDataItems = value.slice();\n            }\n            if (objectArray || this.valuePrimitive && this.valueField) {\n                this.selectedDataItems = resolveAllValues(value, data, this.valueField);\n            }\n            if (this.selectedDataItems.length < value.length) {\n                var prop_2 = this.prop(this.valueField, this.valuePrimitive);\n                var dataItems = value\n                    .map(function (current) {\n                    var dataItem = _this.selectedDataItems.find(function (item) { return prop_2(item) === prop_2(current); });\n                    return isPresent(dataItem) ? dataItem : _this.resolveDataItemFromTags(current);\n                })\n                    .filter(function (dataItem) { return isPresent(dataItem); });\n                this.selectedDataItems = dataItems;\n            }\n        }\n        this.tags = this.tagMapper(this.selectedDataItems.slice(0));\n        this.cdr.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.handleFilter = function (text) {\n        this.text = text;\n        if (text && !this.isOpen) {\n            this.openPopup();\n        }\n        if (this.filterable) {\n            this.filterChange.emit(text);\n        }\n        else {\n            this.searchTextAndFocus(text);\n        }\n        this.searchbar.setInputSize();\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.pageChange = function (event) {\n        var virtual = this.virtual;\n        virtual.skip = event.skip;\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.clearFilter = function () {\n        if (this.filterable && this.text) {\n            this.filterChange.emit(\"\");\n        }\n        this.text = \"\";\n        /* Clearing the value from the input as the setInputSize calculation will be incorrect otherwise.\n         Calling cdr.detectChanges to clear the input value as a result of property binding\n         causes JAWS to read outdated tag values in IE upon tag selection for some reason. */\n        this.searchbar.input.nativeElement.value = \"\";\n        this.searchbar.setInputSize();\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.handleNavigate = function (event) {\n        var navigateInput = this.text && event.keyCode !== Keys.down && event.keyCode !== Keys.up;\n        var selectValue = this.text && event.keyCode === Keys.enter || event.keyCode === Keys.esc;\n        var deleteTag = !this.text && event.keyCode === Keys.backspace && this.tags.length > 0;\n        if (deleteTag) {\n            this.handleBackspace();\n            return;\n        }\n        if (this.disabled || navigateInput && !selectValue) {\n            return;\n        }\n        var eventData = event;\n        var focused = isNaN(this.selectionService.focused) ? -1 : this.selectionService.focused;\n        var action = this.navigationService.process({\n            current: focused,\n            max: this.dataService.itemsCount - 1,\n            min: this.allowCustom && this.text ? -1 : 0,\n            open: this.isOpen,\n            originalEvent: eventData\n        });\n        if (action !== NavigationAction.Undefined &&\n            ((action === NavigationAction.Enter && this.isOpen) || action !== NavigationAction.Enter)) {\n            event.preventDefault();\n        }\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.handleRemoveTag = function (tagData) {\n        var eventArgs = new RemoveTagEvent(tagData);\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        this.focus();\n        this.removeTag.emit(eventArgs);\n        if (eventArgs.isDefaultPrevented()) {\n            return;\n        }\n        if (tagData instanceof Array) {\n            this.removeGroupTag(tagData);\n        }\n        else {\n            this.removeSingleTag(tagData);\n        }\n        this.cdr.detectChanges();\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.clearAll = function (event) {\n        event.stopImmediatePropagation();\n        this.clearFilter();\n        this.reset();\n        this.emitValueChange();\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.addCustomValue = function (text) {\n        this.customValueSubject.next(text);\n    };\n    MultiSelectComponent.prototype.ngAfterContentChecked = function () {\n        this.verifySettings();\n    };\n    MultiSelectComponent.prototype.ngDoCheck = function () {\n        var _this = this;\n        if (this.differ) {\n            var valueChanges = this.differ.diff(this.value);\n            if (valueChanges && !this.valueChangeDetected) {\n                this.selectedDataItems = this.getSelectedDataItems(valueChanges);\n                this.tags = this.tagMapper(this.selectedDataItems.slice(0));\n                if (!(this.tags && this.dataService.data)) {\n                    return;\n                }\n                var isValueCustom_1 = function (value) { return _this.dataService.indexOf(value) === -1; };\n                var isValueSelected_1 = function (value) { return _this.selectionService.isSelected(_this.dataService.indexOf(value)); };\n                var reselectionRequired = this.selectedDataItems.some(function (value) { return !(isValueCustom_1(value) || isValueSelected_1(value)); });\n                if (reselectionRequired) {\n                    this.setState(this.value);\n                }\n            }\n        }\n        this.valueChangeDetected = false;\n    };\n    MultiSelectComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.renderer.removeAttribute(this.hostElement, \"tabindex\");\n        this.createCustomValueStream();\n        this.localizationChangeSubscription = this.localization\n            .changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.direction = rtl ? 'rtl' : 'ltr';\n            _this.setMessages();\n        });\n        this.setMessages();\n    };\n    MultiSelectComponent.prototype.ngOnChanges = function (changes) {\n        var virtual = this.virtual;\n        var requestInitialData = virtual && changes.data && changes.data.isFirstChange();\n        if (requestInitialData) {\n            this.pageChange({ skip: 0, take: virtual.pageSize });\n        }\n        if (this.valuePrimitive === undefined) {\n            this.valuePrimitive = !this.valueField;\n        }\n        if (isChanged(\"valueNormalizer\", changes)) {\n            this.createCustomValueStream();\n        }\n        var STATE_PROPS = /(data|textField|valueField|valuePrimitive|value)/g;\n        if (changes.hasOwnProperty(\"value\")) {\n            this.valueChangeDetected = true;\n        }\n        if (STATE_PROPS.test(Object.keys(changes).join())) {\n            this.setState(this.value);\n        }\n    };\n    MultiSelectComponent.prototype.ngAfterViewInit = function () {\n        this.searchbar.setInputSize();\n    };\n    MultiSelectComponent.prototype.ngOnDestroy = function () {\n        this._toggle(false);\n        this.unsubscribeEvents();\n        clearTimeout(this.messagesTimeout);\n        if (this.localizationChangeSubscription) {\n            this.localizationChangeSubscription.unsubscribe();\n        }\n    };\n    /**\n     * Toggles the visibility of the popup\n     * ([see example]({% slug openstate_multiselect %}#toc-setting-the-initially-opened-component)).\n     * If you use the `toggle` method to open or close the popup, the respective `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    MultiSelectComponent.prototype.toggle = function (open) {\n        var _this = this;\n        // The Promise is required for opening the popup on load.\n        // Otherwise, the \"Expression has changed...\" type error will be thrown.\n        Promise.resolve(null).then(function () {\n            _this._toggle((open === undefined) ? !_this._open : open);\n            _this.cdr.markForCheck();\n        });\n    };\n    Object.defineProperty(MultiSelectComponent.prototype, \"isOpen\", {\n        /**\n         * Returns the current open state of the popup.\n         */\n        get: function () {\n            return this._open;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Resets the value of the MultiSelect.\n     * If you use the `reset` method to clear the value of the component,\n     * the model will not update automatically and the `selectionChange` and `valueChange` events will not be fired.\n     */\n    MultiSelectComponent.prototype.reset = function () {\n        this.text = \"\";\n        this.value = [];\n        this.selectedDataItems = [];\n        this.setState([]);\n        this.cdr.markForCheck();\n    };\n    // NG MODEL BINDINGS\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.writeValue = function (value) {\n        this.value = value || [];\n        this.setState(this.value);\n        this.verifySettings();\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouchedCallback = fn;\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    /**\n     * @hidden\n     */\n    MultiSelectComponent.prototype.onTagMapperChange = function () {\n        this.tags = this.tagMapper(this.selectedDataItems.slice(0));\n        this.cdr.markForCheck();\n    };\n    MultiSelectComponent.prototype.prop = function (field, usePrimitive) {\n        return function (dataItem) {\n            if (isPresent(dataItem)) {\n                if (usePrimitive) {\n                    return field && isObject(dataItem) ? dataItem[field] : dataItem;\n                }\n                else {\n                    return dataItem[field];\n                }\n            }\n            return null;\n        };\n    };\n    MultiSelectComponent.prototype.subscribeEvents = function () {\n        var _this = this;\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        var isOpen = function () { return _this.isOpen; };\n        var isClosed = function () { return !_this.isOpen; };\n        var isTagFocused = function () { return !_this.isOpen && _this.focusedTagIndex !== undefined; };\n        [\n            this.selectionService.onChange.subscribe(this.handleItemChange.bind(this)),\n            this.navigationService.esc.subscribe(this.closePopup.bind(this)),\n            this.navigationService.enter.pipe(filter(isOpen)).subscribe(this.handleEnter.bind(this)),\n            this.navigationService.open.subscribe(this.openPopup.bind(this)),\n            this.navigationService.close.subscribe(this.handleClose.bind(this)),\n            this.navigationService.up.pipe(filter(isOpen)).subscribe(function (event) { return _this.handleUp(event.index); }),\n            this.navigationService.home.pipe(filter(function () { return isClosed; })).subscribe(this.handleHome.bind(this)),\n            this.navigationService.end.pipe(filter(function () { return isClosed; })).subscribe(this.handleEnd.bind(this)),\n            this.navigationService.backspace.pipe(filter(isTagFocused)).subscribe(this.handleBackspace.bind(this)),\n            this.navigationService.delete.pipe(filter(isTagFocused)).subscribe(this.handleDelete.bind(this)),\n            this.navigationService.left.subscribe(this.handleLeftKey.bind(this)),\n            this.navigationService.right.subscribe(this.handleRightKey.bind(this)),\n            this.navigationService.down.subscribe(function (event) { return _this.handleDownKey(event.index); })\n        ].forEach(function (s) { return _this.observableSubscriptions.add(s); });\n    };\n    MultiSelectComponent.prototype.unsubscribeEvents = function () {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.observableSubscriptions.unsubscribe();\n        if (this.customValueSubscription) {\n            this.customValueSubscription.unsubscribe();\n        }\n    };\n    MultiSelectComponent.prototype.removeGroupTag = function (dataItems) {\n        var prop = this.prop(this.valueField, this.valuePrimitive);\n        var data = this.dataService.data;\n        if (this.dataService.grouped) {\n            data = data.filter(function (item) { return !item.header; }).map(function (item) { return item.value; });\n        }\n        var dataItemValues = new Set(dataItems.map(function (item) { return prop(item); }));\n        this.value = this.value.filter(function (value) { return !dataItemValues.has(prop(value)); });\n        this.selectedDataItems = this.selectedDataItems.filter(function (value) { return !dataItemValues.has(prop(value)); });\n        var selection = selectedIndices(this.value, data, this.valueField);\n        this.selectionService.resetSelection(selection);\n        this.tags = this.tagMapper(this.selectedDataItems.slice(0));\n        this.cdr.markForCheck();\n        this.emitValueChange();\n    };\n    MultiSelectComponent.prototype.removeSingleTag = function (dataItem) {\n        var prop = this.prop(this.valueField, this.valuePrimitive);\n        var data = this.dataService.data;\n        if (this.dataService.grouped) {\n            data = data.filter(function (item) { return !item.header; }).map(function (item) { return item.value; });\n        }\n        var index = selectedIndices([dataItem], data, this.valueField)[0];\n        if (isNumber(index)) {\n            this.selectionService.unselect(index);\n            this.togglePopup(false);\n        }\n        else { // the deleted item is not present in the source\n            var filter_2 = function (item) { return prop(item) !== prop(dataItem); };\n            this.value = this.value.filter(filter_2);\n            this.selectedDataItems = this.selectedDataItems.filter(filter_2);\n            this.tags = this.tagMapper(this.selectedDataItems.slice(0));\n            this.cdr.markForCheck();\n            this.emitValueChange();\n        }\n    };\n    MultiSelectComponent.prototype.createCustomValueStream = function () {\n        var _this = this;\n        if (this.customValueSubscription) {\n            this.customValueSubscription.unsubscribe();\n        }\n        this.customValueSubscription = this.customValueSubject.pipe(tap(function () {\n            _this.loading = true;\n            _this.disabled = true;\n            _this.cdr.detectChanges();\n        }), this.valueNormalizer, catchError(function () {\n            _this.loading = false;\n            _this.disabled = false;\n            _this.clearFilter();\n            if (_this.autoClose) {\n                _this.togglePopup(false);\n                _this.nextTick(function () {\n                    _this.searchbar.focus();\n                });\n            }\n            _this.createCustomValueStream();\n            return of(null);\n        }))\n            .subscribe(function (normalizedValue) {\n            _this.loading = false;\n            _this.disabled = false;\n            _this.clearFilter();\n            if (isPresent(normalizedValue)) { //if valueNormalizer returns `null` or `undefined` custom value is discarded\n                var newValue_1 = _this.valuePrimitive ? getter(normalizedValue, _this.valueField) : normalizedValue;\n                var itemIndex = _this.dataService.indexOf(newValue_1);\n                var customItem = itemIndex === -1;\n                if (_this.value.indexOf(newValue_1) === -1) {\n                    if (!customItem) {\n                        _this.selectionService.add(itemIndex);\n                    }\n                    else {\n                        _this.value = _this.value.concat([newValue_1]);\n                    }\n                    _this.selectedDataItems = _this.selectedDataItems.concat([normalizedValue]);\n                }\n                else {\n                    if (!customItem && _this.selectionService.isSelected(itemIndex)) {\n                        _this.selectionService.unselect(itemIndex);\n                    }\n                    else {\n                        _this.value.splice(_this.value.indexOf(newValue_1), 1);\n                        _this.selectedDataItems = _this.selectedDataItems.filter(function (item) { return getter(item, _this.valueField) !== newValue_1; });\n                    }\n                }\n                _this.tags = _this.tagMapper(_this.selectedDataItems.slice(0));\n                _this.emitValueChange();\n            }\n            if (_this.autoClose) {\n                _this.togglePopup(false);\n                _this.nextTick(function () {\n                    _this.searchbar.focus();\n                });\n            }\n        });\n    };\n    MultiSelectComponent.prototype.handleItemChange = function (event) {\n        this.change(event);\n        if (this.autoClose) {\n            this.togglePopup(false);\n        }\n        if (isPresent(event.added) && event.added !== -1) {\n            this.clearFilter();\n        }\n    };\n    MultiSelectComponent.prototype.handleEnter = function (event) {\n        var service = this.selectionService;\n        var focusedIndex = this.selectionService.focused;\n        if (this.isOpen) {\n            event.originalEvent.preventDefault();\n        }\n        if (focusedIndex === -1) {\n            if (this.allowCustom && this.text) {\n                this.addCustomValue(this.text);\n            }\n            return; // Clear filter & close are done at customValueSubscription due to race conditions.\n        }\n        if (service.isSelected(focusedIndex)) {\n            service.unselect(focusedIndex);\n        }\n        else {\n            service.add(focusedIndex);\n        }\n        this.clearFilter();\n        if (this.autoClose) {\n            this.togglePopup(false);\n        }\n    };\n    MultiSelectComponent.prototype.handleClose = function () {\n        this.closePopup();\n        this.searchbar.focus();\n    };\n    MultiSelectComponent.prototype.handleEnd = function () {\n        this.focusedTagIndex = this.tags.length - 1;\n    };\n    MultiSelectComponent.prototype.handleHome = function () {\n        this.focusedTagIndex = 0;\n    };\n    MultiSelectComponent.prototype.handleUp = function (index) {\n        this.selectionService.focused = index;\n    };\n    MultiSelectComponent.prototype.handleBackspace = function () {\n        if (this.focusedTagIndex !== undefined) {\n            this.handleDelete();\n        }\n        else {\n            this.handleRemoveTag(this.tags[this.tags.length - 1]);\n            this.searchbar.focus();\n        }\n    };\n    MultiSelectComponent.prototype.handleDelete = function () {\n        this.handleRemoveTag(this.tags[this.focusedTagIndex]);\n        if (this.focusedTagIndex === this.tags.length) {\n            this.focusedTagIndex = undefined;\n        }\n    };\n    MultiSelectComponent.prototype.handleLeftKey = function () {\n        if (this.direction === 'rtl') {\n            if (this.focusedTagIndex === 0) {\n                this.focusedTagIndex = undefined;\n            }\n            if (this.focusedTagIndex === undefined) {\n                return;\n            }\n        }\n        if (this.focusedTagIndex === undefined || this.focusedTagIndex < 0) {\n            this.focusedTagIndex = this.tags.length - 1;\n        }\n        else if (this.focusedTagIndex !== 0) {\n            this.focusedTagIndex--;\n        }\n    };\n    MultiSelectComponent.prototype.handleDownKey = function (index) {\n        if (this.isOpen) {\n            this.selectionService.focused = index || this.firstFocusableIndex(0);\n        }\n        else {\n            this.openPopup();\n        }\n    };\n    MultiSelectComponent.prototype.handleRightKey = function () {\n        var last = this.tags.length - 1;\n        if (this.direction === 'rtl') {\n            if (this.focusedTagIndex === undefined) {\n                this.focusedTagIndex = 0;\n                return;\n            }\n            if (this.focusedTagIndex === last) {\n                return;\n            }\n        }\n        if (this.focusedTagIndex === last) {\n            this.focusedTagIndex = undefined;\n        }\n        else if (this.focusedTagIndex < last) {\n            this.focusedTagIndex++;\n        }\n    };\n    MultiSelectComponent.prototype.findIndex = function (text, startsFrom) {\n        var _this = this;\n        if (startsFrom === void 0) { startsFrom = 0; }\n        var itemText;\n        text = text.toLowerCase();\n        var index = this.dataService.findIndex(function (item) {\n            if (_this.dataService.grouped) {\n                itemText = _this.prop(_this.textField, _this.valuePrimitive)(item.value);\n            }\n            else {\n                itemText = _this.prop(_this.textField, _this.valuePrimitive)(item);\n            }\n            itemText = !isPresent(itemText) ? \"\" : itemText.toString().toLowerCase();\n            return text && itemText.startsWith(text);\n        }, startsFrom);\n        if (this.disabledItemsService.isIndexDisabled(index)) {\n            return (index + 1 > this.dataService.itemsCount) ? -1 : this.findIndex(text, index + 1);\n        }\n        else {\n            return index;\n        }\n    };\n    MultiSelectComponent.prototype.searchTextAndFocus = function (text) {\n        var index = this.findIndex(text);\n        this.selectionService.focused = index;\n    };\n    MultiSelectComponent.prototype.closePopup = function () {\n        this.togglePopup(false);\n        this.focusedTagIndex = undefined;\n    };\n    MultiSelectComponent.prototype.openPopup = function () {\n        this.togglePopup(true);\n        this.focusedTagIndex = undefined;\n    };\n    MultiSelectComponent.prototype.togglePopup = function (open) {\n        var isDisabled = this.disabled || this.readonly;\n        var sameState = this.isOpen === open;\n        if (isDisabled || sameState) {\n            return;\n        }\n        var isDefaultPrevented = this.triggerPopupEvents(open);\n        if (!isDefaultPrevented) {\n            this._toggle(open);\n        }\n    };\n    MultiSelectComponent.prototype.triggerPopupEvents = function (open) {\n        var eventArgs = new PreventableEvent();\n        if (open) {\n            this.open.emit(eventArgs);\n        }\n        else {\n            this.close.emit(eventArgs);\n        }\n        return eventArgs.isDefaultPrevented();\n    };\n    MultiSelectComponent.prototype._toggle = function (open) {\n        this._open = (open === undefined) ? !this._open : open;\n        this.destroyPopup();\n        if (this._open) {\n            this.createPopup();\n        }\n    };\n    MultiSelectComponent.prototype.destroyPopup = function () {\n        if (this.popupRef) {\n            this.popupRef.popupElement\n                .removeEventListener('mousedown', this.popupMouseDownHandler);\n            this.popupRef.close();\n            this.popupRef = null;\n        }\n    };\n    MultiSelectComponent.prototype.createPopup = function () {\n        var _this = this;\n        if (this.virtual) {\n            this.virtual.skip = 0;\n        }\n        var horizontalAlign = this.direction === \"rtl\" ? \"right\" : \"left\";\n        var anchorPosition = { horizontal: horizontalAlign, vertical: \"bottom\" };\n        var popupPosition = { horizontal: horizontalAlign, vertical: \"top\" };\n        this.popupRef = this.popupService.open({\n            anchor: this.wrapper,\n            anchorAlign: anchorPosition,\n            animate: this.popupSettings.animate,\n            appendTo: this.appendTo,\n            content: this.popupTemplate,\n            popupAlign: popupPosition,\n            popupClass: this.listContainerClasses,\n            positionMode: 'absolute'\n        });\n        var popupWrapper = this.popupRef.popupElement;\n        var _a = this.width, min = _a.min, max = _a.max;\n        popupWrapper.addEventListener('mousedown', this.popupMouseDownHandler);\n        popupWrapper.style.minWidth = min;\n        popupWrapper.style.width = max;\n        popupWrapper.style.height = this.height;\n        popupWrapper.setAttribute(\"dir\", this.direction);\n        this.popupRef.popupOpen.subscribe(function () {\n            _this.cdr.detectChanges();\n            _this.optionsList.scrollToItem(_this.selectionService.focused);\n        });\n        this.popupRef.popupAnchorViewportLeave.subscribe(function () {\n            _this.togglePopup(false);\n        });\n    };\n    MultiSelectComponent.prototype.emitValueChange = function () {\n        this.onChangeCallback(this.value);\n        this.valueChange.emit(this.value);\n    };\n    MultiSelectComponent.prototype.getSelectedDataItems = function (valueChanges) {\n        var _this = this;\n        if (!this.dataService.itemsCount && this.valuePrimitive && this.valueField) {\n            return [];\n        }\n        var isBoundToComplexData = isObjectArray(this.data);\n        var prop = this.prop(this.valueField, this.valuePrimitive);\n        var currentValue;\n        var index;\n        var selectedDataItems = [];\n        valueChanges.forEachItem(function (value) {\n            currentValue = value.currentValue;\n            if (_this.dataService.grouped) {\n                index = _this.dataService.findIndex(function (item) {\n                    return prop(item.value) === prop(currentValue);\n                });\n            }\n            else {\n                index = _this.dataService.findIndex(function (item) {\n                    return prop(item) === prop(currentValue);\n                });\n            }\n            if (index !== -1) {\n                selectedDataItems.push(_this.dataService.itemAt(index));\n            }\n            else if (isPresent(value) && !(isBoundToComplexData && _this.valuePrimitive)) { //value is not present in the data\n                selectedDataItems.push(currentValue);\n            }\n            else { // value is primitive, dataItem is an object, dataItem is not present in the current data set\n                var item = _this.resolveDataItemFromTags(currentValue);\n                if (isPresent(item)) {\n                    selectedDataItems.push(item);\n                }\n            }\n        });\n        return selectedDataItems;\n    };\n    MultiSelectComponent.prototype.resolveDataItemFromTags = function (value) {\n        if (!(this.tags && this.tags.length && isPresent(value))) {\n            return undefined;\n        }\n        // Flattening the tags array in case of a summary tag occurrence.\n        var tags = this.tags.reduce(function (acc, tag) {\n            var items = isArray(tag) ? tag : [tag];\n            acc.push.apply(acc, items);\n            return acc;\n        }, []);\n        var prop = this.prop(this.valueField, this.valuePrimitive);\n        return tags.find(function (tag) { return prop(tag) === prop(value); });\n    };\n    MultiSelectComponent.prototype.firstFocusableIndex = function (index) {\n        var maxIndex = this.dataService.itemsCount;\n        if (this.disabledItemsService.isIndexDisabled(index)) {\n            var nextIndex = index + 1;\n            return (nextIndex < maxIndex) ? this.firstFocusableIndex(nextIndex) : undefined;\n        }\n        else {\n            return index;\n        }\n    };\n    MultiSelectComponent.prototype.nextTick = function (f) {\n        var _this = this;\n        this._zone.runOutsideAngular(function () {\n            // Use `setTimeout` instead of a resolved promise\n            // because the latter does not wait long enough.\n            setTimeout(function () { return _this._zone.run(f); });\n        });\n    };\n    MultiSelectComponent.prototype.setMessages = function () {\n        var _this = this;\n        this._zone.runOutsideAngular(function () {\n            clearTimeout(_this.messagesTimeout);\n            _this.messagesTimeout = setTimeout(function () {\n                _this.noDataText = _this.localization.get('noDataText');\n                _this.cdr.detectChanges();\n            });\n        });\n    };\n    MultiSelectComponent.decorators = [\n        { type: Component, args: [{\n                    exportAs: 'kendoMultiSelect',\n                    providers: [\n                        MULTISELECT_VALUE_ACCESSOR,\n                        DataService,\n                        SelectionService,\n                        NavigationService,\n                        DisabledItemsService,\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.multiselect'\n                        },\n                        {\n                            provide: FilterableDropDownComponentBase, useExisting: forwardRef(function () { return MultiSelectComponent; })\n                        },\n                        {\n                            provide: KendoInput, useExisting: forwardRef(function () { return MultiSelectComponent; })\n                        }\n                    ],\n                    selector: 'kendo-multiselect',\n                    template: \"\\n        <ng-container kendoMultiSelectLocalizedMessages\\n            i18n-noDataText=\\\"kendo.multiselect.noDataText|The text displayed in the popup when there are no items\\\"\\n            noDataText=\\\"NO DATA FOUND\\\"\\n\\n            i18n-clearTitle=\\\"kendo.combobox.clearTitle|The title of the clear button\\\"\\n            clearTitle=\\\"clear\\\"\\n        >\\n        </ng-container>\\n        <div class=\\\"k-multiselect-wrap k-floatwrap\\\"\\n            #wrapper\\n            (mousedown)=\\\"wrapperMousedown($event)\\\"\\n        >\\n            <kendo-taglist\\n                [id]=\\\"tagListId\\\"\\n                [tags]=\\\"tags\\\"\\n                [textField]=\\\"textField\\\"\\n                [valueField]=\\\"valueField\\\"\\n                [focused]=\\\"focusedTagIndex\\\"\\n                [disabled]=\\\"disabled\\\"\\n                [template]=\\\"tagTemplate\\\"\\n                [groupTemplate]=\\\"groupTagTemplate\\\"\\n                [tagPrefix]=\\\"tagPrefix\\\"\\n                (removeTag)=\\\"handleRemoveTag($event)\\\"\\n            >\\n            </kendo-taglist>\\n            <kendo-searchbar\\n                #searchbar\\n                [id]=\\\"focusableId\\\"\\n                [role]=\\\"'listbox'\\\"\\n                [tagListId]=\\\"tagListId\\\"\\n                [activeDescendant]=\\\"activeDescendant\\\"\\n                [noDataLabel]=\\\"noDataLabel\\\"\\n                [userInput]=\\\"text\\\"\\n                [disabled]=\\\"disabled\\\"\\n                [readonly]=\\\"readonly\\\"\\n                [tabIndex]=\\\"tabIndex\\\"\\n                [popupOpen]=\\\"isOpen\\\"\\n                [placeholder]=\\\"placeholder\\\"\\n                (onNavigate)=\\\"handleNavigate($event)\\\"\\n                (valueChange)=\\\"handleFilter($event)\\\"\\n                (onBlur)=\\\"onSearchBarBlur()\\\"\\n                (onFocus)=\\\"onSearchBarFocus()\\\"\\n            >\\n            </kendo-searchbar>\\n            <span *ngIf=\\\"!loading && !readonly && clearButton && (tags?.length || text?.length)\\\" class=\\\"k-icon k-clear-value k-i-close\\\" [attr.title]=\\\"clearTitle\\\" role=\\\"button\\\" tabindex=\\\"-1\\\" (mousedown)=\\\"clearAll($event)\\\"></span>\\n            <span *ngIf=\\\"loading\\\" class=\\\"k-icon k-i-loading\\\"></span>\\n        </div>\\n        <ng-template #popupTemplate>\\n            <!--header template-->\\n            <ng-template *ngIf=\\\"headerTemplate\\\"\\n                [templateContext]=\\\"{\\n                    templateRef: headerTemplate.templateRef\\n                }\\\">\\n            </ng-template>\\n            <!--custom item template-->\\n            <div class=\\\"k-list\\\" *ngIf=\\\"allowCustom && text\\\">\\n                <div class=\\\"k-item k-custom-item\\\" kendoDropDownsSelectable [multipleSelection]=\\\"true\\\" [index]=\\\"-1\\\">\\n                    <ng-template *ngIf=\\\"customItemTemplate;else default_custom_item_template\\\"\\n                        [templateContext]=\\\"{\\n                            templateRef: customItemTemplate.templateRef,\\n                            $implicit: text\\n                        }\\\">\\n                    </ng-template>\\n                    <ng-template #default_custom_item_template>{{ text }}</ng-template>\\n                    <span class=\\\"k-icon k-i-plus\\\" style=\\\"float: right\\\"></span>\\n                </div>\\n            </div>\\n            <!--list-->\\n            <kendo-list\\n                #optionsList\\n                [id]=\\\"listBoxId\\\"\\n                [optionPrefix]=\\\"optionPrefix\\\"\\n                [data]=\\\"data\\\"\\n                [textField]=\\\"textField\\\"\\n                [valueField]=\\\"valueField\\\"\\n                [height]=\\\"listHeight\\\"\\n                [template]=\\\"template\\\"\\n                [groupTemplate]=\\\"groupTemplate\\\"\\n                [fixedGroupTemplate]=\\\"fixedGroupTemplate\\\"\\n                [show]=\\\"isOpen\\\"\\n                [multipleSelection]=\\\"true\\\"\\n                [virtual]=\\\"virtual\\\"\\n                (pageChange)=\\\"pageChange($event)\\\"\\n                >\\n            </kendo-list>\\n            <!--no data template-->\\n            <div class=\\\"k-nodata\\\" *ngIf=\\\"data.length === 0\\\">\\n                <ng-template [ngIf]=\\\"noDataTemplate\\\"\\n                    [templateContext]=\\\"{\\n                        templateRef: noDataTemplate ? noDataTemplate.templateRef : undefined\\n                    }\\\">\\n                </ng-template>\\n                <ng-template [ngIf]=\\\"!noDataTemplate\\\">\\n                    <div>{{ noDataText }}</div>\\n                </ng-template>\\n            </div>\\n            <!--footer template-->\\n            <ng-template *ngIf=\\\"footerTemplate\\\"\\n                [templateContext]=\\\"{\\n                    templateRef: footerTemplate.templateRef\\n                }\\\">\\n            </ng-template>\\n        </ng-template>\\n        <ng-template [ngIf]=\\\"isOpen\\\">\\n            <kendo-resize-sensor (resize)=\\\"onResize()\\\"></kendo-resize-sensor>\\n        </ng-template>\\n        <ng-container #container></ng-container>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    MultiSelectComponent.ctorParameters = function () { return [\n        { type: LocalizationService },\n        { type: PopupService },\n        { type: DataService },\n        { type: SelectionService },\n        { type: NavigationService },\n        { type: DisabledItemsService },\n        { type: ChangeDetectorRef },\n        { type: KeyValueDiffers },\n        { type: Renderer2 },\n        { type: ElementRef },\n        { type: NgZone },\n        { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [TOUCH_ENABLED,] }] }\n    ]; };\n    MultiSelectComponent.propDecorators = {\n        focusableId: [{ type: Input }],\n        autoClose: [{ type: Input }],\n        loading: [{ type: Input }],\n        data: [{ type: Input }],\n        value: [{ type: Input }],\n        valueField: [{ type: Input }],\n        textField: [{ type: Input }],\n        tabindex: [{ type: Input }],\n        tabIndex: [{ type: Input, args: [\"tabIndex\",] }],\n        placeholder: [{ type: Input }],\n        disabled: [{ type: Input }],\n        itemDisabled: [{ type: Input }],\n        readonly: [{ type: Input }],\n        filterable: [{ type: Input }],\n        virtual: [{ type: Input }],\n        popupSettings: [{ type: Input }],\n        listHeight: [{ type: Input }],\n        valuePrimitive: [{ type: Input }],\n        clearButton: [{ type: Input }],\n        tagMapper: [{ type: Input }],\n        allowCustom: [{ type: Input }],\n        valueNormalizer: [{ type: Input }],\n        filterChange: [{ type: Output }],\n        valueChange: [{ type: Output }],\n        open: [{ type: Output }],\n        close: [{ type: Output }],\n        onFocus: [{ type: Output, args: ['focus',] }],\n        onBlur: [{ type: Output, args: ['blur',] }],\n        removeTag: [{ type: Output }],\n        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],\n        searchbar: [{ type: ViewChild, args: [SearchBarComponent,] }],\n        popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],\n        wrapper: [{ type: ViewChild, args: ['wrapper',] }],\n        optionsList: [{ type: ViewChild, args: ['optionsList',] }],\n        template: [{ type: ContentChild, args: [ItemTemplateDirective,] }],\n        customItemTemplate: [{ type: ContentChild, args: [CustomItemTemplateDirective,] }],\n        groupTemplate: [{ type: ContentChild, args: [GroupTemplateDirective,] }],\n        fixedGroupTemplate: [{ type: ContentChild, args: [FixedGroupTemplateDirective,] }],\n        headerTemplate: [{ type: ContentChild, args: [HeaderTemplateDirective,] }],\n        footerTemplate: [{ type: ContentChild, args: [FooterTemplateDirective,] }],\n        tagTemplate: [{ type: ContentChild, args: [TagTemplateDirective,] }],\n        groupTagTemplate: [{ type: ContentChild, args: [GroupTagTemplateDirective,] }],\n        noDataTemplate: [{ type: ContentChild, args: [NoDataTemplateDirective,] }],\n        widgetClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-multiselect',] }, { type: HostBinding, args: ['class.k-header',] }],\n        dir: [{ type: HostBinding, args: ['attr.dir',] }],\n        focusedClass: [{ type: HostBinding, args: ['class.k-state-focused',] }],\n        disabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }]\n    };\n    return MultiSelectComponent;\n}());\n\n/* tslint:disable:max-line-length */\n/**\n * @hidden\n */\nvar TagListComponent = /** @class */ (function () {\n    function TagListComponent() {\n        this.removeTag = new EventEmitter();\n    }\n    TagListComponent.prototype.tagProp = function (tag, prop) {\n        return prop && isObject(tag) ? tag[prop] : tag;\n    };\n    TagListComponent.prototype.deleteTag = function (event, tag) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        if (!this.disabled && event.which === 1) {\n            this.removeTag.emit(tag);\n        }\n    };\n    TagListComponent.prototype.itemId = function (tag) {\n        if (tag) { //because of custom values\n            return this.tagPrefix + \"-\" + this.tagProp(tag, this.valueField);\n        }\n    };\n    TagListComponent.prototype.isGroupTag = function (tag) {\n        return tag instanceof Array;\n    };\n    TagListComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-taglist',\n                    template: \"\\n        <ul [attr.id]=\\\"id\\\" class=\\\"k-reset\\\">\\n            <li role=\\\"option\\\" *ngFor=\\\"let tag of tags; let i = index;\\\" aria-selected=\\\"true\\\" [attr.aria-setsize]=\\\"tags?.length\\\"\\n                class=\\\"k-button\\\" [ngClass]=\\\"{ 'k-state-focused': i === focused }\\\" [attr.id]=\\\"itemId(tag)\\\"\\n            >\\n                <ng-template *ngIf=\\\"isGroupTag(tag); then groupTag else singleTag\\\"></ng-template>\\n                    <ng-template #groupTag>\\n                        <span>\\n                            <ng-template *ngIf=\\\"groupTemplate\\\"\\n                                [templateContext]=\\\"{\\n                                templateRef: groupTemplate.templateRef,\\n                                $implicit: tag\\n                            }\\\">\\n                            </ng-template>\\n                            <ng-template [ngIf]=\\\"!groupTemplate\\\">{{ tag.length }} {{ tag.length === 1 ? 'item' : 'items' }} selected</ng-template>\\n                        </span>\\n                    </ng-template>\\n                    <ng-template #singleTag>\\n                        <span>\\n                        <ng-template *ngIf=\\\"template\\\"\\n                                [templateContext]=\\\"{\\n                                templateRef: template.templateRef,\\n                                $implicit: tag\\n                            }\\\">\\n                            </ng-template>\\n                            <ng-template [ngIf]=\\\"!template\\\">{{ tagProp(tag, textField) }}</ng-template>\\n                        </span>\\n                    </ng-template>\\n\\n                <span aria-label=\\\"delete\\\" [attr.aria-hidden]=\\\"i !== focused\\\" class=\\\"k-select\\\">\\n                    <span class=\\\"k-icon k-i-close\\\" (mousedown)=\\\"deleteTag($event, tag)\\\">\\n                    </span>\\n                </span>\\n            </li>\\n        </ul>\\n  \"\n                },] },\n    ];\n    TagListComponent.propDecorators = {\n        tags: [{ type: Input }],\n        textField: [{ type: Input }],\n        valueField: [{ type: Input }],\n        focused: [{ type: Input }],\n        template: [{ type: Input }],\n        groupTemplate: [{ type: Input }],\n        disabled: [{ type: Input }],\n        tagPrefix: [{ type: Input }],\n        id: [{ type: Input }],\n        removeTag: [{ type: Output }]\n    };\n    return TagListComponent;\n}());\n\n/**\n * @hidden\n */\nvar TemplateContextDirective = /** @class */ (function () {\n    function TemplateContextDirective(viewContainerRef) {\n        this.viewContainerRef = viewContainerRef;\n    }\n    Object.defineProperty(TemplateContextDirective.prototype, \"templateContext\", {\n        set: function (context) {\n            if (this.insertedViewRef) {\n                this.viewContainerRef.remove(this.viewContainerRef.indexOf(this.insertedViewRef));\n                this.insertedViewRef = undefined;\n            }\n            if (context.templateRef) {\n                this.insertedViewRef = this.viewContainerRef.createEmbeddedView(context.templateRef, context);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TemplateContextDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[templateContext]' // tslint:disable-line\n                },] },\n    ];\n    /** @nocollapse */\n    TemplateContextDirective.ctorParameters = function () { return [\n        { type: ViewContainerRef }\n    ]; };\n    TemplateContextDirective.propDecorators = {\n        templateContext: [{ type: Input }]\n    };\n    return TemplateContextDirective;\n}());\n\n/**\n * @hidden\n */\nvar SelectableDirective = /** @class */ (function () {\n    function SelectableDirective(selectionService) {\n        // @HostBinding('attr.offset-index')\n        // @Input() public offsetIndex: number;\n        this.multipleSelection = false;\n        this.selectionService = selectionService;\n    }\n    Object.defineProperty(SelectableDirective.prototype, \"focusedClassName\", {\n        get: function () {\n            return this.selectionService.isFocused(this.index);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectableDirective.prototype, \"selectedClassName\", {\n        get: function () {\n            return this.selectionService.isSelected(this.index);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectableDirective.prototype.onClick = function (event) {\n        event.stopPropagation();\n        if (this.multipleSelection) {\n            if (this.selectionService.isSelected(this.index)) {\n                this.selectionService.unselect(this.index);\n            }\n            else {\n                this.selectionService.add(this.index);\n            }\n        }\n        else {\n            this.selectionService.change(this.index);\n        }\n    };\n    SelectableDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDropDownsSelectable]'\n                },] },\n    ];\n    /** @nocollapse */\n    SelectableDirective.ctorParameters = function () { return [\n        { type: SelectionService }\n    ]; };\n    SelectableDirective.propDecorators = {\n        index: [{ type: HostBinding, args: ['attr.index',] }, { type: Input }],\n        height: [{ type: HostBinding, args: ['style.height.px',] }, { type: HostBinding, args: ['style.minHeight.px',] }, { type: Input }],\n        multipleSelection: [{ type: Input }],\n        focusedClassName: [{ type: HostBinding, args: ['class.k-state-focused',] }],\n        selectedClassName: [{ type: HostBinding, args: ['class.k-state-selected',] }],\n        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]\n    };\n    return SelectableDirective;\n}());\n\n/**\n * A directive which configures the MultiSelect to show one single summary tag for all selected data items.\n * When a number is provided, the summary tag is displayed after the given amount of data items are selected\n * ([more information and examples]({% slug summarytagmode_multiselect %})).\n *\n * @example\n * ```ts-no-run\n * <kendo-multiselect kendoMultiSelectSummaryTag [data]=\"data\"></kendo-multiselect>\n * ```\n *\n * @example\n * ```ts-no-run\n * <kendo-multiselect [kendoMultiSelectSummaryTag]=\"2\" [data]=\"data\"></kendo-multiselect>\n * ```\n */\nvar SummaryTagDirective = /** @class */ (function () {\n    function SummaryTagDirective(multiSelectComponent) {\n        this.multiSelectComponent = multiSelectComponent;\n        /**\n         * A numeric value that indicates the number of selected data items after which the summary tag will appear.\n         */\n        this.showAfter = 0; // tslint:disable-line:no-input-rename\n        this.createTagMapper();\n    }\n    SummaryTagDirective.prototype.ngOnChanges = function (changes) {\n        if (isPresent(changes.showAfter)) {\n            this.createTagMapper();\n            this.multiSelectComponent.onTagMapperChange();\n        }\n    };\n    SummaryTagDirective.prototype.createTagMapper = function () {\n        var _this = this;\n        this.multiSelectComponent.tagMapper = function (tags) {\n            if (tags.length > _this.showAfter) {\n                var result = void 0;\n                result = tags.slice(0, _this.showAfter);\n                result.push(tags.slice(_this.showAfter, tags.length));\n                return result;\n            }\n            else {\n                return tags;\n            }\n        };\n    };\n    SummaryTagDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoMultiSelectSummaryTag]'\n                },] },\n    ];\n    /** @nocollapse */\n    SummaryTagDirective.ctorParameters = function () { return [\n        { type: MultiSelectComponent }\n    ]; };\n    SummaryTagDirective.propDecorators = {\n        showAfter: [{ type: Input, args: ['kendoMultiSelectSummaryTag',] }]\n    };\n    return SummaryTagDirective;\n}());\n\n// tslint:disable:no-input-rename\n/**\n * Implements an event handler for the `filterChange` event of a DropDowns component\n * which performs simple data filtering.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-autocomplete\n *      [data]=\"data\"\n *      kendoDropDownFilter\n *      placeholder=\"e.g. Andorra\">\n *  </kendo-autocomplete>\n * `\n * })\n * class AppComponent {\n *     public data: Array<string> = [\"Albania\", \"Andorra\", \"Armenia\", \"Austria\", \"Azerbaijan\"];\n * }\n * ```\n */\nvar FilterDirective = /** @class */ (function () {\n    function FilterDirective(component) {\n        this.component = component;\n    }\n    FilterDirective.prototype.ngOnChanges = function () {\n        this.data = this.data || [];\n        this.filterSettings = this.filterSettings || {\n            caseSensitive: false,\n            operator: 'startsWith'\n        };\n    };\n    FilterDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        this.component.filterable = true;\n        this.filterChangeSubscription = this.component.filterChange\n            .subscribe(function (query) { return _this.component.data = _this.getFilteredData(query); });\n    };\n    FilterDirective.prototype.ngOnDestroy = function () {\n        this.filterChangeSubscription.unsubscribe();\n    };\n    FilterDirective.prototype.getFilteredData = function (query) {\n        var _this = this;\n        var field = this.component.textField || this.component.valueField;\n        return this.data.filter(function (item) { return _this.checkItem(getter(item, field), query); });\n    };\n    FilterDirective.prototype.checkItem = function (target, query) {\n        target = this.normalizeValue(target);\n        query = this.normalizeValue(query);\n        return this.filterSettings.operator === 'contains' ? target.indexOf(query) !== -1 : target.indexOf(query) === 0;\n    };\n    FilterDirective.prototype.normalizeValue = function (value) {\n        var normalizedValue = isPresent(value) ? value.toString() : '';\n        return this.filterSettings.caseSensitive ? normalizedValue : normalizedValue.toLowerCase();\n    };\n    FilterDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDropDownFilter]'\n                },] },\n    ];\n    /** @nocollapse */\n    FilterDirective.ctorParameters = function () { return [\n        { type: FilterableDropDownComponentBase }\n    ]; };\n    FilterDirective.propDecorators = {\n        data: [{ type: Input }],\n        filterSettings: [{ type: Input, args: ['kendoDropDownFilter',] }]\n    };\n    return FilterDirective;\n}());\n\n/**\n * @hidden\n */\nvar Messages = /** @class */ (function (_super) {\n    __extends(Messages, _super);\n    function Messages() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Messages.propDecorators = {\n        noDataText: [{ type: Input }],\n        clearTitle: [{ type: Input }]\n    };\n    return Messages;\n}(ComponentMessages));\n\n/**\n * @hidden\n */\nvar LocalizedMessagesDirective = /** @class */ (function (_super) {\n    __extends(LocalizedMessagesDirective, _super);\n    function LocalizedMessagesDirective(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    LocalizedMessagesDirective.decorators = [\n        { type: Directive, args: [{\n                    providers: [\n                        {\n                            provide: Messages,\n                            useExisting: forwardRef(function () { return LocalizedMessagesDirective; }) // tslint:disable-line:no-forward-ref\n                        }\n                    ],\n                    selector: \"\\n    [kendoDropDownListLocalizedMessages],\\n    [kendoComboBoxLocalizedMessages],\\n    [kendoAutoCompleteLocalizedMessages],\\n    [kendoMultiSelectLocalizedMessages]\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    LocalizedMessagesDirective.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return LocalizedMessagesDirective;\n}(Messages));\n\n/**\n * Custom component messages override default component messages\n * ([see example]({% slug globalization_grid %}#toc-localization)).\n */\nvar CustomMessagesComponent = /** @class */ (function (_super) {\n    __extends(CustomMessagesComponent, _super);\n    function CustomMessagesComponent(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    Object.defineProperty(CustomMessagesComponent.prototype, \"override\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CustomMessagesComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: Messages,\n                            useExisting: forwardRef(function () { return CustomMessagesComponent; }) // tslint:disable-line:no-forward-ref\n                        }\n                    ],\n                    selector: 'kendo-dropdownlist-messages, kendo-combobox-messages, kendo-autocomplete-messages, kendo-multiselect-messages',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    CustomMessagesComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return CustomMessagesComponent;\n}(Messages));\n\nvar SHARED_DIRECTIVES = [\n    HeaderTemplateDirective,\n    FooterTemplateDirective,\n    ItemTemplateDirective,\n    GroupTemplateDirective,\n    FixedGroupTemplateDirective,\n    NoDataTemplateDirective,\n    LocalizedMessagesDirective,\n    CustomMessagesComponent,\n    FilterDirective\n];\n/**\n * @hidden\n *\n * The exported package module.\n *\n * The package exports:\n * - `ItemTemplateDirective`&mdash;The item template directive.\n * - `HeaderTemplateDirective`&mdash;The header template directive.\n * - `FooterTemplateDirective`&mdash;The footer template directive.\n * - `NoDataTemplateDirective`&mdash;The noData template directive.\n */\nvar SharedDirectivesModule = /** @class */ (function () {\n    function SharedDirectivesModule() {\n    }\n    SharedDirectivesModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [SHARED_DIRECTIVES],\n                    exports: [SHARED_DIRECTIVES]\n                },] },\n    ];\n    return SharedDirectivesModule;\n}());\n\nvar INTERNAL_DIRECTIVES = [\n    ListComponent,\n    ListItemDirective,\n    SelectableDirective,\n    SearchBarComponent,\n    TemplateContextDirective\n];\n/**\n * @hidden\n */\nvar SharedModule = /** @class */ (function () {\n    function SharedModule() {\n    }\n    SharedModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [INTERNAL_DIRECTIVES],\n                    exports: [INTERNAL_DIRECTIVES, CommonModule, FormsModule, PopupModule, ResizeSensorModule, SharedDirectivesModule],\n                    imports: [CommonModule, FormsModule, PopupModule, ResizeSensorModule, SharedDirectivesModule]\n                },] },\n    ];\n    return SharedModule;\n}());\n\nvar AUTOCOMPLETE_DIRECTIVES = [\n    AutoCompleteComponent\n];\n/**\n * @hidden\n *\n * The exported package module.\n *\n * The package exports:\n * - `AutoCompleteComponent`&mdash;The AutoComplete component class.\n * - `ItemTemplateDirective`&mdash;The item template directive.\n * - `HeaderTemplateDirective`&mdash;The header template directive.\n * - `FooterTemplateDirective`&mdash;The footer template directive.\n */\nvar AutoCompleteModule = /** @class */ (function () {\n    function AutoCompleteModule() {\n    }\n    AutoCompleteModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [AUTOCOMPLETE_DIRECTIVES],\n                    exports: [AUTOCOMPLETE_DIRECTIVES, SharedDirectivesModule],\n                    imports: [SharedModule]\n                },] },\n    ];\n    return AutoCompleteModule;\n}());\n\n/* tslint:disable:object-literal-sort-keys */\nvar agentRxs = {\n    wp: /(Windows Phone(?: OS)?)\\s(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    fire: /(Silk)\\/(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    android: /(Android|Android.*(?:Opera|Firefox).*?\\/)\\s*(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    iphone: /(iPhone|iPod).*OS\\s+(\\d+)[\\._]([\\d\\._]+)/,\n    ipad: /(iPad).*OS\\s+(\\d+)[\\._]([\\d_]+)/,\n    meego: /(MeeGo).+NokiaBrowser\\/(\\d+)\\.([\\d\\._]+)/,\n    webos: /(webOS)\\/(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    blackberry: /(BlackBerry|BB10).*?Version\\/(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    playbook: /(PlayBook).*?Tablet\\s*OS\\s*(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    windows: /(MSIE)\\s+(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    tizen: /(tizen).*?Version\\/(\\d+)\\.(\\d+(\\.\\d+)?)/i,\n    sailfish: /(sailfish).*rv:(\\d+)\\.(\\d+(\\.\\d+)?).*firefox/i,\n    ffos: /(Mobile).*rv:(\\d+)\\.(\\d+(\\.\\d+)?).*Firefox/\n};\nvar osRxs = {\n    ios: /^i(phone|pad|pod)$/i,\n    android: /^android|fire$/i,\n    blackberry: /^blackberry|playbook/i,\n    windows: /windows/,\n    wp: /wp/,\n    flat: /sailfish|ffos|tizen/i,\n    meego: /meego/\n};\nvar desktopBrowserRxs = {\n    edge: /(edge)[ \\/]([\\w.]+)/i,\n    webkit: /(chrome)[ \\/]([\\w.]+)/i,\n    safari: /(webkit)[ \\/]([\\w.]+)/i,\n    opera: /(opera)(?:.*version|)[ \\/]([\\w.]+)/i,\n    msie: /(msie\\s|trident.*? rv:)([\\w.]+)/i,\n    mozilla: /(mozilla)(?:.*? rv:([\\w.]+)|)/i\n};\nvar mobileBrowserRxs = {\n    omini: /Opera\\sMini/i,\n    omobile: /Opera\\sMobi/i,\n    firefox: /Firefox|Fennec/i,\n    mobilesafari: /version\\/.*safari/i,\n    ie: /MSIE|Windows\\sPhone/i,\n    chrome: /chrome|crios/i,\n    webkit: /webkit/i\n};\nvar testRx = function (agent, rxs, dflt) {\n    for (var rx in rxs) {\n        if (rxs.hasOwnProperty(rx) && rxs[rx].test(agent)) {\n            return rx;\n        }\n    }\n    return dflt !== undefined ? dflt : agent;\n};\n/**\n * @hidden\n */\nvar detectMobileOS = function (ua) {\n    var minorVersion;\n    var match = [];\n    for (var agent in agentRxs) {\n        if (agentRxs.hasOwnProperty(agent)) {\n            match = ua.match(agentRxs[agent]);\n            if (!match) {\n                continue;\n            }\n            if (agent === 'windows' && 'plugins' in window.navigator) {\n                return null;\n            } // Break if not Metro/Mobile Windows\n            var os = {};\n            os.device = agent;\n            os.browser = testRx(ua, mobileBrowserRxs, 'default');\n            os.name = testRx(agent, osRxs);\n            os[os.name] = true;\n            os.majorVersion = match[2];\n            os.minorVersion = match[3].replace('_', '.');\n            minorVersion = os.minorVersion.replace('.', '').substr(0, 2);\n            os.flatVersion = os.majorVersion + minorVersion +\n                (new Array(3 - (minorVersion.length < 3 ? minorVersion.length : 2)).join('0'));\n            os.cordova = typeof window.PhoneGap !== undefined\n                || typeof window.cordova !== undefined; // Use file protocol to detect appModes.\n            os.appMode = window.navigator.standalone\n                || (/file|local|wmapp/).test(window.location.protocol)\n                || os.cordova; // Use file protocol to detect appModes.\n            return os;\n        }\n    }\n    return null;\n};\n/**\n * @hidden\n */\nvar detectDesktopBrowser = function (ua) {\n    var browserInfo = null;\n    var match = [];\n    for (var agent in desktopBrowserRxs) {\n        if (desktopBrowserRxs.hasOwnProperty(agent)) {\n            match = ua.match(desktopBrowserRxs[agent]);\n            if (match) {\n                browserInfo = {};\n                browserInfo[agent] = true;\n                browserInfo[match[1].toLowerCase().split(' ')[0].split('/')[0]] = true;\n                browserInfo.version = parseInt(document.documentMode || match[2], 10);\n                break;\n            }\n        }\n    }\n    return browserInfo;\n};\nvar userAgent = isWindowAvailable() && window.navigator ? window.navigator.userAgent : null;\n/**\n * @hidden\n */\nvar browser = userAgent ? detectDesktopBrowser(userAgent) : null;\n/**\n * @hidden\n */\nvar mobileOS = userAgent ? detectMobileOS(userAgent) : null;\n/**\n * @hidden\n */\nvar touch = isWindowAvailable() && 'ontouchstart' in window;\n/**\n * @hidden\n */\nvar msPointers = browser && !browser.chrome && window.MSPointerEvent;\n/**\n * @hidden\n */\nvar pointers = browser && !browser.chrome && window.PointerEvent;\n/**\n * @hidden\n */\nvar touchEnabled = mobileOS && (touch || msPointers || pointers);\n\nvar COMBOBOX_DIRECTIVES = [\n    ComboBoxComponent\n];\nvar Éµ0$1 = touchEnabled;\n/**\n * @hidden\n *\n * The exported package module.\n *\n * The package exports:\n * - `ComboBoxComponent`&mdash;The ComboBox component class.\n * - `ItemTemplateDirective`&mdash;The item template directive.\n * - `HeaderTemplateDirective`&mdash;The header template directive.\n * - `FooterTemplateDirective`&mdash;The footer template directive.\n */\nvar ComboBoxModule = /** @class */ (function () {\n    function ComboBoxModule() {\n    }\n    ComboBoxModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [COMBOBOX_DIRECTIVES],\n                    exports: [COMBOBOX_DIRECTIVES, SharedDirectivesModule],\n                    imports: [SharedModule],\n                    providers: [{ provide: TOUCH_ENABLED, useValue: Éµ0$1 }]\n                },] },\n    ];\n    return ComboBoxModule;\n}());\n\n/**\n * @hidden\n */\nvar FilterInputDirective = /** @class */ (function () {\n    function FilterInputDirective(element, zone) {\n        this.element = element;\n        this.zone = zone;\n    }\n    FilterInputDirective.prototype.ngOnChanges = function () {\n        var _this = this;\n        if (this.focused) {\n            this.nextTick(function () { return _this.element.nativeElement.focus(); });\n        }\n    };\n    FilterInputDirective.prototype.nextTick = function (fn) {\n        this.zone.runOutsideAngular(function () { return setTimeout(fn); });\n    };\n    FilterInputDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[filterInput]' // tslint:disable-line\n                },] },\n    ];\n    /** @nocollapse */\n    FilterInputDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: NgZone }\n    ]; };\n    FilterInputDirective.propDecorators = {\n        focused: [{ type: Input, args: ['filterInput',] }]\n    };\n    return FilterInputDirective;\n}());\n\nvar DROPDOWNLIST_DIRECTIVES = [\n    DropDownListComponent,\n    ValueTemplateDirective,\n    FilterInputDirective\n];\n/**\n * @hidden\n *\n * The exported package module.\n *\n * The package exports:\n * - `DropDownListComponent`&mdash;The DropDownList component class.\n * - `ItemTemplateDirective`&mdash;The item template directive.\n * - `ValueTemplateDirective`&mdash;The value template directive.\n * - `HeaderTemplateDirective`&mdash;The header template directive.\n * - `FooterTemplateDirective`&mdash;The footer template directive.\n */\nvar DropDownListModule = /** @class */ (function () {\n    function DropDownListModule() {\n    }\n    DropDownListModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [DROPDOWNLIST_DIRECTIVES],\n                    exports: [DROPDOWNLIST_DIRECTIVES, SharedDirectivesModule],\n                    imports: [SharedModule]\n                },] },\n    ];\n    return DropDownListModule;\n}());\n\nvar MULTISELECT_DIRECTIVES = [\n    MultiSelectComponent,\n    TagListComponent,\n    TagTemplateDirective,\n    GroupTagTemplateDirective,\n    SummaryTagDirective,\n    CustomItemTemplateDirective\n];\nvar Éµ0$2 = touchEnabled;\n/**\n * @hidden\n *\n * The exported package module.\n *\n * The package exports:\n * - `MultiSelectComponent`&mdash;The MultiSelect component class.\n * - `SummaryTagDirective`&mdash;The MultiSelect summary tag directive.\n * - `ItemTemplateDirective`&mdash;The item template directive.\n * - `CustomItemTemplateDirective`&mdash;The custom item template directive.\n * - `TagTemplateDirective`&mdash;The tag template directive.\n * - `SummaryTagTemplateDirective`&mdash;The summary tag template directive.\n * - `HeaderTemplateDirective`&mdash;The header template directive.\n * - `FooterTemplateDirective`&mdash;The footer template directive.\n * - `NoDataTemplateDirective`&mdash;The no-data template directive.\n */\nvar MultiSelectModule = /** @class */ (function () {\n    function MultiSelectModule() {\n    }\n    MultiSelectModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [MULTISELECT_DIRECTIVES],\n                    exports: [MULTISELECT_DIRECTIVES, SharedDirectivesModule],\n                    imports: [SharedModule],\n                    providers: [{ provide: TOUCH_ENABLED, useValue: Éµ0$2 }]\n                },] },\n    ];\n    return MultiSelectModule;\n}());\n\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Dropdowns components.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Dropdowns module\n * import { DropDownsModule } from '@progress/kendo-angular-dropdowns';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare the app component\n *     imports:      [BrowserModule, DropDownsModule], // import the Dropdowns module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nvar DropDownsModule = /** @class */ (function () {\n    function DropDownsModule() {\n    }\n    DropDownsModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [AutoCompleteModule, ComboBoxModule, DropDownListModule, MultiSelectModule]\n                },] },\n    ];\n    return DropDownsModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_VALUE_ACCESSOR, COMBOBOX_VALUE_ACCESSOR, DataService, DisabledItemsService, DROPDOWNLIST_VALUE_ACCESSOR, FilterInputDirective, FilterableDropDownComponentBase, ListItemDirective, CustomMessagesComponent, LocalizedMessagesDirective, Messages, NavigationService, SearchBarComponent, SelectionService, browser, detectDesktopBrowser, detectMobileOS, mobileOS, msPointers, pointers, touch, touchEnabled, NoDataTemplateDirective, TagTemplateDirective, TOUCH_ENABLED, isWindowAvailable, AutoCompleteComponent, ComboBoxComponent, DropDownListComponent, MultiSelectComponent, TagListComponent, ItemTemplateDirective, GroupTemplateDirective, FixedGroupTemplateDirective, CustomItemTemplateDirective, HeaderTemplateDirective, FooterTemplateDirective, ValueTemplateDirective, TemplateContextDirective, GroupTagTemplateDirective, SelectableDirective, SummaryTagDirective, FilterDirective, DropDownsModule, MultiSelectModule, SharedModule, AutoCompleteModule, ComboBoxModule, DropDownListModule, SharedDirectivesModule, ListComponent, PreventableEvent };\n"],"names":[],"mappingsuVM,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAmCD,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAkCJ,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAkCJ,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAyCJ,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAyCJ,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAiGF;;;;;gDAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmQA;;;;;gDAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiCA,AAGA;;;;;;;;;qEAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkIH,AAGA;;;;;;;;;;0GAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAkCJ,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAgDJ,AAKC;;;;;;;;;;;;2EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmOH,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ozBA,AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAqoqCA,AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA0DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAimgCH,AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAwDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAmCD,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAiCJ,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAkvCH,AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAgEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6BA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;;;;;;;;;;;;;;;OAuBC,AAKD;;;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyCA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+CA,AAKA;;;;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA2DA,AAKA;;;;;;;;;;;;;;;;;;;;;oBAQA;;;;;;;;;;;;;;;;;;mEAeA;;;;;;;;;;;;;KAaD,AAWC;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;;;;;;OAqBF,AAYD;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA4BJ;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMC;;;;;;;;;;;;;;;;KAgBD;;;;;;;;;;;;;;;;;;;;;;;;gDAOC;;;;;;;;;;;;;;;;;;;;KAoBD;;;;;;;;;;;;;gDAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAwJD;;;;;;;;;;;;;;gDAQC;;;;;;;;;;;;;;;;;;;;MAoBA,AAKA;;;;;;;;;;;;;;;;;;;oBAQA;;;;;;;;;;;;;;;;;;;;;;;KAuBD;;;;;;;;;;;;;;;;;gDAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA+BD;;;;;;;;;;;;;;;;;;;;;;;;gDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAqCD;;;;;;;;;;;;;;;gDAKC;;;;;;;;;"}