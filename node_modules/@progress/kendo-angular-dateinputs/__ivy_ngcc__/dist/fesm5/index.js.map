{"version":3,"file":"index.js","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-dateinputs/dist/fesm5/index.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { Injectable, Injector, EventEmitter, InjectionToken, Component, Inject, ElementRef, Renderer2, NgZone, Input, Output, HostBinding, ChangeDetectionStrategy, ChangeDetectorRef, ViewChild, Directive, TemplateRef, isDevMode, forwardRef, Optional, ContentChild, ViewContainerRef, HostListener, ViewChildren, ContentChildren, IterableDiffers, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, NgControl } from '@angular/forms';\nimport { LocalizationService, L10N_PREFIX, RTL, ComponentMessages } from '@progress/kendo-angular-l10n';\nimport { getDate, isEqual, cloneDate, addDays, addDecades, addCenturies, firstDecadeOfCentury, lastDecadeOfCentury, firstYearOfDecade, createDate, durationInCenturies, addYears, lastYearOfDecade, durationInDecades, addWeeks, addMonths, firstDayOfMonth, lastDayOfMonth, dayOfWeek, durationInMonths, firstMonthOfYear, lastMonthOfYear, durationInYears, weekInYear } from '@progress/kendo-date-math';\nimport { isDocumentAvailable, KendoInput, hasObservers, Keys, guid, EventsModule } from '@progress/kendo-angular-common';\nimport { IntlService, IntlModule } from '@progress/kendo-angular-intl';\nimport { ReplaySubject, Observable, combineLatest, of, interval, animationFrameScheduler, fromEvent, EMPTY, Subject, from, Subscription, BehaviorSubject, merge } from 'rxjs';\nimport { map, scan, takeWhile, tap, filter, debounceTime } from 'rxjs/operators';\nimport { PopupService, PopupModule } from '@progress/kendo-angular-popup';\nimport { __extends } from 'tslib';\nimport { CommonModule } from '@angular/common';\nimport { touchEnabled } from '@progress/kendo-common';\n\n/**\n * @hidden\n */\nvar Action;\n(function (Action) {\n    Action[Action[\"Left\"] = 0] = \"Left\";\n    Action[Action[\"Right\"] = 1] = \"Right\";\n    Action[Action[\"Up\"] = 2] = \"Up\";\n    Action[Action[\"Down\"] = 3] = \"Down\";\n    Action[Action[\"PrevView\"] = 4] = \"PrevView\";\n    Action[Action[\"NextView\"] = 5] = \"NextView\";\n    Action[Action[\"FirstInView\"] = 6] = \"FirstInView\";\n    Action[Action[\"LastInView\"] = 7] = \"LastInView\";\n    Action[Action[\"LowerView\"] = 8] = \"LowerView\";\n    Action[Action[\"UpperView\"] = 9] = \"UpperView\";\n})(Action || (Action = {}));\n\n/**\n * @hidden\n */\nvar EMPTY_SELECTIONRANGE = { start: null, end: null };\n\n/**\n * @hidden\n */\nvar MIDNIGHT_DATE = new Date(1980, 0, 1);\n/**\n * @hidden\n */\nvar MIN_DATE = new Date(1900, 0, 1);\n/**\n * @hidden\n */\nvar MAX_DATE = new Date(2099, 11, 31);\n/**\n * @hidden\n */\nvar MIN_TIME = new Date(1980, 0, 1);\n/**\n * @hidden\n */\nvar MAX_TIME = new Date(1980, 0, 1, 23, 59, 59);\n\n/* tslint:disable:no-bitwise max-line-length */\nvar isSet = function (value) { return value !== null && value !== undefined; };\nvar setter = function (method) { return function (date, value) {\n    var clone = cloneDate(date);\n    clone[method](value);\n    return clone;\n}; };\n/**\n * @hidden\n */\nvar setTime = function (origin, candidate) {\n    var date = cloneDate(origin);\n    date.setHours(candidate.getHours(), candidate.getMinutes(), candidate.getSeconds(), candidate.getMilliseconds());\n    return date;\n};\nvar normalizeTimes = function (candidate, min, max) { return ({\n    candidateValue: setTime(MIDNIGHT_DATE, candidate),\n    maxValue: addDays(setTime(MIDNIGHT_DATE, max), min.getHours() < max.getHours() ||\n        (min.getHours() === max.getHours() && min.getMinutes() < max.getMinutes()) ? 0 : 1),\n    minValue: setTime(MIDNIGHT_DATE, min)\n}); };\n/**\n * @hidden\n */\nvar setHours = setter('setHours');\n/**\n * @hidden\n */\nvar setMinutes = setter('setMinutes');\n/**\n * @hidden\n */\nvar setSeconds = setter('setSeconds');\n/**\n * @hidden\n */\nvar range = function (start, end, step) {\n    if (step === void 0) { step = 1; }\n    var result = [];\n    for (var i = start; i < end; i = i + step) {\n        result.push(i);\n    }\n    return result;\n};\n/**\n * @hidden\n */\nvar isInRange = function (candidate, min, max) { return (!candidate || !((min && min > candidate) || (max && max < candidate))); };\n/**\n * @hidden\n */\nvar isInTimeRange = function (candidate, min, max) {\n    if (!candidate || !min || !max) {\n        return true;\n    }\n    var _a = normalizeTimes(candidate, min, max), candidateValue = _a.candidateValue, minValue = _a.minValue, maxValue = _a.maxValue;\n    return minValue <= candidateValue && candidateValue <= maxValue;\n};\n/**\n * @hidden\n */\nvar isValidRange = function (min, max) { return (!isSet(min) || !isSet(max) || min <= max); };\n/**\n * @hidden\n */\nvar dateInRange = function (candidate, min, max) {\n    if (!candidate) {\n        return candidate;\n    }\n    if (min && candidate < min) {\n        return cloneDate(min);\n    }\n    if (max && candidate > max) {\n        return cloneDate(max);\n    }\n    return candidate;\n};\n/**\n * @hidden\n */\nvar timeInRange = function (candidate, min, max) {\n    if (!candidate || !min || !max) {\n        return candidate;\n    }\n    var _a = normalizeTimes(candidate, min, max), candidateValue = _a.candidateValue, minValue = _a.minValue, maxValue = _a.maxValue;\n    if (candidateValue < minValue) {\n        return setTime(candidate, min);\n    }\n    if (candidateValue > maxValue) {\n        return setTime(candidate, max);\n    }\n    return candidate;\n};\n/**\n * @hidden\n */\nvar getNow = function () { return new Date(); };\n/**\n * @hidden\n */\nvar getToday = function () { return getDate(new Date()); };\n/**\n * @hidden\n */\nvar noop = function (_) { }; // tslint:disable-line:no-empty\n/**\n * @hidden\n */\nvar isWindowAvailable = function () {\n    return typeof window !== 'undefined';\n};\n/**\n * @hidden\n */\nvar stringifyClassObject = function (classes) {\n    var pushToAcc = function (acc, cls) { return classes[cls] ? acc.concat(cls) : acc; };\n    return Object.keys(classes).reduce(pushToAcc, []).join(' ');\n};\n/**\n * @hidden\n */\nvar shiftWeekNames = function (names, offset) { return (names.slice(offset).concat(names.slice(0, offset))); };\n/**\n * @hidden\n */\nvar approximateStringMatching = function (oldTextOrigin, oldFormat, newTextOrigin, caret) {\n    // Remove the right part of the cursor.\n    //oldFormat = oldFormat.substring(0, caret + oldText.length - newText.length);\n    var oldIndex = caret + oldTextOrigin.length - newTextOrigin.length;\n    var oldTextSeparator = oldTextOrigin[oldIndex];\n    var oldText = oldTextOrigin.substring(0, caret + oldTextOrigin.length - newTextOrigin.length);\n    var newText = newTextOrigin.substring(0, caret);\n    var diff = [];\n    // Handle typing a single character over the same selection.\n    if (oldText === newText && caret > 0) {\n        diff.push([oldFormat[caret - 1], newText[caret - 1]]);\n        return diff;\n    }\n    if (oldText.indexOf(newText) === 0 && (newText.length === 0 || oldFormat[newText.length - 1] !== oldFormat[newText.length])) {\n        // Handle Delete/Backspace.\n        var deletedSymbol = \"\";\n        //XXX:\n        // Whole text is replaced with a same char\n        // Nasty patch required to keep the selection in the first segment\n        if (newText.length === 1) {\n            diff.push([oldFormat[0], newText[0]]);\n        }\n        for (var i = newText.length; i < oldText.length; i++) {\n            if (oldFormat[i] !== deletedSymbol && oldFormat[i] !== \"_\") {\n                deletedSymbol = oldFormat[i];\n                diff.push([deletedSymbol, \"\"]);\n            }\n        }\n        return diff;\n    }\n    // Handle inserting text (the new text is longer than the previous one).\n    // Handle typing over a literal as well.\n    if (newText.indexOf(oldText) === 0 || oldFormat[caret - 1] === \"_\") {\n        var symbol = oldFormat[0];\n        for (var i = Math.max(0, oldText.length - 1); i < oldFormat.length; i++) {\n            if (oldFormat[i] !== \"_\") {\n                symbol = oldFormat[i];\n                break;\n            }\n        }\n        return [[symbol, newText[caret - 1]]];\n    }\n    // Handle entering a space or a separator, for navigation to the next item.\n    if (newText[newText.length - 1] === \" \" || (newText[newText.length - 1] === oldTextSeparator && oldFormat[oldIndex] === '_')) {\n        return [[oldFormat[caret - 1], \"_\"]];\n    }\n    // Handle typing over a correctly selected part.\n    return [[oldFormat[caret - 1], newText[caret - 1]]];\n};\n/**\n * @hidden\n */\nvar domContainerFactory = function (type) { return function (children, classes, styles) {\n    if (classes === void 0) { classes = \"\"; }\n    if (styles === void 0) { styles = {}; }\n    var container = document.createElement(type);\n    container.className = classes;\n    Object.keys(styles).map(function (key) { return container.style[key] = styles[key]; });\n    if (typeof children === 'string') {\n        container.innerHTML = children || '';\n    }\n    else {\n        (children || []).forEach(function (child) { return child && container.appendChild(child); });\n    }\n    return container;\n}; };\n/**\n * @hidden\n */\nvar hasChange = function (changes, field) { return changes[field] !== undefined; };\n/**\n * @hidden\n */\nvar hasExistingValue = function (changes, field) { return changes[field] && changes[field].currentValue !== undefined && changes[field].currentValue !== null; };\n/**\n * @hidden\n */\nvar isInSelectionRange = function (value, selectionRange) {\n    var _a = selectionRange || EMPTY_SELECTIONRANGE, start = _a.start, end = _a.end;\n    if (!start || !end) {\n        return false;\n    }\n    return start < value && value < end;\n};\n/**\n * @hidden\n */\nvar either = function (value1, value2) { return value1 || value2; };\n/**\n * @hidden\n */\nvar clampRange = function (value) { return ({ start: value, end: value }); };\n/**\n * @hidden\n */\nvar isEqualRange = function (initial, updated) {\n    var _a = initial || EMPTY_SELECTIONRANGE, initialStart = _a.start, initialEnd = _a.end;\n    var _b = updated || EMPTY_SELECTIONRANGE, updatedStart = _b.start, updatedEnd = _b.end;\n    return isEqual(initialStart, updatedStart) && isEqual(initialEnd, updatedEnd);\n};\n/**\n * @hidden\n *\n * Creates a new date based on the date information from the specified date portion\n * and the time information from the time portion.\n * If a parameter is not provided, returns `null`.\n */\nvar mergeDateAndTime = function (date, time) {\n    if (!(date && time)) {\n        return null;\n    }\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds());\n};\n/**\n * @hidden\n */\nvar lastMillisecondOfDate = function (date) {\n    if (!date) {\n        return null;\n    }\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59, 999);\n};\n/**\n * @hidden\n *\n * Returns an array with dates ranging between and including the specified start and\n * end dates that are evaluated as disabled.\n */\nvar disabledDatesInRange = function (start, end, isDateDisabled) {\n    if (!(start && end && isDateDisabled) || (start > end)) {\n        return [];\n    }\n    var dates = [];\n    var current = start;\n    while (current <= end) {\n        if (isDateDisabled(current)) {\n            dates.push(current);\n        }\n        current = addDays(current, 1);\n    }\n    return dates;\n};\n\nvar _a;\nvar EMPTY_DATA = [[]];\nvar CELLS_LENGTH = 5;\nvar ROWS_LENGTH = 2;\nvar ACTIONS = (_a = {},\n    _a[Action.Left] = function (date) { return addDecades(date, -1); },\n    _a[Action.Up] = function (date) { return addDecades(date, -5); },\n    _a[Action.Right] = function (date) { return addDecades(date, 1); },\n    _a[Action.Down] = function (date) { return addDecades(date, 5); },\n    _a[Action.PrevView] = function (date) { return addCenturies(date, -1); },\n    _a[Action.NextView] = function (date) { return addCenturies(date, 1); },\n    _a[Action.FirstInView] = function (date) { return firstDecadeOfCentury(date); },\n    _a[Action.LastInView] = function (date) { return lastDecadeOfCentury(date); },\n    _a);\n/**\n * @hidden\n */\nvar CenturyViewService = /** @class */ (function () {\n    function CenturyViewService() {\n    }\n    CenturyViewService.prototype.addToDate = function (min, skip) {\n        return addCenturies(min, skip);\n    };\n    CenturyViewService.prototype.datesList = function (start, count) {\n        return range(0, count).map(function (i) { return addCenturies(start, i); });\n    };\n    CenturyViewService.prototype.data = function (options) {\n        var _this = this;\n        var cellUID = options.cellUID, focusedDate = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, _a = options.selectionRange, selectionRange = _a === void 0 ? EMPTY_SELECTIONRANGE : _a, viewDate = options.viewDate;\n        if (!viewDate) {\n            return EMPTY_DATA;\n        }\n        var cells = range(0, CELLS_LENGTH);\n        var firstDate = firstDecadeOfCentury(viewDate);\n        var lastDate = lastDecadeOfCentury(viewDate);\n        var isSelectedDateInRange = isInRange(selectedDate, min, max);\n        var today = getToday();\n        return range(0, ROWS_LENGTH).map(function (rowOffset) {\n            var baseDate = addDecades(firstDate, rowOffset * CELLS_LENGTH);\n            return cells.map(function (cellOffset) {\n                var cellDate = _this.normalize(addDecades(baseDate, cellOffset), min, max);\n                if (!_this.isInRange(cellDate, min, max)) {\n                    return null;\n                }\n                var isRangeStart = _this.isEqual(cellDate, selectionRange.start);\n                var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);\n                var isInMiddle = !isRangeStart && !isRangeEnd;\n                var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);\n                return {\n                    formattedValue: _this.value(cellDate),\n                    id: \"\" + cellUID + cellDate.getTime(),\n                    isFocused: _this.isEqual(cellDate, focusedDate),\n                    isSelected: isActiveView && isSelectedDateInRange && _this.isEqual(cellDate, selectedDate),\n                    isWeekend: false,\n                    isRangeStart: isRangeStart,\n                    isRangeMid: isRangeMid,\n                    isRangeEnd: isRangeEnd,\n                    isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastDate),\n                    isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstDate),\n                    isToday: _this.isEqual(cellDate, today),\n                    title: _this.cellTitle(cellDate),\n                    value: cellDate\n                };\n            });\n        });\n    };\n    CenturyViewService.prototype.isEqual = function (candidate, expected) {\n        if (!candidate || !expected) {\n            return false;\n        }\n        return firstYearOfDecade(candidate).getFullYear() === firstYearOfDecade(expected).getFullYear();\n    };\n    CenturyViewService.prototype.isInArray = function (date, dates) {\n        if (!dates.length) {\n            return false;\n        }\n        var year = date.getFullYear();\n        return dates[0].getFullYear() <= year && year <= (dates[dates.length - 1].getFullYear() + 99);\n    };\n    CenturyViewService.prototype.isInRange = function (candidate, min, max) {\n        var year = firstYearOfDecade(candidate).getFullYear();\n        var aboveMin = !min || firstYearOfDecade(min).getFullYear() <= year;\n        var belowMax = !max || year <= firstYearOfDecade(max).getFullYear();\n        return aboveMin && belowMax;\n    };\n    CenturyViewService.prototype.beginningOfPeriod = function (date) {\n        if (!date) {\n            return date;\n        }\n        var firstYear = firstYearOfDecade(firstDecadeOfCentury(date));\n        return createDate(firstYear.getFullYear(), 0, 1);\n    };\n    CenturyViewService.prototype.isRangeStart = function (value) {\n        return value.getFullYear() % 1000 === 0;\n    };\n    CenturyViewService.prototype.move = function (value, action) {\n        var modifier = ACTIONS[action];\n        if (!modifier) {\n            return value;\n        }\n        return modifier(value);\n    };\n    CenturyViewService.prototype.cellTitle = function (value) {\n        return firstYearOfDecade(value).getFullYear().toString();\n    };\n    CenturyViewService.prototype.navigationTitle = function (value) {\n        return value ? firstDecadeOfCentury(value).getFullYear().toString() : '';\n    };\n    CenturyViewService.prototype.title = function (value) {\n        if (!value) {\n            return '';\n        }\n        return firstDecadeOfCentury(value).getFullYear() + \" - \" + lastDecadeOfCentury(value).getFullYear();\n    };\n    CenturyViewService.prototype.rowLength = function (_) {\n        return CELLS_LENGTH;\n    };\n    CenturyViewService.prototype.skip = function (value, min) {\n        return durationInCenturies(min, value);\n    };\n    CenturyViewService.prototype.total = function (min, max) {\n        return durationInCenturies(min, max) + 1;\n    };\n    CenturyViewService.prototype.value = function (current) {\n        return current ? firstYearOfDecade(current).getFullYear().toString() : '';\n    };\n    CenturyViewService.prototype.viewDate = function (date, max, viewsCount) {\n        if (viewsCount === void 0) { viewsCount = 1; }\n        var viewsInRange = this.total(date, max);\n        if (viewsInRange < viewsCount) {\n            var centuriesToSubtract = viewsCount - viewsInRange;\n            return addCenturies(date, -1 * centuriesToSubtract);\n        }\n        return date;\n    };\n    CenturyViewService.prototype.normalize = function (cellDate, min, max) {\n        if (cellDate < min && this.isEqual(cellDate, min)) {\n            return cloneDate(min);\n        }\n        if (cellDate > max && this.isEqual(cellDate, max)) {\n            return cloneDate(max);\n        }\n        return cellDate;\n    };\n    CenturyViewService.decorators = [\n        { type: Injectable },\n    ];\n    return CenturyViewService;\n}());\n\nvar _a$1;\nvar EMPTY_DATA$1 = [[]];\nvar CELLS_LENGTH$1 = 5;\nvar ROWS_LENGTH$1 = 2;\nvar ACTIONS$1 = (_a$1 = {},\n    _a$1[Action.Left] = function (date) { return addYears(date, -1); },\n    _a$1[Action.Up] = function (date) { return addYears(date, -5); },\n    _a$1[Action.Right] = function (date) { return addYears(date, 1); },\n    _a$1[Action.Down] = function (date) { return addYears(date, 5); },\n    _a$1[Action.PrevView] = function (date) { return addDecades(date, -1); },\n    _a$1[Action.NextView] = function (date) { return addDecades(date, 1); },\n    _a$1[Action.FirstInView] = function (date) { return firstYearOfDecade(date); },\n    _a$1[Action.LastInView] = function (date) { return lastYearOfDecade(date); },\n    _a$1);\n/**\n * @hidden\n */\nvar DecadeViewService = /** @class */ (function () {\n    function DecadeViewService() {\n    }\n    DecadeViewService.prototype.addToDate = function (min, skip) {\n        return addDecades(min, skip);\n    };\n    DecadeViewService.prototype.datesList = function (start, count) {\n        return range(0, count).map(function (i) { return addDecades(start, i); });\n    };\n    DecadeViewService.prototype.data = function (options) {\n        var _this = this;\n        var cellUID = options.cellUID, focusedDate = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, _a = options.selectionRange, selectionRange = _a === void 0 ? EMPTY_SELECTIONRANGE : _a, viewDate = options.viewDate;\n        if (!viewDate) {\n            return EMPTY_DATA$1;\n        }\n        var cells = range(0, CELLS_LENGTH$1);\n        var firstDate = firstYearOfDecade(viewDate);\n        var lastDate = lastYearOfDecade(viewDate);\n        var isSelectedDateInRange = isInRange(selectedDate, min, max);\n        var today = getToday();\n        return range(0, ROWS_LENGTH$1).map(function (rowOffset) {\n            var baseDate = addYears(firstDate, rowOffset * CELLS_LENGTH$1);\n            return cells.map(function (cellOffset) {\n                var cellDate = _this.normalize(addYears(baseDate, cellOffset), min, max);\n                if (!_this.isInRange(cellDate, min, max)) {\n                    return null;\n                }\n                var isRangeStart = _this.isEqual(cellDate, selectionRange.start);\n                var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);\n                var isInMiddle = !isRangeStart && !isRangeEnd;\n                var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);\n                return {\n                    formattedValue: _this.value(cellDate),\n                    id: \"\" + cellUID + cellDate.getTime(),\n                    isFocused: _this.isEqual(cellDate, focusedDate),\n                    isSelected: isActiveView && isSelectedDateInRange && _this.isEqual(cellDate, selectedDate),\n                    isWeekend: false,\n                    isRangeStart: isRangeStart,\n                    isRangeMid: isRangeMid,\n                    isRangeEnd: isRangeEnd,\n                    isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastDate),\n                    isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstDate),\n                    isToday: _this.isEqual(cellDate, today),\n                    title: _this.cellTitle(cellDate),\n                    value: cellDate\n                };\n            });\n        });\n    };\n    DecadeViewService.prototype.isEqual = function (candidate, expected) {\n        if (!candidate || !expected) {\n            return false;\n        }\n        return candidate.getFullYear() === expected.getFullYear();\n    };\n    DecadeViewService.prototype.isInArray = function (date, dates) {\n        if (!dates.length) {\n            return false;\n        }\n        var year = date.getFullYear();\n        return dates[0].getFullYear() <= year && year <= (dates[dates.length - 1].getFullYear() + 9);\n    };\n    DecadeViewService.prototype.isInRange = function (candidate, min, max) {\n        var year = candidate.getFullYear();\n        var aboveMin = !min || min.getFullYear() <= year;\n        var belowMax = !max || year <= max.getFullYear();\n        return aboveMin && belowMax;\n    };\n    DecadeViewService.prototype.beginningOfPeriod = function (date) {\n        if (!date) {\n            return date;\n        }\n        var firstYear = firstYearOfDecade(date);\n        return createDate(firstYear.getFullYear(), 0, 1);\n    };\n    DecadeViewService.prototype.isRangeStart = function (value) {\n        return value.getFullYear() % 100 === 0;\n    };\n    DecadeViewService.prototype.move = function (value, action) {\n        var modifier = ACTIONS$1[action];\n        if (!modifier) {\n            return value;\n        }\n        return modifier(value);\n    };\n    DecadeViewService.prototype.cellTitle = function (value) {\n        return value.getFullYear().toString();\n    };\n    DecadeViewService.prototype.navigationTitle = function (value) {\n        return value ? firstYearOfDecade(value).getFullYear().toString() : '';\n    };\n    DecadeViewService.prototype.title = function (value) {\n        if (!value) {\n            return '';\n        }\n        return firstYearOfDecade(value).getFullYear() + \" - \" + lastYearOfDecade(value).getFullYear();\n    };\n    DecadeViewService.prototype.rowLength = function (_) {\n        return CELLS_LENGTH$1;\n    };\n    DecadeViewService.prototype.skip = function (value, min) {\n        return durationInDecades(min, value);\n    };\n    DecadeViewService.prototype.total = function (min, max) {\n        return durationInDecades(min, max) + 1;\n    };\n    DecadeViewService.prototype.value = function (current) {\n        return current ? current.getFullYear().toString() : '';\n    };\n    DecadeViewService.prototype.viewDate = function (date, max, viewsCount) {\n        if (viewsCount === void 0) { viewsCount = 1; }\n        var viewsInRange = this.total(date, max);\n        if (viewsInRange < viewsCount) {\n            var decadesToSubtract = viewsCount - viewsInRange;\n            return addDecades(date, -1 * decadesToSubtract);\n        }\n        return date;\n    };\n    DecadeViewService.prototype.normalize = function (cellDate, min, max) {\n        if (cellDate < min && this.isEqual(cellDate, min)) {\n            return cloneDate(min);\n        }\n        if (cellDate > max && this.isEqual(cellDate, max)) {\n            return cloneDate(max);\n        }\n        return cellDate;\n    };\n    DecadeViewService.decorators = [\n        { type: Injectable },\n    ];\n    return DecadeViewService;\n}());\n\nvar _a$2;\nvar EMPTY_DATA$2 = [[]];\nvar CELLS_LENGTH$2 = 7;\nvar ROWS_LENGTH$2 = 6;\nvar ACTIONS$2 = (_a$2 = {},\n    _a$2[Action.Left] = function (date) { return addDays(date, -1); },\n    _a$2[Action.Up] = function (date) { return addWeeks(date, -1); },\n    _a$2[Action.Right] = function (date) { return addDays(date, 1); },\n    _a$2[Action.Down] = function (date) { return addWeeks(date, 1); },\n    _a$2[Action.PrevView] = function (date) { return addMonths(date, -1); },\n    _a$2[Action.NextView] = function (date) { return addMonths(date, 1); },\n    _a$2[Action.FirstInView] = function (date) { return firstDayOfMonth(date); },\n    _a$2[Action.LastInView] = function (date) { return lastDayOfMonth(date); },\n    _a$2);\n/**\n * @hidden\n */\nvar MonthViewService = /** @class */ (function () {\n    function MonthViewService(_intlService) {\n        this._intlService = _intlService;\n    }\n    MonthViewService.prototype.addToDate = function (min, skip) {\n        return addMonths(min, skip);\n    };\n    MonthViewService.prototype.datesList = function (start, count) {\n        return range(0, count).map(function (i) { return addMonths(start, i); });\n    };\n    MonthViewService.prototype.data = function (options) {\n        var _this = this;\n        var cellUID = options.cellUID, focusedDate = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, _a = options.selectionRange, selectionRange = _a === void 0 ? EMPTY_SELECTIONRANGE : _a, viewDate = options.viewDate, _b = options.isDateDisabled, isDateDisabled = _b === void 0 ? function () { return false; } : _b;\n        if (!viewDate) {\n            return EMPTY_DATA$2;\n        }\n        var firstMonthDate = firstDayOfMonth(viewDate);\n        var firstMonthDay = getDate(firstMonthDate);\n        var lastMonthDate = lastDayOfMonth(viewDate);\n        var lastMonthDay = getDate(lastMonthDate);\n        var backward = -1;\n        var isSelectedDateInRange = isInRange(selectedDate, min, max);\n        var date = dayOfWeek(firstMonthDate, this._intlService.firstDay(), backward);\n        var cells = range(0, CELLS_LENGTH$2);\n        var today = getToday();\n        return range(0, ROWS_LENGTH$2).map(function (rowOffset) {\n            var baseDate = addDays(date, rowOffset * CELLS_LENGTH$2);\n            return cells.map(function (cellOffset) {\n                var cellDate = _this.normalize(addDays(baseDate, cellOffset), min, max);\n                var cellDay = getDate(cellDate);\n                var otherMonth = cellDay < firstMonthDay || cellDay > lastMonthDay;\n                var outOfRange = cellDate < min || cellDate > max;\n                if (otherMonth || outOfRange) {\n                    return null;\n                }\n                var isRangeStart = _this.isEqual(cellDate, selectionRange.start);\n                var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);\n                var isInMiddle = !isRangeStart && !isRangeEnd;\n                var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);\n                return {\n                    formattedValue: _this.value(cellDate),\n                    id: \"\" + cellUID + cellDate.getTime(),\n                    isFocused: _this.isEqual(cellDate, focusedDate),\n                    isSelected: isActiveView && isSelectedDateInRange && _this.isEqual(cellDate, selectedDate),\n                    isWeekend: _this.isWeekend(cellDate),\n                    isRangeStart: isRangeStart,\n                    isRangeMid: isRangeMid,\n                    isRangeEnd: isRangeEnd,\n                    isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstMonthDate),\n                    isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastMonthDate),\n                    isToday: _this.isEqual(cellDate, today),\n                    title: _this.cellTitle(cellDate),\n                    value: cellDate,\n                    isDisabled: isDateDisabled(cellDate)\n                };\n            });\n        });\n    };\n    MonthViewService.prototype.isEqual = function (candidate, expected) {\n        if (!candidate || !expected) {\n            return false;\n        }\n        return getDate(candidate).getTime() === getDate(expected).getTime();\n    };\n    MonthViewService.prototype.isInArray = function (date, dates) {\n        if (dates.length === 0) {\n            return false;\n        }\n        var lowerBound = this.beginningOfPeriod(dates[0]);\n        var upperBound = this.beginningOfPeriod(addMonths(dates[dates.length - 1], 1));\n        return lowerBound <= date && date < upperBound;\n    };\n    MonthViewService.prototype.isInRange = function (candidate, min, max) {\n        var value = getDate(candidate);\n        var aboveMin = !min || getDate(min) <= value;\n        var belowMax = !max || value <= getDate(max);\n        return aboveMin && belowMax;\n    };\n    MonthViewService.prototype.beginningOfPeriod = function (date) {\n        if (!date) {\n            return date;\n        }\n        return createDate(date.getFullYear(), date.getMonth(), 1);\n    };\n    MonthViewService.prototype.isRangeStart = function (value) {\n        return !value.getMonth();\n    };\n    MonthViewService.prototype.move = function (value, action) {\n        var modifier = ACTIONS$2[action];\n        if (!modifier) {\n            return value;\n        }\n        return modifier(value);\n    };\n    MonthViewService.prototype.cellTitle = function (value) {\n        return this._intlService.formatDate(value, 'D');\n    };\n    MonthViewService.prototype.navigationTitle = function (value) {\n        if (!value) {\n            return '';\n        }\n        return this.isRangeStart(value) ? value.getFullYear().toString() : this.abbrMonthNames()[value.getMonth()];\n    };\n    MonthViewService.prototype.title = function (current) {\n        return this.wideMonthNames()[current.getMonth()] + \" \" + current.getFullYear();\n    };\n    MonthViewService.prototype.rowLength = function (prependCell) {\n        return CELLS_LENGTH$2 + (prependCell ? 1 : 0);\n    };\n    MonthViewService.prototype.skip = function (value, min) {\n        return durationInMonths(min, value);\n    };\n    MonthViewService.prototype.total = function (min, max) {\n        return durationInMonths(min, max) + 1;\n    };\n    MonthViewService.prototype.value = function (current) {\n        return current ? current.getDate().toString() : \"\";\n    };\n    MonthViewService.prototype.viewDate = function (date, max, viewsCount) {\n        if (viewsCount === void 0) { viewsCount = 1; }\n        var viewsInRange = this.total(date, max);\n        if (viewsInRange < viewsCount) {\n            var monthsToSubtract = viewsCount - viewsInRange;\n            return addMonths(date, -1 * monthsToSubtract);\n        }\n        return date;\n    };\n    MonthViewService.prototype.isWeekend = function (date) {\n        var _a = this._intlService.weekendRange(), start = _a.start, end = _a.end;\n        var day = date.getDay();\n        if (end < start) {\n            return day <= end || start <= day;\n        }\n        return start <= day && day <= end;\n    };\n    MonthViewService.prototype.abbrMonthNames = function () {\n        return this._intlService.dateFormatNames({ nameType: 'abbreviated', type: 'months' });\n    };\n    MonthViewService.prototype.normalize = function (cellDate, min, max) {\n        if (cellDate < min && this.isEqual(cellDate, min)) {\n            return cloneDate(min);\n        }\n        if (cellDate > max && this.isEqual(cellDate, max)) {\n            return cloneDate(max);\n        }\n        return cellDate;\n    };\n    MonthViewService.prototype.wideMonthNames = function () {\n        return this._intlService.dateFormatNames({ nameType: 'wide', type: 'months' });\n    };\n    MonthViewService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    MonthViewService.ctorParameters = function () { return [\n        { type: IntlService }\n    ]; };\n    return MonthViewService;\n}());\n\nvar _a$3;\nvar EMPTY_DATA$3 = [[]];\nvar CELLS_LENGTH$3 = 5;\nvar ROWS_LENGTH$3 = 3;\nvar upStep = function (month) {\n    if (month > 4) {\n        return -5;\n    }\n    if (month < 2) {\n        return -2;\n    }\n    return -7;\n};\nvar downStep = function (month) {\n    if (month < 7) {\n        return 5;\n    }\n    if (month < 10) {\n        return 7;\n    }\n    return 2;\n};\nvar ACTIONS$3 = (_a$3 = {},\n    _a$3[Action.Left] = function (date) { return addMonths(date, -1); },\n    _a$3[Action.Up] = function (date) { return addMonths(date, upStep(date.getMonth())); },\n    _a$3[Action.Right] = function (date) { return addMonths(date, 1); },\n    _a$3[Action.Down] = function (date) { return addMonths(date, downStep(date.getMonth())); },\n    _a$3[Action.PrevView] = function (date) { return addYears(date, -1); },\n    _a$3[Action.NextView] = function (date) { return addYears(date, 1); },\n    _a$3[Action.FirstInView] = function (date) { return firstMonthOfYear(date); },\n    _a$3[Action.LastInView] = function (date) { return lastMonthOfYear(date); },\n    _a$3);\n/**\n * @hidden\n */\nvar YearViewService = /** @class */ (function () {\n    function YearViewService(_intlService) {\n        this._intlService = _intlService;\n    }\n    YearViewService.prototype.addToDate = function (min, skip) {\n        return addYears(min, skip);\n    };\n    YearViewService.prototype.datesList = function (start, count) {\n        return range(0, count).map(function (i) { return addYears(start, i); });\n    };\n    YearViewService.prototype.data = function (options) {\n        var _this = this;\n        var cellUID = options.cellUID, focusedDate = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, _a = options.selectionRange, selectionRange = _a === void 0 ? EMPTY_SELECTIONRANGE : _a, viewDate = options.viewDate;\n        if (!viewDate) {\n            return EMPTY_DATA$3;\n        }\n        var months = this.abbrMonthNames();\n        var isSelectedDateInRange = isInRange(selectedDate, min, max);\n        var firstDate = firstMonthOfYear(viewDate);\n        var lastDate = lastMonthOfYear(viewDate);\n        var currentYear = firstDate.getFullYear();\n        var cells = range(0, CELLS_LENGTH$3);\n        var today = getToday();\n        return range(0, ROWS_LENGTH$3).map(function (rowOffset) {\n            var baseDate = addMonths(firstDate, rowOffset * CELLS_LENGTH$3);\n            return cells.map(function (cellOffset) {\n                var cellDate = _this.normalize(addMonths(baseDate, cellOffset), min, max);\n                var changedYear = currentYear < cellDate.getFullYear();\n                if (!_this.isInRange(cellDate, min, max) || changedYear) {\n                    return null;\n                }\n                var isRangeStart = _this.isEqual(cellDate, selectionRange.start);\n                var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);\n                var isInMiddle = !isRangeStart && !isRangeEnd;\n                var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);\n                return {\n                    formattedValue: months[cellDate.getMonth()],\n                    id: \"\" + cellUID + cellDate.getTime(),\n                    isFocused: _this.isEqual(cellDate, focusedDate),\n                    isSelected: isActiveView && isSelectedDateInRange && _this.isEqual(cellDate, selectedDate),\n                    isWeekend: false,\n                    isRangeStart: isRangeStart,\n                    isRangeMid: isRangeMid,\n                    isRangeEnd: isRangeEnd,\n                    isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastDate),\n                    isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstDate),\n                    isToday: _this.isEqual(cellDate, today),\n                    title: _this.cellTitle(cellDate),\n                    value: cellDate\n                };\n            });\n        });\n    };\n    YearViewService.prototype.isEqual = function (candidate, expected) {\n        if (!candidate || !expected) {\n            return false;\n        }\n        return candidate.getFullYear() === expected.getFullYear() &&\n            candidate.getMonth() === expected.getMonth();\n    };\n    YearViewService.prototype.isInArray = function (date, dates) {\n        if (!dates.length) {\n            return false;\n        }\n        var year = date.getFullYear();\n        return dates[0].getFullYear() <= year && year <= dates[dates.length - 1].getFullYear();\n    };\n    YearViewService.prototype.isInRange = function (candidate, min, max) {\n        var candidateValue = createDate(candidate.getFullYear(), candidate.getMonth(), 1);\n        var aboveMin = !min || createDate(min.getFullYear(), min.getMonth(), 1) <= candidateValue;\n        var belowMax = !max || candidateValue <= createDate(max.getFullYear(), max.getMonth(), 1);\n        return aboveMin && belowMax;\n    };\n    YearViewService.prototype.beginningOfPeriod = function (date) {\n        if (!date) {\n            return date;\n        }\n        return createDate(date.getFullYear(), 0, 1);\n    };\n    YearViewService.prototype.isRangeStart = function (value) {\n        return value.getFullYear() % 10 === 0;\n    };\n    YearViewService.prototype.move = function (value, action) {\n        var modifier = ACTIONS$3[action];\n        if (!modifier) {\n            return value;\n        }\n        return modifier(value);\n    };\n    YearViewService.prototype.cellTitle = function (value) {\n        return value.getFullYear() + \" \" + this.value(value);\n    };\n    YearViewService.prototype.navigationTitle = function (value) {\n        return this.title(value);\n    };\n    YearViewService.prototype.title = function (current) {\n        return current ? current.getFullYear().toString() : '';\n    };\n    YearViewService.prototype.rowLength = function (_) {\n        return CELLS_LENGTH$3;\n    };\n    YearViewService.prototype.skip = function (value, min) {\n        return durationInYears(min, value);\n    };\n    YearViewService.prototype.total = function (min, max) {\n        return durationInYears(min, max) + 1;\n    };\n    YearViewService.prototype.value = function (current) {\n        return current ? this.abbrMonthNames()[current.getMonth()] : '';\n    };\n    YearViewService.prototype.viewDate = function (date, max, viewsCount) {\n        if (viewsCount === void 0) { viewsCount = 1; }\n        var viewsInRange = this.total(date, max);\n        if (viewsInRange < viewsCount) {\n            var yearsToSubtract = viewsCount - viewsInRange;\n            return addYears(date, -1 * yearsToSubtract);\n        }\n        return date;\n    };\n    YearViewService.prototype.abbrMonthNames = function () {\n        return this._intlService.dateFormatNames({ nameType: 'abbreviated', type: 'months' });\n    };\n    YearViewService.prototype.normalize = function (cellDate, min, max) {\n        if (cellDate < min && this.isEqual(cellDate, min)) {\n            return cloneDate(min);\n        }\n        if (cellDate > max && this.isEqual(cellDate, max)) {\n            return cloneDate(max);\n        }\n        return cellDate;\n    };\n    YearViewService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    YearViewService.ctorParameters = function () { return [\n        { type: IntlService }\n    ]; };\n    return YearViewService;\n}());\n\n/**\n * @hidden\n *\n * The Enum which defines all possible Calendar view types.\n */\nvar CalendarViewEnum;\n(function (CalendarViewEnum) {\n    CalendarViewEnum[CalendarViewEnum[\"month\"] = 0] = \"month\";\n    CalendarViewEnum[CalendarViewEnum[\"year\"] = 1] = \"year\";\n    CalendarViewEnum[CalendarViewEnum[\"decade\"] = 2] = \"decade\";\n    CalendarViewEnum[CalendarViewEnum[\"century\"] = 3] = \"century\";\n})(CalendarViewEnum || (CalendarViewEnum = {}));\n\nvar _a$4;\nvar services = (_a$4 = {},\n    _a$4[CalendarViewEnum.month] = MonthViewService,\n    _a$4[CalendarViewEnum.year] = YearViewService,\n    _a$4[CalendarViewEnum.decade] = DecadeViewService,\n    _a$4[CalendarViewEnum.century] = CenturyViewService,\n    _a$4);\nvar viewOffset = function (view, offset) {\n    var candidate = CalendarViewEnum[CalendarViewEnum[view + offset]];\n    return candidate !== undefined ? candidate : view;\n};\n/**\n * @hidden\n */\nvar BusViewService = /** @class */ (function () {\n    function BusViewService(injector) {\n        this.injector = injector;\n        this.viewChanged = new EventEmitter();\n        this.bottom = CalendarViewEnum.month;\n        this.top = CalendarViewEnum.century;\n    }\n    BusViewService.prototype.configure = function (bottom, top) {\n        this.bottom = bottom;\n        this.top = top;\n    };\n    BusViewService.prototype.service = function (view) {\n        var serviceType = services[view];\n        return serviceType ? this.injector.get(serviceType) : null;\n    };\n    BusViewService.prototype.moveDown = function (view) {\n        this.move(view, -1);\n    };\n    BusViewService.prototype.moveUp = function (view) {\n        this.move(view, 1);\n    };\n    BusViewService.prototype.moveToBottom = function (activeView) {\n        if (activeView === this.bottom) {\n            return;\n        }\n        this.viewChanged.emit({ view: this.bottom });\n    };\n    BusViewService.prototype.canMoveDown = function (view) {\n        return this.bottom < view;\n    };\n    BusViewService.prototype.canMoveUp = function (view) {\n        return view < this.top;\n    };\n    BusViewService.prototype.clamp = function (view) {\n        if (view < this.bottom) {\n            return this.bottom;\n        }\n        if (view > this.top) {\n            return this.top;\n        }\n        return view;\n    };\n    BusViewService.prototype.move = function (view, offset) {\n        var candidate = this.clamp(viewOffset(view, offset));\n        if (candidate === view) {\n            return;\n        }\n        this.viewChanged.emit({ view: candidate });\n    };\n    BusViewService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    BusViewService.ctorParameters = function () { return [\n        { type: Injector }\n    ]; };\n    return BusViewService;\n}());\n\nvar div = domContainerFactory('div');\nvar ul = domContainerFactory('ul');\nvar li = domContainerFactory('li');\nvar td = domContainerFactory('td');\nvar th = domContainerFactory('th');\nvar tr = domContainerFactory('tr');\nvar tbody = domContainerFactory('tbody');\nvar thead = domContainerFactory('thead');\nvar table = domContainerFactory('table');\nvar monthHeader = function () { return (div(\"\\n            <span class=\\\"k-calendar-title\\\">March 2017</span>\\n            <span class=\\\"k-calendar-today\\\">TODAY</span>\\n        \", 'k-calendar-header')); };\nvar monthWeekHeader = function () { return (table([\n    thead([\n        tr([th('MO')])\n    ])\n], 'k-calendar-weekdays')); };\nvar repeat = function (count, mapper) { return new Array(count).fill('1').map(mapper); };\nvar content = function (rows, cells) {\n    if (cells === void 0) { cells = 1; }\n    return (table([\n        tbody([tr([th('1')])].concat(repeat(rows, function () { return tr(repeat(cells, function (c) { return td(\"<span class=\\\"k-link\\\">\" + c + \"</span>\"); })); })))\n    ]));\n};\nvar scrollable = function (children) { return div(children, 'k-content k-scrollable'); };\nvar view = function (contentElement, className, renderWeekHeader) { return (div([\n    monthHeader(),\n    renderWeekHeader ? monthWeekHeader() : null,\n    scrollable([contentElement, contentElement])\n], className, { left: '-10000px', position: 'absolute' })); };\nvar Éµ6 = function () {\n    var navElement;\n    return function () {\n        if (!isDocumentAvailable) {\n            return null;\n        }\n        if (!navElement) {\n            navElement = div([scrollable([ul([li('<span>FEB</span>')])])], 'k-calendar-navigation', { left: '0px', position: 'absolute' });\n        }\n        return navElement;\n    };\n};\nvar navigationList = (Éµ6)();\nvar viewFactory = function (_a, className, renderWeekHeader) {\n    var cells = _a.cells, rows = _a.rows;\n    var viewElement;\n    return function () {\n        if (!isDocumentAvailable) {\n            return null;\n        }\n        if (!viewElement) {\n            viewElement = view(content(rows, cells), className, renderWeekHeader);\n        }\n        return viewElement;\n    };\n};\nvar getScrollable = function (element) { return element.querySelector('.k-scrollable'); };\nvar horizontal = function (element) {\n    var scrollableElement = getScrollable(element);\n    scrollableElement.classList.add('k-scrollable-horizontal');\n    return element;\n};\nvar monthView = viewFactory({ cells: 7, rows: 6 }, 'k-calendar-view k-calendar-monthview', true);\nvar yearView = viewFactory({ cells: 5, rows: 3 }, 'k-calendar-view k-calendar-yearview', false);\nvar decadeView = viewFactory({ cells: 5, rows: 2 }, 'k-calendar-view k-calendar-decadeview', false);\nvar horzMonthView = function () { return horizontal(monthView()); };\nvar horzYearView = function () { return horizontal(yearView()); };\nvar horzDecadeView = function () { return horizontal(decadeView()); };\nvar height = function (element) { return (parseFloat(window.getComputedStyle(element).height) || element.offsetHeight); };\nvar width = function (element) {\n    var styles = window.getComputedStyle(element);\n    var computed = parseFloat(styles.width)\n        + parseFloat(styles.paddingLeft)\n        + parseFloat(styles.paddingRight);\n    return computed || element.offsetWidth;\n};\nvar getBody = function (element) { return element.querySelector('tbody'); };\n/**\n * @hidden\n */\nvar CalendarDOMService = /** @class */ (function () {\n    function CalendarDOMService() {\n    }\n    CalendarDOMService.prototype.ensureHeights = function () {\n        if (this.calendarHeight !== undefined) {\n            return;\n        }\n        this.calculateHeights();\n    };\n    CalendarDOMService.prototype.calculateHeights = function (container) {\n        var _this = this;\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.hostContainer = container;\n        this.batch(monthView(), function (contentElement) {\n            var viewElement = getBody(contentElement);\n            _this.calendarHeight = height(contentElement);\n            _this.monthViewHeight = height(viewElement);\n            _this.headerHeight = height(viewElement.children[0]);\n            _this.scrollableContentHeight = height(getScrollable(contentElement));\n        });\n        this.batch(horzMonthView(), function (contentElement) {\n            var viewElement = getBody(contentElement);\n            _this.calendarWidth = width(contentElement);\n            _this.monthViewWidth = width(viewElement);\n            _this.scrollableContentWidth = width(getScrollable(contentElement));\n        });\n        this.batch(yearView(), function (contentElement) {\n            _this.yearViewHeight = height(getBody(contentElement));\n            _this.scrollableYearContentHeight = height(getScrollable(contentElement));\n        });\n        this.batch(horzYearView(), function (contentElement) {\n            _this.yearViewWidth = width(getBody(contentElement));\n        });\n        this.batch(decadeView(), function (contentElement) {\n            _this.decadeViewHeight = height(getBody(contentElement));\n            _this.centuryViewHeight = _this.decadeViewHeight;\n        });\n        this.batch(horzDecadeView(), function (contentElement) {\n            _this.decadeViewWidth = width(getBody(contentElement));\n            _this.centuryViewWidth = _this.decadeViewWidth;\n        });\n        this.batch(navigationList(), function (contentElement) {\n            _this.navigationItemHeight = height(contentElement.querySelector('li'));\n        });\n    };\n    CalendarDOMService.prototype.viewHeight = function (viewType) {\n        return this.viewDimension(viewType, 'height');\n    };\n    CalendarDOMService.prototype.viewWidth = function (viewType) {\n        return this.viewDimension(viewType, 'width');\n    };\n    CalendarDOMService.prototype.viewDimension = function (viewType, dimension) {\n        var viewProp = dimension === 'height' ? 'ViewHeight' : 'ViewWidth';\n        switch (viewType) {\n            case CalendarViewEnum.month:\n                return this[\"month\" + viewProp];\n            case CalendarViewEnum.year:\n                return this[\"year\" + viewProp];\n            case CalendarViewEnum.decade:\n                return this[\"decade\" + viewProp];\n            case CalendarViewEnum.century:\n                return this[\"century\" + viewProp];\n            default:\n                return 1;\n        }\n    };\n    CalendarDOMService.prototype.batch = function (contentElement, action) {\n        var hostContainer = this.hostContainer || document.body;\n        var appendedContent = hostContainer.appendChild(contentElement);\n        action(appendedContent);\n        hostContainer.removeChild(appendedContent);\n    };\n    CalendarDOMService.decorators = [\n        { type: Injectable },\n    ];\n    return CalendarDOMService;\n}());\n\n/**\n * @hidden\n */\nvar update = function (arr, idx, value) { return (arr.slice(0, idx + 1).concat((arr.slice(idx + 1).map(function (x) { return x + value; })))); };\n/**\n * @hidden\n */\nvar RowHeightService = /** @class */ (function () {\n    function RowHeightService(total, rowHeight, detailRowHeight) {\n        if (total === void 0) { total = 0; }\n        this.total = total;\n        this.rowHeight = rowHeight;\n        this.detailRowHeight = detailRowHeight;\n        this.offsets = [];\n        this.heights = [];\n        var agg = 0;\n        for (var idx = 0; idx < total; idx++) {\n            this.offsets.push(agg);\n            agg += rowHeight;\n            this.heights.push(rowHeight);\n        }\n    }\n    RowHeightService.prototype.height = function (rowIndex) {\n        return this.heights[rowIndex];\n    };\n    RowHeightService.prototype.expandDetail = function (rowIndex) {\n        if (this.height(rowIndex) === this.rowHeight) {\n            this.updateRowHeight(rowIndex, this.detailRowHeight);\n        }\n    };\n    RowHeightService.prototype.collapseDetail = function (rowIndex) {\n        if (this.height(rowIndex) > this.rowHeight) {\n            this.updateRowHeight(rowIndex, this.detailRowHeight * -1);\n        }\n    };\n    RowHeightService.prototype.index = function (position) {\n        if (position < 0) {\n            return undefined;\n        }\n        var result = this.offsets.reduce(function (prev, current, idx) {\n            if (prev !== undefined) {\n                return prev;\n            }\n            else if (current === position) {\n                return idx;\n            }\n            else if (current > position) {\n                return idx - 1;\n            }\n            return undefined;\n        }, undefined); // tslint:disable-line:align\n        return result === undefined ? this.total - 1 : result;\n    };\n    RowHeightService.prototype.offset = function (rowIndex) {\n        return this.offsets[rowIndex];\n    };\n    RowHeightService.prototype.totalHeight = function () {\n        return this.heights.reduce(function (prev, curr) { return prev + curr; }, 0);\n    };\n    RowHeightService.prototype.updateRowHeight = function (rowIndex, value) {\n        this.heights[rowIndex] += value;\n        this.offsets = update(this.offsets, rowIndex, value);\n    };\n    return RowHeightService;\n}());\n\nvar normalize = function (x) { return Math.max(x, 0); };\n/**\n * @hidden\n */\nvar ScrollAction = /** @class */ (function () {\n    function ScrollAction(offset) {\n        this.offset = offset;\n    }\n    return ScrollAction;\n}());\n/**\n * @hidden\n */\nvar PageAction = /** @class */ (function () {\n    function PageAction(skip) {\n        this.skip = skip;\n    }\n    return PageAction;\n}());\n/**\n * @hidden\n */\nvar ScrollerService = /** @class */ (function () {\n    function ScrollerService(scrollObservable) {\n        this.scrollObservable = scrollObservable;\n        this.firstLoaded = 0;\n        this.bottomOffset = 0;\n        this.topOffset = 0;\n    }\n    ScrollerService.prototype.create = function (rowHeightService, skip, take, total, topOffset, bottomOffset, direction) {\n        var _this = this;\n        if (topOffset === void 0) { topOffset = 0; }\n        if (bottomOffset === void 0) { bottomOffset = 0; }\n        if (direction === void 0) { direction = 'vertical'; }\n        this.rowHeightService = rowHeightService;\n        this.firstLoaded = skip;\n        this.lastLoaded = skip + take;\n        this.take = take;\n        this.total = total;\n        this.lastScroll = 0;\n        this.topOffset = topOffset;\n        this.bottomOffset = bottomOffset;\n        this.direction = direction;\n        var subject = new ReplaySubject(2);\n        var offsetBufferRows = this.rowsForHeight(topOffset);\n        var skipWithOffset = normalize(skip - offsetBufferRows);\n        subject.next(new ScrollAction(this.rowOffset(skipWithOffset)));\n        if (offsetBufferRows) {\n            subject.next(new PageAction(skipWithOffset));\n        }\n        this.subscription = Observable.create(function (observer) {\n            _this.unsubscribe();\n            _this.scrollSubscription = _this.scrollObservable.subscribe(function (x) { return _this.onScroll(x, observer); });\n        }).subscribe(function (x) { return subject.next(x); });\n        return subject;\n    };\n    ScrollerService.prototype.destroy = function () {\n        this.unsubscribe();\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    ScrollerService.prototype.onScroll = function (_a, observer) {\n        var scrollLeft = _a.scrollLeft, scrollTop = _a.scrollTop, offsetHeight = _a.offsetHeight, offsetWidth = _a.offsetWidth;\n        var scrollPosition = this.direction === 'vertical' ? scrollTop : scrollLeft;\n        var offsetSize = this.direction === 'vertical' ? offsetHeight : offsetWidth;\n        if (this.lastScroll === scrollPosition) {\n            return;\n        }\n        var up = this.lastScroll >= scrollPosition;\n        this.lastScroll = scrollPosition;\n        var firstItemIndex = this.rowHeightService.index(normalize(scrollPosition - this.topOffset));\n        var lastItemIndex = this.rowHeightService.index(normalize(scrollPosition + offsetSize - this.bottomOffset));\n        if (!up && lastItemIndex >= this.lastLoaded && this.lastLoaded < this.total) {\n            this.firstLoaded = firstItemIndex;\n            observer.next(new ScrollAction(this.rowOffset(firstItemIndex)));\n            this.lastLoaded = Math.min(this.firstLoaded + this.take, this.total);\n            observer.next(new PageAction(this.firstLoaded));\n        }\n        if (up && firstItemIndex <= this.firstLoaded) {\n            var nonVisibleBuffer = Math.floor(this.take * 0.3);\n            this.firstLoaded = normalize(firstItemIndex - nonVisibleBuffer);\n            observer.next(new ScrollAction(this.rowOffset(this.firstLoaded)));\n            this.lastLoaded = Math.min(this.firstLoaded + this.take, this.total);\n            observer.next(new PageAction(this.firstLoaded));\n        }\n    };\n    ScrollerService.prototype.rowOffset = function (index) {\n        return this.rowHeightService.offset(index) + this.topOffset;\n    };\n    ScrollerService.prototype.rowsForHeight = function (height) {\n        return Math.ceil(height / this.rowHeightService.height(0));\n    };\n    ScrollerService.prototype.unsubscribe = function () {\n        if (this.scrollSubscription) {\n            this.scrollSubscription.unsubscribe();\n            this.scrollSubscription = null;\n        }\n    };\n    return ScrollerService;\n}());\n\nvar _a$5, _b, _c;\n/**\n * @hidden\n */\nvar SCROLLER_FACTORY_TOKEN = new InjectionToken('dateinputs-scroll-service-factory');\n/**\n * @hidden\n */\nfunction DEFAULT_SCROLLER_FACTORY(observable) {\n    return new ScrollerService(observable);\n}\n/**\n * @hidden\n */\nvar ScrollDirection;\n(function (ScrollDirection) {\n    ScrollDirection[ScrollDirection[\"Backward\"] = 0] = \"Backward\";\n    ScrollDirection[ScrollDirection[\"Forward\"] = 1] = \"Forward\";\n})(ScrollDirection || (ScrollDirection = {}));\nvar FRAME_DURATION = 17;\nvar scrollModifiers = (_a$5 = {},\n    _a$5[ScrollDirection.Forward] = function (step) { return function (value) { return value + step; }; },\n    _a$5[ScrollDirection.Backward] = function (step) { return function (value) { return value - step; }; },\n    _a$5);\nvar scrollNormalizers = (_b = {},\n    _b[ScrollDirection.Forward] = function (end) { return function (value) { return Math.min(value, end); }; },\n    _b[ScrollDirection.Backward] = function (end) { return function (value) { return Math.max(value, end); }; },\n    _b);\nvar scrollValidators = (_c = {},\n    _c[ScrollDirection.Forward] = function (end) { return function (start) { return start < end; }; },\n    _c[ScrollDirection.Backward] = function (end) { return function (start) { return start > end; }; },\n    _c);\nvar differenceToScroll = function (scrollTop, staticOffset, maxScrollDifference) {\n    return Math.min(Math.abs(staticOffset - scrollTop), maxScrollDifference);\n};\n/**\n * @hidden\n */\nvar VirtualizationComponent = /** @class */ (function () {\n    function VirtualizationComponent(scrollerFactory, container, renderer, zone) {\n        this.container = container;\n        this.renderer = renderer;\n        this.zone = zone;\n        this.direction = 'vertical';\n        this.itemHeight = 1;\n        this.itemWidth = 1;\n        this.topOffset = 0;\n        this.bottomOffset = 0;\n        this.maxScrollDifference = 100;\n        this.scrollOffsetSize = 0;\n        this.scrollDuration = 150;\n        this.activeIndexChange = new EventEmitter();\n        this.pageChange = new EventEmitter();\n        this.scrollChange = new EventEmitter();\n        this.resolvedPromise = Promise.resolve(null);\n        this.dispatcher = new Subject();\n        this.scroller = scrollerFactory(this.dispatcher);\n    }\n    Object.defineProperty(VirtualizationComponent.prototype, \"totalVertexLength\", {\n        get: function () {\n            var value = this.totalSize + \"px\";\n            return this.direction === 'vertical' ? { height: value } : { width: value };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VirtualizationComponent.prototype, \"containerOffsetSize\", {\n        get: function () {\n            return this.getContainerProperty(this.direction === 'vertical' ? 'offsetHeight' : 'offsetWidth');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VirtualizationComponent.prototype, \"containerScrollSize\", {\n        get: function () {\n            return this.getContainerProperty(this.direction === 'vertical' ? 'scrollHeight' : 'scrollWidth');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VirtualizationComponent.prototype, \"containerScrollPosition\", {\n        get: function () {\n            return this.getContainerProperty(this.direction === 'vertical' ? 'scrollTop' : 'scrollLeft');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VirtualizationComponent.prototype, \"wrapperClasses\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VirtualizationComponent.prototype, \"horizontalClass\", {\n        get: function () {\n            return this.direction === 'horizontal';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    VirtualizationComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.direction || changes.take || changes.total) {\n            this.initServices();\n            this.totalSize = this.rowHeightService.totalHeight() + this.bottomOffset;\n        }\n    };\n    VirtualizationComponent.prototype.ngOnInit = function () {\n        if (!this.rowHeightService) {\n            this.rowHeightService = this.createRowHeightService();\n        }\n    };\n    VirtualizationComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.zone.runOutsideAngular(function () {\n            _this.containerScrollSubscription = _this.scroll$()\n                .pipe(map(function (event) { return event.target; }))\n                .subscribe(function (t) {\n                _this.dispatcher.next(t);\n                _this.emitActiveIndex();\n            });\n        });\n    };\n    VirtualizationComponent.prototype.ngOnDestroy = function () {\n        if (this.containerScrollSubscription) {\n            this.containerScrollSubscription.unsubscribe();\n        }\n        if (this.scrollSubscription) {\n            this.scrollSubscription.unsubscribe();\n        }\n        if (this.animationSubscription) {\n            this.animationSubscription.unsubscribe();\n        }\n    };\n    VirtualizationComponent.prototype.getContainerProperty = function (propertyName) {\n        return this.container.nativeElement[propertyName];\n    };\n    VirtualizationComponent.prototype.activeIndex = function () {\n        return this.itemIndex(Math.ceil(this.containerScrollPosition)); //handle subpixeling\n    };\n    VirtualizationComponent.prototype.itemIndex = function (offset) {\n        return this.rowHeightService.index(offset);\n    };\n    VirtualizationComponent.prototype.itemOffset = function (index) {\n        return this.rowHeightService.offset(index);\n    };\n    VirtualizationComponent.prototype.isIndexVisible = function (index) {\n        if (!this.rowHeightService) {\n            return false;\n        }\n        var containerTop = this.containerScrollPosition;\n        var containerBottom = containerTop + this.containerOffsetSize;\n        var top = this.rowHeightService.offset(index);\n        var bottom = top + this.rowHeightService.height(index);\n        return top >= containerTop && bottom <= containerBottom;\n    };\n    VirtualizationComponent.prototype.isListScrolled = function (index) {\n        return this.containerScrollPosition !== this.rowHeightService.offset(index);\n    };\n    VirtualizationComponent.prototype.scrollTo = function (value) {\n        var scrollProperty = this.direction === \"vertical\" ? 'scrollTop' : 'scrollLeft';\n        this.renderer.setProperty(this.container.nativeElement, scrollProperty, value);\n    };\n    VirtualizationComponent.prototype.scrollToIndex = function (index) {\n        //XXX: scrolling with tick is required to prevent list jump in Chrome.\n        //Original issue: focus first day in the month and press LEFT arrow.\n        //Notice how the view jumps on every day change.\n        //\n        var _this = this;\n        this.zone.runOutsideAngular(function () {\n            _this.resolvedPromise.then(function () {\n                _this.scrollTo(_this.rowHeightService.offset(index));\n            });\n        });\n    };\n    VirtualizationComponent.prototype.scrollToBottom = function () {\n        this.scrollTo(this.totalSize);\n    };\n    VirtualizationComponent.prototype.animateToIndex = function (index) {\n        var _this = this;\n        if (this.animationSubscription) {\n            this.animationSubscription.unsubscribe();\n        }\n        var indexOffset = this.rowHeightService.offset(index);\n        var direction = this.getContainerScrollDirection(indexOffset);\n        var _a = this.scrollRange(indexOffset, direction), start = _a.start, end = _a.end;\n        if (start === end) {\n            return;\n        }\n        var step = this.scrollStep(start, end);\n        var modifyScroll = scrollModifiers[direction](step);\n        var normalizeScroll = scrollNormalizers[direction](end);\n        var isScrollValid = scrollValidators[direction](modifyScroll(end));\n        this.zone.runOutsideAngular(function () {\n            _this.animationSubscription =\n                combineLatest(of(start), interval(0, animationFrameScheduler)).pipe(map(function (stream) { return stream[0]; }), scan(modifyScroll), takeWhile(isScrollValid), map(normalizeScroll)).subscribe(function (x) { return _this.scrollTo(x); });\n        });\n    };\n    VirtualizationComponent.prototype.scrollRange = function (indexOffset, direction) {\n        var containerScroll = this.containerScrollPosition;\n        if (parseInt(indexOffset, 10) === parseInt(containerScroll, 10)) {\n            return { start: indexOffset, end: indexOffset };\n        }\n        var maxScroll = this.containerMaxScroll();\n        var sign = direction === ScrollDirection.Backward ? 1 : -1;\n        var difference = differenceToScroll(containerScroll, indexOffset, this.maxScrollDifference);\n        var end = Math.min(indexOffset, maxScroll);\n        var start = Math.min(Math.max(end + (sign * difference), 0), maxScroll);\n        return { start: start, end: end };\n    };\n    VirtualizationComponent.prototype.scrollStep = function (start, end) {\n        return Math.abs(end - start) / (this.scrollDuration / FRAME_DURATION);\n    };\n    VirtualizationComponent.prototype.scroll$ = function () {\n        return isDocumentAvailable() ? fromEvent(this.container.nativeElement, 'scroll') : EMPTY;\n    };\n    VirtualizationComponent.prototype.initServices = function () {\n        var _this = this;\n        this.rowHeightService = this.createRowHeightService();\n        if (this.scrollSubscription) {\n            this.scrollSubscription.unsubscribe();\n        }\n        this.scrollSubscription = this.scroller\n            .create(this.rowHeightService, this.skip, this.take, this.total, this.topOffset, this.scrollOffsetSize, this.direction)\n            .subscribe(function (x) {\n            if (x instanceof PageAction) {\n                _this.pageChange.emit(x);\n            }\n            else {\n                _this.scrollChange.emit(x);\n            }\n        });\n    };\n    VirtualizationComponent.prototype.createRowHeightService = function () {\n        var dimension = this.direction === 'vertical' ? this.itemHeight : this.itemWidth;\n        return new RowHeightService(this.total, dimension, 0);\n    };\n    VirtualizationComponent.prototype.emitActiveIndex = function () {\n        var index = this.rowHeightService.index(this.containerScrollPosition - this.topOffset);\n        if (this.lastActiveIndex !== index) {\n            this.lastActiveIndex = index;\n            this.activeIndexChange.emit(index);\n        }\n    };\n    VirtualizationComponent.prototype.containerMaxScroll = function () {\n        return this.containerScrollSize - this.containerOffsetSize;\n    };\n    VirtualizationComponent.prototype.getContainerScrollDirection = function (indexOffset) {\n        return indexOffset < this.containerScrollPosition ? ScrollDirection.Backward : ScrollDirection.Forward;\n    };\n    VirtualizationComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [{\n                            provide: SCROLLER_FACTORY_TOKEN,\n                            useValue: DEFAULT_SCROLLER_FACTORY\n                        }],\n                    selector: 'kendo-virtualization',\n                    template: \"\\n    <ng-content></ng-content>\\n    <div\\n        class=\\\"k-scrollable-placeholder\\\"\\n        [class.k-scrollable-horizontal-placeholder]=\\\"direction === 'horizontal'\\\"\\n        [ngStyle]=\\\"totalVertexLength\\\"\\n    ></div>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    VirtualizationComponent.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [SCROLLER_FACTORY_TOKEN,] }] },\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: NgZone }\n    ]; };\n    VirtualizationComponent.propDecorators = {\n        direction: [{ type: Input }],\n        itemHeight: [{ type: Input }],\n        itemWidth: [{ type: Input }],\n        topOffset: [{ type: Input }],\n        bottomOffset: [{ type: Input }],\n        maxScrollDifference: [{ type: Input }],\n        scrollOffsetSize: [{ type: Input }],\n        scrollDuration: [{ type: Input }],\n        skip: [{ type: Input }],\n        take: [{ type: Input }],\n        total: [{ type: Input }],\n        activeIndexChange: [{ type: Output }],\n        pageChange: [{ type: Output }],\n        scrollChange: [{ type: Output }],\n        wrapperClasses: [{ type: HostBinding, args: ['class.k-content',] }, { type: HostBinding, args: ['class.k-scrollable',] }],\n        horizontalClass: [{ type: HostBinding, args: ['class.k-scrollable-horizontal',] }]\n    };\n    return VirtualizationComponent;\n}());\n\n/**\n * @hidden\n */\nvar closestInScope = function (node, predicate, scope) {\n    while (node && node !== scope && !predicate(node)) {\n        node = node.parentNode;\n    }\n    if (node !== scope) {\n        return node;\n    }\n};\n/**\n * @hidden\n */\nvar closest = function (node, predicate) {\n    while (node && !predicate(node)) {\n        node = node.parentNode;\n    }\n    return node;\n};\n\n/* tslint:disable:component-selector-name  component-selector-type */\nvar ITEMS_COUNT = 30;\n/**\n * @hidden\n */\nvar NavigationComponent = /** @class */ (function () {\n    function NavigationComponent(bus, dom, intl, cdr, renderer) {\n        this.bus = bus;\n        this.dom = dom;\n        this.intl = intl;\n        this.cdr = cdr;\n        this.renderer = renderer;\n        this.min = new Date(MIN_DATE);\n        this.max = new Date(MAX_DATE);\n        this.focusedDate = new Date();\n        this.valueChange = new EventEmitter();\n        this.pageChange = new EventEmitter();\n        this.dates = [];\n        this.take = ITEMS_COUNT;\n        this.indexToScroll = -1;\n    }\n    Object.defineProperty(NavigationComponent.prototype, \"getComponentClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NavigationComponent.prototype.ngOnInit = function () {\n        this.dom.ensureHeights();\n        var calendarHeight = this.dom.calendarHeight;\n        this.itemHeight = this.dom.navigationItemHeight;\n        this.maxViewHeight = this.dom.monthViewHeight;\n        this.topOffset = (calendarHeight - this.itemHeight) / 2;\n        this.bottomOffset = calendarHeight - this.itemHeight;\n        this.intlSubscription = this.intl.changes.subscribe(this.intlChange.bind(this));\n    };\n    NavigationComponent.prototype.ngOnChanges = function (changes) {\n        this.service = this.bus.service(this.activeView);\n        if (!this.service) {\n            return;\n        }\n        this.activeViewValue = CalendarViewEnum[this.activeView];\n        var viewDate = dateInRange(this.focusedDate, this.min, this.max);\n        var total = this.service.total(this.min, this.max);\n        var totalChanged = this.total && this.total !== total;\n        this.skip = this.service.skip(viewDate, this.min);\n        this.total = total;\n        if (totalChanged || !this.service.isInArray(viewDate, this.dates)) {\n            this.dates = this.service.datesList(viewDate, this.getTake(this.skip));\n        }\n        if (!!changes.focusedDate || totalChanged) {\n            this.indexToScroll = this.service.skip(this.focusedDate, this.min);\n        }\n    };\n    NavigationComponent.prototype.ngOnDestroy = function () {\n        if (this.intlSubscription) {\n            this.intlSubscription.unsubscribe();\n        }\n    };\n    NavigationComponent.prototype.ngAfterViewInit = function () {\n        if (this.indexToScroll === -1) {\n            return;\n        }\n        this.virtualization.scrollToIndex(this.indexToScroll);\n        this.indexToScroll = -1;\n    };\n    NavigationComponent.prototype.ngAfterViewChecked = function () {\n        if (this.indexToScroll === -1) {\n            return;\n        }\n        this.virtualization.scrollToIndex(this.indexToScroll);\n        this.indexToScroll = -1;\n    };\n    NavigationComponent.prototype.onPageChange = function (_a) {\n        var skip = _a.skip;\n        this.dates = this.service.datesList(this.service.addToDate(this.min, skip), this.getTake(skip));\n        this.pageChange.emit();\n    };\n    NavigationComponent.prototype.scrollChange = function (_a) {\n        var offset = _a.offset;\n        var el = this.list.nativeElement;\n        var translate = \"translateY(\" + offset + \"px)\";\n        this.renderer.setStyle(el, 'transform', translate);\n        this.renderer.setStyle(el, '-ms-transform', translate);\n    };\n    NavigationComponent.prototype.handleDateChange = function (args) {\n        var item = closestInScope(args.target, function (node) { return node.hasAttribute('data-date-index'); }, this.list.nativeElement);\n        if (item) {\n            var index = parseInt(item.getAttribute('data-date-index'), 10);\n            var candidate = this.dates[index];\n            this.valueChange.emit(cloneDate(candidate));\n        }\n    };\n    NavigationComponent.prototype.getTake = function (skip) {\n        return Math.min(this.total - skip, this.take);\n    };\n    NavigationComponent.prototype.intlChange = function () {\n        if (this.activeView === CalendarViewEnum.month) {\n            this.cdr.markForCheck();\n        }\n    };\n    NavigationComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    selector: 'kendo-calendar-navigation',\n                    template: \"\\n    <span class=\\\"k-calendar-navigation-highlight\\\"></span>\\n    <kendo-virtualization\\n        [skip]=\\\"skip\\\"\\n        [take]=\\\"take\\\"\\n        [total]=\\\"total\\\"\\n        [itemHeight]=\\\"itemHeight\\\"\\n        [topOffset]=\\\"topOffset\\\"\\n        [bottomOffset]=\\\"bottomOffset\\\"\\n        [maxScrollDifference]=\\\"maxViewHeight\\\"\\n        (pageChange)=\\\"onPageChange($event)\\\"\\n        (scrollChange)=\\\"scrollChange($event)\\\"\\n    >\\n        <ul #list class=\\\"k-reset\\\" [kendoEventsOutsideAngular]=\\\"{ click: handleDateChange }\\\" [scope]=\\\"this\\\">\\n            <li *kFor=\\\"let date of dates; let index=index\\\" [attr.data-date-index]=\\\"index\\\">\\n                <span [class.k-calendar-navigation-marker]=\\\"service.isRangeStart(date)\\\">\\n                    <ng-template [ngIf]=\\\"!templateRef\\\">{{service.navigationTitle(date)}}</ng-template>\\n                    <ng-template\\n                        [ngIf]=\\\"templateRef\\\"\\n                        [ngTemplateOutlet]=\\\"templateRef\\\"\\n                        [ngTemplateOutletContext]=\\\"{ $implicit: service.navigationTitle(date), activeView: activeViewValue, date: date }\\\"\\n                    ></ng-template>\\n                </span>\\n            </li>\\n        </ul>\\n    </kendo-virtualization>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    NavigationComponent.ctorParameters = function () { return [\n        { type: BusViewService },\n        { type: CalendarDOMService },\n        { type: IntlService },\n        { type: ChangeDetectorRef },\n        { type: Renderer2 }\n    ]; };\n    NavigationComponent.propDecorators = {\n        activeView: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        focusedDate: [{ type: Input }],\n        templateRef: [{ type: Input }],\n        valueChange: [{ type: Output }],\n        pageChange: [{ type: Output }],\n        virtualization: [{ type: ViewChild, args: [VirtualizationComponent,] }],\n        list: [{ type: ViewChild, args: ['list', { static: true },] }],\n        getComponentClass: [{ type: HostBinding, args: [\"class.k-calendar-navigation\",] }]\n    };\n    return NavigationComponent;\n}());\n\nvar VIEWS_COUNT = 5;\nvar isEqualMonthYear = function (date1, date2) { return (date1 && date2 &&\n    date1.getFullYear() === date2.getFullYear() &&\n    date1.getMonth() === date2.getMonth()); };\n/**\n * @hidden\n */\nvar ViewListComponent = /** @class */ (function () {\n    function ViewListComponent(bus, cdr, intl, dom, renderer) {\n        this.bus = bus;\n        this.cdr = cdr;\n        this.intl = intl;\n        this.dom = dom;\n        this.renderer = renderer;\n        this.isActive = true;\n        this.min = new Date(MIN_DATE);\n        this.max = new Date(MAX_DATE);\n        this.activeDateChange = new EventEmitter();\n        this.valueChange = new EventEmitter();\n        this.pageChange = new EventEmitter();\n        this.dates = [];\n        this.cols = [];\n        this.weekNames = [];\n        this.take = VIEWS_COUNT;\n        this.animateToIndex = true;\n        this.indexToScroll = -1;\n        this.minViewsToRender = 1;\n    }\n    Object.defineProperty(ViewListComponent.prototype, \"weekNumber\", {\n        get: function () {\n            return this.showWeekNumbers && this.isMonthView();\n        },\n        set: function (showWeekNumbers) {\n            this.showWeekNumbers = showWeekNumbers;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewListComponent.prototype, \"getComponentClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewListComponent.prototype, \"getComponentMonthClass\", {\n        get: function () {\n            return this.activeView === CalendarViewEnum.month;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewListComponent.prototype, \"getComponentYearClass\", {\n        get: function () {\n            return this.activeView === CalendarViewEnum.year;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewListComponent.prototype, \"getComponentDecadeClass\", {\n        get: function () {\n            return this.activeView === CalendarViewEnum.decade;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewListComponent.prototype, \"getComponentCenturyClass\", {\n        get: function () {\n            return this.activeView === CalendarViewEnum.century;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ViewListComponent.prototype.ngOnInit = function () {\n        this.weekNames = this.getWeekNames();\n        this.bottomOffset = this.getBottomOffset();\n        this.viewOffset = -1 * this.dom.headerHeight;\n        this.viewHeight = this.dom.viewHeight(this.activeView);\n        this.intlSubscription = this.intl.changes.subscribe(this.intlChange.bind(this));\n    };\n    ViewListComponent.prototype.ngOnChanges = function (changes) {\n        this.service = this.bus.service(this.activeView);\n        if (!this.service) {\n            return;\n        }\n        this.cols = new Array(this.service.rowLength(this.weekNumber)).fill('');\n        this.colWidth = Math.round(100 / this.cols.length);\n        this.weekNames = hasChange(changes, 'weekNumber') && this.weekNumber ? this.getWeekNames() : this.weekNames;\n        var activeViewChanged = hasChange(changes, 'activeView');\n        var focusedDate = this.focusedDate;\n        var viewDate = dateInRange(this.service.viewDate(focusedDate, this.max, this.minViewsToRender), this.min, this.max);\n        var total = this.service.total(this.min, this.max);\n        var totalChanged = this.total && this.total !== total;\n        var generateDates = totalChanged || !this.service.isInArray(focusedDate, this.dates);\n        this.skip = this.service.skip(viewDate, this.min);\n        this.total = total;\n        this.animateToIndex = !activeViewChanged;\n        this.bottomOffset = this.getBottomOffset();\n        this.viewHeight = this.dom.viewHeight(this.activeView);\n        if (generateDates) {\n            this.dates = this.service.datesList(viewDate, this.getTake(this.skip));\n        }\n        if (!isEqualMonthYear(this.activeDate, focusedDate)) {\n            this.activeDate = cloneDate(focusedDate);\n        }\n        var updateIndex = hasChange(changes, 'focusedDate') || activeViewChanged;\n        if (generateDates || updateIndex || this.virtualization.isIndexVisible(this.skip)) {\n            this.indexToScroll = this.service.skip(focusedDate, this.min);\n        }\n    };\n    ViewListComponent.prototype.ngOnDestroy = function () {\n        if (this.intlSubscription) {\n            this.intlSubscription.unsubscribe();\n        }\n    };\n    ViewListComponent.prototype.ngAfterViewInit = function () {\n        if (this.indexToScroll === -1) {\n            return;\n        }\n        this.virtualization.scrollToIndex(this.indexToScroll);\n        this.indexToScroll = -1;\n    };\n    ViewListComponent.prototype.ngAfterViewChecked = function () {\n        if (this.indexToScroll === -1) {\n            return;\n        }\n        this.virtualization[this.animateToIndex ? 'animateToIndex' : 'scrollToIndex'](this.indexToScroll);\n        this.animateToIndex = true;\n        this.indexToScroll = -1;\n    };\n    ViewListComponent.prototype.onPageChange = function (_a) {\n        var skip = _a.skip;\n        this.dates = this.service.datesList(this.service.addToDate(this.min, skip), this.getTake(skip));\n        this.pageChange.emit();\n    };\n    ViewListComponent.prototype.scrollChange = function (_a) {\n        var offset = _a.offset;\n        var el = this.list.nativeElement;\n        var translate = \"translateY(\" + offset + \"px)\";\n        this.renderer.setStyle(el, 'transform', translate);\n        this.renderer.setStyle(el, '-ms-transform', translate);\n    };\n    ViewListComponent.prototype.setActiveDate = function (index) {\n        var candidate = this.service.addToDate(this.min, index);\n        if (isEqual(this.activeDate, candidate)) {\n            return;\n        }\n        this.activeDate = candidate;\n        this.activeDateChange.emit(candidate);\n        this.cdr.detectChanges();\n    };\n    ViewListComponent.prototype.handleDateChange = function (candidate) {\n        this.valueChange.emit(candidate);\n    };\n    ViewListComponent.prototype.isMonthView = function () {\n        return this.activeView === CalendarViewEnum.month;\n    };\n    ViewListComponent.prototype.isScrolled = function () {\n        return this.virtualization.isListScrolled(this.service.skip(this.focusedDate, this.min));\n    };\n    ViewListComponent.prototype.getBottomOffset = function () {\n        return this.getScrollableHeight() - this.dom.viewHeight(this.activeView);\n    };\n    ViewListComponent.prototype.getScrollableHeight = function () {\n        return this.activeView === CalendarViewEnum.month ?\n            this.dom.scrollableContentHeight :\n            this.dom.scrollableYearContentHeight;\n    };\n    ViewListComponent.prototype.getTake = function (skip) {\n        return Math.min(this.total - skip, this.take);\n    };\n    ViewListComponent.prototype.getWeekNames = function () {\n        var weekNames = shiftWeekNames(this.intl.dateFormatNames({ nameType: 'short', type: 'days' }), this.intl.firstDay());\n        return this.weekNumber ? [''].concat(weekNames) : weekNames;\n    };\n    ViewListComponent.prototype.intlChange = function () {\n        this.weekNames = this.getWeekNames();\n        if (this.isMonthView()) {\n            this.cdr.markForCheck();\n        }\n    };\n    ViewListComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    selector: 'kendo-calendar-viewlist',\n                    template: \"\\n    <kendo-calendar-header\\n        [currentDate]=\\\"activeDate\\\"\\n        [min]=\\\"min\\\"\\n        [max]=\\\"max\\\"\\n        [activeView]=\\\"activeView\\\"\\n        [templateRef]=\\\"headerTitleTemplateRef\\\"\\n        (today)=\\\"handleDateChange($event)\\\"\\n    >\\n    </kendo-calendar-header>\\n    <table class=\\\"k-calendar-weekdays\\\" style=\\\"table-layout: auto;\\\" *ngIf=\\\"isMonthView()\\\">\\n        <thead>\\n            <tr>\\n                <th *ngFor=\\\"let name of weekNames\\\" [style.width.%]=\\\"colWidth\\\">{{name}}</th>\\n            </tr>\\n        </thead>\\n    </table>\\n    <kendo-virtualization\\n        [tabindex]=\\\"-1\\\"\\n        [skip]=\\\"skip\\\"\\n        [take]=\\\"take\\\"\\n        [total]=\\\"total\\\"\\n        [itemHeight]=\\\"viewHeight\\\"\\n        [topOffset]=\\\"viewOffset\\\"\\n        [bottomOffset]=\\\"bottomOffset\\\"\\n        [scrollOffsetSize]=\\\"viewOffset\\\"\\n        [maxScrollDifference]=\\\"viewHeight\\\"\\n        (pageChange)=\\\"onPageChange($event)\\\"\\n        (scrollChange)=\\\"scrollChange($event)\\\"\\n        (activeIndexChange)=\\\"setActiveDate($event)\\\"\\n        >\\n        <table #list>\\n            <colgroup><col *ngFor=\\\"let _ of cols\\\" /></colgroup>\\n\\n            <tbody *kFor=\\\"let date of dates\\\"\\n                   kendoCalendarView\\n                   role=\\\"rowgroup\\\"\\n                   [activeView]=\\\"activeView\\\"\\n                   [isActive]=\\\"isActive\\\"\\n                   [min]=\\\"min\\\" [max]=\\\"max\\\"\\n                   [cellUID]=\\\"cellUID\\\"\\n                   [focusedDate]=\\\"focusedDate\\\"\\n                   [selectedDate]=\\\"value\\\"\\n                   [weekNumber]=\\\"weekNumber\\\"\\n                   [templateRef]=\\\"cellTemplateRef\\\"\\n                   [weekNumberTemplateRef]=\\\"weekNumberTemplateRef\\\"\\n                   [viewDate]=\\\"date\\\"\\n                   (change)=\\\"handleDateChange($event)\\\"\\n            ></tbody>\\n        </table>\\n    </kendo-virtualization>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    ViewListComponent.ctorParameters = function () { return [\n        { type: BusViewService },\n        { type: ChangeDetectorRef },\n        { type: IntlService },\n        { type: CalendarDOMService },\n        { type: Renderer2 }\n    ]; };\n    ViewListComponent.propDecorators = {\n        cellTemplateRef: [{ type: Input }],\n        weekNumberTemplateRef: [{ type: Input }],\n        headerTitleTemplateRef: [{ type: Input }],\n        activeView: [{ type: Input }],\n        cellUID: [{ type: Input }],\n        focusedDate: [{ type: Input }],\n        isActive: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        value: [{ type: Input }],\n        weekNumber: [{ type: Input }],\n        activeDateChange: [{ type: Output }],\n        valueChange: [{ type: Output }],\n        pageChange: [{ type: Output }],\n        virtualization: [{ type: ViewChild, args: [VirtualizationComponent,] }],\n        list: [{ type: ViewChild, args: ['list', { static: true },] }],\n        getComponentClass: [{ type: HostBinding, args: [\"class.k-calendar-view\",] }],\n        getComponentMonthClass: [{ type: HostBinding, args: [\"class.k-calendar-monthview\",] }],\n        getComponentYearClass: [{ type: HostBinding, args: [\"class.k-calendar-yearview\",] }],\n        getComponentDecadeClass: [{ type: HostBinding, args: [\"class.k-calendar-decadeview\",] }],\n        getComponentCenturyClass: [{ type: HostBinding, args: [\"class.k-calendar-centuryview\",] }]\n    };\n    return ViewListComponent;\n}());\n\nvar KEY_TO_ACTION = {\n    '33': Action.PrevView,\n    '34': Action.NextView,\n    '35': Action.LastInView,\n    '36': Action.FirstInView,\n    '37': Action.Left,\n    '38': Action.Up,\n    '39': Action.Right,\n    '40': Action.Down,\n    'meta+38': Action.UpperView,\n    'meta+40': Action.LowerView\n};\n/**\n * @hidden\n */\nvar NavigationService = /** @class */ (function () {\n    function NavigationService(bus) {\n        this.bus = bus;\n    }\n    NavigationService.prototype.action = function (event) {\n        var action = \"\" + (event.ctrlKey || event.metaKey ? 'meta+' : '') + event.keyCode;\n        return KEY_TO_ACTION[action];\n    };\n    NavigationService.prototype.move = function (value, action, activeView) {\n        var service = this.bus.service(activeView);\n        if (!service) {\n            return value;\n        }\n        if (action === Action.UpperView && this.bus.canMoveUp(activeView)) {\n            this.bus.moveUp(activeView);\n            return value;\n        }\n        if (action === Action.LowerView && this.bus.canMoveDown(activeView)) {\n            this.bus.moveDown(activeView);\n            return value;\n        }\n        return service.move(value, action);\n    };\n    NavigationService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    NavigationService.ctorParameters = function () { return [\n        { type: BusViewService }\n    ]; };\n    return NavigationService;\n}());\n\nvar divideByMagnitude = function (magnitude) { return function (x) { return Math.floor(x / magnitude); }; };\nvar powerByMagnitude = function (magnitude) { return function (x) { return x * magnitude; }; };\n/**\n * @hidden\n */\nvar ScrollSyncService = /** @class */ (function () {\n    function ScrollSyncService(dom, zone) {\n        this.dom = dom;\n        this.zone = zone;\n    }\n    ScrollSyncService.prototype.configure = function (activeView) {\n        var magnitude = Math.max(this.dom.viewHeight(activeView) / this.dom.navigationItemHeight, 1);\n        this.divideByMagnitude = divideByMagnitude(magnitude);\n        this.powerByMagnitude = powerByMagnitude(magnitude);\n    };\n    ScrollSyncService.prototype.sync = function (navigator, view) {\n        var _this = this;\n        this.unsubscribe();\n        if (!navigator || !view) {\n            return;\n        }\n        this.navigator = navigator;\n        this.view = view;\n        this.zone.runOutsideAngular(function () {\n            var navScrolled, monthScrolled;\n            _this.navSubscription = navigator.scroll$()\n                .subscribe(function (e) {\n                if (monthScrolled) {\n                    monthScrolled = false;\n                    return;\n                }\n                navScrolled = true;\n                _this.scrollSiblingOf(e.target);\n            });\n            _this.viewSubscription = view.scroll$()\n                .subscribe(function (e) {\n                if (navScrolled) {\n                    navScrolled = false;\n                    return;\n                }\n                monthScrolled = true;\n                _this.scrollSiblingOf(e.target);\n            });\n        });\n    };\n    ScrollSyncService.prototype.scrollSiblingOf = function (scrolledElement) {\n        var component = this.siblingComponent(scrolledElement);\n        var scrollTop = this.calculateScroll(component, scrolledElement.scrollTop);\n        component.scrollTo(scrollTop);\n    };\n    ScrollSyncService.prototype.siblingComponent = function (scrollableElement) {\n        return this.navigator.container.nativeElement === scrollableElement ? this.view : this.navigator;\n    };\n    ScrollSyncService.prototype.calculateScroll = function (component, scrollTop) {\n        var modifier = component === this.navigator ? this.divideByMagnitude : this.powerByMagnitude;\n        return modifier(scrollTop);\n    };\n    ScrollSyncService.prototype.destroy = function () {\n        this.unsubscribe();\n    };\n    ScrollSyncService.prototype.unsubscribe = function () {\n        if (this.navSubscription) {\n            this.navSubscription.unsubscribe();\n        }\n        if (this.viewSubscription) {\n            this.viewSubscription.unsubscribe();\n        }\n    };\n    ScrollSyncService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ScrollSyncService.ctorParameters = function () { return [\n        { type: CalendarDOMService },\n        { type: NgZone }\n    ]; };\n    return ScrollSyncService;\n}());\n\n/**\n * Used for rendering the cell content of the Calendar. To define the cell template, nest an `<ng-template>` tag\n * with the `kendoCalendarCellTemplate` directive inside the component tag. The template context is set to the\n * current component. To get a reference to the current date, use the `let-date` directive. To provide more details\n * about the current cell, get a reference to the current `cellContext` by using the `let-cellContext` directive.\n *\n * For more examples, refer to the article on [templates]({% slug templates_calendar %}).\n *\n * > `kendoCalendarCellTemplate` is equivalent to\n * > [`kendoCalendarMonthCellTemplate`]({% slug api_dateinputs_monthcelltemplatedirective %}).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * styles: ['.custom { color: red; }'],\n * template: `\n *  <kendo-calendar>\n *    <ng-template kendoCalendarCellTemplate let-date>\n *      <span class=\"custom\">{{date.getDate()}}</span>\n *    </ng-template>\n *  </kendo-calendar>\n * `\n * })\n * class AppComponent { }\n * ```\n */\nvar CellTemplateDirective = /** @class */ (function () {\n    function CellTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    CellTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoCalendarCellTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    CellTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return CellTemplateDirective;\n}());\n\n/**\n * Used for rendering the month cell content of the Calendar. To define the month cell template, nest an `<ng-template>` tag\n * with the `kendoCalendarMonthCellTemplate` directive inside the component tag. The template context is set to the current\n * component. To get a reference to the current date, use the `let-date` directive. To provide more details about the current\n * month cell, get a reference to the current `cellContext` by using the `let-cellContext` directive.\n *\n * For more examples, refer to the article on [templates]({% slug templates_calendar %}).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * styles: ['.custom { color: red; }'],\n * template: `\n *  <kendo-calendar>\n *    <ng-template kendoCalendarMonthCellTemplate let-context=\"cellContext\">\n *      <span class=\"custom\">{{context.formattedValue}}</span>\n *    </ng-template>\n *  </kendo-calendar>\n * `\n * })\n * class AppComponent { }\n * ```\n */\nvar MonthCellTemplateDirective = /** @class */ (function () {\n    function MonthCellTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    MonthCellTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoCalendarMonthCellTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    MonthCellTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return MonthCellTemplateDirective;\n}());\n\n/**\n * Used for rendering the year cell content of the Calendar. To define the year cell template, nest an\n * `<ng-template>` tag with the `kendoCalendarYearCellTemplate` directive inside the component tag.\n * The template context is set to the current component. To get a reference to the current date, use\n * the `let-date` directive. To provide more details about the current year cell, get a reference to the\n * current `cellContext` by using the `let-cellContext` directive.\n *\n * For more examples, refer to the article on [templates]({% slug templates_calendar %}).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * styles: ['.custom { color: red; }'],\n * template: `\n *  <kendo-calendar [activeView]=\"activeView\">\n *    <ng-template kendoCalendarYearCellTemplate let-context=\"cellContext\">\n *      <span class=\"custom\">{{context.formattedValue}}</span>\n *    </ng-template>\n *  </kendo-calendar>\n * `\n * })\n * class AppComponent {\n *  public activeView: CalendarView = 'year';\n * }\n * ```\n */\nvar YearCellTemplateDirective = /** @class */ (function () {\n    function YearCellTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    YearCellTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoCalendarYearCellTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    YearCellTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return YearCellTemplateDirective;\n}());\n\n/**\n * Used for rendering the decade cell content of the Calendar. To define the decade cell template, nest an `<ng-template>`\n * tag with the `kendoCalendarDecadeCellTemplate` directive inside the component tag. The template context is set to the\n * current component. To get a reference to the current date, use the `let-date` directive. To provide more details about\n * the current decade cell, get a reference to the current `cellContext` by using the `let-cellContext` directive.\n *\n * For more examples, refer to the article on [templates]({% slug templates_calendar %}).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * styles: ['.custom { color: red; }'],\n * template: `\n *  <kendo-calendar [activeView]=\"activeView\">\n *    <ng-template kendoCalendarDecadeCellTemplate let-context=\"cellContext\">\n *      <span class=\"custom\">{{context.formattedValue}}</span>\n *    </ng-template>\n *  </kendo-calendar>\n * `\n * })\n * class AppComponent {\n *  public activeView: CalendarView = 'decade';\n * }\n * ```\n */\nvar DecadeCellTemplateDirective = /** @class */ (function () {\n    function DecadeCellTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    DecadeCellTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoCalendarDecadeCellTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    DecadeCellTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return DecadeCellTemplateDirective;\n}());\n\n/**\n * Used for rendering the century cell content of the Calendar. To define the century cell template, nest an `<ng-template>`\n * tag with the `kendoCalendarCenturyCellTemplate` directive inside the component tag. The template context is set to the\n * current component. To get a reference to the current date, use the `let-date` directive. To provide more details about\n * the current century cell, get a reference to the current `cellContext` by using the `let-cellContext` directive.\n *\n * For more examples, refer to the article on [templates]({% slug templates_calendar %}).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * styles: ['.custom { color: red; }'],\n * template: `\n *  <kendo-calendar [activeView]=\"activeView\">\n *    <ng-template kendoCalendarCenturyCellTemplate let-context=\"cellContext\">\n *      <span class=\"custom\">{{context.formattedValue}}</span>\n *    </ng-template>\n *  </kendo-calendar>\n * `\n * })\n * class AppComponent {\n *  public activeView: CalendarView = 'century';\n * }\n * ```\n */\nvar CenturyCellTemplateDirective = /** @class */ (function () {\n    function CenturyCellTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    CenturyCellTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoCalendarCenturyCellTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    CenturyCellTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return CenturyCellTemplateDirective;\n}());\n\n/**\n * Used for rendering the week number cell content in the month view of the Calendar. To define the month week number cell template,\n * nest an `<ng-template>` tag with the `kendoCalendarWeekNumberCellTemplate` directive inside the component tag. The template\n * context is set to the current component. To get a reference to the current date, use the `let-date` directive. To provide more\n * details about the current week number cell, get a reference to the current `cellContext` by using the `let-cellContext` directive.\n *\n * For more examples, refer to the article on [templates]({% slug templates_calendar %}).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * styles: ['.custom { color: red; }'],\n * template: `\n *  <kendo-calendar [weekNumber]=\"true\">\n *    <ng-template kendoCalendarWeekNumberCellTemplate let-context=\"cellContext\">\n *      <span class=\"custom\">{{context.formattedValue}}</span>\n *    </ng-template>\n *  </kendo-calendar>\n * `\n * })\n * class AppComponent { }\n * ```\n */\nvar WeekNumberCellTemplateDirective = /** @class */ (function () {\n    function WeekNumberCellTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    WeekNumberCellTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoCalendarWeekNumberCellTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    WeekNumberCellTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return WeekNumberCellTemplateDirective;\n}());\n\n/**\n * Used for rendering the header title of the Calendar. To define the header title template, nest an `<ng-template>` tag\n * with the `kendoCalendarHeaderTitleTemplate` directive inside the component tag. The template context is set to the\n * current component. To get a reference to the current title, use the `let-title` directive. To provide more details about\n * the current title, get a reference to the current `date` by using the `let-date` directive or get a reference to the\n * current active view  by using the `let-activeView` directive.\n *\n * For more examples, refer to the article on [templates]({% slug templates_calendar %}).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * styles: ['.custom { color: red; }'],\n * template: `\n *  <kendo-calendar>\n *    <ng-template kendoCalendarHeaderTitleTemplate let-title>\n *      <span class=\"custom\">{{title}}</span>\n *    </ng-template>\n *  </kendo-calendar>\n * `\n * })\n * class AppComponent { }\n * ```\n */\nvar HeaderTitleTemplateDirective = /** @class */ (function () {\n    function HeaderTitleTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    HeaderTitleTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoCalendarHeaderTitleTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    HeaderTitleTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return HeaderTitleTemplateDirective;\n}());\n\n/**\n * Used for rendering the navigation item of the Calendar. To define the navigation item template, nest an `<ng-template>`\n * tag with the `kendoCalendarNavigationItemTemplate` directive inside the component tag. The template context is set to the\n * current component. To get a reference to the current item value, use the `let-title` directive. To provide more details\n * about the current title, get a reference to the current `date` by using the `let-date='date'` directive or get a reference\n * to the current active view by using the `let-activeView='activeView'` directive.\n *\n * For more examples, refer to the article on [templates]({% slug templates_calendar %}).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * styles: ['.custom { color: red; }'],\n * template: `\n *  <kendo-calendar>\n *    <ng-template kendoCalendarNavigationItemTemplate let-title>\n *      <span class=\"custom\">{{title}}</span>\n *    </ng-template>\n *  </kendo-calendar>\n * `\n * })\n * class AppComponent { }\n * ```\n */\nvar NavigationItemTemplateDirective = /** @class */ (function () {\n    function NavigationItemTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NavigationItemTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoCalendarNavigationItemTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    NavigationItemTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return NavigationItemTemplateDirective;\n}());\n\n/**\n * @hidden\n */\nvar PickerService = /** @class */ (function () {\n    function PickerService() {\n        this.onFocus = new EventEmitter();\n        this.onBlur = new EventEmitter();\n        this.sameDateSelected = new EventEmitter();\n    }\n    return PickerService;\n}());\n\n/**\n * @hidden\n */\nvar minValidator = function (minValue) {\n    return function (control) {\n        var err = {\n            minError: {\n                minValue: minValue,\n                value: control.value\n            }\n        };\n        if (!minValue || !control.value) {\n            return null;\n        }\n        return control.value < minValue ? err : null;\n    };\n};\n\n/**\n * @hidden\n */\nvar maxValidator = function (maxValue) {\n    return function (control) {\n        var err = {\n            maxError: {\n                maxValue: maxValue,\n                value: control.value\n            }\n        };\n        if (!maxValue || !control.value) {\n            return null;\n        }\n        return control.value > maxValue ? err : null;\n    };\n};\n\n/**\n * @hidden\n */\nvar requiresZoneOnBlur = function (ngControl) { return ngControl &&\n    (!ngControl.touched || (ngControl.control && ngControl.control.updateOn === 'blur')); };\n/**\n * @hidden\n */\nvar preventDefault = function (args) { return args.preventDefault(); };\n/**\n * @hidden\n */\nvar currentFocusTarget = function (blurArgs) { return blurArgs.relatedTarget || document.activeElement; };\n/**\n * @hidden\n */\nvar isPresent = function (value) { return value !== undefined && value !== null; };\n/**\n * @hidden\n *\n * If the provided parameter is an array with at least one item\n * and all items in the array are numbers, returns `true.\n */\nvar isNumberArray = function (value) { return Array.isArray(value) && value.length > 0 && value.every(function (item) { return typeof item === 'number'; }); };\n/**\n * @hidden\n *\n * If the provided parameter is an array with at least one item\n * and all items in the array are dates, returns `true`.\n */\nvar isDateArray = function (value) { return Array.isArray(value) && value.length > 0 && value.every(function (item) { return item instanceof Date; }); };\n\nvar noop$1 = function () { return false; };\nvar DISABLED_DATES_DOC_LINK = 'https://www.telerik.com/kendo-angular-ui/components/dateinputs/calendar/disabled-dates/';\n/**\n * @hidden\n */\nvar DisabledDatesService = /** @class */ (function () {\n    function DisabledDatesService() {\n        /**\n         * Emits every time the `isDateDisabled` method changes.\n         */\n        this.changes = new Subject();\n        /**\n         * Based on the user-defined `disabledDates` input evaluates if the date is disabled.\n         * If not set, returns `false`.\n         */\n        this.isDateDisabled = noop$1;\n    }\n    /**\n     * Configures the `isDateDisabled` function.\n     *\n     * * If a function is provided, uses it as-is and passes each date to it for evaluation.\n     * The time part is set to `midnight`.\n     * * If a `Date[]` is provided, creates a function that checks the targeted date against\n     * the listed dates and, if the targeted date is listed, marks it as disabled.\n     * * If a `Day[]` is provided, creates a function that evaluates the provided days of the\n     * week as disabled.\n     */\n    DisabledDatesService.prototype.initialize = function (disabledDates) {\n        if (typeof disabledDates === 'function') {\n            this.isDateDisabled = function (date) { return disabledDates(getDate(date)); };\n        }\n        else if (isNumberArray(disabledDates)) {\n            var disabledWeekDays_1 = new Set(disabledDates);\n            this.isDateDisabled = function (date) { return disabledWeekDays_1.has(date.getDay()); };\n        }\n        else if (isDateArray(disabledDates)) {\n            var normalizedDisabledDates_1 = new Set(disabledDates.map(function (date) { return getDate(date).getTime(); }));\n            this.isDateDisabled = function (date) { return normalizedDisabledDates_1.has(getDate(date).getTime()); };\n        }\n        else {\n            this.isDateDisabled = noop$1;\n            this.notifyInvalidInput(disabledDates);\n        }\n        this.notifyServiceChange();\n    };\n    DisabledDatesService.prototype.notifyInvalidInput = function (disabledDates) {\n        if (isPresent(disabledDates) && isDevMode()) {\n            throw new Error(\"The 'disabledDates' value should be a function, a Day array or a Date array. Check \" + DISABLED_DATES_DOC_LINK + \" for more information.\");\n        }\n    };\n    DisabledDatesService.prototype.notifyServiceChange = function () {\n        this.changes.next();\n    };\n    DisabledDatesService.decorators = [\n        { type: Injectable },\n    ];\n    return DisabledDatesService;\n}());\n\n/* tslint:disable:no-forward-ref */\nvar BOTTOM_VIEW_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-bottomview';\nvar TOP_VIEW_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-topview';\nvar MIN_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-min';\nvar MAX_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-max';\nvar VALUE_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/calendar/#toc-using-with-json';\nvar virtualizationProp = function (x) { return x ? x.virtualization : null; };\n/**\n * @hidden\n */\nvar CALENDAR_VALUE_ACCESSOR = {\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return CalendarComponent; }) //tslint:disable-line:no-use-before-declare\n};\n/**\n * @hidden\n */\nvar CALENDAR_RANGE_VALIDATORS = {\n    multi: true,\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return CalendarComponent; }) //tslint:disable-line:no-use-before-declare\n};\n/**\n * @hidden\n */\nvar KENDO_INPUT_PROVIDER = {\n    provide: KendoInput,\n    useExisting: forwardRef(function () { return CalendarComponent; }) //tslint:disable-line:no-use-before-declare\n};\n/**\n * Represents the [Kendo UI Calendar component for Angular]({% slug overview_calendar %}#toc-basic-usage).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-calendar></kendo-calendar>\n * `\n * })\n * class AppComponent { }\n * ```\n */\nvar CalendarComponent = /** @class */ (function () {\n    function CalendarComponent(bus, dom, element, navigator, renderer, cdr, ngZone, injector, scrollSyncService, disabledDatesService, pickerService) {\n        this.bus = bus;\n        this.dom = dom;\n        this.element = element;\n        this.navigator = navigator;\n        this.renderer = renderer;\n        this.cdr = cdr;\n        this.ngZone = ngZone;\n        this.injector = injector;\n        this.scrollSyncService = scrollSyncService;\n        this.disabledDatesService = disabledDatesService;\n        this.pickerService = pickerService;\n        /**\n         * @hidden\n         */\n        this.id = guid();\n        /**\n         * Determines whether the built-in min or max validators are enforced when validating a form.\n         */\n        this.rangeValidation = false;\n        /**\n         * Sets or gets the `disabled` property of the Calendar and\n         * determines whether the component is active\n         * ([see example]({% slug disabled_calendar %})).\n         */\n        this.disabled = false;\n        /**\n         * Sets or gets the `tabindex` property of the Calendar. Based on the\n         * [HTML `tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) behavior,\n         * it determines whether the component is focusable.\n         */\n        this.tabindex = 0;\n        /**\n         * Sets or gets the `navigation` property of the Calendar\n         * and determines whether the navigation side-bar will be displayed\n         * ([see example]({% slug sidebar_calendar %})).\n         */\n        this.navigation = true;\n        /**\n         * Defines the active view that the Calendar initially renders\n         * ([see example]({% slug activeview_calendar %})).\n         * By default, the active view is `month`.\n         *\n         * > You have to set `activeView` within the `topView`-`bottomView` range.\n         */\n        this.activeView = CalendarViewEnum[CalendarViewEnum.month];\n        /**\n         * Defines the bottommost view to which the user can navigate\n         * ([see example]({% slug dates_calendar %}#toc-partial-dates)).\n         */\n        this.bottomView = CalendarViewEnum[CalendarViewEnum.month];\n        /**\n         * Defines the topmost view to which the user can navigate\n         * ([see example]({% slug sidebar_calendar %}#toc-partial-dates)).\n         */\n        this.topView = CalendarViewEnum[CalendarViewEnum.century];\n        /**\n         * Determines whether to display a week number column in the `month` view\n         * ([see example]({% slug weeknumcolumn_calendar %})).\n         */\n        this.weekNumber = false;\n        /**\n         * Fires when the active view is changed\n         * ([more information and example]({% slug overview_calendar %}#toc-events)).\n         */\n        this.activeViewChange = new EventEmitter();\n        /**\n         * Fires when the active view date is changed\n         * ([more information and example]({% slug overview_calendar %}#toc-events)).\n         */\n        this.activeViewDateChange = new EventEmitter();\n        /**\n         * Fires when the value is changed\n         * ([more information and example]({% slug overview_calendar %}#toc-events)).\n         */\n        this.valueChange = new EventEmitter();\n        this.isActive = false;\n        this.cellUID = guid();\n        this._min = new Date(MIN_DATE);\n        this._max = new Date(MAX_DATE);\n        this._focusedDate = getToday();\n        this.onControlChange = noop;\n        this.onControlTouched = noop;\n        this.onValidatorChange = noop;\n        this.minValidateFn = noop;\n        this.maxValidateFn = noop;\n        this.syncNavigation = true;\n        this.domEvents = [];\n        this.resolvedPromise = Promise.resolve(null);\n        this.destroyed = false;\n        this.setClasses(element.nativeElement);\n        if (this.pickerService) {\n            this.pickerService.calendar = this;\n        }\n    }\n    Object.defineProperty(CalendarComponent.prototype, \"focusedDate\", {\n        get: function () {\n            return this._focusedDate;\n        },\n        /**\n         * Sets or gets the `focusedDate` property of the Calendar and\n         * defines the focused date of the component\n         * ([see example]({% slug dates_calendar %}#toc-focused-dates)).\n         *\n         * > If the Calendar is out of the min or max range, it normalizes the defined `focusedDate`.\n         */\n        set: function (focusedDate) {\n            this._focusedDate = focusedDate || getToday();\n            this.setAriaActivedescendant();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"min\", {\n        get: function () {\n            return this._min;\n        },\n        /**\n         * Sets or gets the `min` property of the Calendar and\n         * defines the minimum allowed date value\n         * ([see example]({% slug dateranges_calendar %})).\n         * By default, the `min` value is `1900-1-1`.\n         */\n        set: function (min) {\n            this._min = min || new Date(MIN_DATE);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"max\", {\n        get: function () {\n            return this._max;\n        },\n        /**\n         * Sets or gets the `max` property of the Calendar and\n         * defines the maximum allowed date value\n         * ([see example]({% slug dateranges_calendar %})).\n         * By default, the `max` value is `2099-12-31`.\n         */\n        set: function (max) {\n            this._max = max || new Date(MAX_DATE);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"value\", {\n        /**\n         * Sets or gets the `value` property of the Calendar and defines the selected value of the component.\n         *\n         * > The `value` has to be a valid\n         * [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.\n         */\n        get: function () {\n            return this._value;\n        },\n        set: function (candidate) {\n            this.verifyValue(candidate);\n            this._value = cloneDate(candidate);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"disabledDates\", {\n        /**\n         * Sets the dates of the Calendar that will be disabled\n         * ([see example]({% slug disabled_dates_calendar %})).\n         */\n        set: function (value) {\n            this.disabledDatesService.initialize(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"cellTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.cellTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"monthCellTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.monthCellTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"yearCellTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.yearCellTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"decadeCellTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.decadeCellTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"centuryCellTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.centuryCellTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"weekNumberTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.weekNumberTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"headerTitleTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.headerTitleTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"navigationItemTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.navigationItemTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"activeViewEnum\", {\n        get: function () {\n            var activeView = CalendarViewEnum[this.activeView];\n            return activeView < this.bottomViewEnum ? this.bottomViewEnum : activeView;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"bottomViewEnum\", {\n        get: function () {\n            return CalendarViewEnum[this.bottomView];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"topViewEnum\", {\n        get: function () {\n            return CalendarViewEnum[this.topView];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"widgetId\", {\n        get: function () {\n            return this.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"widgetRole\", {\n        get: function () {\n            return 'grid';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"calendarTabIndex\", {\n        get: function () {\n            return this.disabled ? undefined : this.tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"ariaDisabled\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CalendarComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.dom.calculateHeights(this.element.nativeElement);\n        this.scrollSyncService.configure(this.activeViewEnum);\n        this.viewChangeSubscription = this.bus.viewChanged.subscribe(function (_a) {\n            var view = _a.view;\n            _this.activeView = CalendarViewEnum[view];\n            _this.emitEvent(_this.activeViewChange, _this.activeView);\n            _this.scrollSyncService.configure(view);\n            _this.detectChanges(); // requires zone if templates\n        });\n        this.control = this.injector.get(NgControl, null);\n        if (this.element) {\n            this.ngZone.runOutsideAngular(function () {\n                _this.bindEvents();\n            });\n        }\n    };\n    CalendarComponent.prototype.ngOnChanges = function (changes) {\n        this.verifyChanges();\n        this.bus.configure(this.bottomViewEnum, this.topViewEnum);\n        this.scrollSyncService.configure(this.activeViewEnum);\n        var useValue = hasExistingValue(changes, 'value') && !hasExistingValue(changes, 'focusedDate');\n        var focusedDate = dateInRange(cloneDate(useValue ? this.value : this.focusedDate), this.min, this.max);\n        this.focusedDate = !isEqual(this.focusedDate, focusedDate) ? focusedDate : this.focusedDate;\n        if (changes.navigation) {\n            this.syncNavigation = true;\n        }\n        if (changes.min || changes.max || changes.rangeValidation) {\n            this.minValidateFn = this.rangeValidation ? minValidator(this.min) : noop;\n            this.maxValidateFn = this.rangeValidation ? maxValidator(this.max) : noop;\n            this.onValidatorChange();\n        }\n    };\n    CalendarComponent.prototype.ngAfterViewInit = function () {\n        this.setAriaActivedescendant();\n    };\n    CalendarComponent.prototype.ngAfterViewChecked = function () {\n        if (!this.syncNavigation) {\n            return;\n        }\n        this.syncNavigation = false;\n        this.scrollSyncService.sync(virtualizationProp(this.navigationView), virtualizationProp(this.monthView));\n    };\n    CalendarComponent.prototype.ngOnDestroy = function () {\n        this.scrollSyncService.destroy();\n        this.viewChangeSubscription.unsubscribe();\n        this.domEvents.forEach(function (unbindCallback) { return unbindCallback(); });\n        if (this.pickerService) {\n            this.pickerService.calendar = null;\n        }\n        if (this.pageChangeSubscription) {\n            this.pageChangeSubscription.unsubscribe();\n        }\n        this.destroyed = true;\n    };\n    /**\n     * Focuses the host element of the Calendar.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"calendar.focus()\">Focus calendar</button>\n     *  <kendo-calendar #calendar></kendo-calendar>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    CalendarComponent.prototype.focus = function () {\n        if (!this.element) {\n            return;\n        }\n        this.element.nativeElement.focus();\n    };\n    /**\n     * Blurs the Calendar component.\n     */\n    CalendarComponent.prototype.blur = function () {\n        if (!this.element) {\n            return;\n        }\n        this.element.nativeElement.blur();\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.containsElement = function (element) {\n        var _this = this;\n        return Boolean(closest(element, function (node) { return node === _this.element.nativeElement; }));\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.handleNavigation = function (candidate) {\n        if (this.disabled) {\n            return;\n        }\n        this.focusedDate = dateInRange(cloneDate(candidate) || this.focusedDate, this.min, this.max);\n        this.detectChanges();\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.onPageChange = function () {\n        var _this = this;\n        if (!NgZone.isInAngularZone()) {\n            if (this.pageChangeSubscription) {\n                this.pageChangeSubscription.unsubscribe();\n            }\n            this.pageChangeSubscription = from(this.resolvedPromise)\n                .subscribe(function () {\n                _this.detectChanges(); // requires zone if templates\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.handleDateChange = function (candidate) {\n        var _this = this;\n        var canNavigateDown = this.bus.canMoveDown(this.activeViewEnum);\n        var isSameDate = !canNavigateDown && isEqual(candidate, this.value);\n        this.focusedDate = cloneDate(candidate) || this.focusedDate;\n        if (this.disabled) {\n            return;\n        }\n        if (isSameDate) {\n            this.emitSameDate();\n            return;\n        }\n        if (canNavigateDown) {\n            this.bus.moveDown(this.activeViewEnum);\n            return;\n        }\n        if (!this.disabledDatesService.isDateDisabled(candidate)) {\n            this.ngZone.run(function () {\n                _this.value = cloneDate(candidate);\n                _this.onControlChange(cloneDate(candidate));\n                _this.valueChange.emit(cloneDate(candidate));\n                _this.cdr.markForCheck();\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.writeValue = function (candidate) {\n        this.verifyValue(candidate);\n        this.focusedDate = dateInRange(cloneDate(candidate) || this.focusedDate, this.min, this.max);\n        this.value = cloneDate(candidate);\n        this.cdr.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.registerOnChange = function (fn) {\n        this.onControlChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.registerOnTouched = function (fn) {\n        this.onControlTouched = fn;\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this.cdr.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.validate = function (control) {\n        return this.minValidateFn(control) || this.maxValidateFn(control);\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.registerOnValidatorChange = function (fn) {\n        this.onValidatorChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.activeCellTemplate = function () {\n        switch (this.activeViewEnum) {\n            case CalendarViewEnum.month:\n                return this.monthCellTemplate || this.cellTemplate;\n            case CalendarViewEnum.year:\n                return this.yearCellTemplate;\n            case CalendarViewEnum.decade:\n                return this.decadeCellTemplate;\n            case CalendarViewEnum.century:\n                return this.centuryCellTemplate;\n            default:\n                return null;\n        }\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.emitEvent = function (emitter, args) {\n        if (hasObservers(emitter)) {\n            this.ngZone.run(function () {\n                emitter.emit(args);\n            });\n        }\n    };\n    CalendarComponent.prototype.setClasses = function (element) {\n        this.renderer.addClass(element, 'k-widget');\n        this.renderer.addClass(element, 'k-calendar');\n        this.renderer.addClass(element, 'k-calendar-infinite');\n    };\n    CalendarComponent.prototype.verifyChanges = function () {\n        if (!isDevMode()) {\n            return;\n        }\n        if (this.min > this.max) {\n            throw new Error(\"The max value should be bigger than the min. See \" + MIN_DOC_LINK + \" and \" + MAX_DOC_LINK + \".\");\n        }\n        if (this.bottomViewEnum > this.topViewEnum) {\n            throw new Error(\"The topView should be greater than bottomView. See \" + BOTTOM_VIEW_DOC_LINK + \" and \" + TOP_VIEW_DOC_LINK + \".\");\n        }\n    };\n    CalendarComponent.prototype.verifyValue = function (candidate) {\n        if (!isDevMode()) {\n            return;\n        }\n        if (candidate && !(candidate instanceof Date)) {\n            throw new Error(\"The 'value' should be a valid JavaScript Date instance. Check \" + VALUE_DOC_LINK + \" for possible resolution.\");\n        }\n    };\n    CalendarComponent.prototype.bindEvents = function () {\n        var element = this.element.nativeElement;\n        this.domEvents.push(this.renderer.listen(element, 'blur', this.handleBlur.bind(this)), this.renderer.listen(element, 'focus', this.handleFocus.bind(this)), this.renderer.listen(element, 'mousedown', preventDefault), this.renderer.listen(element, 'click', this.handleClick.bind(this)), this.renderer.listen(element, 'keydown', this.handleKeydown.bind(this)));\n    };\n    CalendarComponent.prototype.emitBlur = function (args) {\n        if (this.pickerService) {\n            this.pickerService.onBlur.emit(args);\n        }\n    };\n    CalendarComponent.prototype.emitFocus = function () {\n        if (this.pickerService) {\n            this.pickerService.onFocus.emit();\n        }\n    };\n    CalendarComponent.prototype.handleBlur = function (args) {\n        var _this = this;\n        this.isActive = false;\n        // the injector can get the NgControl instance of the parent component (for example, the DateTimePicker)\n        // and enters the zone for no reason because the parent component is still untouched\n        if (!this.pickerService && requiresZoneOnBlur(this.control)) {\n            this.ngZone.run(function () {\n                _this.onControlTouched();\n                _this.emitBlur(args);\n            });\n        }\n        else {\n            this.emitBlur(args);\n            this.detectChanges();\n        }\n    };\n    CalendarComponent.prototype.handleFocus = function () {\n        this.isActive = true;\n        if (!NgZone.isInAngularZone()) {\n            this.detectChanges();\n        }\n        this.emitFocus();\n    };\n    CalendarComponent.prototype.handleClick = function () {\n        if (!this.isActive) {\n            if (this.monthView.isScrolled()) {\n                this.focusedDate = cloneDate(this.focusedDate); //XXX: forces change detect\n                this.detectChanges();\n            }\n            this.focus();\n        }\n    };\n    CalendarComponent.prototype.handleKeydown = function (args) {\n        // reserve the alt + arrow key commands for the picker\n        var arrowKeyPressed = [Keys.ArrowUp, Keys.ArrowRight, Keys.ArrowDown, Keys.ArrowLeft].indexOf(args.keyCode) !== -1;\n        if (isPresent(this.pickerService) && arrowKeyPressed && args.altKey) {\n            return;\n        }\n        var candidate = dateInRange(this.navigator.move(this.focusedDate, this.navigator.action(args), this.activeViewEnum), this.min, this.max);\n        if (!isEqual(this.focusedDate, candidate)) {\n            this.focusedDate = candidate;\n            this.detectChanges();\n            args.preventDefault();\n        }\n        if (args.keyCode === Keys.Enter) {\n            this.handleDateChange(this.focusedDate);\n        }\n    };\n    CalendarComponent.prototype.detectChanges = function () {\n        if (!this.destroyed) {\n            this.cdr.detectChanges();\n        }\n    };\n    CalendarComponent.prototype.emitSameDate = function () {\n        if (this.pickerService) {\n            this.pickerService.sameDateSelected.emit();\n        }\n    };\n    CalendarComponent.prototype.setAriaActivedescendant = function () {\n        if (!isPresent(this.element)) {\n            return;\n        }\n        var focusedCellId = this.cellUID + this.focusedDate.getTime();\n        this.renderer.setAttribute(this.element.nativeElement, 'aria-activedescendant', focusedCellId);\n    };\n    CalendarComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    exportAs: 'kendo-calendar',\n                    providers: [\n                        BusViewService,\n                        CALENDAR_VALUE_ACCESSOR,\n                        CALENDAR_RANGE_VALIDATORS,\n                        KENDO_INPUT_PROVIDER,\n                        LocalizationService,\n                        DisabledDatesService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.calendar'\n                        },\n                        NavigationService,\n                        ScrollSyncService\n                    ],\n                    selector: 'kendo-calendar',\n                    template: \"\\n    <ng-container kendoCalendarLocalizedMessages\\n        i18n-today=\\\"kendo.calendar.today|The label for the today button in the calendar header\\\"\\n        today=\\\"TODAY\\\"\\n    >\\n    </ng-container>\\n    <kendo-calendar-navigation\\n        *ngIf=\\\"navigation\\\"\\n        [activeView]=\\\"activeViewEnum\\\"\\n        [focusedDate]=\\\"focusedDate\\\"\\n        [min]=\\\"min\\\"\\n        [max]=\\\"max\\\"\\n        [templateRef]=\\\"navigationItemTemplate?.templateRef\\\"\\n        (valueChange)=\\\"handleNavigation($event)\\\"\\n        (pageChange)=\\\"onPageChange()\\\"\\n    >\\n    </kendo-calendar-navigation>\\n    <kendo-calendar-viewlist\\n        [activeView]=\\\"activeViewEnum\\\"\\n        [isActive]=\\\"isActive\\\"\\n        [cellTemplateRef]=\\\"activeCellTemplate()?.templateRef\\\"\\n        [headerTitleTemplateRef]=\\\"headerTitleTemplate?.templateRef\\\"\\n        [weekNumberTemplateRef]=\\\"weekNumberTemplate?.templateRef\\\"\\n        [cellUID]=\\\"cellUID\\\"\\n        [min]=\\\"min\\\"\\n        [max]=\\\"max\\\"\\n        [focusedDate]=\\\"focusedDate\\\"\\n        [weekNumber]=\\\"weekNumber\\\"\\n        [value]=\\\"value\\\"\\n        (valueChange)=\\\"handleDateChange($event)\\\"\\n        (activeDateChange)=\\\"emitEvent(activeViewDateChange, $event)\\\"\\n        (pageChange)=\\\"onPageChange()\\\"\\n    >\\n    </kendo-calendar-viewlist>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    CalendarComponent.ctorParameters = function () { return [\n        { type: BusViewService },\n        { type: CalendarDOMService },\n        { type: ElementRef },\n        { type: NavigationService },\n        { type: Renderer2 },\n        { type: ChangeDetectorRef },\n        { type: NgZone },\n        { type: Injector },\n        { type: ScrollSyncService },\n        { type: DisabledDatesService },\n        { type: PickerService, decorators: [{ type: Optional }] }\n    ]; };\n    CalendarComponent.propDecorators = {\n        id: [{ type: Input }],\n        focusedDate: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        rangeValidation: [{ type: Input }],\n        value: [{ type: Input }],\n        disabled: [{ type: Input }],\n        tabindex: [{ type: Input }],\n        tabIndex: [{ type: Input }],\n        disabledDates: [{ type: Input }],\n        navigation: [{ type: Input }],\n        activeView: [{ type: Input }],\n        bottomView: [{ type: Input }],\n        topView: [{ type: Input }],\n        weekNumber: [{ type: Input }, { type: HostBinding, args: ['class.k-week-number',] }],\n        activeViewChange: [{ type: Output }],\n        activeViewDateChange: [{ type: Output }],\n        valueChange: [{ type: Output }],\n        cellTemplate: [{ type: ContentChild, args: [CellTemplateDirective, { static: true },] }],\n        cellTemplateRef: [{ type: Input, args: ['cellTemplate',] }],\n        monthCellTemplate: [{ type: ContentChild, args: [MonthCellTemplateDirective, { static: true },] }],\n        monthCellTemplateRef: [{ type: Input, args: ['monthCellTemplate',] }],\n        yearCellTemplate: [{ type: ContentChild, args: [YearCellTemplateDirective, { static: true },] }],\n        yearCellTemplateRef: [{ type: Input, args: ['yearCellTemplate',] }],\n        decadeCellTemplate: [{ type: ContentChild, args: [DecadeCellTemplateDirective, { static: true },] }],\n        decadeCellTemplateRef: [{ type: Input, args: ['decadeCellTemplate',] }],\n        centuryCellTemplate: [{ type: ContentChild, args: [CenturyCellTemplateDirective, { static: true },] }],\n        centuryCellTemplateRef: [{ type: Input, args: ['centuryCellTemplate',] }],\n        weekNumberTemplate: [{ type: ContentChild, args: [WeekNumberCellTemplateDirective, { static: true },] }],\n        weekNumberTemplateRef: [{ type: Input, args: ['weekNumberTemplate',] }],\n        headerTitleTemplate: [{ type: ContentChild, args: [HeaderTitleTemplateDirective, { static: true },] }],\n        headerTitleTemplateRef: [{ type: Input, args: ['headerTitleTemplate',] }],\n        navigationItemTemplate: [{ type: ContentChild, args: [NavigationItemTemplateDirective, { static: true },] }],\n        navigationItemTemplateRef: [{ type: Input, args: ['navigationItemTemplate',] }],\n        navigationView: [{ type: ViewChild, args: [NavigationComponent,] }],\n        monthView: [{ type: ViewChild, args: [ViewListComponent,] }],\n        widgetId: [{ type: HostBinding, args: ['attr.id',] }],\n        widgetRole: [{ type: HostBinding, args: ['attr.role',] }],\n        calendarTabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],\n        ariaDisabled: [{ type: HostBinding, args: ['attr.aria-disabled',] }, { type: HostBinding, args: ['class.k-state-disabled',] }]\n    };\n    return CalendarComponent;\n}());\n\n/**\n * @hidden\n */\nvar Arrow;\n(function (Arrow) {\n    Arrow[Arrow[\"Up\"] = 0] = \"Up\";\n    Arrow[Arrow[\"Down\"] = 1] = \"Down\";\n    Arrow[Arrow[\"None\"] = 2] = \"None\";\n})(Arrow || (Arrow = {}));\n\n/* tslint:disable:max-line-length */\nvar MIN_DOC_LINK$1 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/DateInputComponent/#toc-min';\nvar MAX_DOC_LINK$1 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/DateInputComponent/#toc-max';\nvar VALUE_DOC_LINK$1 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/dateinput/#toc-using-with-json';\nvar DATE_PART_REGEXP = /year|month|<day>/;\nvar TIME_PART_REGEXP = /hour|minute|second|millisecond/;\nvar SHORT_PATTERN_LENGTH_REGEXP = /d|M|H|h|m|s/;\nvar getTime = function (date) { return date ? date.getTime() : null; };\nvar padZero = function (length) { return new Array(Math.max(length, 0)).fill('0').join(''); };\nvar unpadZero = function (value) { return value.replace(/^0*/, ''); };\nvar Mask = /** @class */ (function () {\n    function Mask() {\n        this.symbols = \"\";\n    }\n    return Mask;\n}());\nvar KendoDate = /** @class */ (function () {\n    function KendoDate(intl, formatPlaceholder, format, value) {\n        this.intl = intl;\n        this.formatPlaceholder = formatPlaceholder;\n        this.format = format;\n        this.year = true;\n        this.month = true;\n        this.date = true;\n        this.hours = true;\n        this.minutes = true;\n        this.seconds = true;\n        this.milliseconds = true;\n        this.leadingZero = null;\n        this.monthNames = null;\n        this.typedMonthPart = \"\";\n        this.value = getDate(new Date());\n        this.knownParts = \"adHhmMsEy\";\n        this.symbols = {\n            \"E\": \"E\",\n            \"H\": \"H\",\n            \"M\": \"M\",\n            \"a\": \"a\",\n            \"d\": \"d\",\n            \"h\": \"h\",\n            \"m\": \"m\",\n            \"s\": \"s\",\n            \"y\": \"y\"\n        };\n        this.monthNames = this.allFormatedMonths();\n        this.dayPeriods = this.allDayPeriods();\n        if (!value) {\n            this.value = getDate(new Date());\n            var sampleFormat = this.dateFormatString(this.value, this.format).symbols;\n            for (var i = 0; i < sampleFormat.length; i++) {\n                this.setExisting(sampleFormat[i], false);\n            }\n        }\n        else {\n            this.value = cloneDate(value);\n        }\n    }\n    KendoDate.prototype.hasValue = function () {\n        var _this = this;\n        var pred = function (a, p) { return a || p.type !== 'literal' && p.type !== 'dayperiod' && _this.getExisting(p.pattern[0]); };\n        return this.intl.splitDateFormat(this.format).reduce(pred, false);\n    };\n    KendoDate.prototype.getDateObject = function () {\n        for (var i = 0; i < this.knownParts.length; i++) {\n            if (!this.getExisting(this.knownParts[i])) {\n                return null;\n            }\n        }\n        return cloneDate(this.value);\n    };\n    KendoDate.prototype.getTextAndFormat = function () {\n        return this.merge(this.intl.formatDate(this.value, this.format), this.dateFormatString(this.value, this.format));\n    };\n    KendoDate.prototype.getExisting = function (symbol) {\n        switch (symbol) {\n            case \"y\": return this.year;\n            case \"M\":\n            case \"L\": return this.month;\n            case \"d\": return this.date;\n            case \"E\": return this.date && this.month && this.year;\n            case \"h\":\n            case \"H\": return this.hours;\n            case \"m\": return this.minutes;\n            case \"s\": return this.seconds;\n            default: return true;\n        }\n    };\n    KendoDate.prototype.setExisting = function (symbol, value) {\n        switch (symbol) {\n            case \"y\":\n                this.year = value;\n                if (value === false) {\n                    this.value.setFullYear(2000);\n                }\n                break; //allow 2/29 dates\n            case \"M\":\n                this.month = value;\n                if (value === false) {\n                    this.value.setMonth(0);\n                }\n                break; //make sure you can type 31 at day part\n            case \"d\":\n                this.date = value;\n                break;\n            case \"h\":\n            case \"H\":\n                this.hours = value;\n                break;\n            case \"m\":\n                this.minutes = value;\n                break;\n            case \"s\":\n                this.seconds = value;\n                break;\n            default: return;\n        }\n    };\n    KendoDate.prototype.modifyPart = function (symbol, offset) {\n        var newValue = cloneDate(this.value);\n        switch (symbol) {\n            case \"y\":\n                newValue.setFullYear(newValue.getFullYear() + offset);\n                break;\n            case \"M\":\n                newValue = addMonths(this.value, offset);\n                break;\n            case \"d\":\n            case \"E\":\n                newValue.setDate(newValue.getDate() + offset);\n                break;\n            case \"h\":\n            case \"H\":\n                newValue.setHours(newValue.getHours() + offset);\n                break;\n            case \"m\":\n                newValue.setMinutes(newValue.getMinutes() + offset);\n                break;\n            case \"s\":\n                newValue.setSeconds(newValue.getSeconds() + offset);\n                break;\n            case \"a\":\n                newValue.setHours(newValue.getHours() + (12 * offset));\n                break;\n            default: break;\n        }\n        if (newValue.getFullYear() > 0) {\n            this.setExisting(symbol, true);\n            this.value = newValue;\n        }\n    };\n    KendoDate.prototype.parsePart = function (symbol, currentChar, resetSegmentValue) {\n        if (!currentChar) {\n            this.resetLeadingZero();\n            this.setExisting(symbol, false);\n            return { value: null, switchToNext: false };\n        }\n        var baseDate = this.intl.formatDate(this.value, this.format);\n        var dateParts = this.dateFormatString(this.value, this.format);\n        var baseFormat = dateParts.symbols;\n        var replaced = false;\n        var prefix = \"\";\n        var current = \"\";\n        var suffix = \"\";\n        for (var i = 0; i < baseDate.length; i++) {\n            if (baseFormat[i] === symbol) {\n                current += this.getExisting(symbol) ? baseDate[i] : \"0\";\n                replaced = true;\n            }\n            else if (!replaced) {\n                prefix += baseDate[i];\n            }\n            else {\n                suffix += baseDate[i];\n            }\n        }\n        var currentMaxLength = current.length - 3;\n        var parsedDate = null;\n        var month = this.matchMonth(currentChar);\n        var dayPeriod = this.matchDayPeriod(currentChar, symbol);\n        var isZeroCurrentChar = currentChar === '0';\n        var leadingZero = (this.leadingZero || {})[symbol] || 0;\n        if (isZeroCurrentChar) {\n            var valueNumber = parseInt(resetSegmentValue ? currentChar : current + currentChar, 10);\n            if (valueNumber === 0 && !this.isAbbrMonth(dateParts.partMap, symbol)) {\n                this.incrementLeadingZero(symbol);\n            }\n        }\n        else {\n            this.resetLeadingZero();\n        }\n        for (var i = Math.max(0, currentMaxLength); i <= current.length; i++) {\n            var middle = resetSegmentValue ? currentChar : (current.substring(i) + currentChar);\n            var middleNumber = parseInt(middle, 10);\n            parsedDate = this.intl.parseDate(prefix + middle + suffix, this.format);\n            if (!parsedDate && !isNaN(middleNumber) && !isNaN(parseInt(currentChar, 10))) {\n                if (symbol === 'M' && !month) {\n                    var monthNumber = middleNumber - 1;\n                    if (monthNumber > -1 && monthNumber < 12) {\n                        parsedDate = cloneDate(this.value);\n                        parsedDate.setMonth(monthNumber);\n                        if (parsedDate.getMonth() !== monthNumber) {\n                            parsedDate = lastDayOfMonth(addMonths(parsedDate, -1));\n                        }\n                    }\n                }\n                if (symbol === 'y') {\n                    parsedDate = createDate(parseInt(middle, 10), this.month ? this.value.getMonth() : 0, this.date ? this.value.getDate() : 1, this.hours ? this.value.getHours() : 0, this.minutes ? this.value.getMinutes() : 0, this.seconds ? this.value.getSeconds() : 0, this.milliseconds ? this.value.getMilliseconds() : 0);\n                    if (this.date && parsedDate.getDate() !== this.value.getDate()) {\n                        parsedDate = lastDayOfMonth(addMonths(parsedDate, -1));\n                    }\n                }\n            }\n            if (parsedDate) {\n                //move to next segment if the part will overflow with next char\n                //when start from empty date (01, then 010), padded zeros should be trimmed\n                var patternValue = this.partPattern(dateParts.partMap, symbol).pattern;\n                var peekDate = this.intl.parseDate(\"\" + prefix + this.peek(middle, patternValue) + suffix, this.format);\n                var patternLength = this.patternLength(patternValue) || patternValue.length;\n                var patternSatisfied = (leadingZero + (unpadZero(middle) || currentChar).length) >= patternLength;\n                var switchToNext = peekDate === null || patternSatisfied;\n                this.value = parsedDate;\n                this.setExisting(symbol, true);\n                return { value: this.value, switchToNext: switchToNext };\n            }\n        }\n        if (month) {\n            parsedDate = this.intl.parseDate(prefix + month + suffix, this.format);\n            if (parsedDate) {\n                this.value = parsedDate;\n                this.setExisting(symbol, true);\n                return { value: this.value, switchToNext: false };\n            }\n        }\n        if (dayPeriod) {\n            parsedDate = this.intl.parseDate(prefix + dayPeriod + suffix, this.format);\n            if (parsedDate) {\n                this.value = parsedDate;\n                return { value: this.value, switchToNext: true };\n            }\n        }\n        if (isZeroCurrentChar) {\n            this.setExisting(symbol, false);\n        }\n        return { value: null, switchToNext: false };\n    };\n    KendoDate.prototype.resetLeadingZero = function () {\n        var hasLeadingZero = this.leadingZero !== null;\n        this.setLeadingZero(null);\n        return hasLeadingZero;\n    };\n    KendoDate.prototype.setLeadingZero = function (leadingZero) {\n        this.leadingZero = leadingZero;\n    };\n    KendoDate.prototype.incrementLeadingZero = function (symbol) {\n        var leadingZero = this.leadingZero || {};\n        leadingZero[symbol] = (leadingZero[symbol] || 0) + 1;\n        this.leadingZero = leadingZero;\n    };\n    KendoDate.prototype.isAbbrMonth = function (parts, symbol) {\n        var pattern = this.partPattern(parts, symbol);\n        return pattern.type === 'month' && pattern.names;\n    };\n    KendoDate.prototype.partPattern = function (parts, symbol) {\n        return parts.filter(function (part) { return part.pattern.indexOf(symbol) !== -1; })[0];\n    };\n    KendoDate.prototype.peek = function (value, pattern) {\n        var peekValue = unpadZero(value) + '0';\n        return padZero(pattern.length - peekValue.length) + peekValue;\n    };\n    KendoDate.prototype.matchMonth = function (typedChar) {\n        this.typedMonthPart += typedChar.toLowerCase();\n        if (!this.monthNames) {\n            return \"\";\n        }\n        while (this.typedMonthPart.length > 0) {\n            for (var i = 0; i < this.monthNames.length; i++) {\n                if (this.monthNames[i].toLowerCase().indexOf(this.typedMonthPart) === 0) {\n                    return this.monthNames[i];\n                }\n            }\n            var monthAsNum = parseInt(this.typedMonthPart, 10);\n            if (monthAsNum >= 1 && monthAsNum <= 12 && monthAsNum.toString() === this.typedMonthPart /*ensure they exact match*/) {\n                return this.monthNames[monthAsNum - 1];\n            }\n            this.typedMonthPart = this.typedMonthPart.substring(1, this.typedMonthPart.length);\n        }\n        return \"\";\n    };\n    KendoDate.prototype.matchDayPeriod = function (typedChar, symbol) {\n        var lowerChart = String(typedChar).toLowerCase();\n        if (symbol === 'a' && this.dayPeriods) {\n            if (this.dayPeriods.am.toLowerCase().startsWith(lowerChart)) {\n                return this.dayPeriods.am;\n            }\n            else if (this.dayPeriods.pm.toLowerCase().startsWith(lowerChart)) {\n                return this.dayPeriods.pm;\n            }\n        }\n        return '';\n    };\n    KendoDate.prototype.allFormatedMonths = function () {\n        var dateFormatParts = this.intl.splitDateFormat(this.format);\n        for (var i = 0; i < dateFormatParts.length; i++) {\n            if (dateFormatParts[i].type === \"month\" && dateFormatParts[i].names) {\n                return this.intl.dateFormatNames(dateFormatParts[i].names);\n            }\n        }\n        return null;\n    };\n    KendoDate.prototype.allDayPeriods = function () {\n        var dateFormatParts = this.intl.splitDateFormat(this.format);\n        for (var i = 0; i < dateFormatParts.length; i++) {\n            if (dateFormatParts[i].type === \"dayperiod\" && dateFormatParts[i].names) {\n                return this.intl.dateFormatNames(dateFormatParts[i].names);\n            }\n        }\n        return null;\n    };\n    KendoDate.prototype.patternLength = function (pattern) {\n        if (pattern[0] === 'y') {\n            return 4;\n        }\n        if (SHORT_PATTERN_LENGTH_REGEXP.test(pattern)) {\n            return 2;\n        }\n        return 0;\n    };\n    //TODO: REMOVE!\n    KendoDate.prototype.dateFormatString = function (date, format) {\n        var dateFormatParts = this.intl.splitDateFormat(format);\n        var parts = [];\n        var partMap = [];\n        for (var i = 0; i < dateFormatParts.length; i++) {\n            var partLength = this.intl.formatDate(date, { pattern: dateFormatParts[i].pattern }).length;\n            while (partLength > 0) {\n                parts.push(this.symbols[dateFormatParts[i].pattern[0]] || \"_\");\n                partMap.push(dateFormatParts[i]);\n                partLength--;\n            }\n        }\n        var returnValue = new Mask();\n        returnValue.symbols = parts.join(\"\");\n        returnValue.partMap = partMap;\n        return returnValue;\n    };\n    KendoDate.prototype.merge = function (text, mask) {\n        // Important: right to left.\n        var resultText = \"\";\n        var resultFormat = \"\";\n        var format = mask.symbols;\n        for (var r = format.length - 1; r >= 0; r--) {\n            if (this.knownParts.indexOf(format[r]) === -1 || this.getExisting(format[r])) {\n                resultText = text[r] + resultText;\n                resultFormat = format[r] + resultFormat;\n            }\n            else {\n                var currentSymbol = format[r];\n                while (r >= 0 && currentSymbol === format[r]) {\n                    r--;\n                }\n                r++;\n                if (this.leadingZero && this.leadingZero[currentSymbol]) {\n                    resultText = '0' + resultText;\n                }\n                else {\n                    resultText = this.dateFieldName(mask.partMap[r]) + resultText;\n                }\n                while (resultFormat.length < resultText.length) {\n                    resultFormat = format[r] + resultFormat;\n                }\n            }\n        }\n        return [resultText, resultFormat];\n    };\n    KendoDate.prototype.dateFieldName = function (part) {\n        var formatPlaceholder = this.formatPlaceholder || 'wide';\n        if (formatPlaceholder[part.type]) {\n            return formatPlaceholder[part.type];\n        }\n        if (formatPlaceholder === 'formatPattern') {\n            return part.pattern;\n        }\n        return this.intl.dateFieldName(Object.assign(part, { nameType: formatPlaceholder }));\n    };\n    return KendoDate;\n}());\n/**\n * Represents the [Kendo UI DateInput component for Angular]({% slug overview_dateinput %}#toc-basic-usage).\n */\nvar DateInputComponent = /** @class */ (function () {\n    function DateInputComponent(cdr, intl, renderer, element, ngZone, injector, localization, pickerService) {\n        this.cdr = cdr;\n        this.intl = intl;\n        this.renderer = renderer;\n        this.element = element;\n        this.ngZone = ngZone;\n        this.injector = injector;\n        this.localization = localization;\n        this.pickerService = pickerService;\n        /**\n         * @hidden\n         */\n        this.focusableId = \"k-\" + guid();\n        /**\n         * Sets or gets the `disabled` property of the DateInput and\n         * determines whether the component is active\n         * ([see example]({% slug disabled_dateinput %})).\n         */\n        this.disabled = false;\n        /**\n         * Sets or gets the read-only state of the DateInput\n         * ([see example]({% slug readonly_dateinput %})).\n         */\n        this.readonly = false;\n        /**\n         * Sets the title of the input element of the DateInput.\n         */\n        this.title = \"\";\n        /**\n         * Sets or gets the `tabIndex` property of the DateInput.\n         * .\n         */\n        this.tabindex = 0;\n        /**\n         * Specifies the date format that is used to display the input value\n         * ([see example]({% slug formats_dateinput %})).\n         */\n        this.format = \"d\";\n        /**\n         * Specifies the hint the DateInput displays when its value is `null`.\n         * For more information, refer to the article on\n         * [placeholders]({% slug placeholders_dateinput %}).\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-dateinput placeholder=\"Enter birth date...\"></kendo-dateinput>\n         * `\n         * })\n         * class AppComponent { }\n         * ```\n         */\n        this.placeholder = null;\n        /**\n         * Determines whether the built-in min or max validators are to be enforced when a form is being validated.\n         */\n        this.rangeValidation = true;\n        /**\n         * @hidden\n         * Based on the min and max values, specifies whether the value will be auto-corrected while typing.\n         */\n        this.autoCorrect = false;\n        /**\n         * Specifies whether the **Up** and **Down** spin buttons will be rendered.\n         * For more information, refer to the article on\n         * [spinner buttons]({% slug spinbuttons_dateinput %}).\n         */\n        this.spinners = false;\n        /**\n         * @hidden\n         */\n        this.isPopupOpen = false;\n        /**\n         * @hidden\n         */\n        this.hasPopup = false;\n        /**\n         * Fires each time the user selects a new value.\n         * For more information, refer to the section on\n         * [events]({% slug overview_dateinput %}#toc-events).\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time the user selects a new value.\n         * For more information, refer to the section on\n         * [events]({% slug overview_dateinput %}#toc-events).\n         */\n        this.valueUpdate = new EventEmitter();\n        /**\n         * Fires each time the user focuses the input element.\n         * For more information, refer to the section on\n         * [events]({% slug overview_dateinput %}#toc-events).\n         *\n         * > To wire the event programmatically, use the `onFocus` property.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-dateinput (focus)=\"handleFocus()\"></kendo-dateinput>\n         * `\n         * })\n         * class AppComponent {\n         *   public handleFocus(): void {\n         *      console.log(\"Component is focused\");\n         *   }\n         * }\n         * ```\n         *\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the input element gets blurred.\n         * For more information, refer to the section on\n         * [events]({% slug overview_dateinput %}#toc-events).\n         *\n         * > To wire the event programmatically, use the `onBlur` property.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-dateinput (blur)=\"handleBlur()\"></kendo-dateinput>\n         * `\n         * })\n         * class AppComponent {\n         *   public handleBlur(): void {\n         *      console.log(\"Component is blurred\");\n         *   }\n         * }\n         * ```\n         *\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        this.arrow = Arrow;\n        this.arrowDirection = Arrow.None;\n        this.formatSections = { date: false, time: false };\n        this.hasMousedown = false;\n        this.currentValue = \"\";\n        this.currentFormat = \"\";\n        this.backspace = false;\n        this.resetSegmentValue = true;\n        this.minValidateFn = noop;\n        this.maxValidateFn = noop;\n        this._value = null;\n        this._active = false;\n        this.kendoDate = null;\n        this.paste = false;\n        this.domEvents = [];\n        this.onControlChange = noop;\n        this.onControlTouched = noop;\n        this.onValidatorChange = noop;\n        this.symbolsMap = this.dateSymbolMap();\n        this.updateFormatSections();\n        if (this.pickerService) {\n            this.pickerService.input = this;\n        }\n    }\n    Object.defineProperty(DateInputComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateInputComponent.prototype, \"max\", {\n        get: function () {\n            return this._max;\n        },\n        /**\n         * Specifies the biggest date that is valid\n         * ([see example]({% slug dateranges_dateinput %})).\n         */\n        set: function (max) {\n            this._max = max;\n            this.ariaValueMax = getTime(max);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateInputComponent.prototype, \"min\", {\n        get: function () {\n            return this._min;\n        },\n        /**\n         * Specifies the smallest date that is valid\n         * ([see example]({% slug dateranges_dateinput %})).\n         */\n        set: function (min) {\n            this._min = min;\n            this.ariaValueMin = getTime(min);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateInputComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        /**\n         * Specifies the value of the DateInput component.\n         *\n         * > The `value` has to be a valid [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.\n         */\n        set: function (value) {\n            this.verifyValue(value);\n            if (this.autoCorrect && !isInRange(value, this.min, this.max)) {\n                return;\n            }\n            this._value = cloneDate(value);\n            this.valueUpdate.emit(cloneDate(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateInputComponent.prototype, \"wrapperClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateInputComponent.prototype, \"disabledClass\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateInputComponent.prototype, \"inputElement\", {\n        get: function () {\n            return this.dateInput ? this.dateInput.nativeElement : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateInputComponent.prototype, \"inputValue\", {\n        get: function () {\n            return (this.inputElement || {}).value || '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateInputComponent.prototype, \"isActive\", {\n        get: function () {\n            return this._active;\n        },\n        set: function (value) {\n            this._active = value;\n            if (!this.wrap) {\n                return;\n            }\n            var element = this.wrap.nativeElement;\n            if (value) {\n                this.renderer.addClass(element, 'k-state-focused');\n            }\n            else {\n                this.renderer.removeClass(element, 'k-state-focused');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty\n     */\n    DateInputComponent.prototype.isEmpty = function () {\n        return !this.currentValue || !String(this.currentValue).trim();\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.containsElement = function (element) {\n        var _this = this;\n        return Boolean(closest(element, function (node) { return node === _this.element.nativeElement; }));\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.ngOnChanges = function (changes) {\n        this.verifyRange();\n        if (changes.min || changes.max || changes.rangeValidation) {\n            this.minValidateFn = this.rangeValidation ? minValidator(this.min) : noop;\n            this.maxValidateFn = this.rangeValidation ? maxValidator(this.max) : noop;\n            this.onValidatorChange();\n        }\n        if (changes.format) {\n            this.symbolsMap = this.dateSymbolMap();\n            this.updateFormatSections();\n        }\n        var isEqualToKendoDate = this.kendoDate && isEqual(this.value, this.kendoDate.getDateObject());\n        if (changes.format || !isEqualToKendoDate || changes.placeholder) {\n            this.kendoDate = this.getKendoDate(this.value);\n            this.updateElementValue(this.isActive);\n        }\n    };\n    DateInputComponent.prototype.ngOnDestroy = function () {\n        if (this.intlSubscription) {\n            this.intlSubscription.unsubscribe();\n        }\n        if (this.pickerService) {\n            this.pickerService.input = null;\n        }\n        this.domEvents.forEach(function (unbindCallback) { return unbindCallback(); });\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.validate = function (control) {\n        return this.minValidateFn(control) || this.maxValidateFn(control);\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.registerOnValidatorChange = function (fn) {\n        this.onValidatorChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.kendoDate = this.getKendoDate(this.value);\n        this.updateElementValue();\n        this.intlSubscription = this.intl.changes.subscribe(this.intlChange.bind(this));\n        this.control = this.injector.get(NgControl, null);\n        if (this.element) {\n            this.renderer.removeAttribute(this.element.nativeElement, 'tabindex');\n            this.ngZone.runOutsideAngular(function () {\n                _this.bindEvents();\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this.cdr.markForCheck();\n    };\n    //ngModel binding\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.writeValue = function (value) {\n        this.verifyValue(value);\n        this.kendoDate = this.getKendoDate(value);\n        this.value = cloneDate(value);\n        this.updateElementValue(this.isActive);\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.triggerChange = function () {\n        var value = this.kendoDate.getDateObject();\n        if (+value !== +this.value) {\n            this.value = cloneDate(value);\n            this.notify();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.notify = function () {\n        var _this = this;\n        this.ngZone.run(function () {\n            _this.onControlChange(cloneDate(_this.value));\n            _this.valueChange.emit(cloneDate(_this.value));\n        });\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.registerOnChange = function (fn) {\n        this.onControlChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.registerOnTouched = function (fn) {\n        this.onControlTouched = fn;\n    };\n    /**\n     * Focuses the DateInput component.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"dateinput.focus()\">Focus date input</button>\n     *  <kendo-dateinput #dateinput></kendo-dateinput>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    DateInputComponent.prototype.focus = function () {\n        var input = this.inputElement;\n        if (input) {\n            input.focus();\n            this.selectDateSegment(this.currentFormat[0]);\n        }\n    };\n    /**\n     * Blurs the DateInput component.\n     */\n    DateInputComponent.prototype.blur = function () {\n        var input = this.inputElement;\n        if (input) {\n            input.blur();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.handleButtonClick = function (offset) {\n        this.arrowDirection = Arrow.None;\n        this.modifyDateSegmentValue(offset);\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.modifyDateSegmentValue = function (offset) {\n        var caret = this.caret();\n        var symbol = this.currentFormat[caret[0]];\n        var step = (this.steps || {})[this.symbolsMap[symbol]] || 1;\n        this.kendoDate.modifyPart(symbol, offset * step);\n        this.putDateInRange();\n        this.updateElementValue(this.isActive);\n        this.triggerChange();\n        this.selectDateSegment(symbol);\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.switchDateSegment = function (offset) {\n        var caret = this.caret();\n        if (this.kendoDate.resetLeadingZero()) {\n            this.updateElementValue(this.isActive);\n        }\n        if (caret[0] < caret[1] && this.currentFormat[caret[0]] !== this.currentFormat[caret[1] - 1]) {\n            this.selectNearestSegment(offset > 0 ? caret[0] : caret[1] - 1);\n            this.resetSegmentValue = true;\n            return true;\n        }\n        var previousFormatSymbol = this.currentFormat[caret[0]];\n        var a = caret[0] + offset;\n        while (a > 0 && a < this.currentFormat.length) {\n            if (this.currentFormat[a] !== previousFormatSymbol &&\n                this.currentFormat[a] !== \"_\") {\n                break;\n            }\n            a += offset;\n        }\n        if (this.currentFormat[a] === \"_\") {\n            //there is not known symbol found\n            return false;\n        }\n        var b = a;\n        while (b >= 0 && b < this.currentFormat.length) {\n            if (this.currentFormat[b] !== this.currentFormat[a]) {\n                break;\n            }\n            b += offset;\n        }\n        if (a > b && (b + 1 !== caret[0] || a + 1 !== caret[1])) {\n            this.caret(b + 1, a + 1);\n            this.resetSegmentValue = true;\n            return true;\n        }\n        else if (a < b && (a !== caret[0] || b !== caret[1])) {\n            this.caret(a, b);\n            this.resetSegmentValue = true;\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.selectDateSegment = function (symbol) {\n        var begin = -1;\n        var end = 0;\n        for (var i = 0; i < this.currentFormat.length; i++) {\n            if (this.currentFormat[i] === symbol) {\n                end = i + 1;\n                if (begin === -1) {\n                    begin = i;\n                }\n            }\n        }\n        if (begin < 0) {\n            begin = 0;\n        }\n        this.caret(0, 0);\n        this.caret(begin, end);\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.handleClick = function () {\n        this.hasMousedown = false;\n        if (this.isActive) {\n            this.selectNearestSegment(this.caret()[0]);\n        }\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.handleDragAndDrop = function (args) {\n        args.preventDefault();\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.handleMousedown = function () {\n        this.hasMousedown = true;\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.handleFocus = function (args) {\n        var _this = this;\n        this.isActive = true;\n        this.updateElementValue();\n        if (!this.hasMousedown) {\n            this.caret(0, this.inputValue.length);\n        }\n        this.hasMousedown = false;\n        if (hasObservers(this.onFocus)) {\n            this.ngZone.run(function () {\n                _this.emitFocus(args);\n            });\n        }\n        else {\n            this.emitFocus(args);\n        }\n    };\n    /**\n     * @hidden\n     */\n    DateInputComponent.prototype.handleBlur = function (args) {\n        var _this = this;\n        this.isActive = false;\n        this.resetSegmentValue = true;\n        this.kendoDate.resetLeadingZero();\n        this.updateElementValue();\n        if (hasObservers(this.onBlur) || requiresZoneOnBlur(this.control)) {\n            this.ngZone.run(function () {\n                _this.onControlTouched();\n                _this.emitBlur(args);\n            });\n        }\n        else {\n            this.emitBlur(args);\n        }\n    };\n    DateInputComponent.prototype.getKendoDate = function (value) {\n        var leadingZero = ((this.kendoDate || {}) || null).leadingZero;\n        var kendoDate = new KendoDate(this.intl, this.formatPlaceholder, this.format, value);\n        kendoDate.setLeadingZero(this.isActive ? leadingZero : null);\n        return kendoDate;\n    };\n    DateInputComponent.prototype.dateSymbolMap = function () {\n        var reducer = function (map$$1, part) {\n            map$$1[part.pattern[0]] = part.type;\n            return map$$1;\n        };\n        return this.intl.splitDateFormat(this.format).reduce(reducer, {});\n    };\n    DateInputComponent.prototype.updateElementValue = function (isActive) {\n        var start = this.caret()[0]; //XXX: get caret position before input is updated\n        var texts = this.kendoDate.getTextAndFormat();\n        var showPlaceholder = !this.isActive && this.placeholder !== null && this.placeholder !== undefined && !this.kendoDate.hasValue();\n        var input = this.inputElement;\n        this.currentFormat = texts[1];\n        this.currentValue = !showPlaceholder ? texts[0] : '';\n        this.renderer.setProperty(input, \"value\", this.currentValue);\n        if (input.placeholder !== this.placeholder) {\n            this.renderer.setProperty(input, \"placeholder\", this.placeholder);\n        }\n        var currentDate = this.kendoDate.getDateObject();\n        this.ariaValueNow = getTime(currentDate);\n        this.ariaValueText = this.intl.formatDate(currentDate, this.format);\n        if (isActive) {\n            this.selectNearestSegment(start);\n        }\n    };\n    DateInputComponent.prototype.caret = function (start, end) {\n        if (end === void 0) { end = start; }\n        var isPosition = start !== undefined;\n        var returnValue = [start, start];\n        var element = this.inputElement;\n        if (isPosition && (this.disabled || this.readonly)) {\n            return undefined;\n        }\n        try {\n            if (element.selectionStart !== undefined) {\n                if (isPosition) {\n                    if (isDocumentAvailable() && document.activeElement !== element) {\n                        element.focus();\n                    }\n                    element.setSelectionRange(start, end);\n                }\n                returnValue = [element.selectionStart, element.selectionEnd];\n            }\n        }\n        catch (e) {\n            returnValue = [];\n        }\n        return returnValue;\n    };\n    DateInputComponent.prototype.selectNearestSegment = function (index) {\n        // Finds the nearest (in both directions) known part.\n        for (var i = index, j = index - 1; i < this.currentFormat.length || j >= 0; i++, j--) {\n            if (i < this.currentFormat.length && this.currentFormat[i] !== \"_\") {\n                this.selectDateSegment(this.currentFormat[i]);\n                return;\n            }\n            if (j >= 0 && this.currentFormat[j] !== \"_\") {\n                this.selectDateSegment(this.currentFormat[j]);\n                return;\n            }\n        }\n    };\n    DateInputComponent.prototype.verifyRange = function () {\n        if (!isDevMode()) {\n            return;\n        }\n        if (!isValidRange(this.min, this.max)) {\n            throw new Error(\"The max value should be bigger than the min. See \" + MIN_DOC_LINK$1 + \" and \" + MAX_DOC_LINK$1 + \".\");\n        }\n    };\n    DateInputComponent.prototype.verifyValue = function (value) {\n        if (!isDevMode()) {\n            return;\n        }\n        if (value && !(value instanceof Date)) {\n            throw new Error(\"The 'value' should be a valid JavaScript Date instance. Check \" + VALUE_DOC_LINK$1 + \" for possible resolution.\");\n        }\n    };\n    DateInputComponent.prototype.putDateInRange = function () {\n        var currentDate = this.kendoDate.getDateObject();\n        var candidate = dateInRange(currentDate, this.min, this.max);\n        if (this.autoCorrect && !isEqual(currentDate, candidate)) {\n            this.kendoDate = this.getKendoDate(candidate);\n        }\n    };\n    DateInputComponent.prototype.updateFormatSections = function () {\n        this.formatSections = this.intl.splitDateFormat(this.format)\n            .reduce(function (_a, p) {\n            var date = _a.date, time = _a.time;\n            return {\n                date: date || DATE_PART_REGEXP.test(p.type),\n                time: time || TIME_PART_REGEXP.test(p.type)\n            };\n        }, { date: false, time: false });\n    };\n    DateInputComponent.prototype.intlChange = function () {\n        this.updateFormatSections();\n        this.kendoDate = this.getKendoDate(this.value);\n        this.updateElementValue(this.isActive);\n    };\n    DateInputComponent.prototype.updateOnPaste = function () {\n        var value = this.intl.parseDate(this.inputValue, this.format) || this.value;\n        var notify = +value !== +this.value;\n        this.writeValue(value);\n        if (notify) {\n            this.notify();\n        }\n    };\n    DateInputComponent.prototype.bindEvents = function () {\n        var element = this.element.nativeElement;\n        var mousewheelHandler = this.handleMouseWheel.bind(this);\n        this.domEvents.push(this.renderer.listen(element, 'DOMMouseScroll', mousewheelHandler), this.renderer.listen(element, 'mousewheel', mousewheelHandler), this.renderer.listen(element, 'keydown', this.handleKeydown.bind(this)), this.renderer.listen(element, 'paste', this.handlePaste.bind(this)), this.renderer.listen(element, 'input', this.handleInput.bind(this)));\n    };\n    DateInputComponent.prototype.handleMouseWheel = function (event) {\n        if (this.disabled || this.readonly || !this.isActive) {\n            return;\n        }\n        event = window.event || event;\n        if (event.shiftKey) {\n            this.switchDateSegment((event.wheelDelta || -event.detail) > 0 ? -1 : 1);\n        }\n        else {\n            this.modifyDateSegmentValue((event.wheelDelta || -event.detail) > 0 ? 1 : -1);\n        }\n        event.returnValue = false;\n        if (event.preventDefault) {\n            event.preventDefault();\n        }\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        }\n    };\n    DateInputComponent.prototype.handlePaste = function () {\n        this.paste = true;\n    };\n    DateInputComponent.prototype.handleKeydown = function (event) {\n        if (this.disabled || this.readonly || event.altKey || event.ctrlKey || event.metaKey) {\n            return;\n        }\n        if (event.keyCode === Keys.Tab) {\n            var moved = this.switchDateSegment(event.shiftKey ? -1 : 1);\n            if (moved) {\n                event.preventDefault();\n            }\n            return;\n        }\n        if (event.keyCode === Keys.Backspace) {\n            this.backspace = true;\n            return;\n        }\n        switch (event.keyCode) {\n            case Keys.ArrowDown:\n                this.modifyDateSegmentValue(-1);\n                break;\n            case Keys.ArrowUp:\n                this.modifyDateSegmentValue(1);\n                break;\n            case Keys.ArrowRight:\n                this.switchDateSegment(1);\n                break;\n            case Keys.ArrowLeft:\n                this.switchDateSegment(-1);\n                break;\n            case Keys.Home:\n                this.selectNearestSegment(0);\n                break;\n            case Keys.End:\n                this.selectNearestSegment(this.inputValue.length);\n                break;\n            default:\n                return; //skip the preventDefault if we didn't handled the keyCode\n        }\n        event.preventDefault();\n    };\n    DateInputComponent.prototype.handleInput = function () {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        if (this.paste) {\n            this.updateOnPaste();\n            this.paste = false;\n            return;\n        }\n        var diff = approximateStringMatching(this.currentValue, this.currentFormat, this.inputValue, this.caret()[0]);\n        var navigationOnly = (diff.length === 1 && diff[0][1] === \"_\");\n        var switchPart = false;\n        if (!navigationOnly) {\n            var parsedPart = void 0;\n            for (var i = 0; i < diff.length; i++) {\n                parsedPart = this.kendoDate.parsePart(diff[i][0], diff[i][1], this.resetSegmentValue);\n                switchPart = parsedPart.switchToNext;\n            }\n            var candidate = this.kendoDate.getDateObject();\n            if (this.value && candidate && !this.formatSections.date) {\n                this.kendoDate = this.getKendoDate(setTime(this.value, candidate));\n            }\n        }\n        this.resetSegmentValue = false;\n        this.putDateInRange();\n        this.updateElementValue(this.isActive);\n        this.triggerChange();\n        if (diff.length && diff[0][0] !== \"_\") {\n            this.selectDateSegment(diff[0][0]);\n        }\n        if (switchPart || navigationOnly) {\n            this.switchDateSegment(1);\n        }\n        if (this.backspace) {\n            this.switchDateSegment(-1);\n        }\n        this.backspace = false;\n    };\n    DateInputComponent.prototype.emitFocus = function (args) {\n        this.onFocus.emit();\n        if (this.pickerService) {\n            this.pickerService.onFocus.emit(args);\n        }\n    };\n    DateInputComponent.prototype.emitBlur = function (args) {\n        this.onBlur.emit();\n        if (this.pickerService) {\n            this.pickerService.onBlur.emit(args);\n        }\n    };\n    DateInputComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    exportAs: 'kendo-dateinput',\n                    providers: [\n                        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return DateInputComponent; }), multi: true },\n                        { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return DateInputComponent; }), multi: true },\n                        { provide: L10N_PREFIX, useValue: 'kendo.dateinput' },\n                        { provide: KendoInput, useExisting: forwardRef(function () { return DateInputComponent; }) },\n                        LocalizationService\n                    ],\n                    selector: 'kendo-dateinput',\n                    template: \"\\n    <ng-container kendoDateInputLocalizedMessages\\n        i18n-increment=\\\"kendo.dateinput.increment|The label for the **Increment** button in the DateInput\\\"\\n        increment=\\\"Increase value\\\"\\n\\n        i18n-decrement=\\\"kendo.dateinput.decrement|The label for the **Decrement** button in the DateInput\\\"\\n        decrement=\\\"Decrease value\\\"\\n    >\\n    </ng-container>\\n    <span class=\\\"k-dateinput-wrap\\\" #wrap>\\n        <input\\n            #dateInput\\n            autocomplete=\\\"off\\\"\\n            autocorrect=\\\"off\\\"\\n            autocapitalize=\\\"off\\\"\\n            spellcheck=\\\"false\\\"\\n            class=\\\"k-input\\\"\\n            role=\\\"spinbutton\\\"\\n            [id]=\\\"focusableId\\\"\\n            [title]=\\\"title\\\"\\n            [tabindex]=\\\"tabindex\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [readonly]=\\\"readonly\\\"\\n            [placeholder]=\\\"placeholder\\\"\\n            [attr.aria-expanded]=\\\"isPopupOpen\\\"\\n            [attr.aria-haspopup]=\\\"hasPopup\\\"\\n            [attr.aria-valuemin]=\\\"ariaValueMin\\\"\\n            [attr.aria-valuemax]=\\\"ariaValueMax\\\"\\n            [attr.aria-valuenow]=\\\"ariaValueNow\\\"\\n            [attr.aria-valuetext]=\\\"ariaValueText\\\"\\n            [kendoEventsOutsideAngular]=\\\"{\\n                click: handleClick,\\n                focus: handleFocus,\\n                mousedown: handleMousedown,\\n                touchstart: handleMousedown,\\n                dragstart: handleDragAndDrop,\\n                drop: handleDragAndDrop,\\n                blur: handleBlur\\n            }\\\"\\n            [scope]=\\\"this\\\"\\n            />\\n        <span *ngIf=\\\"spinners\\\" class=\\\"k-select\\\" (mousedown)=\\\"$event.preventDefault()\\\">\\n            <span\\n                class=\\\"k-link k-link-increase\\\"\\n                [class.k-state-active]=\\\"arrowDirection === arrow.Up\\\"\\n                (mousedown)=\\\"arrowDirection = arrow.Up\\\"\\n                (mouseleave)=\\\"arrowDirection = arrow.None\\\"\\n                (click)=\\\"handleButtonClick(1)\\\"\\n                [title]=\\\"localization.get('increment')\\\"\\n                [attr.aria-label]=\\\"localization.get('increment')\\\">\\n                <span class=\\\"k-icon k-i-arrow-n\\\"></span>\\n            </span>\\n            <span\\n                class=\\\"k-link k-link-decrease\\\"\\n                (click)=\\\"handleButtonClick(-1)\\\"\\n                [class.k-state-active]=\\\"arrowDirection === arrow.Down\\\"\\n                (mousedown)=\\\"arrowDirection = arrow.Down\\\"\\n                (mouseleave)=\\\"arrowDirection = arrow.None\\\"\\n                [title]=\\\"localization.get('decrement')\\\"\\n                [attr.aria-label]=\\\"localization.get('decrement')\\\">\\n                <span class=\\\"k-icon k-i-arrow-s\\\"></span>\\n            </span>\\n        </span>\\n    </span>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    DateInputComponent.ctorParameters = function () { return [\n        { type: ChangeDetectorRef },\n        { type: IntlService },\n        { type: Renderer2 },\n        { type: ElementRef },\n        { type: NgZone },\n        { type: Injector },\n        { type: LocalizationService },\n        { type: PickerService, decorators: [{ type: Optional }] }\n    ]; };\n    DateInputComponent.propDecorators = {\n        focusableId: [{ type: Input }],\n        disabled: [{ type: Input }],\n        readonly: [{ type: Input }],\n        title: [{ type: Input }],\n        tabindex: [{ type: Input }],\n        tabIndex: [{ type: Input }],\n        format: [{ type: Input }],\n        formatPlaceholder: [{ type: Input }],\n        placeholder: [{ type: Input }],\n        steps: [{ type: Input }],\n        max: [{ type: Input }],\n        min: [{ type: Input }],\n        rangeValidation: [{ type: Input }],\n        autoCorrect: [{ type: Input }],\n        value: [{ type: Input }],\n        spinners: [{ type: Input }],\n        isPopupOpen: [{ type: Input }],\n        hasPopup: [{ type: Input }],\n        valueChange: [{ type: Output }],\n        valueUpdate: [{ type: Output }],\n        onFocus: [{ type: Output, args: ['focus',] }],\n        onBlur: [{ type: Output, args: ['blur',] }],\n        dateInput: [{ type: ViewChild, args: ['dateInput', { static: true },] }],\n        wrap: [{ type: ViewChild, args: ['wrap',] }],\n        wrapperClass: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-dateinput',] }],\n        disabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }]\n    };\n    return DateInputComponent;\n}());\n\n/**\n * A preventable event instance which is triggered by the `open` and `close` events.\n */\nvar PreventableEvent = /** @class */ (function () {\n    function PreventableEvent() {\n        this.prevented = false;\n    }\n    /**\n     * Prevents the default action for a specified event.\n     * In this way, the source component suppresses the built-in behavior that follows the event.\n     */\n    PreventableEvent.prototype.preventDefault = function () {\n        this.prevented = true;\n    };\n    /**\n     * If the event is prevented by any of its subscribers, returns `true`.\n     *\n     * @returns `true` if the default action was prevented. Otherwise, returns `false`.\n     */\n    PreventableEvent.prototype.isDefaultPrevented = function () {\n        return this.prevented;\n    };\n    return PreventableEvent;\n}());\n\n/**\n * @hidden\n */\nvar TOUCH_ENABLED = new InjectionToken('dateinputs-touch-enabled');\n\n/**\n * @hidden\n */\nvar disabledDatesValidator = function (isDateDisabled) {\n    return function (control) {\n        if (!isDateDisabled || !control.value) {\n            return null;\n        }\n        var error = {\n            disabledDate: true\n        };\n        return isDateDisabled(control.value) ? error : null;\n    };\n};\n\n/* tslint:disable:max-line-length */\nvar MIN_DOC_LINK$2 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/DatePickerComponent/#toc-min';\nvar MAX_DOC_LINK$2 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/DatePickerComponent/#toc-max';\nvar VALUE_DOC_LINK$2 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/datepicker/#toc-using-with-json';\n/**\n * Represents the [Kendo UI DatePicker component for Angular]({% slug overview_datepicker %}#toc-basic-usage).\n */\nvar DatePickerComponent = /** @class */ (function () {\n    function DatePickerComponent(zone, localization, cdr, popupService, element, renderer, injector, pickerService, disabledDatesService, touchEnabled$$1) {\n        this.zone = zone;\n        this.localization = localization;\n        this.cdr = cdr;\n        this.popupService = popupService;\n        this.element = element;\n        this.renderer = renderer;\n        this.injector = injector;\n        this.pickerService = pickerService;\n        this.disabledDatesService = disabledDatesService;\n        this.touchEnabled = touchEnabled$$1;\n        /**\n         * @hidden\n         */\n        this.focusableId = \"k-\" + guid();\n        /**\n         * Defines the active view that the Calendar initially renders\n         * ([see example]({% slug activeview_datepicker %})).\n         * By default, the active view is `month`.\n         *\n         * > You have to set `activeView` within the `topView`-`bottomView` range.\n         */\n        this.activeView = CalendarViewEnum[CalendarViewEnum.month];\n        /**\n         * Defines the bottommost Calendar view to which the user can navigate\n         * ([see example]({% slug dates_datepicker %}#toc-partial-dates)).\n         */\n        this.bottomView = CalendarViewEnum[CalendarViewEnum.month];\n        /**\n         * Defines the topmost Calendar view to which the user can navigate\n         * ([see example]({% slug dates_datepicker %}#toc-partial-dates)).\n         */\n        this.topView = CalendarViewEnum[CalendarViewEnum.century];\n        /**\n         * Sets or gets the `disabled` property of the DatePicker and determines whether the component is active\n         * ([see example]({% slug disabled_datepicker %})).\n         */\n        this.disabled = false;\n        /**\n         * Sets the read-only state of the DatePicker\n         * ([see example]({% slug readonly_datepicker %})).\n         */\n        this.readonly = false;\n        /**\n         * Sets or gets the `navigation` property of the Calendar\n         * and determines whether the navigation side-bar is displayed.\n         * ([see example]({% slug sidebar_datepicker %})).\n         */\n        this.navigation = true;\n        /**\n         * Specifies the smallest valid date\n         * ([see example]({% slug dateranges_datepicker %})).\n         */\n        this.min = cloneDate(MIN_DATE);\n        /**\n         * Specifies the biggest valid date\n         * ([see example]({% slug dateranges_datepicker %})).\n         */\n        this.max = cloneDate(MAX_DATE);\n        /**\n         * Specifies the focused date of the Calendar component\n         * ([see example]({% slug dates_datepicker %})).\n         */\n        this.focusedDate = null;\n        /**\n         * Specifies the date format that is used to display the input value\n         * ([see example]({% slug formats_datepicker %})).\n         */\n        this.format = \"d\";\n        /**\n         * Specifies the hint the DatePicker displays when its value is `null`.\n         * ([more information and exaples]({% slug placeholders_datepicker %})).\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-datepicker placeholder=\"Enter birth date...\"></kendo-datepicker>\n         * `\n         * })\n         * class AppComponent { }\n         * ```\n         */\n        this.placeholder = null;\n        /**\n         * Sets or gets the `tabindex` property of the DatePicker.\n         */\n        this.tabindex = 0;\n        /**\n         * Sets the title of the input element of the DatePicker.\n         */\n        this.title = \"\";\n        /**\n         * Determines whether the built-in min or max validators are enforced when validating a form.\n         */\n        this.rangeValidation = true;\n        /**\n         * Determines whether the built-in validator for disabled\n         * date ranges is enforced when validating a form\n         * ([see example]({% slug disabled_dates_datepicker %}#toc-validation)).\n         */\n        this.disabledDatesValidation = true;\n        /**\n         * Determines whether to display a week number column in the `month` view of the Calendar\n         * ([see example]({% slug weeknumcolumn_datepicker %})).\n         */\n        this.weekNumber = false;\n        /**\n         * Fires each time the user selects a new value\n         * ([more information and example]({% slug overview_datepicker %}#toc-events)).\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time the user focuses the input element\n         * ([more information and example]({% slug overview_datepicker %}#toc-events)).\n         *\n         * > To wire the event programmatically, use the `onFocus` property.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-datepicker (focus)=\"handleFocus()\"></kendo-datepicker>\n         * `\n         * })\n         * class AppComponent {\n         *   public handleFocus(): void {\n         *      console.log(\"Component is focused\");\n         *   }\n         * }\n         * ```\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the input element gets blurred\n         * ([more information and example]({% slug overview_datepicker %}#toc-events)).\n         *\n         * > To wire the event programmatically, use the `onBlur` property.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-datepicker (blur)=\"handleBlur()\"></kendo-datepicker>\n         * `\n         * })\n         * class AppComponent {\n         *   public handleBlur(): void {\n         *      console.log(\"Component is blurred\");\n         *   }\n         * }\n         * ```\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the popup is about to open.\n         * This event is preventable. If you cancel the event, the popup will remain closed\n         * ([more information and example]({% slug overview_datepicker %}#toc-events)).\n         */\n        this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close.\n         * This event is preventable. If you cancel the event, the popup will remain open\n         * ([more information and example]({% slug overview_datepicker %}#toc-events)).\n         */\n        this.close = new EventEmitter();\n        this.popupUID = guid();\n        this._popupSettings = { animate: true };\n        this._show = false;\n        this._value = null;\n        this._active = false;\n        this.onControlChange = noop;\n        this.onControlTouched = noop;\n        this.onValidatorChange = noop;\n        this.minValidateFn = noop;\n        this.maxValidateFn = noop;\n        this.disabledDatesValidateFn = noop;\n        this.resolvedPromise = Promise.resolve(null);\n        this.domEvents = [];\n        this.pickerSubscriptions = this.pickerService.onFocus.subscribe(this.handleFocus.bind(this));\n        this.pickerSubscriptions.add(this.pickerService.onBlur.subscribe(this.handleBlur.bind(this)));\n        this.pickerSubscriptions.add(this.pickerService.sameDateSelected.subscribe(this.handleSameSelection.bind(this)));\n    }\n    Object.defineProperty(DatePickerComponent.prototype, \"cellTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.cellTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"monthCellTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.monthCellTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"yearCellTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.yearCellTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"decadeCellTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.decadeCellTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"centuryCellTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.centuryCellTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"weekNumberTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.weekNumberTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"headerTitleTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.headerTitleTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"navigationItemTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.navigationItemTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"popupSettings\", {\n        get: function () {\n            return this._popupSettings;\n        },\n        /**\n         * Configures the popup options of the DatePicker.\n         *\n         * The available options are:\n         * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n         * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n         */\n        set: function (settings) {\n            this._popupSettings = Object.assign({}, { animate: true }, settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        /**\n         * Specifies the value of the DatePicker component.\n         *\n         * > The `value` has to be a valid\n         * [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.\n         */\n        set: function (value) {\n            this.verifyValue(value);\n            this._value = cloneDate(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"disabledDates\", {\n        get: function () {\n            return this._disabledDates;\n        },\n        /**\n         * Sets the dates of the DatePicker that will be disabled\n         * ([see example]({% slug disabled_dates_datepicker %})).\n         */\n        set: function (value) {\n            this._disabledDates = value;\n            this.disabledDatesService.initialize(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"wrapperClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"disabledClass\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"isActive\", {\n        get: function () {\n            return this._active;\n        },\n        set: function (value) {\n            this._active = value;\n            if (!this.wrapper) {\n                return;\n            }\n            var element = this.wrapper.nativeElement;\n            if (value) {\n                this.renderer.addClass(element, 'k-state-focused');\n            }\n            else {\n                this.renderer.removeClass(element, 'k-state-focused');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"show\", {\n        get: function () {\n            return this._show;\n        },\n        set: function (show) {\n            var _this = this;\n            if (show && (this.disabled || this.readonly)) {\n                return;\n            }\n            var skipZone = !show && (!this._show || !hasObservers(this.close));\n            if (!skipZone) {\n                this.zone.run(function () {\n                    _this.togglePopup(show);\n                });\n            }\n            else {\n                this.togglePopup(show);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n    DatePickerComponent.prototype.isEmpty = function () {\n        return !this.value && this.input.isEmpty();\n    };\n    /**\n     * @hidden\n     */\n    DatePickerComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.localizationChangeSubscription = this.localization\n            .changes\n            .subscribe(function () { return _this.cdr.markForCheck(); });\n        this.control = this.injector.get(NgControl, null);\n        if (this.element) {\n            this.renderer.removeAttribute(this.element.nativeElement, 'tabindex');\n            this.zone.runOutsideAngular(function () {\n                _this.bindEvents();\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    DatePickerComponent.prototype.ngOnChanges = function (changes) {\n        this.verifySettings();\n        if (changes.min || changes.max || changes.rangeValidation || changes.disabledDatesValidation || changes.disabledDates) {\n            this.minValidateFn = this.rangeValidation ? minValidator(this.min) : noop;\n            this.maxValidateFn = this.rangeValidation ? maxValidator(this.max) : noop;\n            this.disabledDatesValidateFn = this.disabledDatesValidation ? disabledDatesValidator(this.disabledDatesService.isDateDisabled) : noop;\n            this.onValidatorChange();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DatePickerComponent.prototype.ngOnDestroy = function () {\n        this.isActive = false;\n        this.show = false;\n        if (this.localizationChangeSubscription) {\n            this.localizationChangeSubscription.unsubscribe();\n        }\n        if (this.windowBlurSubscription) {\n            this.windowBlurSubscription.unsubscribe();\n        }\n        this.domEvents.forEach(function (unbindCallback) { return unbindCallback(); });\n        this.pickerSubscriptions.unsubscribe();\n    };\n    Object.defineProperty(DatePickerComponent.prototype, \"isOpen\", {\n        /**\n         * Returns the current open state of the popup.\n         */\n        get: function () {\n            return this.show;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    DatePickerComponent.prototype.writeValue = function (value) {\n        this.verifyValue(value);\n        this.value = cloneDate(value);\n        this.cdr.markForCheck();\n        if (!value && this.input) {\n            this.input.placeholder = this.placeholder;\n            this.input.writeValue(value);\n        }\n    };\n    /**\n     * @hidden\n     */\n    DatePickerComponent.prototype.registerOnChange = function (fn) {\n        this.onControlChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    DatePickerComponent.prototype.registerOnTouched = function (fn) {\n        this.onControlTouched = fn;\n    };\n    /**\n     * @hidden\n     */\n    DatePickerComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this.cdr.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    DatePickerComponent.prototype.validate = function (control) {\n        return this.minValidateFn(control) || this.maxValidateFn(control) || this.disabledDatesValidateFn(control);\n    };\n    /**\n     * @hidden\n     */\n    DatePickerComponent.prototype.registerOnValidatorChange = function (fn) {\n        this.onValidatorChange = fn;\n    };\n    /**\n     * Focuses the DatePicker component.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"datepicker.focus()\">Focus date picker</button>\n     *  <kendo-datepicker #datepicker></kendo-datepicker>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    DatePickerComponent.prototype.focus = function () {\n        this.input.focus();\n    };\n    /**\n     * Blurs the DatePicker component.\n     */\n    DatePickerComponent.prototype.blur = function () {\n        (this.calendar || this.input)['blur'](); //tslint:disable-line:no-string-literal\n    };\n    /**\n     * Toggles the visibility of the popup. If you use the `toggle` method to show or hide the popup,\n     * the `open` and `close` events do not fire.\n     *\n     * @param show - The state of the popup.\n     */\n    DatePickerComponent.prototype.toggle = function (show) {\n        var _this = this;\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        this.resolvedPromise.then(function () {\n            _this._toggle((show === undefined) ? !_this.show : show);\n        });\n    };\n    /**\n     * @hidden\n     */\n    DatePickerComponent.prototype.handleIconClick = function (event) {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        event.preventDefault();\n        this.focusInput();\n        //XXX: explicitly call the handleFocus handler here\n        //due to async IE focus event\n        this.handleFocus();\n        this.show = !this.show;\n        this.cdr.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    DatePickerComponent.prototype.handleMousedown = function (args) {\n        args.preventDefault();\n    };\n    /**\n     * @hidden\n     */\n    DatePickerComponent.prototype.handleChange = function (value) {\n        this.cdr.markForCheck();\n        this.focusInput();\n        this.value = value;\n        this.show = false;\n        this.onControlChange(cloneDate(value));\n        this.valueChange.emit(cloneDate(value));\n    };\n    /**\n     * @hidden\n     */\n    DatePickerComponent.prototype.handleInputChange = function (value) {\n        this.handleChange(this.input.formatSections.time ? value : this.mergeTime(value));\n    };\n    Object.defineProperty(DatePickerComponent.prototype, \"popupClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return [\n                'k-calendar-container',\n                'k-group',\n                'k-reset'\n            ].concat(this.popupSettings.popupClass || []);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"appendTo\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var appendTo = this.popupSettings.appendTo;\n            if (!appendTo || appendTo === 'root') {\n                return undefined;\n            }\n            return appendTo === 'component' ? this.container : appendTo;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"input\", {\n        get: function () {\n            return this.pickerService.input;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"calendar\", {\n        get: function () {\n            return this.pickerService.calendar;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    DatePickerComponent.prototype.mergeTime = function (value) {\n        return this.value && value ? setTime(value, this.value) : value;\n    };\n    /**\n     * @hidden\n     */\n    DatePickerComponent.prototype.handleKeydown = function (e) {\n        var altKey = e.altKey, keyCode = e.keyCode;\n        if (keyCode === Keys.Escape) {\n            this.show = false;\n        }\n        if (altKey) {\n            if (keyCode === Keys.ArrowDown && !this.show) {\n                this.show = true;\n            }\n            if (keyCode === Keys.ArrowUp) {\n                this.show = false;\n            }\n        }\n        if (keyCode === Keys.Tab && this.show && this.calendar.isActive) {\n            this.input.focus();\n            this.show = false;\n        }\n    };\n    DatePickerComponent.prototype.togglePopup = function (show) {\n        var event = new PreventableEvent();\n        if (!this._show && show) {\n            this.open.emit(event);\n        }\n        else if (this._show && !show) {\n            this.close.emit(event);\n        }\n        if (event.isDefaultPrevented()) {\n            return;\n        }\n        this._toggle(show);\n        this.toggleFocus();\n    };\n    DatePickerComponent.prototype._toggle = function (show) {\n        var _this = this;\n        this._show = show;\n        if (this.popupRef) {\n            this.popupRef.close();\n            this.popupRef = null;\n            this.subscription.unsubscribe();\n        }\n        if (this._show) {\n            var direction = this.localization.rtl ? 'right' : 'left';\n            this.popupRef = this.popupService.open({\n                anchor: this.wrapper,\n                anchorAlign: { vertical: 'bottom', horizontal: direction },\n                animate: this.popupSettings.animate,\n                appendTo: this.appendTo,\n                content: this.popupTemplate,\n                popupAlign: { vertical: 'top', horizontal: direction },\n                popupClass: this.popupClasses,\n                positionMode: 'absolute'\n            });\n            this.popupRef.popupElement.setAttribute('id', this.popupUID);\n            this.subscription = this.popupRef.popupAnchorViewportLeave.subscribe(function () { return _this.show = false; });\n        }\n    };\n    DatePickerComponent.prototype.focusInput = function () {\n        if (this.touchEnabled) {\n            return;\n        }\n        this.input.focus();\n    };\n    DatePickerComponent.prototype.toggleFocus = function () {\n        if (!this.isActive) {\n            return;\n        }\n        if (this.show) {\n            if (!this.calendar) {\n                this.cdr.detectChanges();\n            }\n            if (this.calendar) {\n                this.calendar.focus();\n            }\n        }\n        else if (!this.touchEnabled) {\n            this.input.focus();\n        }\n        else if (!this.input.isActive) {\n            this.handleBlur();\n        }\n    };\n    DatePickerComponent.prototype.verifySettings = function () {\n        if (!isDevMode()) {\n            return;\n        }\n        if (!isValidRange(this.min, this.max)) {\n            throw new Error(\"The max value should be bigger than the min. See \" + MIN_DOC_LINK$2 + \" and \" + MAX_DOC_LINK$2 + \".\");\n        }\n    };\n    DatePickerComponent.prototype.verifyValue = function (value) {\n        if (!isDevMode()) {\n            return;\n        }\n        if (value && !(value instanceof Date)) {\n            throw new Error(\"The 'value' should be a valid JavaScript Date instance. Check \" + VALUE_DOC_LINK$2 + \" for possible resolution.\");\n        }\n    };\n    DatePickerComponent.prototype.bindEvents = function () {\n        var element = this.element.nativeElement;\n        this.domEvents.push(this.renderer.listen(element, 'keydown', this.handleKeydown.bind(this)));\n        if (isWindowAvailable()) {\n            this.windowBlurSubscription = fromEvent(window, 'blur').subscribe(this.handleWindowBlur.bind(this));\n        }\n    };\n    DatePickerComponent.prototype.handleFocus = function () {\n        var _this = this;\n        if (this.isActive) {\n            return;\n        }\n        this.isActive = true;\n        if (hasObservers(this.onFocus)) {\n            this.zone.run(function () {\n                _this.onFocus.emit();\n            });\n        }\n    };\n    DatePickerComponent.prototype.handleWindowBlur = function () {\n        if (!this.isOpen) {\n            return;\n        }\n        this.show = false;\n    };\n    DatePickerComponent.prototype.handleBlur = function (args) {\n        var _this = this;\n        var currentTarget = args && currentFocusTarget(args);\n        if (currentTarget && (this.input.containsElement(currentTarget) ||\n            (this.calendar && this.calendar.containsElement(currentTarget)))) {\n            return;\n        }\n        if (hasObservers(this.onBlur) || (this.show && hasObservers(this.close)) || requiresZoneOnBlur(this.control)) {\n            this.zone.run(function () {\n                _this.blurComponent();\n            });\n        }\n        else {\n            this.blurComponent();\n        }\n    };\n    DatePickerComponent.prototype.blurComponent = function () {\n        this.isActive = false; // order is important Â¯\\_(ã)_/Â¯\n        this.show = false;\n        this.cdr.detectChanges();\n        this.onControlTouched();\n        this.onBlur.emit();\n    };\n    DatePickerComponent.prototype.handleSameSelection = function () {\n        if (this.show) {\n            this.focusInput();\n            this.show = false;\n        }\n    };\n    DatePickerComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    exportAs: 'kendo-datepicker',\n                    providers: [\n                        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return DatePickerComponent; }), multi: true },\n                        { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return DatePickerComponent; }), multi: true },\n                        { provide: KendoInput, useExisting: forwardRef(function () { return DatePickerComponent; }) },\n                        LocalizationService,\n                        PickerService,\n                        DisabledDatesService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.datepicker'\n                        }\n                    ],\n                    selector: 'kendo-datepicker',\n                    template: \"\\n        <ng-container kendoDatePickerLocalizedMessages\\n            i18n-today=\\\"kendo.datepicker.today|The label for the today button in the calendar header\\\"\\n            today=\\\"TODAY\\\"\\n\\n            i18n-toggle=\\\"kendo.datepicker.toggle|The label for the toggle button in the datepicker component\\\"\\n            toggle=\\\"Toggle calendar\\\"\\n        >\\n        </ng-container>\\n        <span #wrapper\\n            class=\\\"k-picker-wrap k-state-default\\\"\\n            [class.k-state-disabled]=\\\"disabled\\\"\\n        >\\n            <kendo-dateinput\\n                #input\\n                [focusableId]=\\\"focusableId\\\"\\n                [hasPopup]=\\\"true\\\"\\n                [isPopupOpen]=\\\"show\\\"\\n                [disabled]=\\\"disabled\\\"\\n                [readonly]=\\\"readonly\\\"\\n                [tabindex]=\\\"tabindex\\\"\\n                [title]=\\\"title\\\"\\n                [format]=\\\"format\\\"\\n                [formatPlaceholder]=\\\"formatPlaceholder\\\"\\n                [placeholder]=\\\"placeholder\\\"\\n                [min]=\\\"min\\\"\\n                [max]=\\\"max\\\"\\n                [value]=\\\"value\\\"\\n                (valueChange)=\\\"handleInputChange($event)\\\"\\n            ></kendo-dateinput>\\n            <span class=\\\"k-select\\\"\\n                role=\\\"button\\\"\\n                [attr.title]=\\\"localization.get('toggle')\\\"\\n                [attr.aria-label]=\\\"localization.get('toggle')\\\"\\n                [attr.aria-controls]=\\\"popupUID\\\"\\n                [kendoEventsOutsideAngular]=\\\"{\\n                    click: handleIconClick,\\n                    mousedown: handleMousedown\\n                }\\\"\\n                [scope]=\\\"this\\\"\\n            >\\n                <span class=\\\"k-icon k-i-calendar\\\"></span>\\n            </span>\\n        </span>\\n        <ng-container #container></ng-container>\\n        <ng-template #popupTemplate>\\n            <kendo-calendar\\n                #calendar\\n                [min]=\\\"min\\\"\\n                [max]=\\\"max\\\"\\n                [navigation]=\\\"navigation\\\"\\n                [activeView]=\\\"activeView\\\"\\n                [bottomView]=\\\"bottomView\\\"\\n                [topView]=\\\"topView\\\"\\n                [weekNumber]=\\\"weekNumber\\\"\\n                [cellTemplate]=\\\"cellTemplate\\\"\\n                [monthCellTemplate]=\\\"monthCellTemplate\\\"\\n                [yearCellTemplate]=\\\"yearCellTemplate\\\"\\n                [decadeCellTemplate]=\\\"decadeCellTemplate\\\"\\n                [centuryCellTemplate]=\\\"centuryCellTemplate\\\"\\n                [weekNumberTemplate]=\\\"weekNumberTemplate\\\"\\n                [headerTitleTemplate]=\\\"headerTitleTemplate\\\"\\n                [navigationItemTemplate]=\\\"navigationItemTemplate\\\"\\n                [focusedDate]=\\\"focusedDate\\\"\\n                [value]=\\\"value\\\"\\n                (valueChange)=\\\"handleChange(mergeTime($event))\\\"\\n                [kendoEventsOutsideAngular]=\\\"{\\n                    keydown: handleKeydown\\n                }\\\"\\n                [scope]=\\\"this\\\"\\n                [disabledDates]=\\\"disabledDates\\\"\\n            >\\n                <kendo-calendar-messages [today]=\\\"localization.get('today')\\\">\\n                </kendo-calendar-messages>\\n            </kendo-calendar>\\n        <ng-template>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    DatePickerComponent.ctorParameters = function () { return [\n        { type: NgZone },\n        { type: LocalizationService },\n        { type: ChangeDetectorRef },\n        { type: PopupService },\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: Injector },\n        { type: PickerService },\n        { type: DisabledDatesService },\n        { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [TOUCH_ENABLED,] }] }\n    ]; };\n    DatePickerComponent.propDecorators = {\n        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],\n        popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],\n        wrapper: [{ type: ViewChild, args: ['wrapper',] }],\n        cellTemplate: [{ type: ContentChild, args: [CellTemplateDirective,] }],\n        cellTemplateRef: [{ type: Input, args: ['cellTemplate',] }],\n        monthCellTemplate: [{ type: ContentChild, args: [MonthCellTemplateDirective,] }],\n        monthCellTemplateRef: [{ type: Input, args: ['monthCellTemplate',] }],\n        yearCellTemplate: [{ type: ContentChild, args: [YearCellTemplateDirective,] }],\n        yearCellTemplateRef: [{ type: Input, args: ['yearCellTemplate',] }],\n        decadeCellTemplate: [{ type: ContentChild, args: [DecadeCellTemplateDirective,] }],\n        decadeCellTemplateRef: [{ type: Input, args: ['decadeCellTemplate',] }],\n        centuryCellTemplate: [{ type: ContentChild, args: [CenturyCellTemplateDirective,] }],\n        centuryCellTemplateRef: [{ type: Input, args: ['centuryCellTemplate',] }],\n        weekNumberTemplate: [{ type: ContentChild, args: [WeekNumberCellTemplateDirective,] }],\n        weekNumberTemplateRef: [{ type: Input, args: ['weekNumberTemplate',] }],\n        headerTitleTemplate: [{ type: ContentChild, args: [HeaderTitleTemplateDirective,] }],\n        headerTitleTemplateRef: [{ type: Input, args: ['headerTitleTemplate',] }],\n        navigationItemTemplate: [{ type: ContentChild, args: [NavigationItemTemplateDirective,] }],\n        navigationItemTemplateRef: [{ type: Input, args: ['navigationItemTemplate',] }],\n        focusableId: [{ type: Input }],\n        activeView: [{ type: Input }],\n        bottomView: [{ type: Input }],\n        topView: [{ type: Input }],\n        disabled: [{ type: Input }],\n        readonly: [{ type: Input }],\n        popupSettings: [{ type: Input }],\n        navigation: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        focusedDate: [{ type: Input }],\n        value: [{ type: Input }],\n        format: [{ type: Input }],\n        formatPlaceholder: [{ type: Input }],\n        placeholder: [{ type: Input }],\n        tabindex: [{ type: Input }],\n        tabIndex: [{ type: Input }],\n        disabledDates: [{ type: Input }],\n        title: [{ type: Input }],\n        rangeValidation: [{ type: Input }],\n        disabledDatesValidation: [{ type: Input }],\n        weekNumber: [{ type: Input }],\n        valueChange: [{ type: Output }],\n        onFocus: [{ type: Output, args: ['focus',] }],\n        onBlur: [{ type: Output, args: ['blur',] }],\n        open: [{ type: Output }],\n        close: [{ type: Output }],\n        wrapperClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-datepicker',] }, { type: HostBinding, args: ['class.k-header',] }],\n        disabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }]\n    };\n    return DatePickerComponent;\n}());\n\n/**\n * @hidden\n */\nvar TIME_PART = {\n    dayperiod: 'dayperiod',\n    hour: 'hour',\n    millisecond: 'millisecond',\n    minute: 'minute',\n    second: 'second'\n};\n\n/**\n * @hidden\n */\nvar timeRangeValidator = function (min, max) {\n    return function (control) {\n        if (!min || !max || !control.value) {\n            return null;\n        }\n        var err = {\n            timeRangeError: {\n                maxValue: max,\n                minValue: min,\n                value: control.value\n            }\n        };\n        return isInTimeRange(control.value, min, max) ? null : err;\n    };\n};\n\nvar VALUE_DOC_LINK$3 = 'https://www.telerik.com/kendo-angular-ui/components/dateinputs/timepicker/#toc-integration-with-json';\nvar INTL_DATE_FORMAT = 'https://github.com/telerik/kendo-intl/blob/master/docs/date-formatting/index.md';\nvar formatRegExp = new RegExp(TIME_PART.hour + \"|\" + TIME_PART.minute + \"|\" + TIME_PART.second + \"|\" + TIME_PART.dayperiod + \"|literal\");\n/**\n * Represents the [Kendo UI TimePicker component for Angular]({% slug overview_timepicker %}#toc-basic-usage).\n */\nvar TimePickerComponent = /** @class */ (function () {\n    function TimePickerComponent(zone, localization, cdr, popupService, element, renderer, injector, pickerService, intl, touchEnabled$$1) {\n        this.zone = zone;\n        this.localization = localization;\n        this.cdr = cdr;\n        this.popupService = popupService;\n        this.element = element;\n        this.renderer = renderer;\n        this.injector = injector;\n        this.pickerService = pickerService;\n        this.intl = intl;\n        this.touchEnabled = touchEnabled$$1;\n        /**\n         * @hidden\n         */\n        this.focusableId = \"k-\" + guid();\n        /**\n         * Sets or gets the `disabled` property of the TimePicker and\n         * determines whether the component is active\n         * ([see example]({% slug disabled_timepicker %})).\n         */\n        this.disabled = false;\n        /**\n         * Sets the read-only state of the TimePicker\n         * ([see example]({% slug readonly_timepicker %})).\n         */\n        this.readonly = false;\n        /**\n         * Specifies the time format that is used to display the input value\n         * ([see example]({% slug formats_timepicker %})).\n         */\n        this.format = 't';\n        /**\n         * Specifies the hint the TimePicker displays when its value is `null`.\n         * For more information, refer to the article on\n         * [placeholders]({% slug placeholders_timepicker %}).\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-timepicker placeholder=\"Enter start...\"></kendo-timepicker>\n         * `\n         * })\n         * class AppComponent { }\n         * ```\n         */\n        this.placeholder = null;\n        /**\n         * Determines whether to display the **Cancel** button in the popup.\n         */\n        this.cancelButton = true;\n        /**\n         * Determines whether to display the **Now** button in the popup.\n         *\n         * > If the current time is out of range or the incremental step is greater than `1`, the **Now** button will be hidden.\n         */\n        this.nowButton = true;\n        /**\n         * Sets or gets the `tabindex` property of the TimePicker.\n         */\n        this.tabindex = 0;\n        /**\n         * Sets the title of the input element of the TimePicker.\n         */\n        this.title = \"\";\n        /**\n         * Determines whether the built-in min or max validators are enforced when a form is being validated.\n         */\n        this.rangeValidation = true;\n        /**\n         * Fires each time the user selects a new value.\n         * For more information, refer to the section on\n         * [events]({% slug overview_timepicker %}#toc-events).\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time the user focuses the input element.\n         * For more information, refer to the section on\n         * [events]({% slug overview_timepicker %}#toc-events).\n         *\n         * > To wire the event programmatically, use the `onFocus` property.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-timepicker (focus)=\"handleFocus()\"></kendo-timepicker>\n         * `\n         * })\n         * class AppComponent {\n         *   public handleFocus(): void {\n         *      console.log(\"Component is focused\");\n         *   }\n         * }\n         * ```\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the input element gets blurred.\n         * For more information, refer to the section on\n         * [events]({% slug overview_timepicker %}#toc-events).\n         *\n         * > To wire the event programmatically, use the `onBlur` property.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-timepicker (blur)=\"handleBlur()\"></kendo-timepicker>\n         * `\n         * })\n         * class AppComponent {\n         *   public handleBlur(): void {\n         *      console.log(\"Component is blurred\");\n         *   }\n         * }\n         * ```\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the popup is about to open.\n         * This event is preventable. If you cancel the event, the popup will remain closed.\n         * For more information, refer to the section on\n         * [events]({% slug overview_timepicker %}#toc-events).\n         */\n        this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close.\n         * This event is preventable. If you cancel the event, the popup will remain open.\n         * For more information, refer to the section on\n         * [events]({% slug overview_timepicker %}#toc-events).\n         */\n        this.close = new EventEmitter();\n        this.popupUID = guid();\n        this.onControlChange = noop;\n        this.onControlTouched = noop;\n        this.onValidatorChange = noop;\n        this.resolvedPromise = Promise.resolve(null);\n        this.timeRangeValidateFn = noop;\n        this._min = cloneDate(MIN_TIME);\n        this._max = cloneDate(MAX_TIME);\n        this._popupSettings = { animate: true };\n        this._show = false;\n        this._steps = {};\n        this._value = null;\n        this._active = false;\n        this.domEvents = [];\n        this.pickerSubscriptions = this.pickerService.onFocus.subscribe(this.handleFocus.bind(this));\n        this.pickerSubscriptions.add(this.pickerService.onBlur.subscribe(this.handleBlur.bind(this)));\n    }\n    Object.defineProperty(TimePickerComponent.prototype, \"min\", {\n        get: function () {\n            return this._min;\n        },\n        /**\n         * Specifies the smallest valid time value\n         * ([see example]({% slug timeranges_timepicker %})).\n         */\n        set: function (min) {\n            this._min = cloneDate(min || MIN_TIME);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"max\", {\n        get: function () {\n            return this._max;\n        },\n        /**\n         * Specifies the biggest valid time value\n         * ([see example]({% slug timeranges_timepicker %})).\n         */\n        set: function (max) {\n            this._max = cloneDate(max || MAX_TIME);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"steps\", {\n        get: function () {\n            return this._steps;\n        },\n        /**\n         * Configures the incremental steps of the TimePicker.\n         * For more information, refer to the article on\n         * [incremental steps]({% slug incrementalsteps_timepicker %}).\n         *\n         * > If the incremental step is greater than `1`, the **Now** button will be hidden.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-timepicker format=\"HH:mm:ss\" [steps]=\"steps\"></kendo-timepicker>\n         * `\n         * })\n         * class AppComponent {\n         *   public steps = { hour: 2, minute: 15, second: 15 };\n         * }\n         * ```\n         *\n         */\n        set: function (steps) {\n            this._steps = steps || {};\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"popupSettings\", {\n        get: function () {\n            return this._popupSettings;\n        },\n        /**\n         * Configures the popup of the TimePicker.\n         *\n         * The available options are:\n         * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n         * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n         */\n        set: function (settings) {\n            this._popupSettings = Object.assign({}, { animate: true }, settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        /**\n         * Specifies the value of the TimePicker component.\n         */\n        set: function (value) {\n            this.verifyValue(value);\n            this._value = cloneDate(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"wrapperClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"disabledClass\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"isActive\", {\n        get: function () {\n            return this._active;\n        },\n        set: function (value) {\n            this._active = value;\n            if (!this.wrapper) {\n                return;\n            }\n            var element = this.wrapper.nativeElement;\n            if (value) {\n                this.renderer.addClass(element, 'k-state-focused');\n            }\n            else {\n                this.renderer.removeClass(element, 'k-state-focused');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"show\", {\n        get: function () {\n            return this._show;\n        },\n        set: function (show) {\n            var _this = this;\n            if (show && (this.disabled || this.readonly)) {\n                return;\n            }\n            var skipZone = !show && (!this._show || !hasObservers(this.close));\n            if (!skipZone) {\n                this.zone.run(function () {\n                    _this.togglePopup(show);\n                });\n            }\n            else {\n                this.togglePopup(show);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"input\", {\n        get: function () {\n            return this.pickerService.input;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"timeSelector\", {\n        get: function () {\n            return this.pickerService.timeSelector;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty\n     */\n    TimePickerComponent.prototype.isEmpty = function () {\n        return !this.value && this.input.isEmpty();\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.localizationChangeSubscription = this.localization\n            .changes.subscribe(function () { return _this.cdr.markForCheck(); });\n        this.control = this.injector.get(NgControl, null);\n        if (this.element) {\n            this.renderer.removeAttribute(this.element.nativeElement, 'tabindex');\n            this.zone.runOutsideAngular(function () {\n                _this.bindEvents();\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.min || changes.max || changes.rangeValidation) {\n            this.timeRangeValidateFn = this.rangeValidation ? timeRangeValidator(this.min, this.max) : noop;\n            this.onValidatorChange();\n        }\n        if (changes.format) {\n            this.verifyFormat();\n        }\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.ngOnDestroy = function () {\n        this.isActive = false;\n        this.show = false;\n        if (this.localizationChangeSubscription) {\n            this.localizationChangeSubscription.unsubscribe();\n        }\n        if (this.windowBlurSubscription) {\n            this.windowBlurSubscription.unsubscribe();\n        }\n        this.domEvents.forEach(function (unbindCallback) { return unbindCallback(); });\n        this.pickerSubscriptions.unsubscribe();\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.handleKeydown = function (event) {\n        var altKey = event.altKey, keyCode = event.keyCode;\n        if (keyCode === Keys.Escape) {\n            this.show = false;\n            return;\n        }\n        if (altKey) {\n            if (keyCode === Keys.ArrowUp) {\n                this.show = false;\n            }\n            if (keyCode === Keys.ArrowDown && !this.show) {\n                this.show = true;\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.writeValue = function (value) {\n        this.verifyValue(value);\n        this.value = cloneDate(value);\n        this.cdr.markForCheck();\n        if (!value && this.input) {\n            this.input.placeholder = this.placeholder;\n            this.input.writeValue(value);\n        }\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.registerOnChange = function (fn) {\n        this.onControlChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.registerOnTouched = function (fn) {\n        this.onControlTouched = fn;\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this.cdr.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.validate = function (control) {\n        return this.timeRangeValidateFn(control);\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.registerOnValidatorChange = function (fn) {\n        this.onValidatorChange = fn;\n    };\n    /**\n     * Focuses the TimePicker component.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"timepicker.focus()\">Focus time picker</button>\n     *  <kendo-timepicker #timepicker></kendo-timepicker>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    TimePickerComponent.prototype.focus = function () {\n        this.input.focus();\n    };\n    /**\n     * Blurs the TimePicker component.\n     */\n    TimePickerComponent.prototype.blur = function () {\n        (this.timeSelector || this.input)['blur'](); //tslint:disable-line:no-string-literal\n    };\n    /**\n     * Toggles the visibility of the popup. If you use the `toggle` method to show or hide the popup,\n     * the `open` and `close` events do not fire.\n     *\n     * @param show - The state of the popup.\n     */\n    TimePickerComponent.prototype.toggle = function (show) {\n        var _this = this;\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        this.resolvedPromise.then(function () {\n            _this._toggle((show === undefined) ? !_this.show : show);\n        });\n    };\n    Object.defineProperty(TimePickerComponent.prototype, \"isOpen\", {\n        /**\n         * Returns the current open state of the popup.\n         */\n        get: function () {\n            return this.show;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"appendTo\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var appendTo = this.popupSettings.appendTo;\n            if (!appendTo || appendTo === 'root') {\n                return undefined;\n            }\n            return appendTo === 'component' ? this.container : appendTo;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.handleChange = function (value) {\n        var _this = this;\n        if (isEqual(this.value, value)) {\n            this.focusInput();\n            this.show = false;\n            return;\n        }\n        this.value = cloneDate(value);\n        this.zone.run(function () {\n            _this.focusInput();\n            _this.show = false;\n            _this.onControlChange(cloneDate(value));\n            _this.valueChange.emit(cloneDate(value));\n        });\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.handleReject = function () {\n        this.show = false;\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.handleInputChange = function (value) {\n        var val = this.input.formatSections.date ? value : this.mergeTime(value);\n        this.handleChange(val);\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.handleMousedown = function (args) {\n        args.preventDefault();\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.handleIconClick = function (event) {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        event.preventDefault();\n        this.focusInput();\n        //XXX: explicit call handleFocus handler here\n        //due to async IE focus event\n        this.handleFocus();\n        this.show = !this.show;\n    };\n    Object.defineProperty(TimePickerComponent.prototype, \"popupClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return [\n                'k-group',\n                'k-reset'\n            ].concat(this.popupSettings.popupClass || []);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.normalizeTime = function (date) {\n        return setTime(MIDNIGHT_DATE, date);\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.mergeTime = function (value) {\n        return this.value && value ? setTime(this.value, value) : value;\n    };\n    TimePickerComponent.prototype.togglePopup = function (show) {\n        var event = new PreventableEvent();\n        if (!this._show && show) {\n            this.open.emit(event);\n        }\n        else if (this._show && !show) {\n            this.close.emit(event);\n        }\n        if (event.isDefaultPrevented()) {\n            return;\n        }\n        this._toggle(show);\n        this.toggleFocus();\n    };\n    TimePickerComponent.prototype._toggle = function (show) {\n        var _this = this;\n        this._show = show;\n        this.cdr.markForCheck();\n        if (this.popupRef) {\n            this.popupRef.close();\n            this.popupRef = null;\n        }\n        if (this._show) {\n            var direction = this.localization.rtl ? 'right' : 'left';\n            this.popupRef = this.popupService.open({\n                anchor: this.wrapper,\n                anchorAlign: { vertical: 'bottom', horizontal: direction },\n                animate: this.popupSettings.animate,\n                appendTo: this.appendTo,\n                content: this.popupTemplate,\n                popupAlign: { vertical: 'top', horizontal: direction },\n                popupClass: this.popupClasses,\n                positionMode: 'absolute'\n            });\n            this.popupRef.popupElement.setAttribute('id', this.popupUID);\n            this.popupRef.popupAnchorViewportLeave.subscribe(function () { return _this.show = false; });\n        }\n    };\n    TimePickerComponent.prototype.focusInput = function () {\n        if (this.touchEnabled) {\n            return;\n        }\n        this.input.focus();\n    };\n    TimePickerComponent.prototype.toggleFocus = function () {\n        if (!this.isActive) {\n            return;\n        }\n        if (this.show) {\n            if (!this.timeSelector) {\n                this.cdr.detectChanges();\n            }\n            if (this.isActive) {\n                this.timeSelector.focus();\n            }\n        }\n        else if (!this.touchEnabled) {\n            this.input.focus();\n        }\n        else if (!this.input.isActive) {\n            this.handleBlur();\n        }\n    };\n    TimePickerComponent.prototype.verifyValue = function (value) {\n        if (!isDevMode()) {\n            return;\n        }\n        if (value && !(value instanceof Date)) {\n            throw new Error(\"The 'value' should be a valid JavaScript Date instance. Check \" + VALUE_DOC_LINK$3 + \" for possible resolution.\");\n        }\n    };\n    TimePickerComponent.prototype.verifyFormat = function () {\n        if (!isDevMode()) {\n            return;\n        }\n        var formatContainsDateParts = this.intl.splitDateFormat(this.format).some(function (part) { return !formatRegExp.test(part.type); });\n        if (formatContainsDateParts) {\n            throw new Error(\"Provided format is not supported. Supported specifiers are T|t|H|h|m|s|a. See \" + INTL_DATE_FORMAT);\n        }\n    };\n    TimePickerComponent.prototype.bindEvents = function () {\n        var element = this.element.nativeElement;\n        this.domEvents.push(this.renderer.listen(element, 'keydown', this.handleKeydown.bind(this)));\n        if (isWindowAvailable()) {\n            this.windowBlurSubscription = fromEvent(window, 'blur').subscribe(this.handleWindowBlur.bind(this));\n        }\n    };\n    TimePickerComponent.prototype.handleWindowBlur = function () {\n        if (!this.isOpen) {\n            return;\n        }\n        this.show = false;\n    };\n    TimePickerComponent.prototype.handleFocus = function () {\n        var _this = this;\n        if (this.isActive) {\n            return;\n        }\n        this.isActive = true;\n        if (hasObservers(this.onFocus)) {\n            this.zone.run(function () {\n                _this.onFocus.emit();\n            });\n        }\n    };\n    TimePickerComponent.prototype.handleBlur = function (args) {\n        var _this = this;\n        var currentTarget = args && currentFocusTarget(args);\n        if (currentTarget && (this.input.containsElement(currentTarget) ||\n            (this.timeSelector && this.timeSelector.containsElement(currentTarget)))) {\n            return;\n        }\n        if (hasObservers(this.onBlur) || (this.show && hasObservers(this.close)) || requiresZoneOnBlur(this.control)) {\n            this.zone.run(function () {\n                _this.blurComponent();\n            });\n        }\n        else {\n            this.blurComponent();\n        }\n    };\n    TimePickerComponent.prototype.blurComponent = function () {\n        this.isActive = false; // order is important Â¯\\_(ã)_/Â¯\n        this.show = false;\n        this.onControlTouched();\n        this.onBlur.emit();\n    };\n    TimePickerComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    exportAs: 'kendo-timepicker',\n                    providers: [\n                        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return TimePickerComponent; }), multi: true },\n                        { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return TimePickerComponent; }), multi: true },\n                        { provide: KendoInput, useExisting: forwardRef(function () { return TimePickerComponent; }) },\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.timepicker'\n                        },\n                        PickerService\n                    ],\n                    selector: 'kendo-timepicker',\n                    template: \"\\n        <ng-container kendoTimePickerLocalizedMessages\\n            i18n-accept=\\\"kendo.timepicker.accept|The Accept button text in the timepicker component\\\"\\n            accept=\\\"Set\\\"\\n\\n            i18n-acceptLabel=\\\"kendo.timepicker.acceptLabel|The label for the Accept button in the timepicker component\\\"\\n            acceptLabel=\\\"Set time\\\"\\n\\n            i18n-cancel=\\\"kendo.timepicker.cancel|The Cancel button text in the timepicker component\\\"\\n            cancel=\\\"Cancel\\\"\\n\\n            i18n-cancelLabel=\\\"kendo.timepicker.cancelLabel|The label for the Cancel button in the timepicker component\\\"\\n            cancelLabel=\\\"Cancel changes\\\"\\n\\n            i18n-now=\\\"kendo.timepicker.now|The Now button text in the timepicker component\\\"\\n            now=\\\"Now\\\"\\n\\n            i18n-nowLabel=\\\"kendo.timepicker.nowLabel|The label for the Now button in the timepicker component\\\"\\n            nowLabel=\\\"Select now\\\"\\n\\n            i18n-toggle=\\\"kendo.timepicker.toggle|The label for the toggle button in the timepicker component\\\"\\n            toggle=\\\"Toggle time list\\\"\\n        >\\n        </ng-container>\\n        <span #wrapper\\n            class=\\\"k-picker-wrap k-state-default\\\"\\n            [class.k-state-disabled]=\\\"disabled\\\"\\n        >\\n            <kendo-dateinput\\n                #input\\n                [focusableId]=\\\"focusableId\\\"\\n                [hasPopup]=\\\"true\\\"\\n                [isPopupOpen]=\\\"show\\\"\\n                [disabled]=\\\"disabled\\\"\\n                [readonly]=\\\"readonly\\\"\\n                [format]=\\\"format\\\"\\n                [formatPlaceholder]=\\\"formatPlaceholder\\\"\\n                [placeholder]=\\\"placeholder\\\"\\n                [min]=\\\"normalizeTime(min)\\\"\\n                [max]=\\\"normalizeTime(max)\\\"\\n                [steps]=\\\"steps\\\"\\n                [tabindex]=\\\"!show ? tabindex : -1\\\"\\n                [title]=\\\"title\\\"\\n                [value]=\\\"value\\\"\\n                (valueChange)=\\\"handleInputChange($event)\\\"\\n            ></kendo-dateinput>\\n            <span class=\\\"k-select\\\"\\n                role=\\\"button\\\"\\n                [attr.title]=\\\"localization.get('toggle')\\\"\\n                [attr.aria-label]=\\\"localization.get('toggle')\\\"\\n                [attr.aria-controls]=\\\"popupUID\\\"\\n                [kendoEventsOutsideAngular]=\\\"{\\n                    click: handleIconClick,\\n                    mousedown: handleMousedown\\n                }\\\"\\n                [scope]=\\\"this\\\"\\n            >\\n                <span class=\\\"k-icon k-i-clock\\\"></span>\\n            </span>\\n            <ng-template #popupTemplate>\\n                <kendo-timeselector\\n                    #timeSelector\\n                    [cancelButton]=\\\"cancelButton\\\"\\n                    [nowButton]=\\\"nowButton\\\"\\n                    [format]=\\\"format\\\"\\n                    [min]=\\\"min\\\"\\n                    [max]=\\\"max\\\"\\n                    [steps]=\\\"steps\\\"\\n                    [value]=\\\"value\\\"\\n                    [kendoEventsOutsideAngular]=\\\"{\\n                        keydown: handleKeydown,\\n                        mousedown: handleMousedown\\n                    }\\\"\\n                    [scope]=\\\"this\\\"\\n                    (valueChange)=\\\"handleChange($event)\\\"\\n                    (valueReject)=\\\"handleReject()\\\"\\n                >\\n                    <kendo-timeselector-messages\\n                        [acceptLabel]=\\\"localization.get('acceptLabel')\\\"\\n                        [accept]=\\\"localization.get('accept')\\\"\\n                        [cancelLabel]=\\\"localization.get('cancelLabel')\\\"\\n                        [cancel]=\\\"localization.get('cancel')\\\"\\n                        [nowLabel]=\\\"localization.get('nowLabel')\\\"\\n                        [now]=\\\"localization.get('now')\\\"\\n                    >\\n                    </kendo-timeselector-messages>\\n                </kendo-timeselector>\\n            </ng-template>\\n        </span>\\n        <ng-container #container></ng-container>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    TimePickerComponent.ctorParameters = function () { return [\n        { type: NgZone },\n        { type: LocalizationService },\n        { type: ChangeDetectorRef },\n        { type: PopupService },\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: Injector },\n        { type: PickerService },\n        { type: IntlService },\n        { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [TOUCH_ENABLED,] }] }\n    ]; };\n    TimePickerComponent.propDecorators = {\n        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],\n        popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],\n        wrapper: [{ type: ViewChild, args: ['wrapper',] }],\n        focusableId: [{ type: Input }],\n        disabled: [{ type: Input }],\n        readonly: [{ type: Input }],\n        format: [{ type: Input }],\n        formatPlaceholder: [{ type: Input }],\n        placeholder: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        cancelButton: [{ type: Input }],\n        nowButton: [{ type: Input }],\n        steps: [{ type: Input }],\n        popupSettings: [{ type: Input }],\n        tabindex: [{ type: Input }],\n        tabIndex: [{ type: Input }],\n        title: [{ type: Input }],\n        rangeValidation: [{ type: Input }],\n        value: [{ type: Input }],\n        valueChange: [{ type: Output }],\n        onFocus: [{ type: Output, args: ['focus',] }],\n        onBlur: [{ type: Output, args: ['blur',] }],\n        open: [{ type: Output }],\n        close: [{ type: Output }],\n        wrapperClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-timepicker',] }, { type: HostBinding, args: ['class.k-header',] }],\n        disabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }]\n    };\n    return TimePickerComponent;\n}());\n\nvar timeFormatRegExp = new RegExp(TIME_PART.hour + \"|\" + TIME_PART.minute + \"|\" + TIME_PART.second + \"|\" + TIME_PART.dayperiod + \"|literal\");\nvar VALUE_DOC_LINK$4 = 'https://www.telerik.com/kendo-angular-ui/components/dateinputs/datetimepicker/integration-with-json/';\nvar MIN_MAX_DOC_LINK = 'https://www.telerik.com/kendo-angular-ui/components/dateinputs/datetimepicker/date-time-limits/';\nvar DEFAULT_ACTIVE_TAB = 'date';\nvar DEFAULT_DATEINPUT_FORMAT = 'g';\nvar DEFAULT_TIMESELECTOR_FORMAT = 't';\n/**\n * Represents the [Kendo UI DateTimePicker component for Angular]({% slug overview_datetimepicker %}).\n */\nvar DateTimePickerComponent = /** @class */ (function () {\n    function DateTimePickerComponent(popupService, intl, cdr, pickerService, ngZone, host, touchEnabled$$1, localization, disabledDatesService) {\n        this.popupService = popupService;\n        this.intl = intl;\n        this.cdr = cdr;\n        this.pickerService = pickerService;\n        this.ngZone = ngZone;\n        this.host = host;\n        this.touchEnabled = touchEnabled$$1;\n        this.localization = localization;\n        this.disabledDatesService = disabledDatesService;\n        /**\n         * @hidden\n         */\n        this.hostClasses = true;\n        /**\n         * @hidden\n         */\n        this.focusableId = \"k-\" + guid();\n        /**\n         * Sets the title of the input element of the DateTimePicker.\n         */\n        this.title = '';\n        /**\n         * Sets or gets the `disabled` property of the DateTimePicker and determines whether the component is active\n         * ([see example]({% slug disabled_datetimepicker %})).\n         */\n        this.disabled = false;\n        /**\n         * Sets the read-only state of the DateTimePicker\n         * ([see example]({% slug readonly_datetimepicker %})).\n         */\n        this.readonly = false;\n        /**\n         * Determines whether to display the **Cancel** button in the popup\n         * ([see example]({% slug datetimepicker_popup_options %}#toc-toggling-the-cancel-button)).\n         */\n        this.cancelButton = true;\n        /**\n         * Determines whether to display a week number column in the `month` view of the popup Calendar\n         * ([see example]({% slug datetimepicker_calendar_options %}#toc-week-number-column)).\n         */\n        this.weekNumber = false;\n        /**\n         * Determines whether the built-in min or max validators are enforced when validating a form\n         * ([see example]({% slug dateranges_datetimepicker %}#toc-forms-range-validation)).\n         */\n        this.rangeValidation = true;\n        /**\n         * Determines whether the built-in validator for disabled\n         * date ranges is enforced when validating a form\n         * ([see example]({% slug disabled_dates_datetimepicker %}#toc-validation)).\n         */\n        this.disabledDatesValidation = true;\n        /**\n         * Fires each time the user selects a new value.\n         * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time the popup is about to open.\n         * This event is preventable. If you cancel the event by setting `event.preventDefault()`, the popup will remain closed.\n         * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).\n         */\n        this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close.\n         * This event is preventable. If you cancel the event by setting `event.preventDefault()`, the popup will remain open.\n         * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).\n         */\n        this.close = new EventEmitter();\n        /**\n         * Fires each time the user focuses the component.\n         * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).\n         */\n        this.onFocus = new EventEmitter();\n        /**\n         * Fires each time the user blurs the component.\n         * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).\n         */\n        this.onBlur = new EventEmitter();\n        /**\n         * Indicates whether the component or its popup content is focused.\n         */\n        this.isActive = false;\n        /**\n         * @hidden\n         *\n         * Controls whether the Calendar or the TimeSelector will be displayed.\n         */\n        this.activeTab = DEFAULT_ACTIVE_TAB;\n        /**\n         * @hidden\n         *\n         * Specifies the stripped time-related format that is used in the TimeSelector.\n         * Updates each time the `format` property value changes.\n         */\n        this.timeSelectorFormat = DEFAULT_TIMESELECTOR_FORMAT;\n        /**\n         * @hidden\n         */\n        this.timeSelectorMin = cloneDate(MIN_TIME);\n        /**\n         * @hidden\n         */\n        this.timeSelectorMax = cloneDate(MAX_TIME);\n        /**\n         * @hidden\n         */\n        this.calendarValue = null;\n        /**\n         * @hidden\n         */\n        this.calendarMin = cloneDate(MIN_DATE);\n        /**\n         * @hidden\n         */\n        this.calendarMax = lastMillisecondOfDate(MAX_DATE);\n        this._popupSettings = { animate: true };\n        this._value = null;\n        this._format = DEFAULT_DATEINPUT_FORMAT;\n        this._tabindex = 0;\n        this._defaultTab = DEFAULT_ACTIVE_TAB;\n        this._min = mergeDateAndTime(MIN_DATE, MIN_TIME);\n        this._max = mergeDateAndTime(MAX_DATE, MAX_TIME);\n        this.onControlTouched = noop;\n        this.onControlChange = noop;\n        this.onValidatorChange = noop;\n        this.minValidateFn = noop;\n        this.maxValidateFn = noop;\n        this.disabledDatesValidateFn = noop;\n        this.subscriptions = new Subscription();\n    }\n    Object.defineProperty(DateTimePickerComponent.prototype, \"input\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.pickerService.input;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateTimePickerComponent.prototype, \"calendar\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.pickerService.calendar;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateTimePickerComponent.prototype, \"timeSelector\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.pickerService.timeSelector;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateTimePickerComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        /**\n         * Specifies the value of the DateTimePicker component.\n         *\n         * > The `value` has to be a valid [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.\n         */\n        set: function (value) {\n            this.verifyValue(value);\n            this._value = cloneDate(value);\n            this.setCalendarValue(value);\n            this.cdr.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateTimePickerComponent.prototype, \"format\", {\n        get: function () {\n            return this._format;\n        },\n        /**\n         * Specifies the date format for displaying the input value\n         * ([see example]({% slug formats_datetimepicker %})).\n         */\n        set: function (value) {\n            this._format = value;\n            this.timeSelectorFormat = this.getTimeSelectorFormat(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateTimePickerComponent.prototype, \"tabindex\", {\n        get: function () {\n            return this.disabled ? -1 : this._tabindex;\n        },\n        /**\n         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the DateTimePicker.\n         */\n        set: function (value) {\n            var tabindex = Number(value);\n            var defaultValue = 0;\n            this._tabindex = !isNaN(tabindex) ? tabindex : defaultValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateTimePickerComponent.prototype, \"disabledDates\", {\n        get: function () {\n            return this._disabledDates;\n        },\n        /**\n         * Sets the dates of the DateTimePicker that will be disabled\n         * ([see example]({% slug disabled_dates_datetimepicker %})).\n         */\n        set: function (value) {\n            this._disabledDates = value;\n            this.disabledDatesService.initialize(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateTimePickerComponent.prototype, \"popupSettings\", {\n        get: function () {\n            return this._popupSettings;\n        },\n        /**\n         * Configures the popup settings of the DateTimePicker\n         * ([see example]({% slug datetimepicker_popup_options %}#toc-customizing-the-popup)).\n         *\n         * The available options are:\n         * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n         * - `appendTo: 'root' | 'component' | ViewContainerRef`&mdash;Controls the popup container. By default, the popup will be appended to the root component.\n         * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n         */\n        set: function (settings) {\n            this._popupSettings = Object.assign({}, { animate: true }, settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateTimePickerComponent.prototype, \"min\", {\n        get: function () {\n            return this._min;\n        },\n        /**\n         * Specifies the smallest valid date.\n         * The Calendar will not display dates before this value.\n         * If the `min` value of the Calendar is selected, the TimePicker will not display\n         * time entries before the specified time portion of this value\n         * ([see example]({% slug dateranges_datetimepicker %})).\n         */\n        set: function (value) {\n            if (!isPresent(value)) {\n                return;\n            }\n            this._min = cloneDate(value);\n            this.calendarMin = getDate(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateTimePickerComponent.prototype, \"max\", {\n        get: function () {\n            return this._max;\n        },\n        /**\n         * Specifies the biggest valid date.\n         * The Calendar will not display dates after this value.\n         * If the `max` value of the Calendar is selected, the TimePicker will not display\n         * time entries after the specified time portion of this value\n         * ([see example]({% slug dateranges_datetimepicker %})).\n         */\n        set: function (value) {\n            if (!isPresent(value)) {\n                return;\n            }\n            this._max = cloneDate(value);\n            this.calendarMax = lastMillisecondOfDate(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateTimePickerComponent.prototype, \"isOpen\", {\n        /**\n         * Indicates whether the component is currently open.\n         */\n        get: function () {\n            return isPresent(this.popupRef);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateTimePickerComponent.prototype, \"defaultTab\", {\n        get: function () {\n            return this._defaultTab;\n        },\n        /**\n         * Sets the active tab on opening the popup\n         * ([see example]({% slug datetimepicker_popup_options %}#toc-setting-the-default-tab)).\n         */\n        set: function (tab) {\n            this._defaultTab = tab || DEFAULT_ACTIVE_TAB;\n            this.activeTab = this.defaultTab;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateTimePickerComponent.prototype, \"tabSwitchTransition\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            /*\n             When the popup is opening, disables the set transition in the themes. When `defaultTab` is set to `time`,\n             the popup opens with an active **Time** tab and the animation of the initial transition is undesired.\n             Setting the inline transition style to `none` overrides the set animation in the themes.\n             Setting the inline transition style to `null` does not apply any inline styles or override the themes CSS.\n            */\n            return this.isOpen ? null : 'none';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateTimePickerComponent.prototype, \"disableCalendar\", {\n        /**\n         * @hidden\n         *\n         * Indicates whether the Calendar will be disabled.\n         * The inactive tab component gets disabled and becomes inaccessible on tab click.\n         */\n        get: function () {\n            return this.activeTab !== 'date' && !this.calendar.isActive;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateTimePickerComponent.prototype, \"disableTimeSelector\", {\n        /**\n         * @hidden\n         *\n         * Indicates whether the TimeSelector will be disabled.\n         * The inactive tab component gets disabled and becomes inaccessible on tab click.\n         */\n        get: function () {\n            return this.activeTab !== 'time' && !this.timeSelector.isActive;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateTimePickerComponent.prototype, \"activeTabComponent\", {\n        get: function () {\n            if (!this.isOpen) {\n                return;\n            }\n            if (!(isPresent(this.calendar) || isPresent(this.timeSelector))) {\n                this.cdr.detectChanges();\n            }\n            return this.activeTab === 'date' ? this.calendar : this.timeSelector;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateTimePickerComponent.prototype, \"appendTo\", {\n        get: function () {\n            var appendTo = this.popupSettings.appendTo;\n            if (!isPresent(appendTo) || appendTo === 'root') {\n                return undefined;\n            }\n            return appendTo === 'component' ? this.container : appendTo;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DateTimePickerComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscriptions\n            // detect popup changes to disable the inactive view mark-up when the popup is open\n            .add(this.pickerService.onFocus.pipe(tap(this.detectPopupChanges.bind(this))).subscribe(this.handleFocus.bind(this)))\n            .add(this.pickerService.onBlur.subscribe(this.handleBlur.bind(this)))\n            .add(this.pickerService.sameDateSelected.subscribe(this.handleCalendarValueChange.bind(this)))\n            .add(this.localization.changes.subscribe(function () { return _this.cdr.markForCheck(); }));\n        if (isWindowAvailable()) {\n            this.subscriptions.add(this.ngZone.runOutsideAngular(function () { return fromEvent(window, 'blur').subscribe(_this.handleCancel.bind(_this)); }));\n        }\n    };\n    DateTimePickerComponent.prototype.ngOnChanges = function (changes) {\n        if (isPresent(changes.min) || isPresent(changes.max)) {\n            this.verifyMinMaxRange();\n        }\n        if (changes.min || changes.max || changes.rangeValidation || changes.disabledDatesValidation || changes.disabledDates) {\n            this.minValidateFn = this.rangeValidation ? minValidator(this.min) : noop;\n            this.maxValidateFn = this.rangeValidation ? maxValidator(this.max) : noop;\n            this.disabledDatesValidateFn = this.disabledDatesValidation ? disabledDatesValidator(this.disabledDatesService.isDateDisabled) : noop;\n            this.onValidatorChange();\n        }\n    };\n    DateTimePickerComponent.prototype.ngOnDestroy = function () {\n        if (this.isOpen) {\n            this.closePopup();\n        }\n        this.subscriptions.unsubscribe();\n    };\n    /**\n     * * If the popup is closed, focuses the DateTimePicker input.\n     * * If the popup is open, the focus is moved to its content.\n     */\n    DateTimePickerComponent.prototype.focus = function () {\n        if (this.disabled) {\n            return;\n        }\n        if (this.isOpen) {\n            this.activeTabComponent.focus();\n        }\n        else {\n            this.input.focus();\n        }\n    };\n    /**\n     * Blurs the DateTimePicker.\n     */\n    DateTimePickerComponent.prototype.blur = function () {\n        if (this.isOpen && this.activeTabComponent.isActive) {\n            this.activeTabComponent.blur();\n        }\n        else {\n            this.input.blur();\n        }\n    };\n    /**\n     * Toggles the visibility of the popup. If you use the `toggle` method to show or hide the popup,\n     * the `open` and `close` events do not fire.\n     * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).\n     *\n     * @param show - The state of the popup.\n     */\n    DateTimePickerComponent.prototype.toggle = function (show) {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        var shouldOpen = isPresent(show) ? show : !this.isOpen;\n        if (this.isOpen) {\n            this.closePopup();\n            // Changes the tab and the calendar or clock icon to the designated default.\n            if (this.activeTab !== this.defaultTab) {\n                this.activeTab = this.defaultTab;\n                this.cdr.detectChanges();\n            }\n        }\n        if (shouldOpen) {\n            this.openPopup();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DateTimePickerComponent.prototype.writeValue = function (value) {\n        this.value = value;\n    };\n    /**\n     * @hidden\n     */\n    DateTimePickerComponent.prototype.registerOnChange = function (fn) {\n        this.onControlChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    DateTimePickerComponent.prototype.registerOnTouched = function (fn) {\n        this.onControlTouched = fn;\n    };\n    /**\n     * @hidden\n     */\n    DateTimePickerComponent.prototype.setDisabledState = function (disabled) {\n        this.disabled = disabled;\n        this.cdr.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    DateTimePickerComponent.prototype.validate = function (control) {\n        return this.minValidateFn(control) || this.maxValidateFn(control) || this.disabledDatesValidateFn(control);\n    };\n    /**\n     * @hidden\n     */\n    DateTimePickerComponent.prototype.registerOnValidatorChange = function (fn) {\n        this.onValidatorChange = fn;\n    };\n    /**\n     * @hidden\n     *\n     * Used by the TextBoxContainer to determine if the floating label will render in the input.\n     */\n    DateTimePickerComponent.prototype.isEmpty = function () {\n        return !isPresent(this.value) && this.input.isEmpty();\n    };\n    /**\n     * @hidden\n     */\n    DateTimePickerComponent.prototype.handleIconClick = function (event) {\n        var _this = this;\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        // prevents the event default to evade focusing the DateInput input when placed inside a label (FF/IE/Edge)\n        event.preventDefault();\n        var runInZone = !this.isOpen || hasObservers(this.close);\n        this.run(runInZone, function () {\n            // handle focus first to maintain correct event order `focus` => `open`\n            _this.handleFocus();\n            _this.togglePopup(!_this.isOpen);\n        });\n    };\n    /**\n     * @hidden\n     */\n    DateTimePickerComponent.prototype.handleFocus = function () {\n        var _this = this;\n        if (this.isActive) {\n            return;\n        }\n        this.isActive = true;\n        this.cdr.detectChanges();\n        if (hasObservers(this.onFocus)) {\n            this.ngZone.run(function () { return _this.onFocus.emit(); });\n        }\n    };\n    /**\n     * @hidden\n     */\n    DateTimePickerComponent.prototype.handleBlur = function (event) {\n        var _this = this;\n        if (!this.isActive || this.focusTargetInComponent(event)) {\n            return;\n        }\n        this.isActive = false;\n        this.cdr.detectChanges();\n        var isNgControlUntouched = this.host.nativeElement.classList.contains('ng-untouched');\n        var runInZone = isNgControlUntouched || hasObservers(this.onBlur) || (this.isOpen && hasObservers(this.close));\n        this.run(runInZone, function () {\n            _this.onBlur.emit();\n            _this.onControlTouched();\n            _this.togglePopup(false);\n        });\n    };\n    /**\n     * @hidden\n     */\n    DateTimePickerComponent.prototype.changeActiveTab = function (tab) {\n        if (!this.isOpen || this.activeTab === tab) {\n            return;\n        }\n        // persists the Tcurrent value of the TimeSelector when switching between tabs\n        if (!isEqual(this.timeSelector.value, this.timeSelector.current)) {\n            this.timeSelector.handleAccept();\n        }\n        this.activeTab = tab;\n        this.cdr.detectChanges();\n        this.detectPopupChanges();\n    };\n    /**\n     * @hidden\n     */\n    DateTimePickerComponent.prototype.handleTabChangeTransitionEnd = function (dateTimeSelector, event) {\n        // handle only the .k-datetime-selector element transition, ignore any child element transitions\n        if (event.target !== dateTimeSelector) {\n            return;\n        }\n        this.activeTabComponent.focus();\n    };\n    /**\n     * @hidden\n     */\n    DateTimePickerComponent.prototype.handleAccept = function () {\n        var _this = this;\n        if (!this.isOpen) {\n            return;\n        }\n        var candidate = mergeDateAndTime(this.calendar.value, this.timeSelector.current);\n        var valueChangePresent = !isEqual(this.value, candidate);\n        var runInZone = valueChangePresent || hasObservers(this.close);\n        this.run(runInZone, function () {\n            _this.handleValueChange(candidate);\n            _this.togglePopup(false);\n        });\n    };\n    /**\n     * @hidden\n     */\n    DateTimePickerComponent.prototype.handleCancel = function () {\n        var _this = this;\n        if (!this.isOpen) {\n            return;\n        }\n        var runInZone = hasObservers(this.close);\n        this.run(runInZone, function () { return _this.togglePopup(false); });\n    };\n    /**\n     * @hidden\n     */\n    DateTimePickerComponent.prototype.handleInputValueChange = function (value) {\n        this.handleValueChange(value);\n        if (this.isOpen) {\n            this.togglePopup(false);\n        }\n    };\n    /**\n     * @hidden\n     */\n    DateTimePickerComponent.prototype.handleCalendarValueChange = function () {\n        this.setTimeSelectorMinMax(this.calendar.value);\n        this.changeActiveTab('time');\n    };\n    /**\n     * @hidden\n     */\n    DateTimePickerComponent.prototype.handleKeyDown = function (event) {\n        var _this = this;\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        var _a = event, keyCode = _a.keyCode, altKey = _a.altKey;\n        switch (keyCode) {\n            case altKey && Keys.ArrowUp:\n            case Keys.Escape:\n                this.handleCancel();\n                break;\n            case !this.isOpen && altKey && Keys.ArrowDown:\n                this.ngZone.run(function () { return _this.togglePopup(true); });\n                break;\n            case altKey && Keys.ArrowRight:\n                this.changeActiveTab('time');\n                break;\n            case altKey && Keys.ArrowLeft:\n                this.changeActiveTab('date');\n                break;\n            case this.isOpen && this.timeSelector.isActive && isPresent(this.calendarValue) && Keys.Enter:\n                this.handleAccept();\n                break;\n            default: return;\n        }\n        event.preventDefault();\n    };\n    /**\n     * @hidden\n     */\n    DateTimePickerComponent.prototype.handleTabOut = function (event) {\n        var _a = event, keyCode = _a.keyCode, shiftKey = _a.shiftKey, target = _a.target;\n        // if no focusable next sibling elements exist in the controls sections, the user is tabbing out of the popup\n        var focusableSiblingAvailable = isPresent(target.nextElementSibling) && !target.nextElementSibling.disabled;\n        if (keyCode === Keys.Tab && !shiftKey && !focusableSiblingAvailable) {\n            this.input.focus();\n            this.handleCancel();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DateTimePickerComponent.prototype.handleBackTabOut = function (event) {\n        var _a = event, keyCode = _a.keyCode, shiftKey = _a.shiftKey;\n        if (keyCode === Keys.Tab && shiftKey) {\n            this.input.focus();\n        }\n    };\n    /**\n     * @hidden\n     *\n     * Prevents the diversion of the focus from the currently active element in the component.\n     */\n    DateTimePickerComponent.prototype.preventMouseDown = function (event) {\n        event.preventDefault();\n    };\n    DateTimePickerComponent.prototype.verifyValue = function (value) {\n        if (!isDevMode()) {\n            return;\n        }\n        if (isPresent(value) && !(value instanceof Date)) {\n            throw new Error(\"The 'value' should be a valid JavaScript Date instance. Check \" + VALUE_DOC_LINK$4 + \" for possible resolution.\");\n        }\n    };\n    DateTimePickerComponent.prototype.verifyMinMaxRange = function () {\n        if (!isDevMode()) {\n            return;\n        }\n        if (!isValidRange(this.min, this.max)) {\n            throw new Error(\"The max value should be bigger than the min. See \" + MIN_MAX_DOC_LINK + \".\");\n        }\n    };\n    /**\n     * Extracts the time slots and the literals that are not preceded by date parts\n     * and concatenates the resulting parts into a string.\n     * If the provided format value does not contain any time parts,\n     * returns the designated format of the default popup component of the TimePicker.\n     */\n    DateTimePickerComponent.prototype.getTimeSelectorFormat = function (format) {\n        var timeSelectorFormat = this.intl\n            .splitDateFormat(format)\n            .filter(this.timeFormatPartFilter)\n            .reduce(function (format, part) { return format += part.pattern; }, '');\n        return timeSelectorFormat || DEFAULT_TIMESELECTOR_FORMAT;\n    };\n    /**\n     * The filter expression that filters out all format parts\n     * except for `hour`, `minute`, `second`, `dayperiod`, and specific literals.\n     * Literals will be left only if they are not preceded by date parts.\n     */\n    DateTimePickerComponent.prototype.timeFormatPartFilter = function (part, index, parts) {\n        var previousPart = index >= 1 && parts[index - 1];\n        if (previousPart && part.type === 'literal') {\n            return timeFormatRegExp.test(previousPart.type);\n        }\n        return timeFormatRegExp.test(part.type);\n    };\n    DateTimePickerComponent.prototype.togglePopup = function (open) {\n        if (open === this.isOpen) {\n            return;\n        }\n        var event = new PreventableEvent();\n        open ? this.open.emit(event) : this.close.emit(event);\n        if (event.isDefaultPrevented()) {\n            return;\n        }\n        this.toggle(open);\n        this.switchFocus();\n    };\n    DateTimePickerComponent.prototype.switchFocus = function () {\n        if (!this.isActive) {\n            return;\n        }\n        if (this.isOpen) {\n            this.activeTabComponent.focus();\n        }\n        else if (!this.touchEnabled) {\n            this.input.focus();\n        }\n        else if (!this.input.isActive) {\n            this.handleBlur();\n        }\n    };\n    DateTimePickerComponent.prototype.openPopup = function () {\n        var _this = this;\n        this.setCalendarValue(this.value);\n        this.setTimeSelectorMinMax(this.value);\n        var direction = this.localization.rtl ? 'right' : 'left';\n        this.popupRef = this.popupService.open({\n            anchor: this.wrapper,\n            content: this.popupTemplate,\n            positionMode: 'absolute',\n            animate: this.popupSettings.animate,\n            appendTo: this.appendTo,\n            popupClass: \"k-datetime-container \" + (this.popupSettings.popupClass || ''),\n            anchorAlign: { vertical: 'bottom', horizontal: direction },\n            popupAlign: { vertical: 'top', horizontal: direction }\n        });\n        this.popupRef.popupAnchorViewportLeave.subscribe(function () { return _this.handleCancel(); });\n    };\n    DateTimePickerComponent.prototype.closePopup = function () {\n        if (!this.isOpen) {\n            return;\n        }\n        this.popupRef.close();\n        this.popupRef = null;\n    };\n    DateTimePickerComponent.prototype.handleValueChange = function (value) {\n        if (isEqual(this.value, value)) {\n            return;\n        }\n        this.value = cloneDate(value);\n        this.valueChange.emit(cloneDate(value));\n        this.onControlChange(cloneDate(value));\n    };\n    /**\n     * Indicates whether the focus target is part of this component,\n     * that is, whether the focus target is inside the component wrapper or in the popup.\n     */\n    DateTimePickerComponent.prototype.focusTargetInComponent = function (event) {\n        if (!isPresent(event)) {\n            return false;\n        }\n        var relatedTarget = event.relatedTarget || document.activeElement;\n        var focusInPopup = isPresent(this.popupRef) && this.popupRef.popupElement.contains(relatedTarget);\n        var focusInWrapper = this.wrapper.nativeElement.contains(relatedTarget);\n        return focusInPopup || focusInWrapper;\n    };\n    DateTimePickerComponent.prototype.setTimeSelectorMinMax = function (selectedDate) {\n        var minDateSelected = isPresent(selectedDate) && isEqual(getDate(selectedDate), getDate(this.min));\n        this.timeSelectorMin = cloneDate(minDateSelected ? this.min : MIN_TIME);\n        var maxDateSelected = isPresent(selectedDate) && isEqual(getDate(selectedDate), getDate(this.max));\n        this.timeSelectorMax = cloneDate(maxDateSelected ? this.max : MAX_TIME);\n    };\n    DateTimePickerComponent.prototype.setCalendarValue = function (value) {\n        var isInCalendarRange = isPresent(value) && isInRange(value, this.calendarMin, this.calendarMax);\n        this.calendarValue = isInCalendarRange ? getDate(value) : null;\n    };\n    /**\n     * If the popup is available, runs a popup change detection.\n     */\n    DateTimePickerComponent.prototype.detectPopupChanges = function () {\n        if (!this.isOpen) {\n            return;\n        }\n        this.popupRef.popup.changeDetectorRef.detectChanges();\n    };\n    /**\n     * Depending on the predicate `runInZone` value that is passed,\n     * runs the provided function either in the Angular or in the current zone.\n     */\n    DateTimePickerComponent.prototype.run = function (runInZone, fn) {\n        if (runInZone) {\n            this.ngZone.run(function () { return fn(); });\n        }\n        else {\n            fn();\n        }\n    };\n    DateTimePickerComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-datetimepicker',\n                    exportAs: 'kendo-datetimepicker',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    providers: [\n                        PickerService,\n                        LocalizationService,\n                        DisabledDatesService,\n                        { provide: L10N_PREFIX, useValue: 'kendo.datetimepicker' },\n                        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return DateTimePickerComponent; }), multi: true },\n                        { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return DateTimePickerComponent; }), multi: true },\n                        { provide: KendoInput, useExisting: forwardRef(function () { return DateTimePickerComponent; }) }\n                    ],\n                    template: \"\\n        <ng-container\\n            kendoDateTimePickerLocalizedMessages\\n\\n            i18n-dateTab=\\\"kendo.datetimepicker.dateTab|The Date tab text in the datetimepicker popup header\\\"\\n            dateTab=\\\"Date\\\"\\n\\n            i18n-dateTabLabel=\\\"kendo.datetimepicker.dateTabLabel|The label for the Date tab in the datetimepicker popup header\\\"\\n            dateTabLabel=\\\"Date tab\\\"\\n\\n            i18n-timeTab=\\\"kendo.datetimepicker.timeTab|The Time tab text in the datetimepicker popup header\\\"\\n            timeTab=\\\"Time\\\"\\n\\n            i18n-timeTabLabel=\\\"kendo.datetimepicker.timeTabLabel|The label for the Time tab in the datetimepicker popup header\\\"\\n            timeTabLabel=\\\"Time tab\\\"\\n\\n            i18n-toggle=\\\"kendo.datetimepicker.toggle|The label for the toggle button in the datetimepicker component\\\"\\n            toggle=\\\"Toggle popup\\\"\\n\\n            i18n-accept=\\\"kendo.datetimepicker.accept|The Accept button text in the datetimepicker component\\\"\\n            accept=\\\"Set\\\"\\n\\n            i18n-acceptLabel=\\\"kendo.datetimepicker.acceptLabel|The label for the Accept button in the datetimepicker component\\\"\\n            acceptLabel=\\\"Set\\\"\\n\\n            i18n-cancel=\\\"kendo.datetimepicker.cancel|The Cancel button text in the datetimepicker component\\\"\\n            cancel=\\\"Cancel\\\"\\n\\n            i18n-cancelLabel=\\\"kendo.datetimepicker.cancelLabel|The label for the Cancel button in the datetimepicker component\\\"\\n            cancelLabel=\\\"Cancel\\\"\\n\\n            i18n-now=\\\"kendo.datetimepicker.now|The Now button text in the timepicker component\\\"\\n            now=\\\"NOW\\\"\\n\\n            i18n-nowLabel=\\\"kendo.datetimepicker.nowLabel|The label for the Now button in the timepicker component\\\"\\n            nowLabel=\\\"Select now\\\"\\n\\n            i18n-today=\\\"kendo.datetimepicker.today|The label for the today button in the calendar header\\\"\\n            today=\\\"TODAY\\\"\\n        >\\n        </ng-container>\\n\\n        <span\\n            #wrapper\\n            class=\\\"k-picker-wrap\\\"\\n            [class.k-state-default]=\\\"!disabled\\\"\\n            [class.k-state-disabled]=\\\"disabled\\\"\\n            [class.k-state-focused]=\\\"isActive\\\"\\n        >\\n            <kendo-dateinput\\n                [value]=\\\"value\\\"\\n                [format]=\\\"format\\\"\\n                [min]=\\\"min\\\"\\n                [max]=\\\"max\\\"\\n                [formatPlaceholder]=\\\"formatPlaceholder\\\"\\n                [placeholder]=\\\"placeholder\\\"\\n                [disabled]=\\\"disabled\\\"\\n                [readonly]=\\\"readonly\\\"\\n                [steps]=\\\"steps\\\"\\n                [tabindex]=\\\"tabindex\\\"\\n                [title]=\\\"title\\\"\\n                [focusableId]=\\\"focusableId\\\"\\n                [hasPopup]=\\\"true\\\"\\n                [isPopupOpen]=\\\"isOpen\\\"\\n                (valueChange)=\\\"handleInputValueChange($event)\\\"\\n                [kendoEventsOutsideAngular]=\\\"{\\n                    keydown: handleKeyDown\\n                }\\\"\\n                [scope]=\\\"this\\\"\\n            >\\n            </kendo-dateinput>\\n            <span class=\\\"k-select\\\"\\n                [attr.title]=\\\"localization.get('toggle')\\\"\\n                [attr.aria-label]=\\\"localization.get('toggle')\\\"\\n                [kendoEventsOutsideAngular]=\\\"{\\n                    mousedown: preventMouseDown,\\n                    click: handleIconClick\\n                }\\\"\\n                [scope]=\\\"this\\\"\\n            >\\n                <span class=\\\"k-link k-link-date\\\">\\n                    <span\\n                        class=\\\"k-icon\\\"\\n                        [class.k-i-calendar]=\\\"activeTab === 'date'\\\"\\n                        [class.k-i-clock]=\\\"activeTab === 'time'\\\"\\n                    >\\n                    </span>\\n                </span>\\n            </span>\\n        </span>\\n\\n        <ng-container #container></ng-container>\\n\\n        <ng-template #popupTemplate>\\n            <div\\n                class=\\\"k-datetime-wrap k-{{activeTab}}-tab\\\"\\n                [kendoEventsOutsideAngular]=\\\"{\\n                    mousedown: preventMouseDown,\\n                    keydown: handleKeyDown\\n                }\\\"\\n                [scope]=\\\"this\\\"\\n            >\\n                <div class=\\\"k-datetime-buttongroup\\\"\\n                    [kendoEventsOutsideAngular]=\\\"{\\n                        focusin: handleFocus,\\n                        focusout: handleBlur\\n                    }\\\"\\n                    [scope]=\\\"this\\\"\\n                >\\n                    <div class=\\\"k-button-group k-button-group-stretched\\\">\\n                        <button\\n                            type=\\\"button\\\"\\n                            class=\\\"k-button k-date-tab\\\"\\n                            [class.k-state-active]=\\\"activeTab === 'date'\\\"\\n                            [attr.title]=\\\"localization.get('dateTabLabel')\\\"\\n                            [attr.aria-label]=\\\"localization.get('dateTabLabel')\\\"\\n                            [kendoEventsOutsideAngular]=\\\"{\\n                                click: changeActiveTab.bind(this, 'date'),\\n                                keydown: handleBackTabOut\\n                            }\\\"\\n                            [scope]=\\\"this\\\"\\n                        >\\n                            {{localization.get('dateTab')}}\\n                        </button>\\n                        <button\\n                            type=\\\"button\\\"\\n                            class=\\\"k-button k-time-tab\\\"\\n                            [class.k-state-active]=\\\"activeTab === 'time'\\\"\\n                            [attr.title]=\\\"localization.get('timeTabLabel')\\\"\\n                            [attr.aria-label]=\\\"localization.get('timeTabLabel')\\\"\\n                            [kendoEventsOutsideAngular]=\\\"{\\n                                click: changeActiveTab.bind(this, 'time')\\n                            }\\\"\\n                        >\\n                            {{localization.get('timeTab')}}\\n                        </button>\\n                    </div>\\n                </div>\\n                <div\\n                    #dateTimeSelector\\n                    class=\\\"k-datetime-selector\\\"\\n                    [style.transition]=\\\"tabSwitchTransition\\\"\\n                    [kendoEventsOutsideAngular]=\\\"{\\n                        transitionend: handleTabChangeTransitionEnd.bind(this, dateTimeSelector)\\n                    }\\\"\\n                >\\n                    <div class=\\\"k-datetime-calendar-wrap\\\">\\n                        <kendo-calendar\\n                            [(value)]=\\\"calendarValue\\\"\\n                            [min]=\\\"calendarMin\\\"\\n                            [max]=\\\"calendarMax\\\"\\n                            [focusedDate]=\\\"focusedDate\\\"\\n                            [weekNumber]=\\\"weekNumber\\\"\\n                            [navigation]=\\\"false\\\"\\n                            [cellTemplate]=\\\"cellTemplate\\\"\\n                            [monthCellTemplate]=\\\"monthCellTemplate\\\"\\n                            [yearCellTemplate]=\\\"yearCellTemplate\\\"\\n                            [decadeCellTemplate]=\\\"decadeCellTemplate\\\"\\n                            [centuryCellTemplate]=\\\"centuryCellTemplate\\\"\\n                            [weekNumberTemplate]=\\\"weekNumberTemplate\\\"\\n                            [headerTitleTemplate]=\\\"headerTitleTemplate\\\"\\n                            [disabled]=\\\"disableCalendar\\\"\\n                            [disabledDates]=\\\"disabledDates\\\"\\n                            (valueChange)=\\\"handleCalendarValueChange()\\\"\\n                        >\\n                            <kendo-calendar-messages\\n                                [today]=\\\"localization.get('today')\\\"\\n                            >\\n                            </kendo-calendar-messages>\\n                        </kendo-calendar>\\n                    </div>\\n                    <div class=\\\"k-datetime-time-wrap\\\">\\n                        <kendo-timeselector\\n                            [value]=\\\"value\\\"\\n                            [format]=\\\"timeSelectorFormat\\\"\\n                            [min]=\\\"timeSelectorMin\\\"\\n                            [max]=\\\"timeSelectorMax\\\"\\n                            [setButton]=\\\"false\\\"\\n                            [cancelButton]=\\\"false\\\"\\n                            [steps]=\\\"steps\\\"\\n                            [disabled]=\\\"disableTimeSelector\\\"\\n                        >\\n                            <kendo-timeselector-messages\\n                                [now]=\\\"localization.get('now')\\\"\\n                                [nowLabel]=\\\"localization.get('nowLabel')\\\"\\n                            >\\n                            </kendo-timeselector-messages>\\n                        </kendo-timeselector>\\n                    </div>\\n                </div>\\n                <div\\n                    class=\\\"k-datetime-footer k-action-buttons\\\"\\n                    [kendoEventsOutsideAngular]=\\\"{\\n                        keydown: handleTabOut,\\n                        focusin: handleFocus,\\n                        focusout: handleBlur\\n                    }\\\"\\n                    [scope]=\\\"this\\\"\\n                >\\n                    <button\\n                        *ngIf=\\\"cancelButton\\\"\\n                        type=\\\"button\\\"\\n                        class=\\\"k-button k-time-cancel\\\"\\n                        [attr.title]=\\\"localization.get('cancelLabel')\\\"\\n                        [attr.aria-label]=\\\"localization.get('cancelLabel')\\\"\\n                        [kendoEventsOutsideAngular]=\\\"{\\n                            click: handleCancel\\n                        }\\\"\\n                        [scope]=\\\"this\\\"\\n                    >\\n                        {{localization.get('cancel')}}\\n                    </button>\\n                    <button\\n                        type=\\\"button\\\"\\n                        class=\\\"k-time-accept k-button k-primary\\\"\\n                        [attr.title]=\\\"localization.get('acceptLabel')\\\"\\n                        [attr.aria-label]=\\\"localization.get('acceptLabel')\\\"\\n                        [disabled]=\\\"!calendarValue\\\"\\n                        [kendoEventsOutsideAngular]=\\\"{\\n                            click: handleAccept\\n                        }\\\"\\n                        [scope]=\\\"this\\\"\\n                    >\\n                        {{localization.get('accept')}}\\n                    </button>\\n                </div>\\n            </div>\\n        </ng-template>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    DateTimePickerComponent.ctorParameters = function () { return [\n        { type: PopupService },\n        { type: IntlService },\n        { type: ChangeDetectorRef },\n        { type: PickerService },\n        { type: NgZone },\n        { type: ElementRef },\n        { type: Boolean, decorators: [{ type: Inject, args: [TOUCH_ENABLED,] }] },\n        { type: LocalizationService },\n        { type: DisabledDatesService }\n    ]; };\n    DateTimePickerComponent.propDecorators = {\n        hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-datetimepicker',] }],\n        wrapper: [{ type: ViewChild, args: ['wrapper',] }],\n        value: [{ type: Input }],\n        format: [{ type: Input }],\n        tabindex: [{ type: Input }],\n        disabledDates: [{ type: Input }],\n        popupSettings: [{ type: Input }],\n        focusableId: [{ type: Input }],\n        title: [{ type: Input }],\n        disabled: [{ type: Input }],\n        readonly: [{ type: Input }],\n        cancelButton: [{ type: Input }],\n        formatPlaceholder: [{ type: Input }],\n        placeholder: [{ type: Input }],\n        steps: [{ type: Input }],\n        focusedDate: [{ type: Input }],\n        weekNumber: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        rangeValidation: [{ type: Input }],\n        disabledDatesValidation: [{ type: Input }],\n        valueChange: [{ type: Output }],\n        open: [{ type: Output }],\n        close: [{ type: Output }],\n        onFocus: [{ type: Output, args: ['focus',] }],\n        onBlur: [{ type: Output, args: ['blur',] }],\n        defaultTab: [{ type: Input }],\n        cellTemplate: [{ type: ContentChild, args: [CellTemplateDirective,] }],\n        monthCellTemplate: [{ type: ContentChild, args: [MonthCellTemplateDirective,] }],\n        yearCellTemplate: [{ type: ContentChild, args: [YearCellTemplateDirective,] }],\n        decadeCellTemplate: [{ type: ContentChild, args: [DecadeCellTemplateDirective,] }],\n        centuryCellTemplate: [{ type: ContentChild, args: [CenturyCellTemplateDirective,] }],\n        weekNumberTemplate: [{ type: ContentChild, args: [WeekNumberCellTemplateDirective,] }],\n        headerTitleTemplate: [{ type: ContentChild, args: [HeaderTitleTemplateDirective,] }],\n        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],\n        popupTemplate: [{ type: ViewChild, args: ['popupTemplate', { read: TemplateRef },] }]\n    };\n    return DateTimePickerComponent;\n}());\n\n/**\n * A directive which renders the content of the DateRange Popup. To define the cell template, nest an\n * `<ng-template>` tag with the `kendoRangePopupTemplate` directive inside the component tag.\n */\nvar DateRangePopupTemplateDirective = /** @class */ (function () {\n    function DateRangePopupTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    DateRangePopupTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDateRangePopupTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    DateRangePopupTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return DateRangePopupTemplateDirective;\n}());\n\nvar isActive = function (cmp) { return (cmp && cmp.isActive) || false; };\nvar hasActiveContent = function (popup) { return popup && popup.hasActiveContent(); };\n/**\n * A service that handles the communication between the components that are placed inside the DateRangeComponent.\n * For example, the start and end `DateInput` and `DateRangePopup` components.\n */\nvar DateRangeService = /** @class */ (function () {\n    function DateRangeService() {\n        /**\n         * An Observable instance that notifies when the `activeRangeEnd` state is changed.\n         */\n        this.activeRangeEnd$ = new BehaviorSubject(null);\n        /**\n         * An Observable instance that notifies when the `focusedDate` is changed.\n         */\n        this.focusedDate$ = new BehaviorSubject(null);\n        /**\n         * An Observable instance that notifies when the end `DateInput` component is changed.\n         * For example, when a new end `DateInput` is attached or when the old one is detached.\n         */\n        this.endInput$ = new BehaviorSubject(null);\n        /**\n         * An Observable instance that notifies when the start `DateInput` component is changed.\n         * For example, when a new start `DateInput` is attached or the old one is detached.\n         */\n        this.startInput$ = new BehaviorSubject(null);\n        /**\n         * An Observable instance that notifies when the `DateRangePopup` component is changed.\n         */\n        this.dateRangePopup$ = new BehaviorSubject(null);\n        /**\n         * An Observable instance that notifies when the state of the selection range is changed.\n         */\n        this.range$ = new BehaviorSubject(EMPTY_SELECTIONRANGE);\n    }\n    Object.defineProperty(DateRangeService.prototype, \"activeRangeEnd\", {\n        /**\n         * Gets the current `activeRangeEnd` value.\n         */\n        get: function () {\n            return this.activeRangeEnd$.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateRangeService.prototype, \"focusedDate\", {\n        /**\n         * Gets the current `focusedDate` value.\n         */\n        get: function () {\n            return this.focusedDate$.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateRangeService.prototype, \"min\", {\n        /**\n         * Gets the `min` range value.\n         * The `min` value is extracted from the `start` DateInput value or the `min` value of the Calendar.\n         */\n        get: function () {\n            return (this.startInput$.value || {}).min || null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateRangeService.prototype, \"max\", {\n        /**\n         * Gets the `max` range value.\n         * The `max` value is extracted from the `end` DateInput value or the `max` value of the Calendar.\n         */\n        get: function () {\n            return (this.endInput$.value || {}).max || null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateRangeService.prototype, \"selectionRange\", {\n        /**\n         * Gets the current `selectionRange` value.\n         */\n        get: function () {\n            return this.range$.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Activates the registered `DateRangePopup` component.\n     * The method opens the popup and focuses the calendar.\n     */\n    DateRangeService.prototype.activatePopup = function () {\n        var dateRangePopup = this.dateRangePopup$.value;\n        if (!dateRangePopup) {\n            return;\n        }\n        dateRangePopup.activate();\n    };\n    /**\n     * Deactivates the registered `DateRangePopup` component.\n     * The method closes the popup.\n     */\n    DateRangeService.prototype.deactivatePopup = function () {\n        var dateRangePopup = this.dateRangePopup$.value;\n        if (!(dateRangePopup && dateRangePopup.show)) {\n            return;\n        }\n        dateRangePopup.show = false;\n    };\n    /**\n     * @hidden\n     *\n     * Deactivates the registered `DateRangePopup` component and fires the `cancel` event.\n     * The method closes the popup.\n     */\n    DateRangeService.prototype.cancelPopup = function () {\n        var dateRangePopup = this.dateRangePopup$.value;\n        if (!(dateRangePopup && dateRangePopup.show)) {\n            return;\n        }\n        dateRangePopup.cancelPopup();\n    };\n    /**\n     * Completes all observables to mitigate possible memory leaks.\n     * Calls the method when a component that uses it is destroyed.\n     */\n    DateRangeService.prototype.destroy = function () {\n        this.activeRangeEnd$.complete();\n        this.dateRangePopup$.complete();\n        this.focusedDate$.complete();\n        this.endInput$.complete();\n        this.startInput$.complete();\n        this.range$.complete();\n    };\n    /**\n     * Returns `true` when an active component that is placed inside the `DateRangeComponent` is detected.\n     * For example, the opened popup or the focused DateInput.\n     *\n     * @returns `true` if an active component is present.\n     */\n    DateRangeService.prototype.hasActiveComponent = function () {\n        var popup = this.dateRangePopup$.value;\n        var isPopup = isActive(popup);\n        var isStart = isActive(this.startInput$.value);\n        var isEnd = isActive(this.endInput$.value);\n        return isPopup || isStart || isEnd || hasActiveContent(popup) || false;\n    };\n    /**\n     * Registers a new start `DateInput` component. Notifies all `startInput$` listeners.\n     */\n    DateRangeService.prototype.registerStartInput = function (startInput) {\n        this.startInput$.next(startInput);\n    };\n    /**\n     * Registers a new end `DateInput` component. Notifies all `endInput$` listeners.\n     */\n    DateRangeService.prototype.registerEndInput = function (endInput) {\n        this.endInput$.next(endInput);\n    };\n    /**\n     * Registers a new `DateRangePopup` component. Notifies all `dateRangePopup$` listeners.\n     */\n    DateRangeService.prototype.registerPopup = function (dateRangePopup) {\n        this.dateRangePopup$.next(dateRangePopup);\n    };\n    /**\n     * Updates the `activeRangeEnd` value. Notifies all `activeRangeEnd$` listeners.\n     */\n    DateRangeService.prototype.setActiveRangeEnd = function (activeRange) {\n        if (!activeRange || this.activeRangeEnd === activeRange) {\n            return;\n        }\n        this.activeRangeEnd$.next(activeRange);\n    };\n    /**\n     * Updates the focused date. Notifies all `focusedDate$` listeners.\n     */\n    DateRangeService.prototype.setFocusedDate = function (value) {\n        if (isEqual(this.focusedDate$.value, value)) {\n            return;\n        }\n        this.focusedDate$.next(value);\n    };\n    /**\n     * Updates the selection range. Notifies all `range$` listeners.\n     */\n    DateRangeService.prototype.setRange = function (range) {\n        if (range === void 0) { range = EMPTY_SELECTIONRANGE; }\n        this.range$.next(range);\n    };\n    DateRangeService.decorators = [\n        { type: Injectable },\n    ];\n    return DateRangeService;\n}());\n\n/* tslint:disable:component-selector-name  component-selector-type */\nvar DEFAULT_VIEWS_LENGTH = 2;\n/**\n * @hidden\n */\nvar HorizontalViewListComponent = /** @class */ (function () {\n    function HorizontalViewListComponent(bus, cdr) {\n        this.bus = bus;\n        this.cdr = cdr;\n        this.activeView = CalendarViewEnum.month;\n        this.isActive = true;\n        this.min = new Date(MIN_DATE);\n        this.max = new Date(MAX_DATE);\n        this.views = DEFAULT_VIEWS_LENGTH;\n        this.valueChange = new EventEmitter();\n        this.cellEnter = new EventEmitter();\n        this.cellLeave = new EventEmitter();\n        this.dates = [];\n    }\n    Object.defineProperty(HorizontalViewListComponent.prototype, \"weekNumber\", {\n        get: function () {\n            return this.showWeekNumbers && this.isMonthView();\n        },\n        set: function (showWeekNumbers) {\n            this.showWeekNumbers = showWeekNumbers;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HorizontalViewListComponent.prototype, \"getComponentClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HorizontalViewListComponent.prototype, \"getComponentMonthClass\", {\n        get: function () {\n            return this.activeView === CalendarViewEnum.month;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HorizontalViewListComponent.prototype, \"getComponentYearClass\", {\n        get: function () {\n            return this.activeView === CalendarViewEnum.year;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HorizontalViewListComponent.prototype, \"getComponentDecadeClass\", {\n        get: function () {\n            return this.activeView === CalendarViewEnum.decade;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HorizontalViewListComponent.prototype, \"getComponentCenturyClass\", {\n        get: function () {\n            return this.activeView === CalendarViewEnum.century;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    HorizontalViewListComponent.prototype.ngOnChanges = function (changes) {\n        this.initService();\n        if (!this.service) {\n            return;\n        }\n        this.views = this.views || DEFAULT_VIEWS_LENGTH;\n        var focusedDate = this.focusedDate;\n        var viewDate = this.clampDate(this.service.viewDate(focusedDate, this.max, this.views));\n        this.skip = this.service.skip(viewDate, this.min);\n        this.total = this.service.total(this.min, this.max);\n        var activeViewChanged = hasChange(changes, 'activeView');\n        var viewsHasChanged = this.views > 0 && hasChange(changes, 'views');\n        if (activeViewChanged || !this.isInDates(focusedDate) || viewsHasChanged || !this.activeDate) {\n            this.dates = this.service.datesList(viewDate, this.getTake(this.skip));\n            this.activeDate = cloneDate(this.dates[0]);\n        }\n    };\n    HorizontalViewListComponent.prototype.initService = function () {\n        this.service = this.bus.service(this.activeView);\n    };\n    HorizontalViewListComponent.prototype.handleDateChange = function (candidate) {\n        this.valueChange.emit(candidate);\n    };\n    HorizontalViewListComponent.prototype.isMonthView = function () {\n        return this.activeView === CalendarViewEnum.month;\n    };\n    HorizontalViewListComponent.prototype.navigate = function (action) {\n        var candidate = this.move(action);\n        var list = this.service.datesList(candidate, this.getTake(this.skip));\n        if (this.isListInRange(list)) {\n            this.dates = list;\n        }\n        this.activeDate = cloneDate(this.dates[0]);\n        this.focusedDate = cloneDate(candidate);\n        this.cdr.markForCheck();\n        return cloneDate(candidate);\n    };\n    HorizontalViewListComponent.prototype.canNavigate = function (action) {\n        if (!this.service) {\n            return false;\n        }\n        return this.isListInRange(this.service.datesList(this.move(action), this.getTake(this.skip)));\n    };\n    HorizontalViewListComponent.prototype.clampDate = function (value) {\n        return dateInRange(value, this.min, this.max);\n    };\n    HorizontalViewListComponent.prototype.move = function (action) {\n        return this.service.move(this.dates[0] || this.focusedDate, action);\n    };\n    HorizontalViewListComponent.prototype.isListInRange = function (list) {\n        var lowerBound = this.service.beginningOfPeriod(this.min);\n        var upperBound = this.service.beginningOfPeriod(this.service.addToDate(this.max, 1));\n        return lowerBound <= list[0] && list[list.length - 1] < upperBound;\n    };\n    HorizontalViewListComponent.prototype.isInDates = function (value) {\n        return this.service.isInArray(value, this.dates);\n    };\n    HorizontalViewListComponent.prototype.getTake = function (skip) {\n        return Math.min(this.total - skip, this.views);\n    };\n    HorizontalViewListComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    selector: 'kendo-calendar-horizontal',\n                    template: \"\\n    <kendo-calendar-header\\n        [activeView]=\\\"activeView\\\"\\n        [currentDate]=\\\"activeDate\\\"\\n        [min]=\\\"min\\\"\\n        [max]=\\\"max\\\"\\n        [rangeLength]=\\\"views\\\"\\n        [templateRef]=\\\"headerTitleTemplateRef\\\"\\n        (today)=\\\"handleDateChange($event)\\\"\\n    >\\n    </kendo-calendar-header>\\n    <table class=\\\"k-content\\\">\\n        <tbody *kFor=\\\"let date of dates\\\"\\n               kendoCalendarView\\n               role=\\\"rowgroup\\\"\\n               direction=\\\"horizontal\\\"\\n               [activeView]=\\\"activeView\\\"\\n               [isActive]=\\\"isActive\\\"\\n               [min]=\\\"min\\\" [max]=\\\"max\\\"\\n               [cellUID]=\\\"cellUID\\\"\\n               [focusedDate]=\\\"focusedDate\\\"\\n               [selectedDate]=\\\"value\\\"\\n               [selectionRange]=\\\"selectionRange\\\"\\n               [activeRangeEnd]=\\\"activeRangeEnd\\\"\\n               [weekNumber]=\\\"weekNumber\\\"\\n               [templateRef]=\\\"cellTemplateRef\\\"\\n               [weekNumberTemplateRef]=\\\"weekNumberTemplateRef\\\"\\n               [viewDate]=\\\"date\\\"\\n               (change)=\\\"handleDateChange($event)\\\"\\n               (cellEnter)=\\\"cellEnter.emit($event)\\\"\\n               (cellLeave)=\\\"cellLeave.emit($event)\\\"\\n        ></tbody>\\n    </table>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    HorizontalViewListComponent.ctorParameters = function () { return [\n        { type: BusViewService },\n        { type: ChangeDetectorRef }\n    ]; };\n    HorizontalViewListComponent.propDecorators = {\n        cellTemplateRef: [{ type: Input }],\n        weekNumberTemplateRef: [{ type: Input }],\n        headerTitleTemplateRef: [{ type: Input }],\n        activeRangeEnd: [{ type: Input }],\n        activeView: [{ type: Input }],\n        cellUID: [{ type: Input }],\n        focusedDate: [{ type: Input }],\n        isActive: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        selectionRange: [{ type: Input }],\n        value: [{ type: Input }],\n        views: [{ type: Input }],\n        weekNumber: [{ type: Input }],\n        valueChange: [{ type: Output }],\n        cellEnter: [{ type: Output }],\n        cellLeave: [{ type: Output }],\n        getComponentClass: [{ type: HostBinding, args: [\"class.k-calendar-view\",] }],\n        getComponentMonthClass: [{ type: HostBinding, args: [\"class.k-calendar-monthview\",] }],\n        getComponentYearClass: [{ type: HostBinding, args: [\"class.k-calendar-yearview\",] }],\n        getComponentDecadeClass: [{ type: HostBinding, args: [\"class.k-calendar-decadeview\",] }],\n        getComponentCenturyClass: [{ type: HostBinding, args: [\"class.k-calendar-centuryview\",] }]\n    };\n    return HorizontalViewListComponent;\n}());\n\nvar noop$2 = function () { return null; };\n/**\n * @hidden\n */\nvar disabledDatesRangeValidator = function (isDateDisabled) {\n    if (!isPresent(isDateDisabled)) {\n        return noop$2;\n    }\n    return function (selectedRange) {\n        var isRangeComplete = isPresent(selectedRange) && isPresent(selectedRange.start) && isPresent(selectedRange.end);\n        if (!isRangeComplete || selectedRange.start > selectedRange.end) {\n            return null;\n        }\n        var disabledDates = disabledDatesInRange(selectedRange.start, selectedRange.end, isDateDisabled);\n        var error = {\n            disabledDatesInRange: disabledDates\n        };\n        return disabledDates.length ? error : null;\n    };\n};\n\n/* tslint:disable:no-forward-ref */\nvar BOTTOM_VIEW_DOC_LINK$1 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-bottomview';\nvar TOP_VIEW_DOC_LINK$1 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-topview';\nvar MIN_DOC_LINK$3 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-min';\nvar MAX_DOC_LINK$3 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-max';\nvar VALUE_DOC_LINK$5 = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/calendar/#toc-using-with-json';\n/**\n * @hidden\n */\nvar RANGE_CALENDAR_VALUE_ACCESSOR = {\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MultiViewCalendarComponent; }) //tslint:disable-line:no-use-before-declare\n};\n/**\n * @hidden\n */\nvar RANGE_CALENDAR_RANGE_VALIDATORS = {\n    multi: true,\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return MultiViewCalendarComponent; }) //tslint:disable-line:no-use-before-declare\n};\n/**\n * Represents the Kendo UI MultiViewCalendar component for Angular.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-multiviewcalendar></kendo-multiviewcalendar>\n * `\n * })\n * class AppComponent { }\n * ```\n */\nvar MultiViewCalendarComponent = /** @class */ (function () {\n    function MultiViewCalendarComponent(bus, element, localization, navigator, renderer, cdr, zone, disabledDatesService) {\n        this.bus = bus;\n        this.element = element;\n        this.localization = localization;\n        this.navigator = navigator;\n        this.renderer = renderer;\n        this.cdr = cdr;\n        this.zone = zone;\n        this.disabledDatesService = disabledDatesService;\n        /**\n         * @hidden\n         */\n        this.id = guid();\n        /**\n         * Determines whether the built-in min or max validators are enforced when validating a form.\n         */\n        this.rangeValidation = false;\n        /**\n         * Determines whether the built-in validator for disabled\n         * date ranges is enforced when validating a form\n         * ([see example]({% slug disabled_dates_multiviewcalendar %}#toc-validation)).\n         */\n        this.disabledDatesRangeValidation = false;\n        /**\n         * Sets or gets the `disabled` property of the Calendar and\n         * determines whether the component is active\n         * ([see example]({% slug disabled_multiviewcalendar %})).\n         */\n        this.disabled = false;\n        /**\n         * Sets or gets the `tabindex` property of the Calendar. Based on the\n         * [HTML `tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) behavior,\n         * it determines whether the component is focusable.\n         */\n        this.tabindex = 0;\n        /**\n         * Defines the active view that the Calendar initially renders\n         * ([see example]({% slug activeview_multiviewcalendar %})).\n         * By default, the active view is `month`.\n         *\n         * > You have to set `activeView` within the `topView`-`bottomView` range.\n         */\n        this.activeView = CalendarViewEnum[CalendarViewEnum.month];\n        /**\n         * Defines the bottommost view, to which the user can navigate\n         * ([see example]({% slug dates_multiviewcalendar %}#toc-partial-dates)).\n         */\n        this.bottomView = CalendarViewEnum[CalendarViewEnum.month];\n        /**\n         * Defines the topmost view, to which the user can navigate.\n         */\n        this.topView = CalendarViewEnum[CalendarViewEnum.century];\n        /**\n         * Determines whether to display a week number column in the `month` view\n         * ([see example]({% slug weeknumcolumn_multiviewcalendar %})).\n         */\n        this.weekNumber = false;\n        /**\n         * Sets or gets the `views` property of the Calendar and\n         * defines the number of rendered months.\n         */\n        this.views = 2;\n        /**\n         * Fires when the active view is changed\n         * ([more information and example]({% slug overview_multiviewcalendar %}#toc-events)).\n         */\n        this.activeViewChange = new EventEmitter();\n        /**\n         * Fires when a view cell is entered\n         * ([more information and example]({% slug overview_multiviewcalendar %}#toc-events)).\n         */\n        this.cellEnter = new EventEmitter();\n        /**\n         * Fires when a view cell is leaved\n         * ([more information and example]({% slug overview_multiviewcalendar %}#toc-events)).\n         */\n        this.cellLeave = new EventEmitter();\n        /**\n         * Fires when the value is changed\n         * ([more information and example]({% slug overview_multiviewcalendar %}#toc-events)).\n         */\n        this.valueChange = new EventEmitter();\n        this.cellUID = guid();\n        this.isActive = false;\n        this.isHovered = false;\n        this.isPrevDisabled = true;\n        this.isNextDisabled = true;\n        this.prevView = Action.PrevView;\n        this.nextView = Action.NextView;\n        this._min = new Date(MIN_DATE);\n        this._max = new Date(MAX_DATE);\n        this._focusedDate = getToday();\n        this.resolvedPromise = Promise.resolve();\n        this.onControlChange = noop;\n        this.onControlTouched = noop;\n        this.onValidatorChange = noop;\n        this.minValidateFn = noop;\n        this.maxValidateFn = noop;\n        this.disabledDatesRangeValidateFn = noop;\n        this.subscriptions = new Subscription(function () { });\n        this.setClasses(element.nativeElement);\n    }\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"focusedDate\", {\n        get: function () {\n            return this._focusedDate;\n        },\n        /**\n         * Sets or gets the `focusedDate` property of the Calendar and\n         * defines the focused date of the component\n         * ([see example]({% slug dates_multiviewcalendar %}#toc-focused-dates)).\n         *\n         * > If the Calendar is out of the min or max range, it normalizes the defined `focusedDate`.\n         */\n        set: function (focusedDate) {\n            this._focusedDate = focusedDate || getToday();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"min\", {\n        get: function () {\n            return this._min;\n        },\n        /**\n         * Sets or gets the `min` property of the Calendar and\n         * defines the minimum allowed date value.\n         * By default, the `min` value is `1900-1-1`.\n         */\n        set: function (min) {\n            this._min = min || new Date(MIN_DATE);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"max\", {\n        get: function () {\n            return this._max;\n        },\n        /**\n         * Sets or gets the `max` property of the Calendar and\n         * defines the maximum allowed date value.\n         * By default, the `max` value is `2099-12-31`.\n         */\n        set: function (max) {\n            this._max = max || new Date(MAX_DATE);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"value\", {\n        /**\n         * Sets or gets the `value` property of the Calendar and defines the selected value of the component.\n         *\n         * > The `value` has to be a valid\n         * [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.\n         */\n        get: function () {\n            return this._value;\n        },\n        set: function (candidate) {\n            this.verifyValue(candidate);\n            this._value = cloneDate(candidate);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"disabledDates\", {\n        /**\n         * Sets the dates of the MultiViewCalendar that will be disabled\n         * ([see example]({% slug disabled_dates_multiviewcalendar %})).\n         */\n        set: function (value) {\n            this.disabledDatesService.initialize(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"selectionRange\", {\n        get: function () {\n            return this._selectionRange;\n        },\n        /**\n         * Sets or gets the `selectionRange` property of the Calendar and\n         * defines the selection range of the component\n         * ([see example]({% slug dates_multiviewcalendar %}#toc-selection-range)).\n         */\n        set: function (range$$1) {\n            this._selectionRange = range$$1;\n            if (this.disabledDatesRangeValidation) {\n                this.onValidatorChange();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"cellTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.cellTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"monthCellTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.monthCellTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"yearCellTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.yearCellTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"decadeCellTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.decadeCellTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"centuryCellTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.centuryCellTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"weekNumberTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.weekNumberTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"headerTitleTemplateRef\", {\n        /**\n         * @hidden\n         */\n        set: function (template) {\n            this.headerTitleTemplate = template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"activeViewEnum\", {\n        get: function () {\n            var activeView = CalendarViewEnum[this.activeView];\n            return activeView < this.bottomViewEnum ? this.bottomViewEnum : activeView;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"bottomViewEnum\", {\n        get: function () {\n            return CalendarViewEnum[this.bottomView];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"topViewEnum\", {\n        get: function () {\n            return CalendarViewEnum[this.topView];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"widgetId\", {\n        get: function () {\n            return this.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"widgetRole\", {\n        get: function () {\n            return 'grid';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"calendarTabIndex\", {\n        get: function () {\n            return this.disabled ? undefined : this.tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"ariaDisabled\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiViewCalendarComponent.prototype, \"ariaActivedescendant\", {\n        get: function () {\n            return this.cellUID + this.focusedDate.getTime();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    MultiViewCalendarComponent.prototype.handleBlur = function () {\n        this.onControlTouched();\n        this.isActive = false;\n        this.isHovered = false; //ensure that hovered is also not active\n    };\n    /**\n     * @hidden\n     */\n    MultiViewCalendarComponent.prototype.handleFocus = function () {\n        this.isActive = true;\n    };\n    /**\n     * @hidden\n     */\n    MultiViewCalendarComponent.prototype.handleMouseEnter = function () {\n        this.isHovered = true;\n    };\n    /**\n     * @hidden\n     */\n    MultiViewCalendarComponent.prototype.handleMouseLeave = function () {\n        this.isHovered = false;\n    };\n    /**\n     * @hidden\n     */\n    MultiViewCalendarComponent.prototype.handleMousedown = function (event) {\n        event.preventDefault();\n    };\n    /**\n     * @hidden\n     */\n    MultiViewCalendarComponent.prototype.handleClick = function () {\n        if (this.isActive) {\n            return;\n        }\n        this.focus();\n    };\n    /**\n     * @hidden\n     */\n    MultiViewCalendarComponent.prototype.keydown = function (event) {\n        var candidate = dateInRange(this.navigator.move(this.focusedDate, this.navigator.action(event), this.activeViewEnum), this.min, this.max);\n        if (isEqual(this.focusedDate, candidate)) {\n            return;\n        }\n        this.focusedDate = candidate;\n        event.preventDefault();\n    };\n    /**\n     * @hidden\n     */\n    MultiViewCalendarComponent.prototype.enter = function () {\n        this.handleDateChange(this.focusedDate);\n    };\n    MultiViewCalendarComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.setMessages();\n        this.subscriptions.add(this.localization.changes.subscribe(function () { return _this.setMessages(); }));\n        this.subscriptions.add(this.bus.viewChanged.subscribe(function (_a) {\n            var view = _a.view;\n            _this.activeView = CalendarViewEnum[view];\n            _this.activeViewChange.emit(_this.activeView);\n            _this.cdr.detectChanges();\n            _this.updateButtonState();\n        }));\n    };\n    MultiViewCalendarComponent.prototype.ngOnChanges = function (changes) {\n        this.verifyChanges();\n        this.bus.configure(this.bottomViewEnum, this.topViewEnum);\n        var useValue = hasExistingValue(changes, 'value') && !hasExistingValue(changes, 'focusedDate');\n        var focusedDate = dateInRange(cloneDate(useValue ? this.value : this.focusedDate), this.min, this.max);\n        this.focusedDate = !isEqual(this.focusedDate, focusedDate) ? focusedDate : this.focusedDate;\n        if (changes.min || changes.max || changes.rangeValidation || changes.disabledDates || changes.disabledDatesRangeValidation) {\n            this.minValidateFn = this.rangeValidation ? minValidator(this.min) : noop;\n            this.maxValidateFn = this.rangeValidation ? maxValidator(this.max) : noop;\n            this.disabledDatesRangeValidateFn = this.disabledDatesRangeValidation ? disabledDatesRangeValidator(this.disabledDatesService.isDateDisabled) : noop;\n            this.onValidatorChange();\n        }\n        if (changes.min || changes.max || changes.focusedDate || changes.activeView) {\n            this.updateButtonState();\n        }\n    };\n    MultiViewCalendarComponent.prototype.ngOnDestroy = function () {\n        clearTimeout(this.messagesTimeout);\n        this.subscriptions.unsubscribe();\n    };\n    MultiViewCalendarComponent.prototype.ngAfterViewInit = function () {\n        this.updateButtonState();\n    };\n    /**\n     * Focuses the host element of the Calendar.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"multiviewcalendar.focus()\">Focus calendar</button>\n     *  <kendo-multiviewcalendar #multiviewcalendar></kendo-multiviewcalendar>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    MultiViewCalendarComponent.prototype.focus = function () {\n        if (!this.element) {\n            return;\n        }\n        this.element.nativeElement.focus();\n    };\n    /**\n     * Blurs the Calendar component.\n     */\n    MultiViewCalendarComponent.prototype.blur = function () {\n        if (!this.element) {\n            return;\n        }\n        this.element.nativeElement.blur();\n    };\n    /**\n     * @hidden\n     */\n    MultiViewCalendarComponent.prototype.handleDateChange = function (candidate) {\n        var canNavigateDown = this.bus.canMoveDown(this.activeViewEnum);\n        var isSameDate = !canNavigateDown && isEqual(candidate, this.value);\n        this.focusedDate = cloneDate(candidate) || this.focusedDate;\n        if (this.disabled || isSameDate) {\n            return;\n        }\n        if (canNavigateDown) {\n            this.bus.moveDown(this.activeViewEnum);\n            return;\n        }\n        if (!this.disabledDatesService.isDateDisabled(candidate)) {\n            this.value = cloneDate(candidate);\n            this.onControlChange(cloneDate(candidate));\n            this.valueChange.emit(cloneDate(candidate));\n        }\n    };\n    /**\n     * @hidden\n     */\n    MultiViewCalendarComponent.prototype.writeValue = function (candidate) {\n        this.verifyValue(candidate);\n        this.focusedDate = dateInRange(cloneDate(candidate) || this.focusedDate, this.min, this.max);\n        this.value = cloneDate(candidate);\n        this.cdr.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    MultiViewCalendarComponent.prototype.registerOnChange = function (fn) {\n        this.onControlChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    MultiViewCalendarComponent.prototype.registerOnTouched = function (fn) {\n        this.onControlTouched = fn;\n    };\n    /**\n     * @hidden\n     */\n    MultiViewCalendarComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this.cdr.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    MultiViewCalendarComponent.prototype.validate = function (control) {\n        return this.minValidateFn(control) || this.maxValidateFn(control) || this.disabledDatesRangeValidateFn(this.selectionRange);\n    };\n    /**\n     * @hidden\n     */\n    MultiViewCalendarComponent.prototype.registerOnValidatorChange = function (fn) {\n        this.onValidatorChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    MultiViewCalendarComponent.prototype.activeCellTemplate = function () {\n        switch (this.activeViewEnum) {\n            case CalendarViewEnum.month:\n                return this.monthCellTemplate || this.cellTemplate;\n            case CalendarViewEnum.year:\n                return this.yearCellTemplate;\n            case CalendarViewEnum.decade:\n                return this.decadeCellTemplate;\n            case CalendarViewEnum.century:\n                return this.centuryCellTemplate;\n            default:\n                return null;\n        }\n    };\n    /**\n     * @hidden\n     */\n    MultiViewCalendarComponent.prototype.navigate = function (action) {\n        this.focusedDate = this.viewList.navigate(action);\n        this.updateButtonState();\n    };\n    /**\n     * @hidden\n     */\n    MultiViewCalendarComponent.prototype.emitCellEvent = function (emitter, args) {\n        if (hasObservers(emitter)) {\n            this.zone.run(function () {\n                emitter.emit(args);\n            });\n        }\n    };\n    MultiViewCalendarComponent.prototype.setClasses = function (element) {\n        this.renderer.addClass(element, 'k-widget');\n        this.renderer.addClass(element, 'k-calendar');\n        this.renderer.addClass(element, 'k-calendar-infinite');\n        this.renderer.addClass(element, 'k-calendar-range');\n    };\n    MultiViewCalendarComponent.prototype.setMessages = function () {\n        var _this = this;\n        this.zone.runOutsideAngular(function () {\n            clearTimeout(_this.messagesTimeout);\n            _this.messagesTimeout = setTimeout(function () {\n                _this.prevButtonTitle = _this.localization.get('prevButtonTitle');\n                _this.nextButtonTitle = _this.localization.get('nextButtonTitle');\n                _this.cdr.detectChanges();\n            });\n        });\n    };\n    MultiViewCalendarComponent.prototype.verifyChanges = function () {\n        if (!isDevMode()) {\n            return;\n        }\n        if (this.min > this.max) {\n            throw new Error(\"The max value should be bigger than the min. See \" + MIN_DOC_LINK$3 + \" and \" + MAX_DOC_LINK$3 + \".\");\n        }\n        if (this.bottomViewEnum > this.topViewEnum) {\n            throw new Error(\"The topView should be greater than bottomView. See \" + BOTTOM_VIEW_DOC_LINK$1 + \" and \" + TOP_VIEW_DOC_LINK$1 + \".\");\n        }\n    };\n    MultiViewCalendarComponent.prototype.verifyValue = function (candidate) {\n        if (!isDevMode()) {\n            return;\n        }\n        if (candidate && !(candidate instanceof Date)) {\n            throw new Error(\"The 'value' should be a valid JavaScript Date instance. Check \" + VALUE_DOC_LINK$5 + \" for possible resolution.\");\n        }\n    };\n    MultiViewCalendarComponent.prototype.updateButtonState = function () {\n        var _this = this;\n        this.resolvedPromise.then(function () {\n            _this.isPrevDisabled = !_this.viewList.canNavigate(_this.prevView);\n            _this.isNextDisabled = !_this.viewList.canNavigate(_this.nextView);\n            _this.cdr.markForCheck();\n        });\n    };\n    MultiViewCalendarComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    exportAs: 'kendo-multiviewcalendar',\n                    providers: [\n                        BusViewService,\n                        RANGE_CALENDAR_VALUE_ACCESSOR,\n                        RANGE_CALENDAR_RANGE_VALIDATORS,\n                        LocalizationService,\n                        DisabledDatesService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.multiviewcalendar'\n                        },\n                        NavigationService\n                    ],\n                    selector: 'kendo-multiviewcalendar',\n                    template: \"\\n    <ng-container kendoMultiViewCalendarLocalizedMessages\\n        i18n-today=\\\"kendo.multiviewcalendar.today|The label for the today button in the calendar header\\\"\\n        today=\\\"TODAY\\\"\\n\\n        i18n-prevButtonTitle=\\\"kendo.multiviewcalendar.prevButtonTitle|The label for the previous button in the Multiview calendar\\\"\\n        prevButtonTitle=\\\"Navigate to previous view\\\"\\n\\n        i18n-nextButtonTitle=\\\"kendo.multiviewcalendar.nextButtonTitle|The label for the next button in the Multiview calendar\\\"\\n        nextButtonTitle=\\\"Navigate to next view\\\"\\n    >\\n    </ng-container>\\n    <button\\n        class=\\\"k-button k-prev-view\\\" type=\\\"button\\\"\\n        [attr.aria-disabled]=\\\"isPrevDisabled\\\"\\n        [disabled]=\\\"isPrevDisabled\\\"\\n        [title]=\\\"prevButtonTitle\\\"\\n        (click)=\\\"navigate(prevView)\\\"\\n    >\\n        <span class=\\\"k-icon k-i-arrow-chevron-left\\\"></span>\\n    </button>\\n    <kendo-calendar-horizontal\\n        [activeView]=\\\"activeViewEnum\\\"\\n        [isActive]=\\\"isActive || isHovered\\\"\\n        [cellTemplateRef]=\\\"activeCellTemplate()?.templateRef\\\"\\n        [headerTitleTemplateRef]=\\\"headerTitleTemplate?.templateRef\\\"\\n        [weekNumberTemplateRef]=\\\"weekNumberTemplate?.templateRef\\\"\\n        [cellUID]=\\\"cellUID\\\"\\n        [views]=\\\"views\\\"\\n        [min]=\\\"min\\\"\\n        [max]=\\\"max\\\"\\n        [focusedDate]=\\\"focusedDate\\\"\\n        [weekNumber]=\\\"weekNumber\\\"\\n        [activeRangeEnd]=\\\"activeRangeEnd\\\"\\n        [selectionRange]=\\\"selectionRange\\\"\\n        [value]=\\\"value\\\"\\n        (valueChange)=\\\"handleDateChange($event)\\\"\\n        (cellEnter)=\\\"emitCellEvent(cellEnter, $event)\\\"\\n        (cellLeave)=\\\"emitCellEvent(cellLeave, $event)\\\"\\n    >\\n    </kendo-calendar-horizontal>\\n    <button\\n        class=\\\"k-button k-next-view\\\" type=\\\"button\\\"\\n        [attr.aria-disabled]=\\\"isNextDisabled\\\"\\n        [disabled]=\\\"isNextDisabled\\\"\\n        [title]=\\\"nextButtonTitle\\\"\\n        (click)=\\\"navigate(nextView)\\\"\\n    >\\n        <span class=\\\"k-icon k-i-arrow-chevron-right\\\"></span>\\n    </button>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    MultiViewCalendarComponent.ctorParameters = function () { return [\n        { type: BusViewService },\n        { type: ElementRef },\n        { type: LocalizationService },\n        { type: NavigationService },\n        { type: Renderer2 },\n        { type: ChangeDetectorRef },\n        { type: NgZone },\n        { type: DisabledDatesService }\n    ]; };\n    MultiViewCalendarComponent.propDecorators = {\n        id: [{ type: Input }],\n        focusedDate: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        rangeValidation: [{ type: Input }],\n        disabledDatesRangeValidation: [{ type: Input }],\n        value: [{ type: Input }],\n        disabled: [{ type: Input }],\n        tabindex: [{ type: Input }],\n        tabIndex: [{ type: Input }],\n        disabledDates: [{ type: Input }],\n        activeView: [{ type: Input }],\n        bottomView: [{ type: Input }],\n        topView: [{ type: Input }],\n        weekNumber: [{ type: Input }],\n        activeRangeEnd: [{ type: Input }],\n        selectionRange: [{ type: Input }],\n        views: [{ type: Input }],\n        activeViewChange: [{ type: Output }],\n        cellEnter: [{ type: Output }],\n        cellLeave: [{ type: Output }],\n        valueChange: [{ type: Output }],\n        cellTemplate: [{ type: ContentChild, args: [CellTemplateDirective, { static: true },] }],\n        cellTemplateRef: [{ type: Input, args: ['cellTemplate',] }],\n        monthCellTemplate: [{ type: ContentChild, args: [MonthCellTemplateDirective, { static: true },] }],\n        monthCellTemplateRef: [{ type: Input, args: ['monthCellTemplate',] }],\n        yearCellTemplate: [{ type: ContentChild, args: [YearCellTemplateDirective, { static: true },] }],\n        yearCellTemplateRef: [{ type: Input, args: ['yearCellTemplate',] }],\n        decadeCellTemplate: [{ type: ContentChild, args: [DecadeCellTemplateDirective, { static: true },] }],\n        decadeCellTemplateRef: [{ type: Input, args: ['decadeCellTemplate',] }],\n        centuryCellTemplate: [{ type: ContentChild, args: [CenturyCellTemplateDirective, { static: true },] }],\n        centuryCellTemplateRef: [{ type: Input, args: ['centuryCellTemplate',] }],\n        weekNumberTemplate: [{ type: ContentChild, args: [WeekNumberCellTemplateDirective, { static: true },] }],\n        weekNumberTemplateRef: [{ type: Input, args: ['weekNumberTemplate',] }],\n        headerTitleTemplate: [{ type: ContentChild, args: [HeaderTitleTemplateDirective, { static: true },] }],\n        headerTitleTemplateRef: [{ type: Input, args: ['headerTitleTemplate',] }],\n        viewList: [{ type: ViewChild, args: [HorizontalViewListComponent,] }],\n        widgetId: [{ type: HostBinding, args: ['attr.id',] }],\n        widgetRole: [{ type: HostBinding, args: ['attr.role',] }],\n        calendarTabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],\n        ariaDisabled: [{ type: HostBinding, args: ['attr.aria-disabled',] }, { type: HostBinding, args: ['class.k-state-disabled',] }],\n        ariaActivedescendant: [{ type: HostBinding, args: ['attr.aria-activedescendant',] }],\n        handleBlur: [{ type: HostListener, args: [\"blur\",] }],\n        handleFocus: [{ type: HostListener, args: [\"focus\",] }],\n        handleMouseEnter: [{ type: HostListener, args: [\"mouseenter\",] }],\n        handleMouseLeave: [{ type: HostListener, args: [\"mouseleave\",] }],\n        handleMousedown: [{ type: HostListener, args: [\"mousedown\", ['$event'],] }],\n        handleClick: [{ type: HostListener, args: [\"click\",] }],\n        keydown: [{ type: HostListener, args: [\"keydown\", [\"$event\"],] }],\n        enter: [{ type: HostListener, args: [\"keydown.enter\",] }]\n    };\n    return MultiViewCalendarComponent;\n}());\n\n/**\n * Represents the Kendo UI DateRangePopup component for Angular.\n *\n * @example\n * ```ts\n * import { DateInputsModule, DateRangeService } from '@progress/kendo-angular-dateinputs';\n *\n * _@Component({\n * providers: [DateRangeService],\n * selector: 'my-app',\n * template: `\n *  <button #anchor (click)=\"popup.toggle()\">Toggle</button>\n *  <kendo-daterange-popup [anchor]=\"anchor\" #popup></kendo-daterange-popup>\n * `\n * })\n * class AppComponent {\n * }\n * ```\n */\nvar DateRangePopupComponent = /** @class */ (function () {\n    function DateRangePopupComponent(popupService, dateRangeService, zone, rtl) {\n        this.popupService = popupService;\n        this.dateRangeService = dateRangeService;\n        this.zone = zone;\n        this.rtl = rtl;\n        /**\n         * Controls the popup animation.\n         * By default, the opening and closing animations are enabled.\n         * For more information about controlling the popup animations,\n         * refer to the article on [animations]({% slug animations_popup %}).\n         */\n        this.animate = true;\n        /**\n         * Configures the collision behavior of the popup.\n         * For more information, refer to the article on\n         * [viewport boundary detection]({% slug viewportboundarydetection_popup %}).\n         */\n        this.collision = { horizontal: 'fit', vertical: 'flip' };\n        /**\n         * Fires each time the popup is about to open.\n         * This event is preventable. If you cancel the event, the popup will remain closed.\n         * For more information, refer to the section on\n         * [events]({% slug overview_datepicker %}#toc-events).\n         */\n        this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close.\n         * This event is preventable. If you cancel the event, the popup will remain open.\n         * For more information, refer to the section on\n         * [events]({% slug overview_datepicker %}#toc-events).\n         */\n        this.close = new EventEmitter();\n        /**\n         * Fires each time the calendar element is blurred.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the calendar element is focused.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the popup is closed either on `ESC` keypress or on leaving the viewport.\n         */\n        this.cancel = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.popupUID = guid();\n        this.calendarSubscriptions = new Subscription(function () { });\n        this.popupSubscriptions = new Subscription(function () { });\n        this.resolvedPromise = Promise.resolve();\n    }\n    Object.defineProperty(DateRangePopupComponent.prototype, \"calendar\", {\n        /**\n         * The active calendar that is visible in the popup.\n         *\n         * > When the popup is closed, the property returns `null`.\n         */\n        get: function () {\n            return this._calendar;\n        },\n        set: function (calendar) {\n            this._calendar = calendar;\n            this.subscribeFocusBlur(calendar);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateRangePopupComponent.prototype, \"isActive\", {\n        /**\n         * Gets the active state of the component.\n         * When the opened calendar is active, returns `true`.\n         */\n        get: function () {\n            return this.calendar && this.calendar.isActive;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateRangePopupComponent.prototype, \"show\", {\n        get: function () {\n            return this._show;\n        },\n        /**\n         * Gets or sets the visibility state of the component.\n         */\n        set: function (show) {\n            var event = new PreventableEvent();\n            if (this._show === show) {\n                return;\n            }\n            if (!this._show && show) {\n                this.open.emit(event);\n            }\n            else if (this._show && !show) {\n                this.close.emit(event);\n            }\n            if (event.isDefaultPrevented()) {\n                return;\n            }\n            this._toggle(show);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DateRangePopupComponent.prototype.ngOnInit = function () {\n        this.dateRangeService.registerPopup(this);\n    };\n    DateRangePopupComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.calendarSubscriptions.add(this.contentCalendar.changes.subscribe(function (changes) { return _this.calendar = changes.first; }));\n        this.calendarSubscriptions.add(this.viewCalendar.changes.subscribe(function (changes) { return _this.calendar = changes.first; }));\n        if (isWindowAvailable()) {\n            this.zone.runOutsideAngular(function () {\n                return _this.windowBlurSubscription = fromEvent(window, 'blur').subscribe(_this.handleWindowBlur.bind(_this));\n            });\n        }\n    };\n    DateRangePopupComponent.prototype.ngOnDestroy = function () {\n        this.popupSubscriptions.unsubscribe();\n        this.calendarSubscriptions.unsubscribe();\n        if (this.activateSubscription) {\n            this.activateSubscription.unsubscribe();\n        }\n        if (this.blurSubscription) {\n            this.blurSubscription.unsubscribe();\n            this.focusSubscription.unsubscribe();\n        }\n        if (this.windowBlurSubscription) {\n            this.windowBlurSubscription.unsubscribe();\n        }\n    };\n    /**\n     *  Opens the popup component and focuses the calendar.\n     */\n    DateRangePopupComponent.prototype.activate = function () {\n        var _this = this;\n        if (this.show === true) {\n            return;\n        }\n        if (this.activateSubscription) {\n            this.activateSubscription.unsubscribe();\n        }\n        this.show = true;\n        this.zone.runOutsideAngular(function () {\n            _this.activateSubscription = merge(_this.contentCalendar.changes, _this.viewCalendar.changes)\n                .pipe(filter(function (changes) { return changes && changes.first; }), map(function (changes) { return changes.first; }))\n                .subscribe(function (calendar) { return setTimeout(function () { return calendar.focus(); }); });\n        });\n    };\n    /**\n     *  Focuses the calendar (if available).\n     */\n    DateRangePopupComponent.prototype.focus = function () {\n        if (this.calendar) {\n            this.calendar.focus();\n        }\n    };\n    /**\n     * Checks if a focused element ids placed inside the popup.\n     *\n     * @return boolean;\n     */\n    DateRangePopupComponent.prototype.hasActiveContent = function () {\n        if (!isDocumentAvailable() || !this.popupRef) {\n            return false;\n        }\n        return this.popupRef.popupElement.contains(document.activeElement);\n    };\n    /**\n     * Toggles the visibility of the popup.\n     * If you use the `toggle` method to show or hide the popup,\n     * the `open` and `close` events do not fire.\n     *\n     * @param show The state of the popup.\n     */\n    DateRangePopupComponent.prototype.toggle = function (show) {\n        var _this = this;\n        this.resolvedPromise.then(function () {\n            _this._toggle((show === undefined) ? !_this.show : show);\n        });\n    };\n    /**\n     * @hidden\n     *\n     * Closes the popup and triggers the `cancel` event.\n     */\n    DateRangePopupComponent.prototype.cancelPopup = function () {\n        this.show = false;\n        this.cancel.emit();\n    };\n    DateRangePopupComponent.prototype.handleWindowBlur = function () {\n        var _this = this;\n        if (!this.show) {\n            return;\n        }\n        if (hasObservers(this.close)) {\n            this.zone.run(function () { return _this.show = false; });\n        }\n        else {\n            this.show = false;\n        }\n    };\n    DateRangePopupComponent.prototype.handleMouseLeave = function () {\n        this.dateRangeService.setRange(this.dateRangeService.selectionRange);\n    };\n    DateRangePopupComponent.prototype.handleKeydown = function (event) {\n        var _this = this;\n        var altKey = event.altKey, keyCode = event.keyCode;\n        if (keyCode === Keys.Escape || (altKey && keyCode === Keys.ArrowUp)) {\n            this.zone.run(function () { return _this.cancelPopup(); });\n        }\n    };\n    DateRangePopupComponent.prototype.subscribeFocusBlur = function (calendar) {\n        var _this = this;\n        if (this.blurSubscription) {\n            this.blurSubscription.unsubscribe();\n            this.focusSubscription.unsubscribe();\n        }\n        if (!calendar) {\n            return;\n        }\n        var nativeElement = calendar.element.nativeElement;\n        this.blurSubscription = fromEvent(nativeElement, 'blur').subscribe(function () { return _this.onBlur.emit(); });\n        this.focusSubscription = fromEvent(nativeElement, 'focus').subscribe(function () { return _this.onFocus.emit(); });\n    };\n    DateRangePopupComponent.prototype.addPopupSubscriptions = function () {\n        var _this = this;\n        var subscriptions = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            subscriptions[_i] = arguments[_i];\n        }\n        subscriptions.map(function (s) { return _this.popupSubscriptions.add(s); });\n    };\n    Object.defineProperty(DateRangePopupComponent.prototype, \"_appendTo\", {\n        get: function () {\n            var appendTo = this.appendTo;\n            if (!appendTo || appendTo === 'root') {\n                return undefined;\n            }\n            return appendTo === 'component' ? this.container : appendTo;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DateRangePopupComponent.prototype._toggle = function (show) {\n        var _this = this;\n        this._show = show;\n        if (this.popupRef) {\n            this.popupRef.close();\n            this.popupRef = null;\n            this.popupSubscriptions.unsubscribe();\n            this.popupSubscriptions = new Subscription(function () { });\n        }\n        if (this._show) {\n            var direction = this.rtl ? 'right' : 'left';\n            this.popupRef = this.popupService.open({\n                anchor: this.anchor,\n                anchorAlign: this.anchorAlign || { vertical: 'bottom', horizontal: direction },\n                animate: this.animate,\n                appendTo: this._appendTo,\n                collision: this.collision,\n                content: (this.contentTemplate || {}).templateRef || this.defaultTemplate,\n                margin: this.margin,\n                popupAlign: this.popupAlign || { vertical: 'top', horizontal: direction },\n                positionMode: 'absolute'\n            });\n            var _a = this.popupRef, popupElement_1 = _a.popupElement, popupAnchorViewportLeave = _a.popupAnchorViewportLeave;\n            popupElement_1.setAttribute('id', this.popupUID);\n            this.addPopupSubscriptions(this.zone.runOutsideAngular(function () { return fromEvent(popupElement_1, 'keydown').subscribe(_this.handleKeydown.bind(_this)); }), fromEvent(popupElement_1, 'mouseleave').subscribe(this.handleMouseLeave.bind(this)), popupAnchorViewportLeave.subscribe(function () { return _this.cancelPopup(); }));\n        }\n    };\n    DateRangePopupComponent.decorators = [\n        { type: Component, args: [{\n                    exportAs: 'kendo-daterange-popup',\n                    selector: 'kendo-daterange-popup',\n                    template: \"\\n        <ng-container #container></ng-container>\\n        <ng-template #defaultTemplate>\\n            <kendo-multiviewcalendar kendoDateRangeSelection></kendo-multiviewcalendar>\\n        </ng-template>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    DateRangePopupComponent.ctorParameters = function () { return [\n        { type: PopupService },\n        { type: DateRangeService },\n        { type: NgZone },\n        { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] }] }\n    ]; };\n    DateRangePopupComponent.propDecorators = {\n        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],\n        defaultTemplate: [{ type: ViewChild, args: ['defaultTemplate',] }],\n        contentTemplate: [{ type: ContentChild, args: [DateRangePopupTemplateDirective,] }],\n        viewCalendar: [{ type: ViewChildren, args: [MultiViewCalendarComponent,] }],\n        contentCalendar: [{ type: ContentChildren, args: [MultiViewCalendarComponent,] }],\n        animate: [{ type: Input }],\n        anchor: [{ type: Input }],\n        anchorAlign: [{ type: Input }],\n        appendTo: [{ type: Input }],\n        collision: [{ type: Input }],\n        popupAlign: [{ type: Input }],\n        margin: [{ type: Input }],\n        open: [{ type: Output }],\n        close: [{ type: Output }],\n        onBlur: [{ type: Output, args: ['blur',] }],\n        onFocus: [{ type: Output, args: ['focus',] }],\n        cancel: [{ type: Output }]\n    };\n    return DateRangePopupComponent;\n}());\n\n/**\n * Represents the Kendo UI DateRange component for Angular.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-daterange>\n *      <kendo-dateinput kendoDateRangeStartInput [(value)]=\"dateRange.start\"></kendo-dateinput>\n *      <kendo-dateinput kendoDateRangeEndInput [(value)]=\"dateRange.end\"></kendo-dateinput>\n *  </kendo-daterange>\n * `\n * })\n * class AppComponent {\n *   public dateRange: any = { start: null, end: null };\n * }\n * ```\n */\nvar DateRangeComponent = /** @class */ (function () {\n    function DateRangeComponent() {\n        /**\n         * @hidden\n         */\n        this.showDefault = false;\n    }\n    Object.defineProperty(DateRangeComponent.prototype, \"hasContentPopup\", {\n        get: function () {\n            return this.contentPopup.length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DateRangeComponent.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.showDefault = !this.hasContentPopup;\n        this.subscription = this.contentPopup.changes.subscribe(function () {\n            _this.showDefault = !_this.hasContentPopup;\n        });\n    };\n    DateRangeComponent.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    DateRangeComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [DateRangeService],\n                    selector: 'kendo-daterange',\n                    template: \"\\n        <ng-content></ng-content>\\n        <kendo-daterange-popup *ngIf=\\\"showDefault\\\"></kendo-daterange-popup>\\n    \"\n                },] },\n    ];\n    DateRangeComponent.propDecorators = {\n        contentPopup: [{ type: ContentChildren, args: [DateRangePopupComponent,] }]\n    };\n    return DateRangeComponent;\n}());\n\n/**\n * @hidden\n */\nvar DateRangeInput = /** @class */ (function () {\n    function DateRangeInput(activeRangeEnd, dateRangeService, input, element, renderer, zone) {\n        this.activeRangeEnd = activeRangeEnd;\n        this.dateRangeService = dateRangeService;\n        this.input = input;\n        this.element = element;\n        this.renderer = renderer;\n        this.zone = zone;\n        this.navigateCalendarOnFocus = false;\n        this.popupSubscriptions = new Subscription(function () { });\n        this.subscriptions = new Subscription(function () { });\n    }\n    Object.defineProperty(DateRangeInput.prototype, \"isActiveEnd\", {\n        get: function () {\n            return this.dateRangeService.activeRangeEnd === this.activeRangeEnd;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateRangeInput.prototype, \"popupCalendarActivated\", {\n        get: function () {\n            var popup = this.dateRangeService.dateRangePopup$.value;\n            return isPresent(popup) && isPresent(popup.calendar);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DateRangeInput.prototype.init = function () {\n        var _this = this;\n        if (this.input.value) {\n            this.dateRangeService.setRange(this.getRange(this.input.value));\n        }\n        [\n            this.input.onBlur.subscribe(function () { return _this.deactivate(); }),\n            this.input.onFocus.pipe(filter(function () { return !_this.popupCalendarActivated; })).subscribe(function () { return _this.activate(); }),\n            this.input.valueUpdate.subscribe(function (value) { return _this.updateRange(value, 'change'); }),\n            this.dateRangeService.activeRangeEnd$.subscribe(function () {\n                if (_this.navigateCalendarOnFocus) {\n                    _this.focusActiveDate();\n                }\n                _this.toggleActiveClass(_this.isActiveEnd);\n            }),\n            this.dateRangeService.dateRangePopup$.subscribe(function (popup) { return _this.initPopup(popup); }),\n            this.dateRangeService.range$.subscribe(function (range) { return _this.updateInputValue(range); }),\n            fromEvent(this.element.nativeElement, 'click').subscribe(function () { return _this.activate(); }),\n            fromEvent(this.element.nativeElement, 'keydown').subscribe(function (event) { return _this.togglePopup(event || {}); })\n        ].map(function (s) { return _this.subscriptions.add(s); });\n    };\n    DateRangeInput.prototype.destroy = function () {\n        this.subscriptions.unsubscribe();\n        this.unsubscribePopup();\n    };\n    DateRangeInput.prototype.initPopup = function (popup) {\n        var _this = this;\n        if (!popup) {\n            this.unsubscribePopup();\n            return;\n        }\n        if (!popup.anchor) {\n            popup.anchor = this.element.nativeElement;\n        }\n        [\n            popup.cancel.subscribe(function () { return _this.isActiveEnd && _this.input.focus(); }),\n            popup.onFocus.subscribe(function () { return _this.toggleActiveClass(_this.isActiveEnd); }),\n            popup.onBlur.subscribe(function () { return _this.deactivate(); })\n        ].map(function (s) { return _this.popupSubscriptions.add(s); });\n    };\n    DateRangeInput.prototype.unsubscribePopup = function () {\n        this.popupSubscriptions.unsubscribe();\n        this.popupSubscriptions = new Subscription(function () { });\n    };\n    DateRangeInput.prototype.activate = function () {\n        this.dateRangeService.setActiveRangeEnd(this.activeRangeEnd);\n        this.dateRangeService.activatePopup();\n    };\n    DateRangeInput.prototype.deactivate = function () {\n        var _this = this;\n        this.zone.runOutsideAngular(function () {\n            setTimeout(function () {\n                _this.updateRange(_this.input.value, 'blur');\n                if (_this.dateRangeService.hasActiveComponent()) {\n                    return;\n                }\n                _this.toggleActiveClass(false);\n                _this.zone.run(function () { return _this.dateRangeService.deactivatePopup(); });\n            });\n        });\n    };\n    DateRangeInput.prototype.updateRange = function (value, correctOn) {\n        var range = this.getRange(value, correctOn);\n        if (range) {\n            this.focusActiveDate();\n            this.dateRangeService.setRange(range);\n        }\n    };\n    DateRangeInput.prototype.togglePopup = function (_a) {\n        var altKey = _a.altKey, keyCode = _a.keyCode;\n        if (keyCode === Keys.Escape) {\n            this.dateRangeService.cancelPopup();\n        }\n        else if (altKey && keyCode === Keys.ArrowDown) {\n            this.dateRangeService.activatePopup();\n        }\n    };\n    DateRangeInput.prototype.focusActiveDate = function () {\n        if (this.input.value && this.isActiveEnd) {\n            this.dateRangeService.setFocusedDate(cloneDate(this.input.value));\n        }\n    };\n    DateRangeInput.prototype.toggleActiveClass = function (show) {\n        var action = show ? 'addClass' : 'removeClass';\n        var nativeElement = this.element.nativeElement;\n        if (nativeElement && nativeElement.querySelector) {\n            this.renderer[action](nativeElement.querySelector('.k-dateinput-wrap'), 'k-state-focused');\n        }\n    };\n    return DateRangeInput;\n}());\n\n/**\n * A directive which manages the end range selection.\n *\n * > You can use the DateRangeEndInputDirective only with a DateInput component.\n */\nvar DateRangeEndInputDirective = /** @class */ (function (_super) {\n    __extends(DateRangeEndInputDirective, _super);\n    function DateRangeEndInputDirective(rangeService, dateInput, element, renderer, zone) {\n        var _this = _super.call(this, 'end', rangeService, dateInput, element, renderer, zone) || this;\n        _this.rangeService = rangeService;\n        _this.dateInput = dateInput;\n        /**\n         * Specifies the navigation behavior of the calendar when the active end is changed on input focus. When enabled,\n         * the calendar navigates to the value of the focused input. Otherwise, the calendar displays the last picked date.\n         *\n         * By default, the automatic navigation behavior on input focus is disabled.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <h5>Toggle input focus to see the calendar navigating between range ends.</h5>\n         *  <kendo-daterange>\n         *      <kendo-dateinput kendoDateRangeStartInput [navigateCalendarOnFocus]=\"true\" [(value)]=\"start\"></kendo-dateinput>\n         *      <kendo-dateinput kendoDateRangeEndInput [navigateCalendarOnFocus]=\"true\" [(value)]=\"end\"></kendo-dateinput>\n         *  </kendo-daterange>\n         * `\n         * })\n         * class AppComponent {\n         *   public start: Date = new Date(2018, 3, 10);\n         *   public end: Date = new Date(2018, 10, 20);\n         * }\n         * ```\n         */\n        _this.navigateCalendarOnFocus = false;\n        return _this;\n    }\n    DateRangeEndInputDirective.prototype.ngOnInit = function () {\n        this.rangeService.registerEndInput(this.dateInput);\n        _super.prototype.init.call(this);\n    };\n    DateRangeEndInputDirective.prototype.ngOnDestroy = function () {\n        _super.prototype.destroy.call(this);\n    };\n    DateRangeEndInputDirective.prototype.getRange = function (value, correctOn) {\n        var _a = this.dateInput, min = _a.min, max = _a.max;\n        if (!isInRange(value, min, max)) {\n            return null;\n        }\n        var start = (this.rangeService.selectionRange || EMPTY_SELECTIONRANGE).start;\n        return this.autoCorrectOn === correctOn && value < start ? clampRange(value) : { start: start, end: cloneDate(value) };\n    };\n    DateRangeEndInputDirective.prototype.updateInputValue = function (range$$1) {\n        var end = (range$$1 || EMPTY_SELECTIONRANGE).end;\n        var _a = this.dateInput, min = _a.min, max = _a.max;\n        if (isEqual(this.dateInput.value, end) || !isInRange(end, min, max)) {\n            return;\n        }\n        this.dateInput.writeValue(cloneDate(end));\n        this.dateInput.notify();\n    };\n    DateRangeEndInputDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDateRangeEndInput]'\n                },] },\n    ];\n    /** @nocollapse */\n    DateRangeEndInputDirective.ctorParameters = function () { return [\n        { type: DateRangeService },\n        { type: DateInputComponent },\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: NgZone }\n    ]; };\n    DateRangeEndInputDirective.propDecorators = {\n        autoCorrectOn: [{ type: Input }],\n        navigateCalendarOnFocus: [{ type: Input }]\n    };\n    return DateRangeEndInputDirective;\n}(DateRangeInput));\n\n/**\n * A directive which manages the start selection range.\n *\n * > You can use the DateRangeStartInputDirective only with a DateInput component.\n */\nvar DateRangeStartInputDirective = /** @class */ (function (_super) {\n    __extends(DateRangeStartInputDirective, _super);\n    function DateRangeStartInputDirective(rangeService, dateInput, element, renderer, zone) {\n        var _this = _super.call(this, 'start', rangeService, dateInput, element, renderer, zone) || this;\n        _this.rangeService = rangeService;\n        _this.dateInput = dateInput;\n        /**\n         * Specifies the navigation behavior of the calendar when the active end is changed on input focus.\n         * When enabled, the calendar navigates to the value of the focused input. Otherwise, the calendar\n         * displays the last picked date.\n         *\n         * By default, the automatic navigation behavior on input focus is disabled.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <h5>Toggle input focus to see the calendar navigating between range ends.</h5>\n         *  <kendo-daterange>\n         *      <kendo-dateinput kendoDateRangeStartInput [navigateCalendarOnFocus]=\"true\" [(value)]=\"start\"></kendo-dateinput>\n         *      <kendo-dateinput kendoDateRangeEndInput [navigateCalendarOnFocus]=\"true\" [(value)]=\"end\"></kendo-dateinput>\n         *  </kendo-daterange>\n         * `\n         * })\n         * class AppComponent {\n         *   public start: Date = new Date(2018, 3, 10);\n         *   public end: Date = new Date(2018, 10, 20);\n         * }\n         * ```\n         */\n        _this.navigateCalendarOnFocus = false;\n        return _this;\n    }\n    DateRangeStartInputDirective.prototype.ngOnInit = function () {\n        this.rangeService.registerStartInput(this.dateInput);\n        _super.prototype.init.call(this);\n    };\n    DateRangeStartInputDirective.prototype.ngOnDestroy = function () {\n        _super.prototype.destroy.call(this);\n    };\n    DateRangeStartInputDirective.prototype.getRange = function (value, correctOn) {\n        var _a = this.dateInput, min = _a.min, max = _a.max;\n        if (!isInRange(value, min, max)) {\n            return null;\n        }\n        var end = (this.rangeService.selectionRange || EMPTY_SELECTIONRANGE).end;\n        var shouldClamp = this.autoCorrectOn === correctOn && end && value > end;\n        return shouldClamp ? clampRange(value) : { start: cloneDate(value), end: end };\n    };\n    DateRangeStartInputDirective.prototype.updateInputValue = function (range$$1) {\n        var start = (range$$1 || EMPTY_SELECTIONRANGE).start;\n        var _a = this.dateInput, min = _a.min, max = _a.max;\n        if (isEqual(this.dateInput.value, start) || !isInRange(start, min, max)) {\n            return;\n        }\n        this.dateInput.writeValue(cloneDate(start));\n        this.dateInput.notify();\n    };\n    DateRangeStartInputDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDateRangeStartInput]'\n                },] },\n    ];\n    /** @nocollapse */\n    DateRangeStartInputDirective.ctorParameters = function () { return [\n        { type: DateRangeService },\n        { type: DateInputComponent },\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: NgZone }\n    ]; };\n    DateRangeStartInputDirective.propDecorators = {\n        autoCorrectOn: [{ type: Input }],\n        navigateCalendarOnFocus: [{ type: Input }]\n    };\n    return DateRangeStartInputDirective;\n}(DateRangeInput));\n\n/**\n * A directive which manages the MultiViewCalendar range selection.\n */\nvar DateRangeSelectionDirective = /** @class */ (function () {\n    function DateRangeSelectionDirective(calendar, cdr, element, renderer, dateRangeService) {\n        this.calendar = calendar;\n        this.cdr = cdr;\n        this.element = element;\n        this.dateRangeService = dateRangeService;\n        /**\n         * Specifies the auto-correction behavior. If the start date is greater than the end date,\n         * the directive fixes the date range to a single date either on input change or on blur\n         * ([see example]({% slug autocorrect_daterange %}#toc-configuring-the-calendar-selection-directive)).\n         *\n         * By default, the auto-correction is triggered on change.\n         * To disable this behavior, set the `autoCorrectOn` property to `none`.\n         */\n        this.autoCorrectOn = 'change';\n        /**\n         * Fires when the active range end is changed. For more information, refer to\n         * the section on [events]({% slug overview_multiviewcalendar %}#toc-events).\n         */\n        this.activeRangeEndChange = new EventEmitter();\n        /**\n         * Fires when the selection range is changed. For more information, refer to\n         * the section on [events]({% slug overview_multiviewcalendar %}#toc-events).\n         */\n        this.selectionRangeChange = new EventEmitter();\n        this.calendarSubscriptions = new Subscription(function () { });\n        this.dateRangeService = this.dateRangeService || new DateRangeService();\n        renderer.setAttribute(element.nativeElement, 'aria-multiselectable', 'true');\n    }\n    Object.defineProperty(DateRangeSelectionDirective.prototype, \"selectionRange\", {\n        /**\n         * Gets or sets the selection range of the calendar. When a new range is set,\n         * the connected DateRangeService notifies all related parties.\n         */\n        get: function () {\n            return this.calendar ? this.calendar.selectionRange : null;\n        },\n        set: function (range$$1) {\n            if (!this.isEqualCalendarRange(range$$1)) {\n                this.setSelectionRange(range$$1);\n            }\n            if (!isEqualRange(this.dateRangeService.selectionRange, range$$1)) {\n                this.dateRangeService.setRange(range$$1);\n            }\n            this.updateFocusedDate(range$$1);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateRangeSelectionDirective.prototype, \"activeRangeEnd\", {\n        /**\n         * Gets or sets the active end of the selection range. This option determines which range end will be updated on\n         * user interaction. When a new active end is set, the connected DateRangeService notifies all related parties.\n         */\n        /**\n         * Specifies which end of the selection range will be marked as active. The active end gets modified upon user\n         * interaction. When a new active end is set, the wired DateRangeService notifies all related components. For\n         * example, the start and end DateInput components.\n         *\n         * > If the selection range is undefined, the value is ignored.\n         */\n        get: function () {\n            return this.calendar.activeRangeEnd;\n        },\n        set: function (activeRange) {\n            if (this.dateRangeService.activeRangeEnd === activeRange) {\n                return;\n            }\n            this.calendar.activeRangeEnd = activeRange;\n            this.dateRangeService.setActiveRangeEnd(activeRange);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateRangeSelectionDirective.prototype, \"calendarRange\", {\n        get: function () {\n            return this.selectionRange || EMPTY_SELECTIONRANGE;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DateRangeSelectionDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        var calendar = this.calendar;\n        var dateRangeService = this.dateRangeService;\n        calendar.min = either(dateRangeService.min, calendar.min);\n        calendar.max = either(dateRangeService.max, calendar.max);\n        this.addSubscriptions(calendar.cellEnter.subscribe(function (value) { return _this.handleHover(value); }), calendar.valueChange.subscribe(function (value) { return _this.handleChange(value); }), dateRangeService.focusedDate$.subscribe(function (focusedDate) {\n            if (!isEqual(calendar.focusedDate, focusedDate)) {\n                calendar.focusedDate = focusedDate;\n            }\n        }), dateRangeService.activeRangeEnd$.subscribe(function (rangeEnd) {\n            if (calendar.activeRangeEnd === rangeEnd) {\n                return;\n            }\n            calendar.activeRangeEnd = rangeEnd;\n            _this.activeRangeEndChange.emit(rangeEnd);\n            _this.cdr.markForCheck();\n        }), dateRangeService.range$.subscribe(function (range$$1) {\n            if (!_this.isEqualCalendarRange(range$$1)) {\n                _this.acceptAndEmit(range$$1);\n            }\n            _this.updateFocusedDate(range$$1);\n        }), fromEvent(this.element.nativeElement, 'blur').subscribe(function () { return _this.handleBlur(); }));\n    };\n    DateRangeSelectionDirective.prototype.ngOnDestroy = function () {\n        this.calendarSubscriptions.unsubscribe();\n    };\n    DateRangeSelectionDirective.prototype.addSubscriptions = function () {\n        var _this = this;\n        var subscriptions = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            subscriptions[_i] = arguments[_i];\n        }\n        subscriptions.map(function (s) { return _this.calendarSubscriptions.add(s); });\n    };\n    DateRangeSelectionDirective.prototype.isEqualCalendarRange = function (range$$1) {\n        return isEqualRange(this.calendar.selectionRange, range$$1);\n    };\n    DateRangeSelectionDirective.prototype.handleBlur = function () {\n        var _a = this.calendarRange, start = _a.start, end = _a.end;\n        var autoCorrect = this.autoCorrectOn === 'blur' && start !== null && end !== null && end < start;\n        if (autoCorrect) {\n            this.dateRangeService.setRange(clampRange(start));\n        }\n    };\n    DateRangeSelectionDirective.prototype.handleChange = function (value) {\n        var service = this.dateRangeService;\n        var autoCorrect = this.autoCorrectOn === 'change' && this.shouldAutoCorrect(value);\n        var activeEnd = this.calendar.activeRangeEnd !== 'end' ? 'end' : (autoCorrect ? 'end' : 'start');\n        var range$$1 = autoCorrect ? clampRange(value) : this.updateRange(value);\n        if (!isEqualRange(service.selectionRange, range$$1)) {\n            this.acceptAndEmit(range$$1);\n            service.setActiveRangeEnd(activeEnd);\n            service.setRange(range$$1);\n        }\n    };\n    DateRangeSelectionDirective.prototype.handleHover = function (value) {\n        this.dateRangeService.setFocusedDate(cloneDate(value));\n        if (this.hasCompleteRange()) {\n            return;\n        }\n        var _a = this.calendarRange, start = _a.start, end = _a.end;\n        var activeRangeEnd = this.calendar.activeRangeEnd;\n        var updateRange = (start && activeRangeEnd === 'end') || (end && activeRangeEnd === 'start');\n        if (updateRange) {\n            this.setSelectionRange(this.updateRange(value));\n        }\n    };\n    DateRangeSelectionDirective.prototype.hasCompleteRange = function () {\n        var _a = this.dateRangeService.selectionRange || EMPTY_SELECTIONRANGE, start = _a.start, end = _a.end;\n        return Boolean(start) && Boolean(end);\n    };\n    DateRangeSelectionDirective.prototype.shouldAutoCorrect = function (value) {\n        var _a = this.calendarRange, end = _a.end, start = _a.start;\n        if (this.calendar.activeRangeEnd !== 'end') {\n            return end !== null && value > end;\n        }\n        else {\n            return start !== null && value < start;\n        }\n    };\n    DateRangeSelectionDirective.prototype.updateFocusedDate = function (range$$1) {\n        if (!range$$1 || this.dateRangeService.focusedDate) {\n            return;\n        }\n        this.dateRangeService.setFocusedDate(range$$1.start || range$$1.end);\n    };\n    DateRangeSelectionDirective.prototype.updateRange = function (value) {\n        var _a = this.calendarRange, end = _a.end, start = _a.start;\n        return this.calendar.activeRangeEnd !== 'end' ? ({ start: value, end: end }) : ({ start: start, end: value });\n    };\n    DateRangeSelectionDirective.prototype.setSelectionRange = function (range$$1) {\n        this.calendar.selectionRange = range$$1;\n        this.calendar.writeValue(null);\n    };\n    DateRangeSelectionDirective.prototype.acceptAndEmit = function (range$$1) {\n        this.setSelectionRange(range$$1);\n        this.selectionRangeChange.emit(range$$1);\n    };\n    DateRangeSelectionDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDateRangeSelection]'\n                },] },\n    ];\n    /** @nocollapse */\n    DateRangeSelectionDirective.ctorParameters = function () { return [\n        { type: MultiViewCalendarComponent },\n        { type: ChangeDetectorRef },\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: DateRangeService, decorators: [{ type: Optional }] }\n    ]; };\n    DateRangeSelectionDirective.propDecorators = {\n        autoCorrectOn: [{ type: Input }],\n        selectionRange: [{ type: Input }],\n        activeRangeEnd: [{ type: Input }],\n        activeRangeEndChange: [{ type: Output }],\n        selectionRangeChange: [{ type: Output }]\n    };\n    return DateRangeSelectionDirective;\n}());\n\n/* tslint:disable:directive-class-suffix directive-selector */\n/**\n * @hidden\n */\nvar KForOfContext = /** @class */ (function () {\n    function KForOfContext($implicit, kForOf, index, count) {\n        this.$implicit = $implicit;\n        this.kForOf = kForOf;\n        this.index = index;\n        this.count = count;\n    }\n    Object.defineProperty(KForOfContext.prototype, \"first\", {\n        get: function () { return this.index === 0; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(KForOfContext.prototype, \"last\", {\n        get: function () { return this.index === this.count - 1; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(KForOfContext.prototype, \"even\", {\n        get: function () { return this.index % 2 === 0; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(KForOfContext.prototype, \"odd\", {\n        get: function () { return !this.even; },\n        enumerable: true,\n        configurable: true\n    });\n    return KForOfContext;\n}());\n/**\n * @hidden\n */\nvar KForOf = /** @class */ (function () {\n    function KForOf(_viewContainer, _template, _differs) {\n        this._viewContainer = _viewContainer;\n        this._template = _template;\n        this._differs = _differs;\n        this._differ = null;\n    }\n    Object.defineProperty(KForOf.prototype, \"kForTemplate\", {\n        set: function (value) {\n            if (value) {\n                this._template = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    KForOf.prototype.ngOnChanges = function (changes) {\n        if ('kForOf' in changes) {\n            var value = changes.kForOf.currentValue;\n            if (this._differ || !value) {\n                return;\n            }\n            try {\n                this._differ = this._differs.find(value).create(this.kForTrackBy);\n            }\n            catch (e) {\n                throw new Error(\"Cannot find a differ supporting object '\" + value + \"' of type '\" + getTypeNameForDebugging(value) + \"'.\");\n            }\n        }\n    };\n    KForOf.prototype.ngDoCheck = function () {\n        if (this._differ) {\n            var changes = this._differ.diff(this.kForOf);\n            if (changes) {\n                this._applyChanges(changes);\n            }\n        }\n    };\n    KForOf.prototype._applyChanges = function (changes) {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        var viewContainerLength = this._viewContainer.length;\n        var dataLength = this.kForOf.length;\n        var tuples = {};\n        changes.forEachOperation(function (record, _, currentIndex) {\n            if (currentIndex !== null) {\n                tuples[currentIndex] = record.item;\n            }\n        });\n        for (var i = viewContainerLength; i < dataLength; i++) {\n            this._viewContainer.createEmbeddedView(this._template, new KForOfContext(null, this.kForOf, -1, -1), i);\n        }\n        for (var i = this._viewContainer.length; i > dataLength; i--) {\n            this._viewContainer.remove(i - 1);\n        }\n        for (var i = 0; i < this._viewContainer.length; i++) {\n            var view = this._viewContainer.get(i);\n            view.context.index = i;\n            view.context.count = length;\n            view.context.$implicit = tuples[i] || null;\n        }\n    };\n    KForOf.decorators = [\n        { type: Directive, args: [{ selector: '[kFor][kForOf]' },] },\n    ];\n    /** @nocollapse */\n    KForOf.ctorParameters = function () { return [\n        { type: ViewContainerRef },\n        { type: TemplateRef },\n        { type: IterableDiffers }\n    ]; };\n    KForOf.propDecorators = {\n        kForOf: [{ type: Input }],\n        kForTrackBy: [{ type: Input }],\n        kForTemplate: [{ type: Input }]\n    };\n    return KForOf;\n}());\n/**\n * @hidden\n */\nfunction getTypeNameForDebugging(type) {\n    return type.name || typeof type;\n}\n\n/**\n * @hidden\n */\nvar HeaderComponent = /** @class */ (function () {\n    function HeaderComponent(bus, cdr, localization, intl, disabledDatesService) {\n        this.bus = bus;\n        this.cdr = cdr;\n        this.localization = localization;\n        this.intl = intl;\n        this.disabledDatesService = disabledDatesService;\n        this.navigate = true;\n        this.todayAvailable = true;\n        this.min = new Date(MIN_DATE);\n        this.max = new Date(MAX_DATE);\n        this.rangeLength = 1;\n        this.today = new EventEmitter();\n        this.subscriptions = new Subscription();\n    }\n    Object.defineProperty(HeaderComponent.prototype, \"getComponentClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    HeaderComponent.prototype.ngOnInit = function () {\n        this.subscriptions\n            .add(this.intl.changes.subscribe(this.intlChange.bind(this)))\n            .add(this.localization.changes.subscribe(this.l10nChange.bind(this)))\n            .add(this.disabledDatesService.changes.subscribe(this.setTodayAvailability.bind(this)));\n    };\n    HeaderComponent.prototype.ngOnChanges = function (_) {\n        var service = this.bus.service(this.activeView);\n        if (!service) {\n            return;\n        }\n        this.activeViewValue = CalendarViewEnum[this.activeView];\n        this.todayMessage = this.localization.get('today');\n        this.setTodayAvailability();\n        this.navigate = this.bus.canMoveUp(this.activeView);\n        this.title = this.getTitle();\n    };\n    HeaderComponent.prototype.ngOnDestroy = function () {\n        this.subscriptions.unsubscribe();\n    };\n    HeaderComponent.prototype.handleTodayClick = function () {\n        if (!this.todayAvailable) {\n            return;\n        }\n        this.bus.moveToBottom(this.activeView);\n        this.today.emit(dateInRange(getToday(), this.min, this.max));\n    };\n    HeaderComponent.prototype.handleNavigation = function () {\n        if (!this.navigate) {\n            return;\n        }\n        this.bus.moveUp(this.activeView);\n    };\n    HeaderComponent.prototype.intlChange = function () {\n        if (this.currentDate && this.bus.service(this.activeView)) {\n            this.title = this.getTitle();\n            this.cdr.markForCheck();\n        }\n    };\n    HeaderComponent.prototype.l10nChange = function () {\n        this.todayMessage = this.localization.get('today');\n        this.cdr.markForCheck();\n    };\n    HeaderComponent.prototype.getTitle = function () {\n        if (!this.currentDate) {\n            return '';\n        }\n        var service = this.bus.service(this.activeView);\n        var take = this.rangeLength - 1;\n        var title = service.title(this.currentDate);\n        var nextDate = service.addToDate(this.currentDate, take);\n        if (take < 1 || !service.isInRange(nextDate, this.min, this.max)) {\n            return title;\n        }\n        return title + \" - \" + service.title(nextDate);\n    };\n    HeaderComponent.prototype.setTodayAvailability = function () {\n        var today = getToday();\n        var isTodayInRange = isInRange(today, getDate(this.min), getDate(this.max));\n        var isDisabled = this.disabledDatesService.isDateDisabled(today);\n        this.todayAvailable = isTodayInRange && !isDisabled;\n        this.cdr.markForCheck();\n    };\n    HeaderComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-calendar-header',\n                    template: \"\\n    <span class=\\\"k-button k-bare k-title\\\" [class.k-state-disabled]=\\\"!navigate\\\"\\n        [kendoEventsOutsideAngular]=\\\"{\\n            click: handleNavigation\\n        }\\\"\\n        [scope]=\\\"this\\\">\\n        <ng-template [ngIf]=\\\"!templateRef\\\">{{title}}</ng-template>\\n        <ng-template\\n            [ngIf]=\\\"templateRef\\\"\\n            [ngTemplateOutlet]=\\\"templateRef\\\"\\n            [ngTemplateOutletContext]=\\\"{ $implicit: title, activeView: activeViewValue, date: currentDate }\\\"\\n        ></ng-template>\\n    </span>\\n    <span class=\\\"k-today\\\" [class.k-state-disabled]=\\\"!todayAvailable\\\"\\n        [kendoEventsOutsideAngular]=\\\"{\\n            click: handleTodayClick\\n        }\\\"\\n        [scope]=\\\"this\\\">\\n        {{todayMessage}}\\n    </span>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    HeaderComponent.ctorParameters = function () { return [\n        { type: BusViewService },\n        { type: ChangeDetectorRef },\n        { type: LocalizationService },\n        { type: IntlService },\n        { type: DisabledDatesService }\n    ]; };\n    HeaderComponent.propDecorators = {\n        activeView: [{ type: Input }],\n        currentDate: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        rangeLength: [{ type: Input }],\n        templateRef: [{ type: Input }],\n        today: [{ type: Output }],\n        getComponentClass: [{ type: HostBinding, args: [\"class.k-calendar-header\",] }]\n    };\n    return HeaderComponent;\n}());\n\n/**\n * @hidden\n */\nvar WeekNamesService = /** @class */ (function () {\n    function WeekNamesService(intl) {\n        this.intl = intl;\n    }\n    WeekNamesService.prototype.getWeekNames = function (includeWeekNumber) {\n        if (includeWeekNumber === void 0) { includeWeekNumber = false; }\n        var weekNames = shiftWeekNames(this.intl.dateFormatNames({ nameType: 'short', type: 'days' }), this.intl.firstDay());\n        return includeWeekNumber ? [''].concat(weekNames) : weekNames;\n    };\n    WeekNamesService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    WeekNamesService.ctorParameters = function () { return [\n        { type: IntlService }\n    ]; };\n    return WeekNamesService;\n}());\n\n/**\n * @hidden\n */\nvar ViewComponent = /** @class */ (function () {\n    function ViewComponent(bus, intl, cdr, weekService, element, zone, renderer, disabledDatesService) {\n        this.bus = bus;\n        this.intl = intl;\n        this.cdr = cdr;\n        this.weekService = weekService;\n        this.element = element;\n        this.zone = zone;\n        this.renderer = renderer;\n        this.disabledDatesService = disabledDatesService;\n        this.direction = 'vertical';\n        this.isActive = true;\n        this.change = new EventEmitter();\n        this.cellEnter = new EventEmitter();\n        this.cellLeave = new EventEmitter();\n        this.weekNames = [];\n        this.colSpan = 0;\n        this.subscriptions = new Subscription();\n        this.domEvents = [];\n        this.subscriptions\n            .add(this.intl.changes.subscribe(this.intlChange.bind(this)))\n            .add(this.disabledDatesService.changes.subscribe(this.disabledDatesChange.bind(this)));\n    }\n    Object.defineProperty(ViewComponent.prototype, \"weekNumber\", {\n        get: function () {\n            return this.showWeekNumbers && this.activeView === CalendarViewEnum.month;\n        },\n        set: function (showWeekNumbers) {\n            this.showWeekNumbers = showWeekNumbers;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ViewComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this.element) {\n            this.zone.runOutsideAngular(function () {\n                _this.bindEvents();\n            });\n        }\n    };\n    ViewComponent.prototype.ngOnChanges = function (changes) {\n        this.service = this.bus.service(this.activeView);\n        if (!this.service) {\n            return;\n        }\n        var generateWeekNames = this.isHorizontal() && this.weekNames.length === 0;\n        if (generateWeekNames && (changes.weekNumber || changes.direction)) {\n            this.weekNames = this.weekService.getWeekNames(this.weekNumber);\n        }\n        this.colSpan = this.service.rowLength(this.weekNumber);\n        this.title = this.service.title(this.viewDate);\n        this.updateData();\n        if (changes.activeView) {\n            this.currentCellIndex = null;\n        }\n    };\n    ViewComponent.prototype.ngOnDestroy = function () {\n        this.subscriptions.unsubscribe();\n        this.domEvents.forEach(function (unsubscribeCallback) { return unsubscribeCallback(); });\n    };\n    ViewComponent.prototype.isHorizontal = function () {\n        return this.direction === 'horizontal';\n    };\n    ViewComponent.prototype.isMonthView = function () {\n        return this.activeView === CalendarViewEnum.month;\n    };\n    ViewComponent.prototype.firstDate = function (rowCtx) {\n        var ctx = this.firstWeekDateContext(rowCtx);\n        return ctx ? ctx.value : null;\n    };\n    ViewComponent.prototype.getWeekNumber = function (date) {\n        if (!this.weekNumber) {\n            return null;\n        }\n        return weekInYear(date, this.intl.firstDay());\n    };\n    ViewComponent.prototype.getWeekNumberContext = function (rowCtx) {\n        var ctx = this.firstWeekDateContext(rowCtx);\n        if (!this.weekNumber || !ctx) {\n            return null;\n        }\n        var weekNumber = weekInYear(ctx.value, this.intl.firstDay()).toString();\n        return {\n            formattedValue: weekNumber,\n            id: null,\n            isFocused: false,\n            isSelected: false,\n            isWeekend: false,\n            title: weekNumber,\n            value: cloneDate(ctx.value)\n        };\n    };\n    ViewComponent.prototype.getStyles = function (context) {\n        var isRangeEnd = context.isRangeEnd, isRangeStart = context.isRangeStart;\n        var isEndActive = this.activeRangeEnd === 'end' && isRangeEnd;\n        var isStartActive = this.activeRangeEnd === 'start' && isRangeStart;\n        return stringifyClassObject({\n            'k-range-end': isRangeEnd,\n            'k-range-mid': context.isRangeMid,\n            'k-range-split-end': context.isRangeSplitEnd,\n            'k-range-split-start': context.isRangeSplitStart,\n            'k-range-start': isRangeStart,\n            'k-state-active': isStartActive || isEndActive,\n            'k-state-focused': this.isActive && context.isFocused,\n            'k-state-selected': context.isSelected || isRangeStart || isRangeEnd,\n            'k-today': context.isToday,\n            'k-weekend': context.isWeekend,\n            'k-state-disabled': context.isDisabled\n        });\n    };\n    ViewComponent.prototype.tableCellIndex = function (rowIndex, cellIndex) {\n        return rowIndex + \":\" + cellIndex;\n    };\n    ViewComponent.prototype.firstWeekDateContext = function (rowCtx) {\n        if (!this.weekNumber) {\n            return null;\n        }\n        var idx = 0;\n        var ctx = rowCtx[idx];\n        while (!ctx && idx < rowCtx.length) {\n            ctx = rowCtx[++idx];\n        }\n        return ctx;\n    };\n    ViewComponent.prototype.updateData = function () {\n        var time = this.selectedDate || getToday();\n        var viewDate = setTime(this.viewDate, time);\n        this.data = this.service.data({\n            cellUID: this.cellUID,\n            focusedDate: this.focusedDate,\n            isActiveView: !this.bus.canMoveDown(this.activeView),\n            max: this.max,\n            min: this.min,\n            selectedDate: this.selectedDate,\n            selectionRange: this.selectionRange,\n            viewDate: viewDate,\n            isDateDisabled: this.disabledDatesService.isDateDisabled\n        });\n    };\n    ViewComponent.prototype.intlChange = function () {\n        this.updateData();\n        if (this.isHorizontal()) {\n            this.weekNames = this.weekService.getWeekNames(this.weekNumber);\n        }\n        this.cdr.markForCheck();\n    };\n    ViewComponent.prototype.disabledDatesChange = function () {\n        this.updateData();\n        this.cdr.markForCheck();\n    };\n    ViewComponent.prototype.bindEvents = function () {\n        var element = this.element.nativeElement;\n        this.domEvents.push(this.renderer.listen(element, 'mouseover', this.cellMouseoverHandler.bind(this)), this.renderer.listen(element, 'mouseleave', this.mouseLeaveHandler.bind(this)), this.renderer.listen(element, 'click', this.clickHandler.bind(this)));\n    };\n    ViewComponent.prototype.clickHandler = function (args) {\n        var cell = this.closestCell(args);\n        if (cell) {\n            var index = cell.getAttribute('data-cell-index');\n            var cellContext = this.cellByIndex(index);\n            if (!cellContext.isDisabled) {\n                this.change.emit(cellContext.value);\n            }\n        }\n    };\n    ViewComponent.prototype.mouseLeaveHandler = function () {\n        if (this.currentCellIndex) {\n            this.emitCellLeave();\n        }\n    };\n    ViewComponent.prototype.cellMouseoverHandler = function (args) {\n        var cell = this.closestCell(args);\n        if (cell) {\n            var index = cell.getAttribute('data-cell-index');\n            if (this.currentCellIndex && this.currentCellIndex !== index) {\n                this.emitCellLeave();\n            }\n            var value = this.cellByIndex(index).value;\n            this.cellEnter.emit(value);\n            this.currentCellIndex = index;\n        }\n        else if (this.currentCellIndex) {\n            this.emitCellLeave();\n        }\n    };\n    ViewComponent.prototype.closestCell = function (eventArgs) {\n        return closestInScope(eventArgs.target, function (node) { return node.hasAttribute('data-cell-index'); }, this.element.nativeElement);\n    };\n    ViewComponent.prototype.emitCellLeave = function () {\n        var item = this.cellByIndex(this.currentCellIndex);\n        if (item) {\n            this.cellLeave.emit(item.value);\n        }\n        this.currentCellIndex = null;\n    };\n    ViewComponent.prototype.cellByIndex = function (index) {\n        var _a = index.split(':'), rowIndex = _a[0], cellIndex = _a[1];\n        return this.data[rowIndex][cellIndex];\n    };\n    ViewComponent.decorators = [\n        { type: Component, args: [{\n                    selector: '[kendoCalendarView]',\n                    template: \"\\n    <ng-template #emptyCell><td class=\\\"k-empty\\\">&nbsp;</td></ng-template>\\n    <tr *ngIf=\\\"!isHorizontal()\\\" role=\\\"row\\\"><th scope=\\\"col\\\" [colSpan]=\\\"colSpan\\\">{{title}}</th></tr>\\n    <tr role=\\\"row\\\" *ngIf=\\\"isMonthView() && isHorizontal()\\\">\\n        <th *ngFor=\\\"let name of weekNames\\\">{{name}}</th>\\n    </tr>\\n    <tr *kFor=\\\"let row of data; let rowIndex = index\\\" role=\\\"row\\\">\\n        <ng-template [ngIf]=\\\"weekNumber\\\">\\n            <td class=\\\"k-alt\\\" *ngIf=\\\"firstDate(row); else emptyCell\\\">\\n                <ng-template [ngIf]=\\\"!weekNumberTemplateRef\\\">\\n                    {{getWeekNumber(firstDate(row))}}\\n                </ng-template>\\n                <ng-template\\n                    [ngIf]=\\\"weekNumberTemplateRef\\\"\\n                    [ngTemplateOutlet]=\\\"weekNumberTemplateRef\\\"\\n                    [ngTemplateOutletContext]=\\\"{\\n                        $implicit: firstDate(row),\\n                        cellContext: getWeekNumberContext(row)\\n                    }\\\"\\n                ></ng-template>\\n            </td>\\n        </ng-template>\\n        <ng-container *kFor=\\\"let cell of row; let cellIndex = index\\\">\\n            <td\\n                *ngIf=\\\"cell; else emptyCell\\\"\\n                role=\\\"gridcell\\\"\\n                [attr.id]=\\\"cell.id\\\"\\n                [attr.data-cell-index]=\\\"tableCellIndex(rowIndex, cellIndex)\\\"\\n                [attr.aria-selected]=\\\"cell.isSelected || cell.isRangeStart || cell.isRangeMid || cell.isRangeEnd\\\"\\n                [attr.aria-disabled]=\\\"cell.isDisabled\\\"\\n                [ngClass]=\\\"getStyles(cell)\\\"\\n                [title]=\\\"cell.title\\\"\\n            >\\n                <span class=\\\"k-link\\\">\\n                    <ng-template [ngIf]=\\\"!templateRef\\\">{{cell.formattedValue}}</ng-template>\\n                    <ng-template\\n                        *ngIf=\\\"templateRef\\\"\\n                        [ngTemplateOutlet]=\\\"templateRef\\\"\\n                        [ngTemplateOutletContext]=\\\"{ $implicit: cell.value, cellContext: cell }\\\"\\n                    ></ng-template>\\n                </span>\\n            </td>\\n        </ng-container>\\n    </tr>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    ViewComponent.ctorParameters = function () { return [\n        { type: BusViewService },\n        { type: IntlService },\n        { type: ChangeDetectorRef },\n        { type: WeekNamesService },\n        { type: ElementRef },\n        { type: NgZone },\n        { type: Renderer2 },\n        { type: DisabledDatesService }\n    ]; };\n    ViewComponent.propDecorators = {\n        direction: [{ type: Input }],\n        isActive: [{ type: Input }],\n        activeView: [{ type: Input }],\n        cellUID: [{ type: Input }],\n        focusedDate: [{ type: Input }],\n        selectedDate: [{ type: Input }],\n        viewDate: [{ type: Input }],\n        activeRangeEnd: [{ type: Input }],\n        selectionRange: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        weekNumber: [{ type: Input }],\n        viewIndex: [{ type: Input }],\n        templateRef: [{ type: Input }],\n        weekNumberTemplateRef: [{ type: Input }],\n        change: [{ type: Output }],\n        cellEnter: [{ type: Output }],\n        cellLeave: [{ type: Output }]\n    };\n    return ViewComponent;\n}());\n\n/**\n * @hidden\n *\n * The exported package module.\n *\n * The package exports:\n * - `HeaderComponent`&mdash;The component that renders the UI for vertical navigation.\n * - `ViewComponent`&mdash;The component that renders the active Calendar view.\n */\nvar CalendarCommonModule = /** @class */ (function () {\n    function CalendarCommonModule() {\n    }\n    CalendarCommonModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        KForOf,\n                        HeaderComponent,\n                        ViewComponent\n                    ],\n                    exports: [\n                        KForOf,\n                        HeaderComponent,\n                        ViewComponent\n                    ],\n                    imports: [CommonModule, EventsModule]\n                },] },\n    ];\n    return CalendarCommonModule;\n}());\n\n/**\n * @hidden\n *\n * The exported package module.\n *\n * The package exports:\n * - `CellTemplateDirective`&mdash;The month cell template directive.\n * - `MonthCellTemplateDirective`&mdash;The month cell template directive.\n * - `YearCellTemplateDirective`&mdash;The year cell template directive.\n * - `DecadeCellTemplateDirective`&mdash;The decade cell template directive.\n * - `CenturyCellTemplateDirective`&mdash;The century cell template directive.\n * - `WeekNumberCellTemplateDirective`&mdash;The month week number cell template directive.\n * - `HeaderTitleTemplateDirective`&mdash;The header title template directive.\n * - `NavigationItemTemplateDirective`&mdash;The navigation item template directive.\n */\nvar TemplatesModule = /** @class */ (function () {\n    function TemplatesModule() {\n    }\n    TemplatesModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        CellTemplateDirective,\n                        MonthCellTemplateDirective,\n                        YearCellTemplateDirective,\n                        DecadeCellTemplateDirective,\n                        CenturyCellTemplateDirective,\n                        WeekNumberCellTemplateDirective,\n                        HeaderTitleTemplateDirective,\n                        NavigationItemTemplateDirective\n                    ],\n                    exports: [\n                        CellTemplateDirective,\n                        MonthCellTemplateDirective,\n                        YearCellTemplateDirective,\n                        DecadeCellTemplateDirective,\n                        CenturyCellTemplateDirective,\n                        WeekNumberCellTemplateDirective,\n                        HeaderTitleTemplateDirective,\n                        NavigationItemTemplateDirective\n                    ]\n                },] },\n    ];\n    return TemplatesModule;\n}());\n\n/**\n * @hidden\n */\nvar CalendarMessages = /** @class */ (function (_super) {\n    __extends(CalendarMessages, _super);\n    function CalendarMessages() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CalendarMessages.propDecorators = {\n        today: [{ type: Input }]\n    };\n    return CalendarMessages;\n}(ComponentMessages));\n\n/**\n * @hidden\n */\nvar CalendarLocalizedMessagesDirective = /** @class */ (function (_super) {\n    __extends(CalendarLocalizedMessagesDirective, _super);\n    function CalendarLocalizedMessagesDirective(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    CalendarLocalizedMessagesDirective.decorators = [\n        { type: Directive, args: [{\n                    providers: [\n                        {\n                            provide: CalendarMessages,\n                            useExisting: forwardRef(function () { return CalendarLocalizedMessagesDirective; }) // tslint:disable-line:no-forward-ref\n                        }\n                    ],\n                    selector: '[kendoCalendarLocalizedMessages]'\n                },] },\n    ];\n    /** @nocollapse */\n    CalendarLocalizedMessagesDirective.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return CalendarLocalizedMessagesDirective;\n}(CalendarMessages));\n\n/**\n * Custom component messages override default component messages ([see example]({% slug globalization_dateinputs %}#toc-custom-messages)).\n */\nvar CalendarCustomMessagesComponent = /** @class */ (function (_super) {\n    __extends(CalendarCustomMessagesComponent, _super);\n    function CalendarCustomMessagesComponent(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    Object.defineProperty(CalendarCustomMessagesComponent.prototype, \"override\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CalendarCustomMessagesComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: CalendarMessages,\n                            useExisting: forwardRef(function () { return CalendarCustomMessagesComponent; }) // tslint:disable-line:no-forward-ref\n                        }\n                    ],\n                    selector: 'kendo-calendar-messages',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    CalendarCustomMessagesComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return CalendarCustomMessagesComponent;\n}(CalendarMessages));\n\nvar COMPONENT_DIRECTIVES = [\n    VirtualizationComponent\n];\n/**\n * @hidden\n *\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Virtualization component.\n */\nvar VirtualizationModule = /** @class */ (function () {\n    function VirtualizationModule() {\n    }\n    VirtualizationModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [COMPONENT_DIRECTIVES],\n                    exports: [COMPONENT_DIRECTIVES],\n                    imports: [CommonModule]\n                },] },\n    ];\n    return VirtualizationModule;\n}());\n\n/**\n * The exported package module.\n *\n * The package exports:\n * - `CellTemplateDirective`&mdash;The month cell template directive.\n * - `MonthCellTemplateDirective`&mdash;The month cell template directive.\n * - `YearCellTemplateDirective`&mdash;The year cell template directive.\n * - `DecadeCellTemplateDirective`&mdash;The decade cell template directive.\n * - `CenturyCellTemplateDirective`&mdash;The century cell template directive.\n * - `WeekNumberCellTemplateDirective`&mdash;The month week number cell template directive.\n * - `HeaderTitleTemplateDirective`&mdash;The header title template directive.\n * - `NavigationItemTemplateDirective`&mdash;The navigation item template directive.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Calendar module\n * import { CalendarModule } from '@progress/kendo-angular-dateinputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, CalendarModule], // import Calendar module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nvar CalendarModule = /** @class */ (function () {\n    function CalendarModule() {\n    }\n    CalendarModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        CalendarComponent,\n                        NavigationComponent,\n                        CalendarCustomMessagesComponent,\n                        CalendarLocalizedMessagesDirective,\n                        ViewListComponent\n                    ],\n                    exports: [\n                        CalendarComponent,\n                        NavigationComponent,\n                        CalendarCustomMessagesComponent,\n                        CalendarLocalizedMessagesDirective,\n                        ViewListComponent,\n                        CalendarCommonModule,\n                        TemplatesModule\n                    ],\n                    imports: [CommonModule, CalendarCommonModule, IntlModule, TemplatesModule, VirtualizationModule, EventsModule],\n                    providers: [\n                        CalendarDOMService,\n                        CenturyViewService,\n                        DecadeViewService,\n                        MonthViewService,\n                        YearViewService,\n                        WeekNamesService\n                    ]\n                },] },\n    ];\n    return CalendarModule;\n}());\n\n/**\n * @hidden\n */\nvar Messages = /** @class */ (function (_super) {\n    __extends(Messages, _super);\n    function Messages() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Messages.propDecorators = {\n        today: [{ type: Input }],\n        prevButtonTitle: [{ type: Input }],\n        nextButtonTitle: [{ type: Input }]\n    };\n    return Messages;\n}(ComponentMessages));\n\n/**\n * @hidden\n */\nvar MultiViewCalendarLocalizedMessagesDirective = /** @class */ (function (_super) {\n    __extends(MultiViewCalendarLocalizedMessagesDirective, _super);\n    function MultiViewCalendarLocalizedMessagesDirective(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    MultiViewCalendarLocalizedMessagesDirective.decorators = [\n        { type: Directive, args: [{\n                    providers: [\n                        {\n                            provide: Messages,\n                            useExisting: forwardRef(function () { return MultiViewCalendarLocalizedMessagesDirective; }) // tslint:disable-line:no-forward-ref\n                        }\n                    ],\n                    selector: '[kendoMultiViewCalendarLocalizedMessages]'\n                },] },\n    ];\n    /** @nocollapse */\n    MultiViewCalendarLocalizedMessagesDirective.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return MultiViewCalendarLocalizedMessagesDirective;\n}(Messages));\n\n/**\n * Custom component messages override default component messages ([see example]({% slug globalization_dateinputs %}#toc-custom-messages)).\n */\nvar MultiViewCalendarCustomMessagesComponent = /** @class */ (function (_super) {\n    __extends(MultiViewCalendarCustomMessagesComponent, _super);\n    function MultiViewCalendarCustomMessagesComponent(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    Object.defineProperty(MultiViewCalendarCustomMessagesComponent.prototype, \"override\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MultiViewCalendarCustomMessagesComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: Messages,\n                            useExisting: forwardRef(function () { return MultiViewCalendarCustomMessagesComponent; }) // tslint:disable-line:no-forward-ref\n                        }\n                    ],\n                    selector: 'kendo-multiviewcalendar-messages',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    MultiViewCalendarCustomMessagesComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return MultiViewCalendarCustomMessagesComponent;\n}(Messages));\n\n/**\n * The package exports:\n * - `CellTemplateDirective`&mdash;The month cell template directive.\n * - `MonthCellTemplateDirective`&mdash;The month cell template directive.\n * - `YearCellTemplateDirective`&mdash;The year cell template directive.\n * - `DecadeCellTemplateDirective`&mdash;The decade cell template directive.\n * - `CenturyCellTemplateDirective`&mdash;The century cell template directive.\n * - `WeekNumberCellTemplateDirective`&mdash;The month week number cell template directive.\n * - `HeaderTitleTemplateDirective`&mdash;The header title template directive.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the MultiViewCalendar module\n * import { MultiViewCalendarModule } from '@progress/kendo-angular-dateinputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, MultiViewCalendarModule], // import MultiViewCalendar module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n */\nvar MultiViewCalendarModule = /** @class */ (function () {\n    function MultiViewCalendarModule() {\n    }\n    MultiViewCalendarModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        HorizontalViewListComponent,\n                        MultiViewCalendarLocalizedMessagesDirective,\n                        MultiViewCalendarCustomMessagesComponent,\n                        MultiViewCalendarComponent\n                    ],\n                    exports: [\n                        HorizontalViewListComponent,\n                        MultiViewCalendarLocalizedMessagesDirective,\n                        MultiViewCalendarCustomMessagesComponent,\n                        MultiViewCalendarComponent,\n                        CalendarCommonModule,\n                        TemplatesModule\n                    ],\n                    imports: [CommonModule, CalendarCommonModule, IntlModule, TemplatesModule, PopupModule],\n                    providers: [\n                        NavigationService,\n                        CenturyViewService,\n                        DecadeViewService,\n                        MonthViewService,\n                        YearViewService,\n                        WeekNamesService\n                    ]\n                },] },\n    ];\n    return MultiViewCalendarModule;\n}());\n\n/**\n * The exported package module.\n *\n * The package exports:\n * - `CalendarModule`&mdash;The calendar module.\n * - `MultiViewCalendarModule`&mdash;The multi-view calendar module.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Calendars module\n * import { CalendarsModule } from '@progress/kendo-angular-dateinputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, CalendarsModule], // import the Calendars module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nvar CalendarsModule = /** @class */ (function () {\n    function CalendarsModule() {\n    }\n    CalendarsModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [\n                        CalendarModule,\n                        MultiViewCalendarModule\n                    ],\n                    imports: [\n                        CalendarModule,\n                        MultiViewCalendarModule\n                    ]\n                },] },\n    ];\n    return CalendarsModule;\n}());\n\n/**\n * @hidden\n */\nvar DateInputMessages = /** @class */ (function (_super) {\n    __extends(DateInputMessages, _super);\n    function DateInputMessages() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DateInputMessages.propDecorators = {\n        decrement: [{ type: Input }],\n        increment: [{ type: Input }]\n    };\n    return DateInputMessages;\n}(ComponentMessages));\n\n/**\n * @hidden\n */\nvar DateInputLocalizedMessagesDirective = /** @class */ (function (_super) {\n    __extends(DateInputLocalizedMessagesDirective, _super);\n    function DateInputLocalizedMessagesDirective(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    DateInputLocalizedMessagesDirective.decorators = [\n        { type: Directive, args: [{\n                    providers: [\n                        {\n                            provide: DateInputMessages,\n                            useExisting: forwardRef(function () { return DateInputLocalizedMessagesDirective; }) // tslint:disable-line:no-forward-ref\n                        }\n                    ],\n                    selector: '[kendoDateInputLocalizedMessages]'\n                },] },\n    ];\n    /** @nocollapse */\n    DateInputLocalizedMessagesDirective.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return DateInputLocalizedMessagesDirective;\n}(DateInputMessages));\n\n/**\n * Custom component messages override default component messages ([see example]({% slug globalization_dateinputs %}#toc-custom-messages)).\n */\nvar DateInputCustomMessagesComponent = /** @class */ (function (_super) {\n    __extends(DateInputCustomMessagesComponent, _super);\n    function DateInputCustomMessagesComponent(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    Object.defineProperty(DateInputCustomMessagesComponent.prototype, \"override\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DateInputCustomMessagesComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: DateInputMessages,\n                            useExisting: forwardRef(function () { return DateInputCustomMessagesComponent; }) // tslint:disable-line:no-forward-ref\n                        }\n                    ],\n                    selector: 'kendo-dateinput-messages',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    DateInputCustomMessagesComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return DateInputCustomMessagesComponent;\n}(DateInputMessages));\n\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the DateInput component.\n */\nvar DateInputModule = /** @class */ (function () {\n    function DateInputModule() {\n    }\n    DateInputModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        DateInputComponent,\n                        DateInputCustomMessagesComponent,\n                        DateInputLocalizedMessagesDirective\n                    ],\n                    exports: [\n                        DateInputComponent,\n                        DateInputCustomMessagesComponent,\n                        DateInputLocalizedMessagesDirective\n                    ],\n                    imports: [CommonModule, IntlModule, EventsModule]\n                },] },\n    ];\n    return DateInputModule;\n}());\n\n/**\n * @hidden\n */\nvar DatePickerMessages = /** @class */ (function (_super) {\n    __extends(DatePickerMessages, _super);\n    function DatePickerMessages() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DatePickerMessages.propDecorators = {\n        today: [{ type: Input }],\n        toggle: [{ type: Input }]\n    };\n    return DatePickerMessages;\n}(ComponentMessages));\n\n/**\n * @hidden\n */\nvar DatePickerLocalizedMessagesDirective = /** @class */ (function (_super) {\n    __extends(DatePickerLocalizedMessagesDirective, _super);\n    function DatePickerLocalizedMessagesDirective(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    DatePickerLocalizedMessagesDirective.decorators = [\n        { type: Directive, args: [{\n                    providers: [\n                        {\n                            provide: DatePickerMessages,\n                            useExisting: forwardRef(function () { return DatePickerLocalizedMessagesDirective; }) // tslint:disable-line:no-forward-ref\n                        }\n                    ],\n                    selector: '[kendoDatePickerLocalizedMessages]'\n                },] },\n    ];\n    /** @nocollapse */\n    DatePickerLocalizedMessagesDirective.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return DatePickerLocalizedMessagesDirective;\n}(DatePickerMessages));\n\n/**\n * Custom component messages override default component messages ([see example]({% slug globalization_dateinputs %}#toc-custom-messages)).\n */\nvar DatePickerCustomMessagesComponent = /** @class */ (function (_super) {\n    __extends(DatePickerCustomMessagesComponent, _super);\n    function DatePickerCustomMessagesComponent(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    Object.defineProperty(DatePickerCustomMessagesComponent.prototype, \"override\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DatePickerCustomMessagesComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: DatePickerMessages,\n                            useExisting: forwardRef(function () { return DatePickerCustomMessagesComponent; }) // tslint:disable-line:no-forward-ref\n                        }\n                    ],\n                    selector: 'kendo-datepicker-messages',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    DatePickerCustomMessagesComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return DatePickerCustomMessagesComponent;\n}(DatePickerMessages));\n\nvar Éµ0$e = touchEnabled;\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the DatePicker component.\n */\nvar DatePickerModule = /** @class */ (function () {\n    function DatePickerModule() {\n    }\n    DatePickerModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        DatePickerComponent,\n                        DatePickerCustomMessagesComponent,\n                        DatePickerLocalizedMessagesDirective\n                    ],\n                    exports: [\n                        DatePickerComponent,\n                        DatePickerCustomMessagesComponent,\n                        DatePickerLocalizedMessagesDirective,\n                        TemplatesModule\n                    ],\n                    imports: [\n                        CommonModule,\n                        DateInputModule,\n                        CalendarModule,\n                        IntlModule,\n                        PopupModule,\n                        TemplatesModule,\n                        EventsModule\n                    ],\n                    providers: [{ provide: TOUCH_ENABLED, useValue: Éµ0$e }]\n                },] },\n    ];\n    return DatePickerModule;\n}());\n\nvar COMPONENT_DIRECTIVES$1 = [\n    DateRangeComponent,\n    DateRangePopupComponent,\n    DateRangePopupTemplateDirective,\n    DateRangeSelectionDirective,\n    DateRangeStartInputDirective,\n    DateRangeEndInputDirective\n];\nvar COMPONENT_MODULES = [\n    MultiViewCalendarModule,\n    DateInputModule,\n    PopupModule,\n    EventsModule\n];\n/**\n * The exported package module.\n *\n * The package exports:\n * - `DateRangeComponent`&mdash;The DateRange component class.\n * - `DateRangePopupComponent`&mdash;The DateRangePopup component class.\n * - `DateRangeSelectionDirective`&mdash;The MultiviewCalendar date range selection directive.\n * - `DateRangeEndInputDirective`&mdash;The end DateInput date range selection directive.\n * - `DateRangeStartInputDirective`&mdash;The start DateInput date range selection directive.\n * - `DateRangePopupTemplateDirective`&mdash;The DateRangePopup content template directive.\n * - `MultiViewCalendarModule`&mdash;The MultiViewCalendar module.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the DateRange module\n * import { DateRangeModule } from '@progress/kendo-angular-dateinputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, DateRangeModule], // import DateRange module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nvar DateRangeModule = /** @class */ (function () {\n    function DateRangeModule() {\n    }\n    DateRangeModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [COMPONENT_DIRECTIVES$1],\n                    exports: [COMPONENT_DIRECTIVES$1],\n                    imports: [CommonModule, COMPONENT_MODULES]\n                },] },\n    ];\n    return DateRangeModule;\n}());\n\nvar div$1 = domContainerFactory('div');\nvar ul$1 = domContainerFactory('ul');\nvar li$1 = domContainerFactory('li');\nvar listItem = function () { return li$1('<span>02</span>', 'k-item'); };\nvar list = function () { return ul$1([listItem()], 'k-reset'); };\nvar scrollable$1 = function () { return (div$1([list()], 'k-time-container k-content k-scrollable')); };\nvar timeListWrapper = function () {\n    if (!isDocumentAvailable()) {\n        return null;\n    }\n    return div$1([div$1([scrollable$1()], 'k-time-list')], 'k-time-list-wrapper', { left: '-10000px', position: 'absolute' });\n};\nvar TIMELIST_WRAPPER = timeListWrapper();\n/**\n * @hidden\n */\nvar TimePickerDOMService = /** @class */ (function () {\n    function TimePickerDOMService() {\n    }\n    TimePickerDOMService.prototype.ensureHeights = function () {\n        if (this.timeListHeight !== undefined) {\n            return;\n        }\n        this.calculateHeights();\n    };\n    TimePickerDOMService.prototype.calculateHeights = function (container) {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        var listContainer = container && container.querySelector('.k-time-list-container');\n        var hostContainer = listContainer || document.body;\n        var wrapper = hostContainer.appendChild(TIMELIST_WRAPPER);\n        this.timeListHeight = wrapper.querySelector('.k-scrollable').getBoundingClientRect().height;\n        this.itemHeight = wrapper.querySelector('li').getBoundingClientRect().height;\n        hostContainer.removeChild(wrapper);\n    };\n    TimePickerDOMService.prototype.isActive = function (element) {\n        if (!isDocumentAvailable() || !element) {\n            return false;\n        }\n        return (element.nativeElement || element) === document.activeElement;\n    };\n    TimePickerDOMService.decorators = [\n        { type: Injectable },\n    ];\n    return TimePickerDOMService;\n}());\n\nvar HOURS_IN_DAY = 24;\nvar clampToRange = function (rangeValue) { return function (value) { return value % rangeValue; }; };\nvar clamp = clampToRange(HOURS_IN_DAY);\nvar stepper = function (start, step) { return function (idx) { return clamp(start + (idx * step)); }; };\nvar distanceFromMin = function (value, min) { return clamp(HOURS_IN_DAY + value - min); };\nvar limit = function (borderValue) { return function (barrier, value) {\n    var useBarrier = !value || getDate(barrier).getTime() === getDate(value).getTime();\n    return useBarrier ? barrier : setHours(barrier, borderValue);\n}; };\nvar limitDown = limit(0);\nvar limitUp = limit(HOURS_IN_DAY - 1);\n/**\n * @hidden\n */\nvar HoursService = /** @class */ (function () {\n    function HoursService(intl) {\n        this.intl = intl;\n        this.boundRange = false;\n        this.insertUndividedMax = false;\n    }\n    HoursService.prototype.apply = function (value, candidate) {\n        return setHours(value, candidate.getHours());\n    };\n    HoursService.prototype.configure = function (settings) {\n        var _this = this;\n        var _a = settings.boundRange, boundRange = _a === void 0 ? this.boundRange : _a, _b = settings.insertUndividedMax, insertUndividedMax = _b === void 0 ? this.insertUndividedMax : _b, _c = settings.min, min = _c === void 0 ? this.min : _c, _d = settings.max, max = _d === void 0 ? this.max : _d, part = settings.part, _e = settings.step, step = _e === void 0 ? this.step : _e;\n        this.boundRange = boundRange;\n        this.insertUndividedMax = insertUndividedMax;\n        this.toListItem = function (hour) {\n            var date = setHours(MIDNIGHT_DATE, hour);\n            return {\n                text: _this.intl.formatDate(date, part.pattern),\n                value: date\n            };\n        };\n        this.min = min;\n        this.max = max;\n        this.step = step;\n    };\n    HoursService.prototype.data = function (selectedValue) {\n        var _this = this;\n        var min = this.range(selectedValue)[0];\n        var getHour = stepper(min, this.step);\n        var convertToItem = function (idx) { return (_this.toListItem(getHour(idx))); };\n        var data = range(0, this.countFromMin(selectedValue)).map(convertToItem);\n        this.addLast(data);\n        this.addMissing(data, selectedValue);\n        return data;\n    };\n    HoursService.prototype.isRangeChanged = function (min, max) {\n        return !isEqual(this.min, min) || !isEqual(this.max, max);\n    };\n    HoursService.prototype.limitRange = function (min, max, value) {\n        return this.boundRange ? [limitDown(min, value), limitUp(max, value)] : [min, max];\n    };\n    HoursService.prototype.total = function (value) {\n        var last$$1 = this.insertUndividedMax && this.isLastMissing(value) ? 1 : 0;\n        var missing = this.isMissing(value) ? 1 : 0;\n        return this.countFromMin(value) + missing + last$$1;\n    };\n    HoursService.prototype.selectedIndex = function (value) {\n        return Math.ceil(this.divideByStep(value));\n    };\n    HoursService.prototype.valueInList = function (value) {\n        if (!value) {\n            return true;\n        }\n        var matchMax = this.insertUndividedMax && this.lastHour(value) === value.getHours();\n        return matchMax || !this.isMissing(value);\n    };\n    HoursService.prototype.addLast = function (data, value) {\n        if (this.insertUndividedMax && this.isLastMissing(value)) {\n            data.push(this.toListItem(this.lastHour(value)));\n        }\n        return data;\n    };\n    HoursService.prototype.addMissing = function (data, value) {\n        if (this.valueInList(value)) {\n            return data;\n        }\n        var missingItem = this.toListItem(value.getHours());\n        data.splice(this.selectedIndex(value), 0, missingItem);\n        return data;\n    };\n    HoursService.prototype.countFromMin = function (value) {\n        var _a = this.range(value), min = _a[0], max = _a[1];\n        return Math.floor(distanceFromMin(max, min) / this.step) + 1; /* include min */\n    };\n    HoursService.prototype.isMissing = function (value) {\n        if (!value) {\n            return false;\n        }\n        return this.selectedIndex(value) !== this.divideByStep(value);\n    };\n    HoursService.prototype.isLastMissing = function (value) {\n        return this.isMissing(setHours(this.max, this.lastHour(value)));\n    };\n    HoursService.prototype.divideByStep = function (value) {\n        return distanceFromMin(value.getHours(), this.min.getHours()) / this.step;\n    };\n    HoursService.prototype.lastHour = function (value) {\n        return this.range(value)[1];\n    };\n    HoursService.prototype.range = function (value) {\n        var _a = this.limitRange(this.min, this.max, value), min = _a[0], max = _a[1];\n        return [min.getHours(), max.getHours()];\n    };\n    HoursService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    HoursService.ctorParameters = function () { return [\n        { type: IntlService }\n    ]; };\n    return HoursService;\n}());\n\nvar MINUTES_IN_HOUR = 60;\nvar clampToRange$1 = function (rangeValue) { return function (value) { return value % rangeValue; }; };\nvar clamp$1 = clampToRange$1(MINUTES_IN_HOUR);\nvar stepper$1 = function (start, step) { return function (idx) { return clamp$1(start + (idx * step)); }; };\nvar distanceFromMin$1 = function (value, min) { return clamp$1(MINUTES_IN_HOUR + value - min); };\nvar limit$1 = function (borderValue) { return function (barrier, value) {\n    var useBarrier = !value || barrier.getHours() === value.getHours();\n    return useBarrier ? barrier : setMinutes(barrier, borderValue);\n}; };\nvar limitDown$1 = limit$1(0);\nvar limitUp$1 = limit$1(MINUTES_IN_HOUR - 1);\n/**\n * @hidden\n */\nvar MinutesService = /** @class */ (function () {\n    function MinutesService(intl) {\n        this.intl = intl;\n        this.insertUndividedMax = false;\n    }\n    MinutesService.prototype.apply = function (value, candidate) {\n        return setMinutes(value, candidate.getMinutes());\n    };\n    MinutesService.prototype.configure = function (settings) {\n        var _this = this;\n        var _a = settings.insertUndividedMax, insertUndividedMax = _a === void 0 ? this.insertUndividedMax : _a, _b = settings.min, min = _b === void 0 ? this.min : _b, _c = settings.max, max = _c === void 0 ? this.max : _c, part = settings.part, _d = settings.step, step = _d === void 0 ? this.step : _d;\n        this.insertUndividedMax = insertUndividedMax;\n        this.toListItem = function (minute) {\n            var date = setMinutes(MIDNIGHT_DATE, minute);\n            return {\n                text: _this.intl.formatDate(date, part.pattern),\n                value: date\n            };\n        };\n        this.min = min;\n        this.max = max;\n        this.step = step;\n    };\n    MinutesService.prototype.data = function (selectedValue) {\n        var _this = this;\n        var min = this.range(selectedValue)[0];\n        var getMinute = stepper$1(min, this.step);\n        var convertToItem = function (idx) { return (_this.toListItem(getMinute(idx))); };\n        var data = range(0, this.countFromMin(selectedValue)).map(convertToItem);\n        this.addLast(data);\n        this.addMissing(data, selectedValue);\n        return data;\n    };\n    MinutesService.prototype.isRangeChanged = function (min, max) {\n        return !isEqual(this.min, min) || !isEqual(this.max, max);\n    };\n    MinutesService.prototype.limitRange = function (min, max, value) {\n        return [limitDown$1(min, value), limitUp$1(max, value)];\n    };\n    MinutesService.prototype.total = function (value) {\n        var last$$1 = this.insertUndividedMax && this.isLastMissing(value) ? 1 : 0;\n        var missing = this.isMissing(value) ? 1 : 0;\n        return this.countFromMin(value) + missing + last$$1;\n    };\n    MinutesService.prototype.selectedIndex = function (value) {\n        return Math.ceil(this.divideByStep(value));\n    };\n    MinutesService.prototype.valueInList = function (value) {\n        if (!value) {\n            return true;\n        }\n        var matchMax = this.insertUndividedMax && this.lastMinute(value) === value.getMinutes();\n        return matchMax || !this.isMissing(value);\n    };\n    MinutesService.prototype.addLast = function (data, value) {\n        if (this.insertUndividedMax && this.isLastMissing(value)) {\n            data.push(this.toListItem(this.lastMinute(value)));\n        }\n        return data;\n    };\n    MinutesService.prototype.addMissing = function (data, value) {\n        if (this.valueInList(value)) {\n            return data;\n        }\n        var missingItem = this.toListItem(value.getMinutes());\n        data.splice(this.selectedIndex(value), 0, missingItem);\n        return data;\n    };\n    MinutesService.prototype.countFromMin = function (value) {\n        var _a = this.range(value), min = _a[0], max = _a[1];\n        return Math.floor(distanceFromMin$1(max, min) / this.step) + 1; /* include min */\n    };\n    MinutesService.prototype.isMissing = function (value) {\n        if (!value) {\n            return false;\n        }\n        return this.selectedIndex(value) !== this.divideByStep(value);\n    };\n    MinutesService.prototype.isLastMissing = function (value) {\n        return this.isMissing(setMinutes(this.max, this.lastMinute(value)));\n    };\n    MinutesService.prototype.divideByStep = function (value) {\n        return distanceFromMin$1(value.getMinutes(), this.min.getMinutes()) / this.step;\n    };\n    MinutesService.prototype.lastMinute = function (value) {\n        return this.range(value)[1];\n    };\n    MinutesService.prototype.range = function (value) {\n        var _a = this.limitRange(this.min, this.max, value), min = _a[0], max = _a[1];\n        return [min.getMinutes(), max.getMinutes()];\n    };\n    MinutesService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    MinutesService.ctorParameters = function () { return [\n        { type: IntlService }\n    ]; };\n    return MinutesService;\n}());\n\nvar SECONDS_IN_HOUR = 60;\nvar clampToRange$2 = function (rangeValue) { return function (value) { return value % rangeValue; }; };\nvar clamp$2 = clampToRange$2(SECONDS_IN_HOUR);\nvar stepper$2 = function (start, step) { return function (idx) { return clamp$2(start + (idx * step)); }; };\nvar distanceFromMin$2 = function (value, min) { return clamp$2(SECONDS_IN_HOUR + value - min); };\nvar limit$2 = function (borderValue) { return function (barrier, value) {\n    var useBarrier = !value || barrier.getHours() === value.getHours() && barrier.getMinutes() === value.getMinutes();\n    return useBarrier ? barrier : setSeconds(barrier, borderValue);\n}; };\nvar limitDown$2 = limit$2(0);\nvar limitUp$2 = limit$2(SECONDS_IN_HOUR - 1);\n/**\n * @hidden\n */\nvar SecondsService = /** @class */ (function () {\n    function SecondsService(intl) {\n        this.intl = intl;\n        this.insertUndividedMax = false;\n    }\n    SecondsService.prototype.apply = function (value, candidate) {\n        return setSeconds(value, candidate.getSeconds());\n    };\n    SecondsService.prototype.configure = function (settings) {\n        var _this = this;\n        var _a = settings.insertUndividedMax, insertUndividedMax = _a === void 0 ? this.insertUndividedMax : _a, _b = settings.min, min = _b === void 0 ? this.min : _b, _c = settings.max, max = _c === void 0 ? this.max : _c, part = settings.part, _d = settings.step, step = _d === void 0 ? this.step : _d;\n        this.insertUndividedMax = insertUndividedMax;\n        this.toListItem = function (minute) {\n            var date = setSeconds(MIDNIGHT_DATE, minute);\n            return {\n                text: _this.intl.formatDate(date, part.pattern),\n                value: date\n            };\n        };\n        this.min = min;\n        this.max = max;\n        this.step = step;\n    };\n    SecondsService.prototype.data = function (selectedValue) {\n        var _this = this;\n        var min = this.range(selectedValue)[0];\n        var getSecond = stepper$2(min, this.step);\n        var convertToItem = function (idx) { return (_this.toListItem(getSecond(idx))); };\n        var data = range(0, this.countFromMin(selectedValue)).map(convertToItem);\n        this.addLast(data);\n        this.addMissing(data, selectedValue);\n        return data;\n    };\n    SecondsService.prototype.isRangeChanged = function (min, max) {\n        return !isEqual(this.min, min) || !isEqual(this.max, max);\n    };\n    SecondsService.prototype.limitRange = function (min, max, value) {\n        return [limitDown$2(min, value), limitUp$2(max, value)];\n    };\n    SecondsService.prototype.total = function (value) {\n        var last$$1 = this.insertUndividedMax && this.isLastMissing(value) ? 1 : 0;\n        var missing = this.isMissing(value) ? 1 : 0;\n        return this.countFromMin(value) + missing + last$$1;\n    };\n    SecondsService.prototype.selectedIndex = function (value) {\n        return Math.ceil(this.divideByStep(value));\n    };\n    SecondsService.prototype.valueInList = function (value) {\n        if (!value) {\n            return true;\n        }\n        var matchMax = this.insertUndividedMax && this.lastSecond(value) === value.getSeconds();\n        return matchMax || !this.isMissing(value);\n    };\n    SecondsService.prototype.divideByStep = function (value) {\n        return distanceFromMin$2(value.getSeconds(), this.min.getSeconds()) / this.step;\n    };\n    SecondsService.prototype.addLast = function (data, value) {\n        if (this.insertUndividedMax && this.isLastMissing(value)) {\n            data.push(this.toListItem(this.lastSecond(value)));\n        }\n        return data;\n    };\n    SecondsService.prototype.addMissing = function (data, value) {\n        if (this.valueInList(value)) {\n            return data;\n        }\n        var missingItem = this.toListItem(value.getSeconds());\n        data.splice(this.selectedIndex(value), 0, missingItem);\n        return data;\n    };\n    SecondsService.prototype.countFromMin = function (value) {\n        var _a = this.range(value), min = _a[0], max = _a[1];\n        return Math.floor(distanceFromMin$2(max, min) / this.step) + 1; /* include min */\n    };\n    SecondsService.prototype.isMissing = function (value) {\n        if (!value) {\n            return false;\n        }\n        return this.selectedIndex(value) !== this.divideByStep(value);\n    };\n    SecondsService.prototype.isLastMissing = function (value) {\n        return this.isMissing(setSeconds(this.max, this.lastSecond(value)));\n    };\n    SecondsService.prototype.lastSecond = function (value) {\n        return this.range(value)[1];\n    };\n    SecondsService.prototype.range = function (value) {\n        var _a = this.limitRange(this.min, this.max, value), min = _a[0], max = _a[1];\n        return [min.getSeconds(), max.getSeconds()];\n    };\n    SecondsService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    SecondsService.ctorParameters = function () { return [\n        { type: IntlService }\n    ]; };\n    return SecondsService;\n}());\n\nvar setHours$1 = function (date, hours) {\n    var clone = cloneDate(date);\n    clone.setHours(hours);\n    return clone;\n};\nvar isAM = function (value) { return value !== null && value < 12; };\nvar isPM = function (value) { return value !== null && (!value || value > 11); };\nvar inRange = function (value, min, max) { return ((!min && !max) || (value >= min && value <= max)); };\nvar inReverseRange = function (value, min, max) { return ((!min && !max) || value >= min || value <= max); };\n/**\n * @hidden\n */\nvar DayPeriodService = /** @class */ (function () {\n    function DayPeriodService(intl) {\n        this.intl = intl;\n    }\n    /**\n     * @hidden\n     */\n    DayPeriodService.prototype.apply = function (value, candidate) {\n        var hour = value.getHours();\n        var hourAM = isAM(hour);\n        var candidateAM = isAM(candidate.getHours());\n        if ((hourAM && candidateAM) || (!hourAM && !candidateAM)) {\n            return value;\n        }\n        var _a = this.normalizedRange(), min = _a[0], _b = _a[1], max = _b === void 0 ? 24 : _b;\n        var result = hour + (candidateAM ? -12 : 12);\n        return setHours$1(value, Math.min(Math.max(min, result), (max || 24)));\n    };\n    /**\n     * @hidden\n     */\n    DayPeriodService.prototype.configure = function (settings) {\n        var _a = settings.min, min = _a === void 0 ? this.min : _a, _b = settings.max, max = _b === void 0 ? this.max : _b, _c = settings.part, part = _c === void 0 ? this.part : _c;\n        this.min = min;\n        this.max = max;\n        this.part = part;\n    };\n    /**\n     * @hidden\n     */\n    DayPeriodService.prototype.data = function (_) {\n        var names = this.part.names;\n        if (!names) {\n            return [];\n        }\n        var data = [];\n        var _a = this.normalizedRange(), min = _a[0], max = _a[1];\n        var dayPeriod = this.intl.dateFormatNames(names);\n        if (isAM(min)) {\n            data.push({ text: dayPeriod.am, value: setHours$1(this.min, min) });\n        }\n        if (isPM(max)) {\n            data.push({ text: dayPeriod.pm, value: setHours$1(this.min, Math.max(12, max)) });\n        }\n        return this.min.getHours() !== min ? data.reverse() : data;\n    };\n    /**\n     * @hidden\n     */\n    DayPeriodService.prototype.isRangeChanged = function (_, __) {\n        return false;\n    };\n    /**\n     * @hidden\n     */\n    DayPeriodService.prototype.limitRange = function (min, max, _) {\n        return [min, max];\n    };\n    /**\n     * @hidden\n     */\n    DayPeriodService.prototype.total = function () {\n        var _a = this.normalizedRange(), min = _a[0], max = _a[1];\n        if (!min && !max) {\n            return 2;\n        }\n        if (min > 11 || max < 12) {\n            return 1;\n        }\n        return 2;\n    };\n    /**\n     * @hidden\n     */\n    DayPeriodService.prototype.selectedIndex = function (value) {\n        if (!this.valueInList(value)) {\n            return -1;\n        }\n        var index = Math.floor(value.getHours() / 12);\n        return this.min.getHours() === this.normalizedRange()[0] ? index : (index === 0 ? 1 : 0);\n    };\n    /**\n     * @hidden\n     */\n    DayPeriodService.prototype.valueInList = function (value) {\n        var reverse = this.min.getHours() !== this.normalizedRange()[0];\n        var isInRange = reverse ? inReverseRange : inRange;\n        return isInRange(value.getHours(), this.min.getHours(), this.max.getHours());\n    };\n    DayPeriodService.prototype.normalizedRange = function () {\n        var minHour = this.min.getHours();\n        var maxHour = this.max.getHours();\n        return [\n            Math.min(minHour, maxHour),\n            Math.max(minHour, maxHour)\n        ];\n    };\n    DayPeriodService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    DayPeriodService.ctorParameters = function () { return [\n        { type: IntlService }\n    ]; };\n    return DayPeriodService;\n}());\n\nvar _a$6;\nvar SNAP_THRESHOLD = 0.05; //% of the item height\nvar SCROLL_THRESHOLD = 2; //< 2px threshold\nvar nil = function () { return (null); };\nvar getters = {\n    35: function (data, _) { return data[data.length - 1]; },\n    36: function (data, _) { return data[0]; },\n    38: function (data, index) { return data[index - 1]; },\n    40: function (data, index) { return data[index + 1]; }\n};\nvar services$1 = (_a$6 = {},\n    _a$6[TIME_PART.dayperiod] = DayPeriodService,\n    _a$6[TIME_PART.hour] = HoursService,\n    _a$6[TIME_PART.minute] = MinutesService,\n    _a$6[TIME_PART.second] = SecondsService,\n    _a$6);\n/**\n * @hidden\n */\nvar TimeListComponent = /** @class */ (function () {\n    function TimeListComponent(element, injector, dom, renderer, zone) {\n        this.element = element;\n        this.injector = injector;\n        this.dom = dom;\n        this.renderer = renderer;\n        this.zone = zone;\n        this.min = cloneDate(MIDNIGHT_DATE);\n        this.max = cloneDate(MAX_TIME);\n        this.step = 1;\n        this.disabled = false;\n        this.valueChange = new EventEmitter();\n        this.componentClass = true;\n        this.animateToIndex = true;\n        this.isActive = false;\n        this.skip = 0;\n        this.total = 60;\n        this.data = [];\n        this.indexToScroll = -1;\n        this.domEvents = [];\n    }\n    Object.defineProperty(TimeListComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.disabled ? undefined : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TimeListComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.part) {\n            this.service = this.injector.get(services$1[this.part.type]);\n            this.service.configure(this.serviceSettings());\n        }\n        var value = this.value;\n        var valueChanges = changes.value || {};\n        var _a = this.service.limitRange(this.min, this.max, value), min = _a[0], max = _a[1];\n        if (this.service.isRangeChanged(min, max) || changes.min || changes.max || changes.step) {\n            this.data = [];\n            this.service.configure(this.serviceSettings({ min: min, max: max }));\n        }\n        // Skip the rendering of the list whenever possible\n        if (!this.data.length || this.hasMissingValue(valueChanges)) {\n            this.animateToIndex = false;\n            this.data = this.service.data(value);\n        }\n        this.animateToIndex = this.animateToIndex && this.textHasChanged(valueChanges);\n        this.total = this.service.total(value);\n        this.indexToScroll = this.selectedIndex(value);\n    };\n    TimeListComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.animateToIndex = true;\n        this.dom.ensureHeights();\n        this.itemHeight = this.dom.itemHeight;\n        this.listHeight = this.dom.timeListHeight;\n        this.topOffset = (this.listHeight - this.itemHeight) / 2;\n        this.bottomOffset = this.listHeight - this.itemHeight;\n        this.topThreshold = this.itemHeight * SNAP_THRESHOLD;\n        this.bottomThreshold = this.itemHeight * (1 - SNAP_THRESHOLD);\n        var translate = \"translateY(\" + this.topOffset + \"px)\";\n        this.style = { transform: translate, '-ms-transform': translate };\n        if (this.element) {\n            this.zone.runOutsideAngular(function () {\n                _this.bindEvents();\n            });\n        }\n    };\n    TimeListComponent.prototype.ngOnDestroy = function () {\n        this.scrollSubscription.unsubscribe();\n        this.domEvents.forEach(function (unbindCallback) { return unbindCallback(); });\n    };\n    TimeListComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.scrollOnce(function (index) { return _this.virtualization.scrollToIndex(index); });\n    };\n    TimeListComponent.prototype.ngAfterViewChecked = function () {\n        var _this = this;\n        this.scrollOnce(function (index) {\n            var action = _this.animateToIndex ? 'animateToIndex' : 'scrollToIndex';\n            _this.virtualization[action](index);\n            _this.animateToIndex = true;\n        });\n    };\n    TimeListComponent.prototype.handleChange = function (dataItem) {\n        var candidate = this.service.apply(this.value, dataItem.value);\n        if (this.value.getTime() === candidate.getTime()) {\n            return;\n        }\n        this.indexToScroll = this.data.indexOf(dataItem);\n        this.value = candidate;\n        this.valueChange.emit(candidate);\n    };\n    TimeListComponent.prototype.handleItemClick = function (args) {\n        var item = closestInScope(args.target, function (node) { return node.hasAttribute('data-timelist-item-index'); }, this.element.nativeElement);\n        if (item) {\n            var index = item.getAttribute('data-timelist-item-index');\n            this.handleChange(this.data[index]);\n        }\n    };\n    /**\n     * Focuses the host element of the TimeList.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"timelist.focus()\">Focus TimeList</button>\n     *  <kendo-timelist #timelist></kendo-timelist>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    TimeListComponent.prototype.focus = function () {\n        if (!this.element) {\n            return;\n        }\n        this.element.nativeElement.focus();\n    };\n    /**\n     * Blurs the TimeList component.\n     */\n    TimeListComponent.prototype.blur = function () {\n        if (!this.element) {\n            return;\n        }\n        this.element.nativeElement.blur();\n    };\n    TimeListComponent.prototype.itemOffset = function (scrollTop) {\n        var valueIndex = this.selectedIndex(this.value);\n        var activeIndex = this.virtualization.activeIndex();\n        var offset = this.virtualization.itemOffset(activeIndex);\n        var distance = Math.abs(Math.ceil(scrollTop) - offset);\n        if (valueIndex === activeIndex && distance < SCROLL_THRESHOLD) {\n            return offset;\n        }\n        var scrollUp = valueIndex > activeIndex;\n        var moveToNext = scrollUp && distance >= this.bottomThreshold || !scrollUp && distance > this.topThreshold;\n        return moveToNext ? this.virtualization.itemOffset(activeIndex + 1) : offset;\n    };\n    TimeListComponent.prototype.hasMissingValue = function (_a) {\n        var previousValue = _a.previousValue, currentValue = _a.currentValue;\n        var isPreviousMissing = previousValue && !this.service.valueInList(previousValue);\n        var isCurrentMissing = currentValue && !this.service.valueInList(currentValue);\n        return isPreviousMissing || isCurrentMissing;\n    };\n    TimeListComponent.prototype.scrollOnce = function (action) {\n        if (this.indexToScroll !== -1) {\n            action(this.indexToScroll);\n            this.indexToScroll = -1;\n        }\n    };\n    TimeListComponent.prototype.serviceSettings = function (settings) {\n        var defaults = {\n            boundRange: false,\n            insertUndividedMax: false,\n            max: this.max,\n            min: this.min,\n            part: this.part,\n            step: this.step\n        };\n        var result = Object.assign({}, defaults, settings);\n        result.boundRange = result.part.type !== 'hour';\n        return result;\n    };\n    TimeListComponent.prototype.selectedIndex = function (value) {\n        if (!value) {\n            return -1;\n        }\n        return this.service.selectedIndex(value);\n    };\n    TimeListComponent.prototype.textHasChanged = function (_a) {\n        var previousValue = _a.previousValue, currentValue = _a.currentValue;\n        if (!previousValue || !currentValue) {\n            return false;\n        }\n        var oldData = this.data[this.selectedIndex(previousValue)];\n        var newData = this.data[this.selectedIndex(currentValue)];\n        return oldData && newData && oldData.text !== newData.text;\n    };\n    TimeListComponent.prototype.handleKeyDown = function (e) {\n        var getter = getters[e.keyCode] || nil;\n        var dataItem = getter(this.data, this.service.selectedIndex(this.value));\n        if (dataItem) {\n            this.handleChange(dataItem);\n            e.preventDefault();\n        }\n    };\n    TimeListComponent.prototype.bindEvents = function () {\n        var _this = this;\n        this.scrollSubscription = this.virtualization\n            .scroll$()\n            .pipe(debounceTime(100), map(function (e) { return e.target.scrollTop; }), map(function (top) { return _this.itemOffset(top); }), map(function (itemOffset) { return _this.virtualization.itemIndex(itemOffset); }))\n            .subscribe(function (index) {\n            _this.virtualization.scrollToIndex(index);\n            _this.handleChange(_this.data[index]);\n        });\n        var element = this.element.nativeElement;\n        this.domEvents.push(this.renderer.listen(element, 'mouseover', function () { return !_this.isActive && _this.focus(); }), this.renderer.listen(element, 'click', function () { return _this.focus(); }), this.renderer.listen(element, 'blur', function () { return _this.isActive = false; }), this.renderer.listen(element, 'focus', function () { return _this.isActive = true; }), this.renderer.listen(element, 'keydown', this.handleKeyDown.bind(this)));\n    };\n    TimeListComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-timelist',\n                    template: \"\\n    <kendo-virtualization\\n        [skip]=\\\"skip\\\"\\n        [take]=\\\"total\\\"\\n        [total]=\\\"total\\\"\\n        [itemHeight]=\\\"itemHeight\\\"\\n        [maxScrollDifference]=\\\"listHeight\\\"\\n        [topOffset]=\\\"topOffset\\\"\\n        [bottomOffset]=\\\"bottomOffset\\\"\\n        class=\\\"k-time-container\\\"\\n        role=\\\"presentation\\\"\\n        tabindex=\\\"-1\\\"\\n    >\\n        <ul [ngStyle]=\\\"style\\\" class=\\\"k-reset\\\"\\n            [kendoEventsOutsideAngular]=\\\"{\\n                click: handleItemClick\\n            }\\\"\\n            [scope]=\\\"this\\\"\\n        >\\n            <li *ngFor=\\\"let item of data; let index = index;\\\" class=\\\"k-item\\\"\\n                [attr.data-timelist-item-index]=\\\"index\\\">\\n                <span>{{item.text}}</span>\\n            </li>\\n        </ul>\\n    </kendo-virtualization>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    TimeListComponent.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Injector },\n        { type: TimePickerDOMService },\n        { type: Renderer2 },\n        { type: NgZone }\n    ]; };\n    TimeListComponent.propDecorators = {\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        part: [{ type: Input }],\n        step: [{ type: Input }],\n        disabled: [{ type: Input }],\n        value: [{ type: Input }],\n        valueChange: [{ type: Output }],\n        virtualization: [{ type: ViewChild, args: [VirtualizationComponent, { static: true },] }],\n        tabIndex: [{ type: HostBinding, args: [\"attr.tabindex\",] }],\n        componentClass: [{ type: HostBinding, args: [\"class.k-time-list\",] }]\n    };\n    return TimeListComponent;\n}());\n\nvar isEqualTillMinute = function (value, min) { return value.getHours() === min.getHours() && value.getMinutes() === min.getMinutes(); };\nvar isEqualTillSecond = function (value, min) { return isEqualTillMinute(value, min) && value.getSeconds() === min.getSeconds(); };\nvar isEqualTillMillisecond = function (value, min) { return isEqualTillSecond(value, min) && value.getMilliseconds() === min.getMilliseconds(); };\nvar Éµ3$6 = function (value) { return value.getHours(); }, Éµ4$2 = function (_, min) { return min.getHours(); }, Éµ5$1 = function (value) { return value.getMinutes(); }, Éµ6$1 = function (value, min) { return isEqualTillMinute(value, min) ? min.getMinutes() : 0; }, Éµ7$1 = function (value) { return value.getSeconds(); }, Éµ8$1 = function (value, min) { return isEqualTillSecond(value, min) ? min.getSeconds() : 0; }, Éµ9$1 = function (value) { return value.getMilliseconds(); }, Éµ10$1 = function (value, min) { return isEqualTillMillisecond(value, min) ? min.getMilliseconds() : 0; };\nvar defaultGetters = [\n    {\n        type: TIME_PART.hour,\n        getter: Éµ3$6,\n        minGetter: Éµ4$2\n    }, {\n        type: TIME_PART.minute,\n        getter: Éµ5$1,\n        minGetter: Éµ6$1\n    }, {\n        type: TIME_PART.second,\n        getter: Éµ7$1,\n        minGetter: Éµ8$1\n    }, {\n        type: TIME_PART.millisecond,\n        getter: Éµ9$1,\n        minGetter: Éµ10$1\n    }\n];\nvar left = function (getter) { return function (origin, _) { return getter(origin); }; };\nvar right = function (getter) { return function (_, candidate) { return getter(candidate); }; };\nvar convertToObject = function (parts) { return parts.reduce(function (obj, p) { obj[p.type] = p.type; return obj; }, {}); };\nvar getterByPart = function (parts) { return function (g) { return parts[g.type] ? right(g.getter) : left(g.getter); }; };\nvar gettersFactory = function (getters) { return function (parts) { return (getters.map(getterByPart(convertToObject(parts)))); }; };\nvar snapValue = function (getter, minGetter, step) { return function (date, min) {\n    var value = getter(date);\n    var minValue = minGetter(date, min);\n    var rest = value - minValue;\n    if (rest < 0) {\n        return minValue;\n    }\n    var mod = rest % step;\n    return value - mod + (mod > step / 2 ? step : 0);\n}; };\nvar snappersFactory = function (getters) { return function (steps) { return (getters.map(function (g) {\n    var step = steps[g.type];\n    return step ? snapValue(g.getter, g.minGetter, step) : g.getter;\n})); }; };\n/**\n * @hidden\n */\nvar generateGetters = gettersFactory(defaultGetters);\n/**\n * @hidden\n */\nvar generateSnappers = snappersFactory(defaultGetters);\n/**\n * @hidden\n */\nvar valueMerger = function (getters) { return function (origin, candidate) {\n    origin.setHours.apply(origin, getters.map(function (g) { return g(origin, candidate); }));\n    return origin;\n}; };\n/**\n * @hidden\n */\nvar snapTime = function (snappers) { return function (candidate, min) {\n    var date = cloneDate(candidate);\n    date.setHours.apply(date, snappers.map(function (s) { return s(date, min); }));\n    return date;\n}; };\n\nvar listReducer = function (state, list, idx, all) {\n    if (state.length || !list.isActive) {\n        return state;\n    }\n    return [{\n            next: all[idx + 1] || list,\n            prev: all[idx - 1] || list\n        }];\n};\nvar Direction;\n(function (Direction) {\n    Direction[Direction[\"Left\"] = 0] = \"Left\";\n    Direction[Direction[\"Right\"] = 1] = \"Right\";\n})(Direction || (Direction = {}));\n/**\n * @hidden\n *\n * Represents the Kendo UI TimeSelector component for Angular.\n */\nvar TimeSelectorComponent = /** @class */ (function () {\n    function TimeSelectorComponent(localization, cdr, element, intl, dom, zone, renderer, pickerService) {\n        this.localization = localization;\n        this.cdr = cdr;\n        this.element = element;\n        this.intl = intl;\n        this.dom = dom;\n        this.zone = zone;\n        this.renderer = renderer;\n        this.pickerService = pickerService;\n        /**\n         * @hidden\n         */\n        this.componentClass = true;\n        /**\n         * Specifies the time format used to display the time list columns.\n         */\n        this.format = 't';\n        /**\n         * Specifies the smallest valid time value.\n         */\n        this.min = cloneDate(MIN_TIME);\n        /**\n         * Specifies the biggest valid time value.\n         */\n        this.max = cloneDate(MAX_TIME);\n        /**\n         * Determines whether to display the **Cancel** button in the popup.\n         */\n        this.cancelButton = true;\n        /**\n         * Determines whether to display the **Set** button in the popup.\n         */\n        this.setButton = true;\n        /**\n         * Determines whether to display the **Now** button in the popup.\n         *\n         * > If the current time is out of range or the incremental step is greater than `1`, the **Now** button will be hidden.\n         */\n        this.nowButton = true;\n        /**\n         * Sets or gets the `disabled` property of the TimeSelector and determines whether the component is active.\n         */\n        this.disabled = false;\n        /**\n         * Specifies the value of the TimeSelector component.\n         */\n        this.value = null;\n        /**\n         * Fires each time the user selects a new value.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time the user cancels the selected value.\n         */\n        this.valueReject = new EventEmitter();\n        this.isActive = false;\n        this.showNowButton = true;\n        this._activeListIndex = -1;\n        this._steps = {};\n        this.domEvents = [];\n        if (this.pickerService) {\n            this.pickerService.timeSelector = this;\n        }\n    }\n    Object.defineProperty(TimeSelectorComponent.prototype, \"disabledClass\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimeSelectorComponent.prototype, \"steps\", {\n        get: function () {\n            return this._steps;\n        },\n        /**\n         * Configures the incremental steps of the TimeSelector.\n         *\n         * The available options are:\n         * - `hour: Number`&mdash;Controls the incremental step of the hour value.\n         * - `minute: Number`&mdash;Controls the incremental step of the minute value.\n         * - `second: Number`&mdash;Controls the incremental step of the second value.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-timeselector format=\"HH:mm:ss\" [steps]=\"steps\"></kendo-timeselector>\n         * `\n         * })\n         * class AppComponent {\n         *   public steps = { hour: 2, minute: 15, second: 15 };\n         * }\n         * ```\n         *\n         * > If the incremental step is greater than `1`, the **Now** button will be hidden.\n         */\n        set: function (steps) {\n            this._steps = steps || {};\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimeSelectorComponent.prototype, \"current\", {\n        get: function () {\n            return this._current;\n        },\n        set: function (value) {\n            this._current = timeInRange(this.snapTime(cloneDate(value || MIDNIGHT_DATE), this.min), this.min, this.max);\n            if (!NgZone.isInAngularZone()) {\n                this.cdr.detectChanges();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimeSelectorComponent.prototype, \"activeListIndex\", {\n        get: function () {\n            return this._activeListIndex;\n        },\n        set: function (value) {\n            var _this = this;\n            this._activeListIndex = value;\n            if (!this.timeListWrappers || !this.timeListWrappers.length) {\n                return;\n            }\n            this.timeListWrappers.forEach(function (listWrapper) {\n                _this.renderer.removeClass(listWrapper.nativeElement, 'k-state-focused');\n            });\n            if (value >= 0) {\n                var listIndex = this.listIndex(value);\n                var focusedWrapper = this.timeListWrappers.toArray()[listIndex];\n                if (focusedWrapper) {\n                    this.renderer.addClass(focusedWrapper.nativeElement, 'k-state-focused');\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    TimeSelectorComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscriptions = this.intl.changes.subscribe(this.intlChange.bind(this));\n        if (this.localization) {\n            this.subscriptions.add(this.localization\n                .changes\n                .subscribe(function () { return _this.cdr.markForCheck(); }));\n        }\n        this.dom.calculateHeights(this.element.nativeElement);\n        this.init();\n        this.bindEvents();\n    };\n    /**\n     * @hidden\n     */\n    TimeSelectorComponent.prototype.ngOnChanges = function (_) {\n        this.init();\n    };\n    TimeSelectorComponent.prototype.ngOnDestroy = function () {\n        if (this.subscriptions) {\n            this.subscriptions.unsubscribe();\n        }\n        if (this.pickerService) {\n            this.pickerService.timeSelector = null;\n        }\n        this.domEvents.forEach(function (unbindCallback) { return unbindCallback(); });\n    };\n    /**\n     * Focuses the TimeSelector component.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"timeselector.focus()\">Focus time picker</button>\n     *  <kendo-timeselector #timeselector></kendo-timeselector>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    TimeSelectorComponent.prototype.focus = function () {\n        var list = this.timeLists.first;\n        if (!list) {\n            return;\n        }\n        list.focus();\n    };\n    /**\n     * Blurs the TimeSelector component.\n     */\n    TimeSelectorComponent.prototype.blur = function () {\n        var list = this.timeLists.first;\n        if (!list) {\n            return;\n        }\n        list.blur();\n    };\n    /**\n     * @hidden\n     */\n    TimeSelectorComponent.prototype.handleAccept = function () {\n        this.handleChange(this.mergeValue(cloneDate(this.value || getDate(getNow())), this.current));\n    };\n    /**\n     * @hidden\n     */\n    TimeSelectorComponent.prototype.handleNow = function () {\n        this.current = getNow();\n        this.handleChange(this.current);\n        this.cdr.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    TimeSelectorComponent.prototype.handleReject = function () {\n        this.current = this.value;\n        this.valueReject.emit();\n    };\n    /**\n     * @hidden\n     */\n    TimeSelectorComponent.prototype.handleFocus = function (args) {\n        if (this.isActive) {\n            return;\n        }\n        this.isActive = true;\n        this.emitFocus(args);\n    };\n    /**\n     * @hidden\n     */\n    TimeSelectorComponent.prototype.handleListFocus = function (args) {\n        var index = parseInt(args.target.getAttribute('data-timelist-index'), 10);\n        this.activeListIndex = index;\n        this.handleFocus(args);\n    };\n    /**\n     * @hidden\n     */\n    TimeSelectorComponent.prototype.handleBlur = function (args) {\n        var currentTarget = currentFocusTarget(args);\n        if (currentTarget && this.containsElement(currentTarget)) {\n            return;\n        }\n        this.activeListIndex = -1;\n        this.isActive = false;\n        this.emitBlur(args);\n    };\n    /**\n     * @hidden\n     */\n    TimeSelectorComponent.prototype.containsElement = function (element) {\n        var _this = this;\n        return Boolean(closest(element, function (node) { return node === _this.element.nativeElement; }));\n    };\n    TimeSelectorComponent.prototype.partStep = function (part) {\n        return this.steps[part.type] || 1;\n    };\n    TimeSelectorComponent.prototype.init = function (changes) {\n        if (!changes || hasChange(changes, 'format')) {\n            this.dateFormatParts = this.intl.splitDateFormat(this.format);\n            this.mergeValue = valueMerger(generateGetters(this.dateFormatParts));\n        }\n        if (!changes || hasChange(changes, 'steps')) {\n            this.snapTime = snapTime(generateSnappers(this.steps));\n        }\n        if (!changes || hasChange(changes, 'value')) {\n            this.current = this.value;\n        }\n        this.showNowButton = !this.hasSteps() && this.nowButton && isInTimeRange(getNow(), this.min, this.max);\n    };\n    TimeSelectorComponent.prototype.focusList = function (dir) {\n        if (!this.timeLists.length) {\n            return;\n        }\n        this.timeLists.reduce(listReducer, [])\n            .map(function (state) { return dir === Direction.Right ? state.next : state.prev; })\n            .map(function (list) { return list && list.focus(); });\n    };\n    TimeSelectorComponent.prototype.handleChange = function (value) {\n        this.value = value;\n        this.valueChange.emit(cloneDate(value));\n    };\n    TimeSelectorComponent.prototype.hasActiveButton = function () {\n        var _this = this;\n        if (!this.accept) {\n            return false;\n        }\n        return [this.accept, this.cancel, this.now].reduce(function (isActive, el) { return isActive || _this.dom.isActive(el); }, false);\n    };\n    TimeSelectorComponent.prototype.hasSteps = function () {\n        var _this = this;\n        var keys = Object.keys(this.steps);\n        return keys.length !== keys.reduce(function (acc, k) { return acc + _this.steps[k]; }, 0);\n    };\n    TimeSelectorComponent.prototype.intlChange = function () {\n        this.dateFormatParts = this.intl.splitDateFormat(this.format);\n        this.mergeValue = valueMerger(generateGetters(this.dateFormatParts));\n        this.cdr.markForCheck();\n    };\n    TimeSelectorComponent.prototype.bindEvents = function () {\n        var _this = this;\n        if (this.element) {\n            this.zone.runOutsideAngular(function () {\n                _this.domEvents.push(_this.renderer.listen(_this.element.nativeElement, 'keydown', _this.handleKeydown.bind(_this)));\n            });\n        }\n    };\n    TimeSelectorComponent.prototype.handleKeydown = function (args) {\n        var keyCode = args.keyCode, altKey = args.altKey;\n        // reserve the alt + arrow key commands for the picker\n        var arrowKeyPressed = [Keys.ArrowLeft, Keys.ArrowRight].indexOf(keyCode) !== -1;\n        if (isPresent(this.pickerService) && arrowKeyPressed && altKey) {\n            return;\n        }\n        if (keyCode === Keys.Enter && !this.hasActiveButton()) {\n            this.handleAccept();\n        }\n        else if (keyCode === Keys.ArrowLeft || keyCode === Keys.ArrowRight) {\n            this.focusList(keyCode === Keys.ArrowLeft ? Direction.Left : Direction.Right);\n        }\n    };\n    TimeSelectorComponent.prototype.emitBlur = function (args) {\n        if (this.pickerService) {\n            this.pickerService.onBlur.emit(args);\n        }\n    };\n    TimeSelectorComponent.prototype.emitFocus = function (args) {\n        if (this.pickerService) {\n            this.pickerService.onFocus.emit(args);\n        }\n    };\n    TimeSelectorComponent.prototype.listIndex = function (partIndex) {\n        var listIdx = 0;\n        var partIdx = 0;\n        while (partIdx < partIndex) {\n            if (this.dateFormatParts[partIdx].type !== 'literal') {\n                listIdx++;\n            }\n            partIdx++;\n        }\n        return listIdx;\n    };\n    TimeSelectorComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    exportAs: 'kendo-timeselector',\n                    providers: [\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.timeselector'\n                        }\n                    ],\n                    selector: 'kendo-timeselector',\n                    template: \"\\n        <ng-container kendoTimeSelectorLocalizedMessages\\n            i18n-accept=\\\"kendo.timeselector.accept|The Accept button text in the timeselector component\\\"\\n            accept=\\\"Set\\\"\\n\\n            i18n-acceptLabel=\\\"kendo.timeselector.acceptLabel|The label for the Accept button in the timeselector component\\\"\\n            acceptLabel=\\\"Set time\\\"\\n\\n            i18n-cancel=\\\"kendo.timeselector.cancel|The Cancel button text in the timeselector component\\\"\\n            cancel=\\\"Cancel\\\"\\n\\n            i18n-cancelLabel=\\\"kendo.timeselector.cancelLabel|The label for the Cancel button in the timeselector component\\\"\\n            cancelLabel=\\\"Cancel changes\\\"\\n\\n            i18n-now=\\\"kendo.timeselector.now|The Now button text in the timeselector component\\\"\\n            now=\\\"Now\\\"\\n\\n            i18n-nowLabel=\\\"kendo.timeselector.nowLabel|The label for the Now button in the timeselector component\\\"\\n            nowLabel=\\\"Select now\\\"\\n        >\\n        </ng-container>\\n        <div class=\\\"k-time-header\\\">\\n            <span class=\\\"k-title\\\">\\n                {{ intl.formatDate(current, format) }}\\n            </span>\\n            <button\\n                #now\\n                *ngIf=\\\"showNowButton\\\"\\n                class=\\\"k-button k-bare k-time-now\\\" type=\\\"button\\\"\\n                [attr.title]=\\\"localization.get('nowLabel')\\\"\\n                [attr.aria-label]=\\\"localization.get('nowLabel')\\\"\\n                [kendoEventsOutsideAngular]=\\\"{\\n                    click: handleNow,\\n                    focus: handleFocus,\\n                    blur: handleBlur\\n                }\\\"\\n                [scope]=\\\"this\\\"\\n                [disabled]=\\\"disabled\\\"\\n            >{{localization.get('now')}}</button>\\n        </div>\\n        <div class=\\\"k-time-list-container\\\">\\n            <span class=\\\"k-time-highlight\\\"></span>\\n            <ng-template ngFor [ngForOf]=\\\"dateFormatParts\\\" let-part let-idx=\\\"index\\\">\\n                <div\\n                    #listWrapper\\n                    class=\\\"k-time-list-wrapper\\\"\\n                    role=\\\"presentation\\\" tabindex=\\\"-1\\\"\\n                    *ngIf=\\\"part.type !== 'literal'\\\"\\n                >\\n                    <span class=\\\"k-title\\\">{{intl.dateFieldName(part)}}</span>\\n                    <kendo-timelist\\n                        [min]=\\\"min\\\"\\n                        [max]=\\\"max\\\"\\n                        [part]=\\\"part\\\"\\n                        [step]=\\\"partStep(part)\\\"\\n                        [disabled]=\\\"disabled\\\"\\n                        [(value)]=\\\"current\\\"\\n                        [kendoEventsOutsideAngular]=\\\"{\\n                            focus: handleListFocus,\\n                            blur: handleBlur\\n                        }\\\"\\n                        [scope]=\\\"this\\\"\\n                        [attr.data-timelist-index]=\\\"idx\\\"\\n                    ></kendo-timelist>\\n                </div>\\n                <div class=\\\"k-time-separator\\\" *ngIf=\\\"part.type === 'literal'\\\">\\n                    {{part.pattern}}\\n                </div>\\n            </ng-template>\\n        </div>\\n        <div class=\\\"k-time-footer k-action-buttons\\\" *ngIf=\\\"setButton || cancelButton\\\">\\n            <button\\n                #cancel\\n                *ngIf=\\\"cancelButton\\\"\\n                class=\\\"k-button k-time-cancel\\\" type=\\\"button\\\"\\n                [attr.title]=\\\"localization.get('cancelLabel')\\\"\\n                [attr.aria-label]=\\\"localization.get('cancelLabel')\\\"\\n                [kendoEventsOutsideAngular]=\\\"{\\n                    click: handleReject,\\n                    focus: handleFocus,\\n                    blur: handleBlur\\n                }\\\"\\n                [scope]=\\\"this\\\"\\n                [disabled]=\\\"disabled\\\"\\n            >{{localization.get('cancel')}}</button>\\n            <button\\n                #accept\\n                *ngIf=\\\"setButton\\\"\\n                type=\\\"button\\\"\\n                class=\\\"k-time-accept k-button k-primary\\\"\\n                [attr.title]=\\\"localization.get('acceptLabel')\\\"\\n                [attr.aria-label]=\\\"localization.get('acceptLabel')\\\"\\n                [kendoEventsOutsideAngular]=\\\"{\\n                    click: handleAccept,\\n                    focus: handleFocus,\\n                    blur: handleBlur\\n                }\\\"\\n                [scope]=\\\"this\\\"\\n                [disabled]=\\\"disabled\\\"\\n            >{{localization.get('accept')}}</button>\\n        </div>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    TimeSelectorComponent.ctorParameters = function () { return [\n        { type: LocalizationService },\n        { type: ChangeDetectorRef },\n        { type: ElementRef },\n        { type: IntlService },\n        { type: TimePickerDOMService },\n        { type: NgZone },\n        { type: Renderer2 },\n        { type: PickerService, decorators: [{ type: Optional }] }\n    ]; };\n    TimeSelectorComponent.propDecorators = {\n        accept: [{ type: ViewChild, args: ['accept',] }],\n        cancel: [{ type: ViewChild, args: ['cancel',] }],\n        now: [{ type: ViewChild, args: ['now',] }],\n        timeLists: [{ type: ViewChildren, args: [TimeListComponent,] }],\n        timeListWrappers: [{ type: ViewChildren, args: ['listWrapper',] }],\n        componentClass: [{ type: HostBinding, args: ['class.k-timeselector',] }],\n        disabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }],\n        format: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        cancelButton: [{ type: Input }],\n        setButton: [{ type: Input }],\n        nowButton: [{ type: Input }],\n        disabled: [{ type: Input }],\n        steps: [{ type: Input }],\n        value: [{ type: Input }],\n        valueChange: [{ type: Output }],\n        valueReject: [{ type: Output }]\n    };\n    return TimeSelectorComponent;\n}());\n\n/**\n * @hidden\n */\nvar TimePickerMessages = /** @class */ (function (_super) {\n    __extends(TimePickerMessages, _super);\n    function TimePickerMessages() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TimePickerMessages.propDecorators = {\n        accept: [{ type: Input }],\n        acceptLabel: [{ type: Input }],\n        cancel: [{ type: Input }],\n        cancelLabel: [{ type: Input }],\n        now: [{ type: Input }],\n        nowLabel: [{ type: Input }],\n        toggle: [{ type: Input }]\n    };\n    return TimePickerMessages;\n}(ComponentMessages));\n\n/**\n * @hidden\n */\nvar TimePickerLocalizedMessagesDirective = /** @class */ (function (_super) {\n    __extends(TimePickerLocalizedMessagesDirective, _super);\n    function TimePickerLocalizedMessagesDirective(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    TimePickerLocalizedMessagesDirective.decorators = [\n        { type: Directive, args: [{\n                    providers: [\n                        {\n                            provide: TimePickerMessages,\n                            useExisting: forwardRef(function () { return TimePickerLocalizedMessagesDirective; }) // tslint:disable-line:no-forward-ref\n                        }\n                    ],\n                    selector: '[kendoTimePickerLocalizedMessages]'\n                },] },\n    ];\n    /** @nocollapse */\n    TimePickerLocalizedMessagesDirective.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return TimePickerLocalizedMessagesDirective;\n}(TimePickerMessages));\n\n/**\n * Custom component messages override default component messages ([see example]({% slug globalization_dateinputs %}#toc-custom-messages)).\n */\nvar TimePickerCustomMessagesComponent = /** @class */ (function (_super) {\n    __extends(TimePickerCustomMessagesComponent, _super);\n    function TimePickerCustomMessagesComponent(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    Object.defineProperty(TimePickerCustomMessagesComponent.prototype, \"override\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TimePickerCustomMessagesComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: TimePickerMessages,\n                            useExisting: forwardRef(function () { return TimePickerCustomMessagesComponent; }) // tslint:disable-line:no-forward-ref\n                        }\n                    ],\n                    selector: 'kendo-timepicker-messages',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    TimePickerCustomMessagesComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return TimePickerCustomMessagesComponent;\n}(TimePickerMessages));\n\n/**\n * @hidden\n */\nvar TimeSelectorLocalizedMessagesDirective = /** @class */ (function (_super) {\n    __extends(TimeSelectorLocalizedMessagesDirective, _super);\n    function TimeSelectorLocalizedMessagesDirective(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    TimeSelectorLocalizedMessagesDirective.decorators = [\n        { type: Directive, args: [{\n                    providers: [\n                        {\n                            provide: TimePickerMessages,\n                            useExisting: forwardRef(function () { return TimeSelectorLocalizedMessagesDirective; }) // tslint:disable-line:no-forward-ref\n                        }\n                    ],\n                    selector: '[kendoTimeSelectorLocalizedMessages]'\n                },] },\n    ];\n    /** @nocollapse */\n    TimeSelectorLocalizedMessagesDirective.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return TimeSelectorLocalizedMessagesDirective;\n}(TimePickerMessages));\n\n/**\n * @hidden\n *\n * Custom component messages override default component messages.\n */\nvar TimeSelectorCustomMessagesComponent = /** @class */ (function (_super) {\n    __extends(TimeSelectorCustomMessagesComponent, _super);\n    function TimeSelectorCustomMessagesComponent(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    Object.defineProperty(TimeSelectorCustomMessagesComponent.prototype, \"override\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TimeSelectorCustomMessagesComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: TimePickerMessages,\n                            useExisting: forwardRef(function () { return TimeSelectorCustomMessagesComponent; }) // tslint:disable-line:no-forward-ref\n                        }\n                    ],\n                    selector: 'kendo-timeselector-messages',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    TimeSelectorCustomMessagesComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return TimeSelectorCustomMessagesComponent;\n}(TimePickerMessages));\n\nvar COMPONENT_DIRECTIVES$2 = [\n    TimePickerLocalizedMessagesDirective,\n    TimeListComponent,\n    TimePickerCustomMessagesComponent,\n    TimePickerComponent,\n    TimeSelectorLocalizedMessagesDirective,\n    TimeSelectorCustomMessagesComponent,\n    TimeSelectorComponent\n];\nvar COMPONENT_MODULES$1 = [\n    DateInputModule,\n    IntlModule,\n    PopupModule,\n    VirtualizationModule,\n    EventsModule\n];\nvar Éµ0$n = touchEnabled;\nvar providers = [\n    TimePickerDOMService,\n    HoursService,\n    MinutesService,\n    SecondsService,\n    DayPeriodService,\n    {\n        provide: TOUCH_ENABLED,\n        useValue: Éµ0$n\n    }\n];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the TimePicker component.\n */\nvar TimePickerModule = /** @class */ (function () {\n    function TimePickerModule() {\n    }\n    TimePickerModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [COMPONENT_DIRECTIVES$2],\n                    exports: [COMPONENT_DIRECTIVES$2],\n                    imports: [CommonModule].concat(COMPONENT_MODULES$1),\n                    providers: providers\n                },] },\n    ];\n    return TimePickerModule;\n}());\n\n/**\n * @hidden\n */\nvar Messages$1 = /** @class */ (function (_super) {\n    __extends(Messages, _super);\n    function Messages() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Messages.propDecorators = {\n        toggle: [{ type: Input }],\n        dateTab: [{ type: Input }],\n        dateTabLabel: [{ type: Input }],\n        timeTab: [{ type: Input }],\n        timeTabLabel: [{ type: Input }],\n        accept: [{ type: Input }],\n        acceptLabel: [{ type: Input }],\n        cancel: [{ type: Input }],\n        cancelLabel: [{ type: Input }],\n        today: [{ type: Input }],\n        now: [{ type: Input }],\n        nowLabel: [{ type: Input }]\n    };\n    return Messages;\n}(ComponentMessages));\n\n/**\n * Custom component messages override default component messages ([see example]({% slug globalization_dateinputs %}#toc-custom-messages)).\n */\nvar DateTimePickerCustomMessagesComponent = /** @class */ (function (_super) {\n    __extends(DateTimePickerCustomMessagesComponent, _super);\n    function DateTimePickerCustomMessagesComponent(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    Object.defineProperty(DateTimePickerCustomMessagesComponent.prototype, \"override\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DateTimePickerCustomMessagesComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: Messages$1,\n                            useExisting: forwardRef(function () { return DateTimePickerCustomMessagesComponent; })\n                        }\n                    ],\n                    selector: 'kendo-datetimepicker-messages',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    DateTimePickerCustomMessagesComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return DateTimePickerCustomMessagesComponent;\n}(Messages$1));\n\n/**\n * @hidden\n */\nvar LocalizedMessagesDirective = /** @class */ (function (_super) {\n    __extends(LocalizedMessagesDirective, _super);\n    function LocalizedMessagesDirective(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    LocalizedMessagesDirective.decorators = [\n        { type: Directive, args: [{\n                    providers: [\n                        {\n                            provide: Messages$1,\n                            useExisting: forwardRef(function () { return LocalizedMessagesDirective; })\n                        }\n                    ],\n                    selector: '[kendoDateTimePickerLocalizedMessages]'\n                },] },\n    ];\n    /** @nocollapse */\n    LocalizedMessagesDirective.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return LocalizedMessagesDirective;\n}(Messages$1));\n\nvar COMPONENT_DIRECTIVES$3 = [\n    DateTimePickerComponent,\n    DateTimePickerCustomMessagesComponent,\n    LocalizedMessagesDirective\n];\nvar Éµ0$o = touchEnabled;\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the DateTimePicker component.\n */\nvar DateTimePickerModule = /** @class */ (function () {\n    function DateTimePickerModule() {\n    }\n    DateTimePickerModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: COMPONENT_DIRECTIVES$3.slice(),\n                    exports: COMPONENT_DIRECTIVES$3.concat([\n                        TemplatesModule\n                    ]),\n                    imports: [\n                        CommonModule,\n                        IntlModule,\n                        DateInputModule,\n                        CalendarModule,\n                        TimePickerModule,\n                        PopupModule,\n                        EventsModule,\n                        TemplatesModule\n                    ],\n                    providers: [\n                        { provide: TOUCH_ENABLED, useValue: Éµ0$o }\n                    ]\n                },] },\n    ];\n    return DateTimePickerModule;\n}());\n\nvar COMPONENT_MODULES$2 = [\n    CalendarsModule,\n    DateInputModule,\n    DatePickerModule,\n    TimePickerModule,\n    DateRangeModule,\n    DateTimePickerModule\n];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Date Inputs components.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Date Inputs module\n * import { DateInputsModule } from '@progress/kendo-angular-dateinputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare the app component\n *     imports:      [BrowserModule, DateInputsModule], // import the Date Inputs module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nvar DateInputsModule = /** @class */ (function () {\n    function DateInputsModule() {\n    }\n    DateInputsModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: COMPONENT_MODULES$2,\n                    imports: COMPONENT_MODULES$2\n                },] },\n    ];\n    return DateInputsModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CalendarCommonModule, CALENDAR_RANGE_VALIDATORS, CALENDAR_VALUE_ACCESSOR, KENDO_INPUT_PROVIDER, KForOf, KForOfContext, HeaderComponent, HorizontalViewListComponent, CalendarMessages, MultiViewCalendarCustomMessagesComponent, Messages, MultiViewCalendarComponent, RANGE_CALENDAR_RANGE_VALIDATORS, RANGE_CALENDAR_VALUE_ACCESSOR, NavigationComponent, BusViewService, CenturyViewService, DecadeViewService, DisabledDatesService, CalendarDOMService, MonthViewService, NavigationService, ScrollSyncService, WeekNamesService, YearViewService, TemplatesModule, CellTemplateDirective, CenturyCellTemplateDirective, DecadeCellTemplateDirective, HeaderTitleTemplateDirective, MonthCellTemplateDirective, NavigationItemTemplateDirective, WeekNumberCellTemplateDirective, YearCellTemplateDirective, ViewListComponent, ViewComponent, PickerService, DateInputMessages, DatePickerMessages, DateRangeInput, DateRangePopupTemplateDirective, DateTimePickerCustomMessagesComponent, LocalizedMessagesDirective, Messages$1, TimePickerMessages, TimePickerCustomMessagesComponent, TimeSelectorCustomMessagesComponent, DayPeriodService, TimePickerDOMService, HoursService, MinutesService, SecondsService, TimeListComponent, TimeSelectorComponent, TOUCH_ENABLED, ScrollerService, DEFAULT_SCROLLER_FACTORY, SCROLLER_FACTORY_TOKEN, VirtualizationComponent, VirtualizationModule, CalendarComponent, DateInputComponent, DatePickerComponent, TimePickerComponent, DateTimePickerComponent, DateRangeComponent, DateRangePopupComponent, DateRangeEndInputDirective, DateRangeStartInputDirective, DateRangeSelectionDirective, CalendarModule, CalendarsModule, DateInputModule, DatePickerModule, DateInputsModule, TimePickerModule, DateTimePickerModule, MultiViewCalendarModule, DateRangeModule, DateRangeService, CalendarCustomMessagesComponent, DateInputCustomMessagesComponent, DatePickerCustomMessagesComponent, PreventableEvent, CalendarLocalizedMessagesDirective, MultiViewCalendarLocalizedMessagesDirective, DateInputLocalizedMessagesDirective, DatePickerLocalizedMessagesDirective, TimePickerLocalizedMessagesDirective, TimeSelectorLocalizedMessagesDirective };\n"],"names":[],"mappingsoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmcM;;;;;gDAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmJA;;;;;gDAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0KA,AAGA;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyKH,AAGA;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+EH,AAGA;;;;;;;;;yEAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA2JH;;;;;gDAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAqaA,AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8HA,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwLA,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA+BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyCA,AAGA;;;;;;;;;wEAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuEH,AAGA;;;;;;;;;;qGAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAkCJ,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA+BJ,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAkCJ,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAiCJ,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAiCJ,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA+BJ,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAgCJ,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAgCJ,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;AAYJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4HC;;;;;gwqBA,AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAwkrCA,AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAuCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4zBA,AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ouBA,AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oi0BA,AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAkDA;;;;;;;;;;;KAWD,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiMH;;;;;gDAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+HA,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oipBA,AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA+DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuSA,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgDA,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA2LA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmEA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0LA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsGA,AAGA;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiGA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAkBA;;;;;;;;;;;;;;;MAeA,AAGA;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6MH,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA+BA;;;;;;;;;;;;;;;KAeD;;;;;;;;;;;;;;;;;;;;;;;gDAeC;;;;;;;;;;;;;;;;;;;;;KAqBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAwBC;;;;;;;;;;;;;;;;;mFAcA;;;;;;;;;;;;;KAaD,AAWC;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;;;;;OAoBF,AAYD;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;KAeJ;;;;;;;;;;;gDAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA8CD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDA6BC;;;;;;;;;;;;;;;;;;;mEAgBA;;;;;;;;;;;;;KAaD,AAWC;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;;;;;OAoBF,AAYD;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAyCJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDA2BC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAwCD;;;;;;;;;;;;;;;;;;;;;;;gDAYC;;;;;;;;;;;;;;;;;;qFAeA;;;;;;;;;;;;;KAaD,AAWC;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;;;;;OAoBF,AAYD;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;KAUJ;;;;;;;;;;;;;;;;;;;;;;;gDAeC;;;;;;;;;;;;;;;;;;uFAeA;;;;;;;;;;;;;KAaD,AAWC;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;;;;;OAoBF,AAYD;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;KAWJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAyBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA2DD;;;;;;;;;;;;;;;;;;;;;;;;;gDAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6CA;;;;;ggHH,AAGA;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+NH,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAybA,AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA+BA;;;;;;;;;;;;;;;;;;;;;;;uFAoBA;;;;;;;;;;;;;KAaD,AAWC;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;;;;;OAoBF,AAYD;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;KAaJ,AAWC;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;;;;;;;OAsBF,AAYD;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAsCJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;qEAyBA;;;;;;;;;;;;;;;;;;;;OAoBC,AAYD;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;KAaJ,AAWC;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;KAgBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAqBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA6CD;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMC;;;;;;;;;"}