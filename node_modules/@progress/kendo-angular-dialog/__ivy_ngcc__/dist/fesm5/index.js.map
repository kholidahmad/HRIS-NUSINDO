{"version":3,"file":"index.js","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-dialog/dist/fesm5/index.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { TemplateRef, Component, ElementRef, Input, Output, HostBinding, EventEmitter, InjectionToken, Inject, Optional, Renderer2, ContentChild, ViewChild, HostListener, Injectable, isDevMode, ComponentFactoryResolver, NgZone, Directive, Host, ViewChildren, ViewContainerRef, forwardRef, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { L10N_PREFIX, MessageService, RTL, LocalizationService, ComponentMessages } from '@progress/kendo-angular-l10n';\nimport { __extends } from 'tslib';\nimport { Subject, merge, Subscription, of } from 'rxjs';\nimport { take, tap, switchMap, takeUntil, map } from 'rxjs/operators';\nimport { DraggableDirective, isChanged, isDocumentAvailable, DraggableModule } from '@progress/kendo-angular-common';\nimport { offset, scrollPosition, positionWithScroll, getDocumentElement, getWindowViewPort } from '@progress/kendo-popup-common';\nimport { Button } from '@progress/kendo-angular-buttons';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Specifies the action buttons of the Dialog\n * ([see example]({% slug actionbuttons_dialog %})).\n */\nvar DialogActionsComponent = /** @class */ (function () {\n    function DialogActionsComponent(el) {\n        this.el = el;\n        /**\n         * Specifies the possible layout of the action buttons.\n         */\n        this.layout = 'stretched';\n        /**\n         * Fires when the user clicks an action button.\n         */\n        this.action = new EventEmitter();\n        this.buttonGroupClassName = true;\n    }\n    Object.defineProperty(DialogActionsComponent.prototype, \"className\", {\n        get: function () {\n            return this.layout === 'stretched';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    DialogActionsComponent.prototype.actionTemplate = function () {\n        return this.actions instanceof TemplateRef;\n    };\n    /**\n     * @hidden\n     */\n    DialogActionsComponent.prototype.onButtonClick = function (action, _e) {\n        this.action.emit(action);\n    };\n    /**\n     * @hidden\n     */\n    DialogActionsComponent.prototype.buttonClass = function (action) {\n        var classes = [\"k-button\"];\n        if (action.primary) {\n            classes.push(\"k-primary\");\n        }\n        return classes.join(\" \");\n    };\n    DialogActionsComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-dialog-actions',\n                    template: \"\\n    <ng-content *ngIf=\\\"!actions\\\"></ng-content>\\n    <ng-container *ngIf=\\\"!actionTemplate()\\\">\\n      <button type=\\\"button\\\"\\n        [ngClass]=\\\"buttonClass(action)\\\"\\n        (click)=\\\"onButtonClick(action, $event)\\\"\\n        *ngFor=\\\"let action of actions\\\">\\n        {{ action.text }}\\n      </button>\\n    </ng-container>\\n    <ng-template [ngTemplateOutlet]=\\\"actions\\\" *ngIf=\\\"actionTemplate()\\\"></ng-template>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    DialogActionsComponent.ctorParameters = function () { return [\n        { type: ElementRef }\n    ]; };\n    DialogActionsComponent.propDecorators = {\n        actions: [{ type: Input }],\n        layout: [{ type: Input }],\n        action: [{ type: Output }],\n        buttonGroupClassName: [{ type: HostBinding, args: ['class.k-dialog-buttongroup',] }],\n        className: [{ type: HostBinding, args: ['class.k-dialog-button-layout-stretched',] }]\n    };\n    return DialogActionsComponent;\n}());\n\n/**\n * @hidden\n */\nvar DIALOG_LOCALIZATION_SERVICE = new InjectionToken('Dialog LocalizationService');\n\n/**\n * @hidden\n */\nvar TitleBarLocalizationService = /** @class */ (function (_super) {\n    __extends(TitleBarLocalizationService, _super);\n    function TitleBarLocalizationService(prefix, messageService, rtl, dialogLocalization) {\n        var _this = _super.call(this, prefix, messageService, rtl) || this;\n        _this.dialogLocalization = dialogLocalization;\n        return _this;\n    }\n    TitleBarLocalizationService.prototype.get = function (shortKey) {\n        if (this.dialogLocalization) {\n            return this.dialogLocalization.get(shortKey);\n        }\n        return _super.prototype.get.call(this, shortKey);\n    };\n    /** @nocollapse */\n    TitleBarLocalizationService.ctorParameters = function () { return [\n        { type: String, decorators: [{ type: Inject, args: [L10N_PREFIX,] }] },\n        { type: MessageService, decorators: [{ type: Optional }] },\n        { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] }] },\n        { type: LocalizationService, decorators: [{ type: Optional }, { type: Inject, args: [DIALOG_LOCALIZATION_SERVICE,] }] }\n    ]; };\n    return TitleBarLocalizationService;\n}(LocalizationService));\n\n/**\n * Represents the [Kendo UI DialogTitleBar component for Angular]({% slug api_dialog_dialogtitlebarcomponent %}).\n *\n * It is used as part of the Dialog content when the component is created dynamically by using an [Angular service]({% slug service_dialog %}).\n */\nvar DialogTitleBarComponent = /** @class */ (function () {\n    function DialogTitleBarComponent(hostElement, localizationService) {\n        this.hostElement = hostElement;\n        this.localizationService = localizationService;\n        /**\n         * @hidden\n         */\n        this.close = new EventEmitter();\n    }\n    Object.defineProperty(DialogTitleBarComponent.prototype, \"className\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DialogTitleBarComponent.prototype, \"closeButtonTitle\", {\n        get: function () {\n            return this.closeTitle || this.localizationService.get('closeTitle');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DialogTitleBarComponent.prototype.ngAfterViewChecked = function () {\n        var element = this.hostElement.nativeElement;\n        element.setAttribute('id', this.id);\n    };\n    /**\n     * @hidden\n     */\n    DialogTitleBarComponent.prototype.onCloseClick = function (e) {\n        e.preventDefault();\n        this.close.emit();\n    };\n    DialogTitleBarComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-dialog-titlebar',\n                    providers: [\n                        TitleBarLocalizationService,\n                        {\n                            provide: LocalizationService,\n                            useExisting: TitleBarLocalizationService\n                        },\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.dialog'\n                        }\n                    ],\n                    template: \"\\n    <ng-container kendoDialogTitleBarLocalizedMessages\\n        i18n-closeTitle=\\\"kendo.dialog.closeTitle|The title of the close button\\\"\\n        closeTitle=\\\"Close\\\"\\n    >\\n    <ng-container>\\n    <div class=\\\"k-window-title k-dialog-title\\\">\\n      <ng-content></ng-content>\\n    </div>\\n\\n    <div class=\\\"k-window-actions k-dialog-actions\\\">\\n      <a href=\\\"#\\\" role=\\\"button\\\"\\n         [attr.title]=\\\"closeButtonTitle\\\"\\n         [attr.aria-label]=\\\"closeButtonTitle\\\"\\n         class=\\\"k-button k-bare k-button-icon k-window-action k-dialog-action k-dialog-close\\\"\\n         (click)=\\\"onCloseClick($event)\\\">\\n        <span class=\\\"k-icon k-i-x\\\"></span>\\n      </a>\\n    </div>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    DialogTitleBarComponent.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: LocalizationService, decorators: [{ type: Optional }] }\n    ]; };\n    DialogTitleBarComponent.propDecorators = {\n        close: [{ type: Output }],\n        id: [{ type: Input }],\n        closeTitle: [{ type: Input }],\n        className: [{ type: HostBinding, args: ['class.k-window-titlebar',] }, { type: HostBinding, args: ['class.k-dialog-titlebar',] }]\n    };\n    return DialogTitleBarComponent;\n}());\n\n/**\n * @hidden\n */\nvar isPresent = function (value) { return value !== null && value !== undefined; };\n/**\n * @hidden\n */\nvar isTruthy = function (value) { return !!value; };\nvar toClassList = function (classNames) { return String(classNames).trim().split(' '); };\nvar focusableRegex = /^(?:a|input|select|textarea|button|object)$/i;\n/**\n * @hidden\n */\nvar Keys;\n(function (Keys) {\n    Keys[Keys[\"esc\"] = 27] = \"esc\";\n    Keys[Keys[\"tab\"] = 9] = \"tab\";\n    Keys[Keys[\"enter\"] = 13] = \"enter\";\n    Keys[Keys[\"space\"] = 32] = \"space\";\n    Keys[Keys[\"ctrl\"] = 17] = \"ctrl\";\n    Keys[Keys[\"shift\"] = 16] = \"shift\";\n    Keys[Keys[\"left\"] = 37] = \"left\";\n    Keys[Keys[\"up\"] = 38] = \"up\";\n    Keys[Keys[\"right\"] = 39] = \"right\";\n    Keys[Keys[\"down\"] = 40] = \"down\";\n})(Keys || (Keys = {}));\n/**\n * @hidden\n */\nvar DIALOG_ELEMENTS_HANDLING_ESC_KEY = 'k-dialog-wrapper k-dialog-buttongroup k-dialog-action';\n/**\n * @hidden\n */\nvar DIALOG_ELEMENTS_HANDLING_ARROWS = 'k-dialog-buttongroup';\n/**\n * @hidden\n */\nvar WINDOW_CLASSES = 'k-window';\n/**\n * @hidden\n */\nvar hasClasses = function (element, classNames) {\n    var namesList = toClassList(classNames);\n    return Boolean(toClassList(element.className).find(function (className) { return namesList.indexOf(className) >= 0; }));\n};\n/**\n * @hidden\n */\nvar isVisible = function (element) {\n    var rect = element.getBoundingClientRect();\n    return !!(rect.width && rect.height) && window.getComputedStyle(element).visibility !== 'hidden';\n};\n/**\n * @hidden\n */\nvar isFocusable = function (element, checkVisibility) {\n    if (checkVisibility === void 0) { checkVisibility = true; }\n    if (element.tagName) {\n        var tagName = element.tagName.toLowerCase();\n        var tabIndex = element.getAttribute('tabIndex');\n        var validTabIndex = tabIndex !== null && !isNaN(tabIndex) && tabIndex > -1;\n        var focusable = false;\n        if (focusableRegex.test(tagName)) {\n            focusable = !element.disabled;\n        }\n        else {\n            focusable = validTabIndex;\n        }\n        return focusable && (!checkVisibility || isVisible(element));\n    }\n    return false;\n};\n/**\n * @hidden\n */\nvar focusableSelector = [\n    'a[href]',\n    'area[href]',\n    'input:not([disabled])',\n    'select:not([disabled])',\n    'textarea:not([disabled])',\n    'button:not([disabled])',\n    'iframe',\n    'object',\n    'embed',\n    '*[tabindex]',\n    '*[contenteditable]'\n].join(',');\n/**\n * @hidden\n */\nvar preventDefault = function (_a) {\n    var event = _a.originalEvent;\n    event.stopPropagation();\n    event.preventDefault();\n};\n/**\n * @hidden\n */\nvar RESIZE_DIRECTIONS = ['n', 'e', 's', 'w', 'se', 'sw', 'ne', 'nw'];\n/**\n * @hidden\n */\nvar OFFSET_STYLES = ['top', 'left', 'width', 'height'];\n/**\n * @hidden\n */\nvar isNumber = function (value) { return typeof value === 'number' && isFinite(value); };\n/**\n * @hidden\n */\nvar createValueWithUnit = function (value) { return value + (isNumber(value) ? 'px' : ''); };\n\n/**\n * Represents the [Kendo UI Dialog component for Angular]({% slug overview_dialog_dialogs %}).\n */\nvar DialogComponent = /** @class */ (function () {\n    function DialogComponent(_elRef, _renderer, localization) {\n        var _this = this;\n        this._elRef = _elRef;\n        this._renderer = _renderer;\n        /**\n         * Specifies the layout of the action buttons in the Dialog.\n         * This option is only applicable if the action buttons are specified through the `actions` options.\n         *\n         * @default 'stretched'\n         */\n        this.actionsLayout = 'stretched';\n        /**\n         * @hidden\n         */\n        this.titleId = null;\n        /**\n         * Fires when the user clicks an action button of the Dialog.\n         * The event is fired only when the action buttons are specified through the `actions` options.\n         */\n        this.action = new EventEmitter();\n        /**\n         * Fires when the user clicks the **Close** button of the Dialog.\n         */\n        this.close = new EventEmitter();\n        this.tabIndex = 0;\n        this.subscriptions = [];\n        this.direction = localization.rtl ? 'rtl' : 'ltr';\n        this.subscriptions.push(localization.changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            return _this.direction = rtl ? 'rtl' : 'ltr';\n        }));\n        this.titleId = this.generateTitleId();\n    }\n    Object.defineProperty(DialogComponent.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    DialogComponent.prototype.onComponentKeydown = function (event) {\n        var target = event.target;\n        var parent = target.parentElement;\n        if (hasClasses(target, DIALOG_ELEMENTS_HANDLING_ESC_KEY) ||\n            hasClasses(parent, DIALOG_ELEMENTS_HANDLING_ESC_KEY)) {\n            if (event.keyCode === Keys.esc) {\n                this.close.emit();\n            }\n        }\n        if (hasClasses(target, 'k-button') &&\n            hasClasses(parent, DIALOG_ELEMENTS_HANDLING_ARROWS) &&\n            (event.keyCode === Keys.left || event.keyCode === Keys.right)) {\n            this.handleActionButtonFocus(parent, event.keyCode);\n        }\n        if (event.keyCode === Keys.tab) {\n            this.keepFocusWithinComponent(target, event);\n        }\n    };\n    DialogComponent.prototype.ngAfterContentInit = function () {\n        this.bubble('close', this.titlebarContent);\n        if (this.titlebarContent) {\n            this.titlebarContent.id = this.titleId;\n        }\n    };\n    DialogComponent.prototype.ngAfterViewInit = function () {\n        this.handleInitialFocus();\n        this.bubble('close', this.titlebarView);\n        this.bubble('action', this.actionsView);\n        if (this.titlebarView || this.titlebarContent) {\n            //Needed for Dialogs created via service\n            this._renderer.setAttribute(this._elRef.nativeElement.querySelector('.k-dialog'), 'aria-labelledby', this.titleId);\n        }\n    };\n    DialogComponent.prototype.ngOnInit = function () {\n        this._renderer.removeAttribute(this._elRef.nativeElement, 'title');\n    };\n    DialogComponent.prototype.ngOnDestroy = function () {\n        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        this.subscriptions = [];\n    };\n    /**\n     * Focuses the wrapper of the Dialog component.\n     */\n    DialogComponent.prototype.focus = function () {\n        var wrapper = this._elRef.nativeElement;\n        if (isPresent(wrapper)) {\n            wrapper.focus();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DialogComponent.prototype.handleInitialFocus = function () {\n        var wrapper = this._elRef.nativeElement;\n        var primaryButton = wrapper.querySelector('.k-primary');\n        if (this.autoFocusedElement) {\n            var initiallyFocusedElement = wrapper.querySelector(this.autoFocusedElement);\n            if (initiallyFocusedElement) {\n                initiallyFocusedElement.focus();\n            }\n        }\n        else if (this.shouldFocusPrimary(primaryButton)) {\n            primaryButton.focus();\n        }\n        else {\n            wrapper.focus();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DialogComponent.prototype.handleActionButtonFocus = function (parent, key) {\n        var focusableActionButtons = this.getAllFocusableChildren(parent);\n        for (var i = 0; i < focusableActionButtons.length; i++) {\n            var current = focusableActionButtons[i];\n            if (current === document.activeElement) {\n                if (key === Keys.left && i > 0) {\n                    focusableActionButtons[i - 1].focus();\n                    break;\n                }\n                if (key === Keys.right && i < focusableActionButtons.length - 1) {\n                    focusableActionButtons[i + 1].focus();\n                    break;\n                }\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    DialogComponent.prototype.keepFocusWithinComponent = function (target, event) {\n        var firstFocusable = this._elRef.nativeElement;\n        var lastFocusable = this.getLastFocusableElement(firstFocusable);\n        var tabBeforeFirstFocusable = (target === firstFocusable) && event.shiftKey;\n        var tabAfterLastFocusable = !event.shiftKey && isPresent(lastFocusable) && (target === lastFocusable);\n        var tabWithNoFocusable = !isPresent(lastFocusable) && !event.shiftKey;\n        if (tabBeforeFirstFocusable || tabWithNoFocusable) {\n            event.preventDefault();\n            firstFocusable.focus();\n        }\n        if (tabAfterLastFocusable) {\n            event.preventDefault();\n            lastFocusable.focus();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DialogComponent.prototype.shouldFocusPrimary = function (el) {\n        return isPresent(el) && isFocusable(el);\n    };\n    /**\n     * @hidden\n     */\n    DialogComponent.prototype.getAllFocusableChildren = function (parent) {\n        return parent.querySelectorAll(focusableSelector);\n    };\n    /**\n     * @hidden\n     */\n    DialogComponent.prototype.getLastFocusableElement = function (parent) {\n        var all = this.getAllFocusableChildren(parent);\n        return (all.length > 0) ? all[all.length - 1] : null;\n    };\n    /**\n     * @hidden\n     */\n    DialogComponent.prototype.generateTitleId = function () {\n        return \"kendo-dialog-title-\" + Math.ceil(Math.random() * 1000000).toString();\n    };\n    Object.defineProperty(DialogComponent.prototype, \"wrapperClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DialogComponent.prototype, \"styles\", {\n        get: function () {\n            var styles = {};\n            if (this.width) {\n                styles.width = createValueWithUnit(this.width);\n            }\n            if (this.height) {\n                styles.height = createValueWithUnit(this.height);\n            }\n            if (this.minWidth) {\n                styles.minWidth = createValueWithUnit(this.minWidth);\n            }\n            if (this.maxWidth) {\n                styles.maxWidth = createValueWithUnit(this.maxWidth);\n            }\n            if (this.minHeight) {\n                styles.minHeight = createValueWithUnit(this.minHeight);\n            }\n            if (this.maxHeight) {\n                styles.maxHeight = createValueWithUnit(this.maxHeight);\n            }\n            return styles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DialogComponent.prototype.bubble = function (eventName, component) {\n        var _this = this;\n        if (component) {\n            var emit = function (e) { return _this[eventName].emit(e); };\n            var s = component[eventName].subscribe(emit);\n            this.subscriptions.push(s);\n        }\n    };\n    DialogComponent.decorators = [\n        { type: Component, args: [{\n                    animations: [\n                        trigger('overlayAppear', [\n                            state('in', style({ opacity: 1 })),\n                            transition('void => *', [\n                                style({ opacity: .1 }),\n                                animate('.3s cubic-bezier(.2, .6, .4, 1)')\n                            ])\n                        ]),\n                        trigger('dialogSlideInAppear', [\n                            state('in', style({ transform: 'translate(0, 0)' })),\n                            transition('void => *', [\n                                style({ transform: 'translate(0, -10%)' }),\n                                animate('.3s cubic-bezier(.2, 1, .2, 1)')\n                            ])\n                        ])\n                    ],\n                    exportAs: 'kendoDialog',\n                    providers: [\n                        LocalizationService,\n                        {\n                            provide: DIALOG_LOCALIZATION_SERVICE,\n                            useExisting: LocalizationService\n                        },\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.dialog'\n                        }\n                    ],\n                    selector: 'kendo-dialog',\n                    template: \"\\n    <div class=\\\"k-overlay\\\" @overlayAppear></div>\\n\\n    <div\\n      class=\\\"k-widget k-window k-dialog\\\"\\n      role=\\\"dialog\\\"\\n      [ngStyle]=\\\"styles\\\"\\n      @dialogSlideInAppear\\n    >\\n      <kendo-dialog-titlebar *ngIf=\\\"title\\\" [closeTitle]=\\\"closeTitle\\\" [id]=\\\"titleId\\\">{{title}}</kendo-dialog-titlebar>\\n      <ng-content select=\\\"kendo-dialog-titlebar\\\" *ngIf=\\\"!title\\\"></ng-content>\\n\\n      <div class=\\\"k-content k-window-content k-dialog-content\\\">\\n        <ng-content *ngIf=\\\"!contentTemplate\\\"></ng-content>\\n        <ng-template [ngTemplateOutlet]=\\\"contentTemplate\\\" *ngIf=\\\"contentTemplate\\\"></ng-template>\\n      </div>\\n\\n      <ng-content select=\\\"kendo-dialog-actions\\\" *ngIf=\\\"!actions\\\"></ng-content>\\n      <kendo-dialog-actions *ngIf=\\\"actions\\\"\\n        [actions]=\\\"actions\\\"\\n        [layout]=\\\"actionsLayout\\\">\\n      </kendo-dialog-actions>\\n    </div>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    DialogComponent.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: LocalizationService }\n    ]; };\n    DialogComponent.propDecorators = {\n        actions: [{ type: Input }],\n        actionsLayout: [{ type: Input }],\n        autoFocusedElement: [{ type: Input }],\n        title: [{ type: Input }],\n        width: [{ type: Input }],\n        minWidth: [{ type: Input }],\n        maxWidth: [{ type: Input }],\n        height: [{ type: Input }],\n        minHeight: [{ type: Input }],\n        maxHeight: [{ type: Input }],\n        action: [{ type: Output }],\n        close: [{ type: Output }],\n        dir: [{ type: HostBinding, args: ['attr.dir',] }],\n        tabIndex: [{ type: HostBinding, args: ['attr.tabIndex',] }],\n        titlebarContent: [{ type: ContentChild, args: [DialogTitleBarComponent,] }],\n        titlebarView: [{ type: ViewChild, args: [DialogTitleBarComponent,] }],\n        actionsView: [{ type: ViewChild, args: [DialogActionsComponent,] }],\n        onComponentKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],\n        wrapperClass: [{ type: HostBinding, args: ['class.k-dialog-wrapper',] }]\n    };\n    return DialogComponent;\n}());\n\n/**\n * The base class  which will be extended by a component that is provided as content through `content`\n * ([see example]({% slug service_dialog %}#toc-passing-title-content-and-actions-as-a-single-component)).\n */\nvar DialogContentBase = /** @class */ (function () {\n    function DialogContentBase(dialog) {\n        this.dialog = dialog;\n    }\n    /**\n     * @hidden\n     */\n    DialogContentBase.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        if (this.dialogTitleBar) {\n            this.dialogTitleBar.close.subscribe(function () {\n                _this.dialog.close();\n            });\n        }\n        if (this.dialogActions) {\n            if (this.dialogActions.actions) {\n                this.dialogActions.action.subscribe(function (action) { return _this.dialog.dialog.instance.action.emit(action); });\n            }\n        }\n    };\n    DialogContentBase.propDecorators = {\n        dialogTitleBar: [{ type: ViewChild, args: [DialogTitleBarComponent,] }],\n        dialogActions: [{ type: ViewChild, args: [DialogActionsComponent,] }]\n    };\n    return DialogContentBase;\n}());\n\n/**\n * @hidden\n */\nvar DialogContainerService = /** @class */ (function () {\n    function DialogContainerService() {\n    }\n    Object.defineProperty(DialogContainerService.prototype, \"container\", {\n        get: function () {\n            return DialogContainerService.container;\n        },\n        set: function (container) {\n            DialogContainerService.container = container;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DialogContainerService.container = null;\n    DialogContainerService.decorators = [\n        { type: Injectable },\n    ];\n    return DialogContainerService;\n}());\n\n/**\n * The settings for the Dialog actions when the Dialog is opened through `DialogService`\n * ([see example]({% slug api_dialog_dialogservice %}#toc-open)).\n */\nvar DialogAction = /** @class */ (function () {\n    function DialogAction() {\n    }\n    return DialogAction;\n}());\n/**\n * Indicates that the **Close** button is clicked. Used when the results from\n * the Dialogs that are opened through `DialogService` are filtered\n * ([see example]({% slug api_dialog_dialogservice %}#toc-open)).\n */\nvar DialogCloseResult = /** @class */ (function () {\n    function DialogCloseResult() {\n    }\n    return DialogCloseResult;\n}());\n/**\n * The settings that can be used when the Dialog is opened through `DialogService`.\n * ([see example]({% slug api_dialog_dialogservice %}#toc-open)).\n */\nvar DialogSettings = /** @class */ (function () {\n    function DialogSettings() {\n    }\n    return DialogSettings;\n}());\n/**\n * Holds references to the object instance and published events of the Dialog.\n * Controls the Dialogs that were opened through the `DialogService`\n * ([see example]({% slug api_dialog_dialogservice %}#toc-open)).\n */\nvar DialogRef = /** @class */ (function () {\n    function DialogRef() {\n    }\n    return DialogRef;\n}());\n\n// tslint:disable:max-line-length\nvar DialogInjector = /** @class */ (function () {\n    function DialogInjector(getDialogRef, parentInjector) {\n        this.getDialogRef = getDialogRef;\n        this.parentInjector = parentInjector;\n    }\n    DialogInjector.prototype.get = function (token, notFoundValue) {\n        if (token === DialogRef) {\n            return this.getDialogRef();\n        }\n        return this.parentInjector.get(token, notFoundValue);\n    };\n    return DialogInjector;\n}());\n/**\n * A service for opening Dialog windows dynamically\n * ([see example]({% slug service_dialog %})).\n */\nvar DialogService = /** @class */ (function () {\n    function DialogService(\n    /**\n     * @hidden\n     */\n    resolver, containerService) {\n        this.resolver = resolver;\n        this.containerService = containerService;\n    }\n    /**\n     * Opens a Dialog window. Requires an element in the application that uses the\n     * [`kendoDialogContainer`]({% slug api_dialog_dialogcontainerdirective %}) directive.\n     * Created Dialogs will be mounted in the DOM directly after that element.\n     *\n     * @param {DialogAction} options - The options that define the Dialog.\n     * @returns {DialogRef} - A reference to the Dialog object and the convenience properties.\n     *\n     * @example\n     *\n     * ```ts-no-run\n     * _@Component({\n     *   selector: 'my-app',\n     *   template: `\n     *     <button kendoButton (click)=\"open()\">Harmless button</button>\n     *     <div kendoDialogContainer></div>\n     *   `\n     * })\n     * export class AppComponent {\n     *     constructor( private dialogService: DialogService ) {}\n     *\n     *     public open() {\n     *         var dialog = this.dialogService.open({\n     *           title: \"Please confirm\",\n     *           content: \"Are you sure?\",\n     *           actions: [\n     *             { text: \"No\" },\n     *             { text: \"Yes\", primary: true }\n     *           ]\n     *         });\n     *\n     *         dialog.result.subscribe((result) => {\n     *           if (result instanceof DialogCloseResult) {\n     *             console.log(\"close\");\n     *           } else {\n     *             console.log(\"action\", result);\n     *           }\n     *         });\n     *     }\n     * }\n     * ```\n     *\n     */\n    DialogService.prototype.open = function (options) {\n        var factory = this.resolver.resolveComponentFactory(DialogComponent);\n        var container = options.appendTo || this.containerService.container;\n        if (!container) {\n            throw new Error(\"\\nCannot attach dialog to the page.\\nAdd an element that uses the kendoDialogContainer directive, or set the 'appendTo' property.\\nSee https://www.telerik.com/kendo-angular-ui/components/dialogs/dialog/service/.\\n          \");\n        }\n        // create DialogRef to (1) pass as result, (2) provide through injector\n        var dialogRef = {\n            close: function () { },\n            content: null,\n            dialog: null,\n            result: null\n        };\n        return this.initializeDialog(options.content, factory, container, dialogRef, options);\n    };\n    DialogService.prototype.initializeDialog = function (component, factory, container, dialogRef, options) {\n        var content = this.contentFrom(component, container, dialogRef);\n        var dialog = container.createComponent(factory, undefined, undefined, content.nodes);\n        dialogRef.dialog = dialog;\n        dialog.changeDetectorRef.markForCheck();\n        // copy @Input options to dialog instance\n        this.applyOptions(dialog.instance, options);\n        // create close handler and result stream\n        var apiClose = new Subject();\n        var close = function (e) {\n            apiClose.next(e || new DialogCloseResult());\n            if (content.componentRef) {\n                content.componentRef.destroy();\n            }\n            dialog.destroy();\n        };\n        var result = merge(apiClose, dialog.instance.close, dialog.instance.action).pipe(take(1));\n        result.subscribe(close);\n        dialogRef.close = close;\n        dialogRef.result = result;\n        if (component && isDevMode()) {\n            var hasContentTitle = content.nodes[0] && content.nodes[0].length > 0;\n            var hasContentActions = content.nodes[2] && content.nodes[2].length > 0;\n            var multipleTitles = options.title && hasContentTitle;\n            var multipleActions = options.actions && hasContentActions;\n            if (component.prototype instanceof DialogContentBase) { // content component extends DialogContentBase\n                if (multipleTitles || multipleActions) {\n                    console.warn(\"\\n                    Multiple Title and/or Actions configurations detected.\\n                    When using a component as content, provide the title and actions either in the component's markup\\n                    or via the title and actions properties of the DialogSettings object, but not both.\\n                    See https://www.telerik.com/kendo-angular-ui/components/dialogs/dialog/service.md#toc-passing-title-content-and-actions-as-a-single-component'\");\n                }\n            }\n            else {\n                if (hasContentTitle || hasContentActions) {\n                    console.warn(\"\\n                    When Title and/or Actions markup is provided in content component's template,\\n                    the component needs to inherit the DialogContentBase class to ensure that close and result events are properly hooked.\\n                    See https://www.telerik.com/kendo-angular-ui/components/dialogs/dialog/service.md#toc-passing-title-content-and-actions-as-a-single-component'\");\n                }\n            }\n        }\n        return dialogRef;\n    };\n    DialogService.prototype.applyOptions = function (instance, options) {\n        instance.title = options.title;\n        instance.actions = options.actions;\n        instance.actionsLayout = options.actionsLayout || 'stretched';\n        instance.width = options.width;\n        instance.minWidth = options.minWidth;\n        instance.maxWidth = options.maxWidth;\n        instance.height = options.height;\n        instance.minHeight = options.minHeight;\n        instance.maxHeight = options.maxHeight;\n        instance.autoFocusedElement = options.autoFocusedElement;\n        instance.closeTitle = options.closeTitle;\n        if (options.content instanceof TemplateRef) {\n            instance.contentTemplate = options.content;\n        }\n    };\n    DialogService.prototype.contentFrom = function (content, container, dialogRef) {\n        var renderer = container.injector.get(Renderer2);\n        var nodes = [];\n        var titleNodes = [];\n        var actionNodes = [];\n        var componentRef = null;\n        if (typeof content === 'string') {\n            nodes = [renderer.createText(content)];\n        }\n        else if (content && !(content instanceof TemplateRef)) { // Component\n            var injector = new DialogInjector(function () { return dialogRef; }, container.injector);\n            var factory = this.resolver.resolveComponentFactory(content);\n            componentRef = container.createComponent(factory, undefined, injector);\n            titleNodes = Array.from(componentRef.location.nativeElement.querySelectorAll('kendo-dialog-titlebar'));\n            nodes = [componentRef.location.nativeElement];\n            actionNodes = Array.from(componentRef.location.nativeElement.querySelectorAll('kendo-dialog-actions'));\n            dialogRef.content = componentRef;\n        }\n        return {\n            componentRef: componentRef,\n            nodes: [\n                titleNodes,\n                nodes,\n                actionNodes // <ng-content select=\"kendo-dialog-actions\">\n            ]\n        };\n    };\n    DialogService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    DialogService.ctorParameters = function () { return [\n        { type: ComponentFactoryResolver },\n        { type: DialogContainerService, decorators: [{ type: Inject, args: [DialogContainerService,] }] }\n    ]; };\n    return DialogService;\n}());\n\n/**\n * @hidden\n */\nvar newZIndex = 10002;\n/**\n * @hidden\n */\nvar DEFAULT_OPTIONS = {\n    draggable: true,\n    height: null,\n    left: null,\n    minHeight: 100,\n    minWidth: 120,\n    position: 'absolute',\n    resizable: true,\n    state: 'default',\n    top: null,\n    width: null\n};\n/**\n * @hidden\n */\nvar createMoveStream = function (el, ev) { return function (mouseDown) {\n    return el.kendoDrag\n        .pipe(takeUntil(el.kendoRelease.pipe(tap(function () { ev.emit(); }))), map(function (_a) {\n        var pageX = _a.pageX, pageY = _a.pageY;\n        return ({\n            originalX: mouseDown.pageX,\n            originalY: mouseDown.pageY,\n            pageX: pageX,\n            pageY: pageY\n        });\n    }));\n}; };\n/**\n * @hidden\n */\nvar DragResizeService = /** @class */ (function () {\n    function DragResizeService(ngZone) {\n        this.ngZone = ngZone;\n        this.close = new EventEmitter();\n        this.focus = new EventEmitter();\n        this.change = new EventEmitter();\n        this.stateChange = new EventEmitter();\n        this.dragStart = new EventEmitter();\n        this.dragEnd = new EventEmitter();\n        this.resizeStart = new EventEmitter();\n        this.resizeEnd = new EventEmitter();\n        this.options = Object.assign({}, DEFAULT_OPTIONS);\n        this.lastAction = null;\n        this.subscriptions = new Subscription();\n        this.dragSubscription = new Subscription();\n    }\n    DragResizeService.prototype.ngOnDestroy = function () {\n        if (this.subscriptions) {\n            this.subscriptions.unsubscribe();\n        }\n        if (this.dragSubscription) {\n            this.dragSubscription.unsubscribe();\n        }\n    };\n    DragResizeService.prototype.init = function (el) {\n        var state$$1 = this.options.state;\n        var options = this.options;\n        this.window = el;\n        if (state$$1 !== 'default') {\n            this.restoreOptions = Object.assign({}, options);\n        }\n        if (state$$1 === 'minimized') {\n            options.height = 0;\n            options.minHeight = 0;\n        }\n        if (state$$1 === 'maximized') {\n            options.position = 'fixed';\n        }\n    };\n    DragResizeService.prototype.onDrag = function (el) {\n        var _this = this;\n        this.subscriptions.add(this.ngZone.runOutsideAngular(function () {\n            var startPosition;\n            var dragStarted;\n            _this.dragSubscription = el.kendoPress\n                .pipe(tap(function (ev) {\n                if (!ev.isTouch) {\n                    preventDefault(ev);\n                }\n                _this.focus.emit();\n                startPosition = _this.currentPosition();\n                dragStarted = false;\n            }), switchMap(createMoveStream(el, _this.dragEnd)))\n                .subscribe(function (_a) {\n                var pageX = _a.pageX, pageY = _a.pageY, originalX = _a.originalX, originalY = _a.originalY;\n                if (!dragStarted) {\n                    _this.ensureWidth();\n                    _this.dragStart.emit();\n                    dragStarted = true;\n                }\n                _this.handleDrag({\n                    originalX: originalX, originalY: originalY,\n                    pageX: pageX, pageY: pageY, startPosition: startPosition\n                });\n            });\n        }));\n    };\n    DragResizeService.prototype.handleDrag = function (_a) {\n        var originalX = _a.originalX, originalY = _a.originalY, pageX = _a.pageX, pageY = _a.pageY, startPosition = _a.startPosition;\n        this.options.left = startPosition.x + pageX - originalX;\n        this.options.top = startPosition.y + pageY - originalY;\n        if (this.options.state === 'minimized' && isPresent(this.restoreOptions)) {\n            this.restoreOptions.left = this.options.left;\n            this.restoreOptions.top = this.options.top;\n        }\n        this.change.emit({\n            left: startPosition.x + pageX - originalX,\n            top: startPosition.y + pageY - originalY\n        });\n    };\n    DragResizeService.prototype.onResize = function (handle, direction) {\n        var _this = this;\n        this.subscriptions.add(this.ngZone.runOutsideAngular(function () {\n            var startOffsetAndPosition;\n            var resizeStarted = false;\n            handle.kendoPress.pipe(tap(function (ev) {\n                preventDefault(ev);\n                _this.focus.emit();\n                startOffsetAndPosition = _this.currentOffsetAndPosition();\n                resizeStarted = false;\n            }), switchMap(createMoveStream(handle, _this.resizeEnd)))\n                .subscribe(function (_a) {\n                var pageX = _a.pageX, pageY = _a.pageY, originalX = _a.originalX, originalY = _a.originalY;\n                if (!resizeStarted) {\n                    _this.resizeStart.emit(direction);\n                    resizeStarted = true;\n                }\n                var deltaX = pageX - originalX;\n                var deltaY = pageY - originalY;\n                _this.handleResize(startOffsetAndPosition, direction, deltaX, deltaY);\n            });\n        }));\n    };\n    DragResizeService.prototype.handleResize = function (initial, dir, deltaX, deltaY) {\n        var _this = this;\n        var old = this.options;\n        var ev = {};\n        if (dir.indexOf('e') >= 0) {\n            var newWidth = initial.width + deltaX;\n            if (newWidth !== old.width && newWidth >= old.minWidth) {\n                ev.width = newWidth;\n            }\n        }\n        if (dir.indexOf('n') >= 0) {\n            var newHeight = initial.height - deltaY;\n            var newTop = initial.y + deltaY;\n            if (newHeight !== old.height && newHeight >= old.minHeight && newTop !== old.top) {\n                ev.height = newHeight;\n                ev.top = newTop;\n            }\n        }\n        if (dir.indexOf('s') >= 0) {\n            var newHeight = initial.height + deltaY;\n            if (newHeight !== old.height && newHeight >= old.minHeight) {\n                ev.height = newHeight;\n            }\n        }\n        if (dir.indexOf('w') >= 0) {\n            var newLeft = initial.x + deltaX;\n            var newWidth = initial.width - deltaX;\n            if (newWidth !== old.width && newWidth >= old.minWidth && newLeft !== old.left) {\n                ev.width = newWidth;\n                ev.left = newLeft;\n            }\n        }\n        if (isPresent(ev.width) || isPresent(ev.height)) {\n            OFFSET_STYLES.forEach(function (style$$1) {\n                if (isPresent(ev[style$$1])) {\n                    _this.options[style$$1] = ev[style$$1];\n                }\n            });\n            this.change.emit(ev);\n        }\n    };\n    DragResizeService.prototype.restoreAction = function () {\n        this.lastAction = 'restore';\n        this.defaultState();\n    };\n    DragResizeService.prototype.defaultState = function () {\n        if (isPresent(this.restoreOptions)) {\n            this.options = Object.assign({}, this.restoreOptions);\n        }\n        this.options.state = 'default';\n        this.stateChange.emit('default');\n    };\n    DragResizeService.prototype.storeOptions = function () {\n        this.restoreOptions = Object.assign({}, this.options);\n    };\n    DragResizeService.prototype.maximizeAction = function () {\n        this.lastAction = 'maximize';\n        this.maximizeState();\n    };\n    DragResizeService.prototype.maximizeState = function () {\n        this.storeOptions();\n        var wnd = this.windowViewPort;\n        this.options = Object.assign({}, this.options, {\n            height: wnd.height,\n            left: 0,\n            position: 'fixed',\n            state: 'maximized',\n            top: 0,\n            width: wnd.width\n        });\n        this.stateChange.emit('maximized');\n    };\n    DragResizeService.prototype.minimizeAction = function () {\n        this.lastAction = 'minimize';\n        this.minimizeState();\n    };\n    DragResizeService.prototype.minimizeState = function () {\n        this.storeOptions();\n        this.options = Object.assign({}, this.options, {\n            height: null,\n            minHeight: 0,\n            state: 'minimized'\n        });\n        this.stateChange.emit('minimized');\n    };\n    /**\n     * Handles manual changes of the 'state' property.\n     * Required to distinguish them from action clicks.\n     */\n    DragResizeService.prototype.applyManualState = function () {\n        var state$$1 = this.options.state;\n        switch (state$$1) {\n            case 'default':\n                this.clearHeight();\n                this.defaultState();\n                break;\n            case 'maximized':\n                this.clearHeight();\n                this.maximizeState();\n                break;\n            case 'minimized':\n                this.minimizeState();\n                break;\n            default:\n                break;\n        }\n    };\n    DragResizeService.prototype.closeAction = function () {\n        this.close.emit();\n    };\n    DragResizeService.prototype.ensureWidth = function () {\n        var windowOffset = offset(this.window.nativeElement);\n        if (!isPresent(this.options.width)) {\n            this.options.width = windowOffset.width;\n            this.change.emit({ width: windowOffset.width });\n        }\n    };\n    DragResizeService.prototype.clearHeight = function () {\n        if (this.options.height === 0) {\n            delete this.options.height;\n        }\n        if (this.options.minHeight === 0) {\n            delete this.options.minHeight;\n        }\n    };\n    DragResizeService.prototype.center = function () {\n        if (this.options.state === 'maximized') {\n            return;\n        }\n        var scroll = scrollPosition(this.window.nativeElement);\n        var wnd = this.windowViewPort;\n        var wrapper = offset(this.window.nativeElement);\n        var ev = {};\n        if (!isPresent(this.options.left)) {\n            this.options.left = scroll.x + Math.max(0, (wnd.width - wrapper.width) / 2);\n            ev.left = this.options.left;\n        }\n        if (!isPresent(this.options.top)) {\n            this.options.top = scroll.y + Math.max(0, (wnd.height - wrapper.height) / 2);\n            ev.top = this.options.top;\n        }\n        this.change.emit(ev);\n    };\n    DragResizeService.prototype.currentOffsetAndPosition = function () {\n        var o = this.options;\n        var off = offset(this.window.nativeElement);\n        return Object.assign({}, this.currentPosition(), {\n            height: o.height ? o.height : off.height,\n            width: o.width ? o.width : off.width\n        });\n    };\n    DragResizeService.prototype.currentPosition = function () {\n        var o = this.options;\n        if (!o.top || !o.left) {\n            this.setPosition();\n        }\n        return {\n            x: this.options.left,\n            y: this.options.top\n        };\n    };\n    DragResizeService.prototype.setPosition = function () {\n        var wrapper = positionWithScroll(this.window.nativeElement, getDocumentElement(this.window.nativeElement));\n        this.options.left = wrapper.left;\n        this.options.top = wrapper.top;\n    };\n    DragResizeService.prototype.setRestoreOption = function (style$$1, value) {\n        if (isPresent(this.restoreOptions)) {\n            this.restoreOptions[style$$1] = value;\n        }\n    };\n    Object.defineProperty(DragResizeService.prototype, \"nextPossibleZIndex\", {\n        get: function () {\n            return newZIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DragResizeService.prototype, \"nextZIndex\", {\n        get: function () {\n            return newZIndex++;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DragResizeService.prototype, \"windowViewPort\", {\n        get: function () {\n            return getWindowViewPort(this.window.nativeElement);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DragResizeService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    DragResizeService.ctorParameters = function () { return [\n        { type: NgZone }\n    ]; };\n    return DragResizeService;\n}());\n\n/**\n * @hidden\n */\nvar ResizeHandleDirective = /** @class */ (function () {\n    function ResizeHandleDirective(draggable, el, renderer, service) {\n        this.draggable = draggable;\n        this.el = el;\n        this.renderer = renderer;\n        this.service = service;\n        this.subscriptions = new Subscription();\n    }\n    Object.defineProperty(ResizeHandleDirective.prototype, \"hostClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ResizeHandleDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        this.setDisplay();\n        this.renderer.addClass(this.el.nativeElement, 'k-resize-' + this.direction);\n        this.subscriptions.add(of(this.draggable).subscribe(function (handle) {\n            _this.service.onResize(handle, _this.direction);\n        }));\n        this.subscriptions.add(this.service.resizeStart.subscribe(function (dir) {\n            if (dir !== _this.direction) {\n                _this.setDisplay('none');\n            }\n        }));\n        this.subscriptions.add(this.service.dragStart.subscribe(function () {\n            _this.setDisplay('none');\n        }));\n        this.subscriptions.add(merge(this.service.resizeEnd, this.service.dragEnd).subscribe(function () {\n            _this.setDisplay('block');\n        }));\n        this.subscriptions.add(this.service.stateChange.subscribe(function (state$$1) {\n            _this.setDisplay(state$$1 === 'default' ? 'block' : 'none');\n        }));\n    };\n    ResizeHandleDirective.prototype.ngOnDestroy = function () {\n        this.subscriptions.unsubscribe();\n    };\n    ResizeHandleDirective.prototype.setDisplay = function (value) {\n        if (value === void 0) { value = 'block'; }\n        this.renderer.setStyle(this.el.nativeElement, 'display', this.service.options.state === 'default' ? value : 'none');\n    };\n    ResizeHandleDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoWindowResizeHandle]'\n                },] },\n    ];\n    /** @nocollapse */\n    ResizeHandleDirective.ctorParameters = function () { return [\n        { type: DraggableDirective, decorators: [{ type: Host }] },\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: DragResizeService }\n    ]; };\n    ResizeHandleDirective.propDecorators = {\n        direction: [{ type: Input }],\n        hostClass: [{ type: HostBinding, args: ['class.k-resize-handle',] }]\n    };\n    return ResizeHandleDirective;\n}());\n\nvar WindowTitleBarComponent = /** @class */ (function () {\n    function WindowTitleBarComponent(el, service, ngZone) {\n        this.el = el;\n        this.ngZone = ngZone;\n        this.service = service;\n    }\n    WindowTitleBarComponent.prototype.ngOnInit = function () {\n        this.dragDirective = new DraggableDirective(this.el, this.ngZone);\n        this.dragDirective.ngOnInit();\n        if (this.isDraggable) {\n            this.subscribeDrag();\n        }\n        this.subscribeStateChange();\n    };\n    WindowTitleBarComponent.prototype.ngOnDestroy = function () {\n        this.dragDirective.ngOnDestroy();\n        this.unsubscribeDrag();\n        this.unsubscribeState();\n    };\n    /**\n     * @hidden\n     */\n    WindowTitleBarComponent.prototype.subscribeDrag = function () {\n        var _this = this;\n        this.unsubscribeDrag();\n        this.dragSubscription = of(this.dragDirective).subscribe(function (titleBar) {\n            _this.service.onDrag(titleBar);\n        });\n    };\n    /**\n     * @hidden\n     */\n    WindowTitleBarComponent.prototype.subscribeStateChange = function () {\n        var _this = this;\n        this.stateSubscription = this.service.stateChange.subscribe(function (state$$1) {\n            if (_this.service.options.draggable) {\n                if (state$$1 === 'maximized') {\n                    _this.unsubscribeDrag();\n                }\n                else {\n                    _this.subscribeDrag();\n                }\n            }\n        });\n    };\n    /**\n     * @hidden\n     */\n    WindowTitleBarComponent.prototype.unsubscribeDrag = function () {\n        if (this.dragSubscription) {\n            this.service.dragSubscription.unsubscribe();\n            this.dragSubscription.unsubscribe();\n            this.dragSubscription = null;\n        }\n    };\n    /**\n     * @hidden\n     */\n    WindowTitleBarComponent.prototype.unsubscribeState = function () {\n        if (this.stateSubscription) {\n            this.stateSubscription.unsubscribe();\n            this.stateSubscription = null;\n        }\n    };\n    Object.defineProperty(WindowTitleBarComponent.prototype, \"className\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowTitleBarComponent.prototype, \"touchAction\", {\n        get: function () {\n            if (this.isDraggable) {\n                return 'none';\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    WindowTitleBarComponent.prototype.handle = function (ev) {\n        var target = ev.target;\n        var state$$1 = this.service.options.state;\n        if (!hasClasses(target, 'k-icon') && !isFocusable(target, false) && this.service.options.resizable) {\n            if (state$$1 === 'default') {\n                this.service.maximizeAction();\n            }\n            else if (state$$1 === 'maximized') {\n                this.service.restoreAction();\n            }\n        }\n    };\n    Object.defineProperty(WindowTitleBarComponent.prototype, \"isDraggable\", {\n        get: function () {\n            var options = this.service.options;\n            return options.draggable && options.state !== 'maximized';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WindowTitleBarComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-window-titlebar',\n                    template: \"\\n    <ng-content *ngIf=\\\"!template\\\"></ng-content>\\n    <ng-template\\n      [ngTemplateOutlet]=\\\"template\\\"\\n      [ngTemplateOutletContext]=\\\"{'$implicit': service}\\\" *ngIf=\\\"template\\\">\\n    </ng-template>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    WindowTitleBarComponent.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: DragResizeService },\n        { type: NgZone }\n    ]; };\n    WindowTitleBarComponent.propDecorators = {\n        template: [{ type: Input }],\n        className: [{ type: HostBinding, args: ['class.k-window-titlebar',] }, { type: HostBinding, args: ['class.k-dialog-titlebar',] }],\n        touchAction: [{ type: HostBinding, args: ['style.touch-action',] }],\n        handle: [{ type: HostListener, args: ['dblclick', ['$event'],] }]\n    };\n    return WindowTitleBarComponent;\n}());\n\n/**\n * @hidden\n */\nvar NavigationService = /** @class */ (function () {\n    function NavigationService(window) {\n        this.window = window;\n    }\n    NavigationService.prototype.process = function (ev) {\n        var key = ev.keyCode;\n        switch (key) {\n            case Keys.up:\n            case Keys.down:\n            case Keys.left:\n            case Keys.right: {\n                ev.preventDefault();\n                this.handleArrow(key, ev);\n                break;\n            }\n            case Keys.esc:\n                this.handleEscape();\n                break;\n            default:\n                break;\n        }\n    };\n    NavigationService.prototype.handleArrow = function (key, ev) {\n        var options = this.window.options;\n        if (ev.altKey) {\n            this.handleStateChange(key, options.state);\n            return;\n        }\n        if ((ev.ctrlKey || ev.metaKey) && options.state === 'default') {\n            this.handleResize(key);\n        }\n        else {\n            this.handleDrag(key);\n        }\n    };\n    NavigationService.prototype.handleEscape = function () {\n        this.window.closeAction();\n    };\n    NavigationService.prototype.handleDrag = function (key) {\n        var options = this.window.options;\n        if (!options.draggable) {\n            return;\n        }\n        var offset$$1 = this.window.currentOffsetAndPosition();\n        var restoreOptions = this.window.restoreOptions;\n        var ev = {};\n        var delta = 10;\n        if (key === Keys.left || key === Keys.up) {\n            delta *= -1;\n        }\n        switch (key) {\n            case Keys.left:\n            case Keys.right: {\n                ev.left = offset$$1.x + delta;\n                options.left = ev.left;\n                break;\n            }\n            case Keys.up:\n            case Keys.down: {\n                ev.top = offset$$1.y + delta;\n                options.top = ev.top;\n                break;\n            }\n            default:\n                break;\n        }\n        if (options.state === 'minimized' && isPresent(restoreOptions)) {\n            restoreOptions.left = options.left;\n            restoreOptions.top = options.top;\n        }\n        this.window.change.emit(ev);\n    };\n    NavigationService.prototype.handleResize = function (key) {\n        var _this = this;\n        var options = this.window.options;\n        if (!options.resizable) {\n            return;\n        }\n        var offset$$1 = this.window.currentOffsetAndPosition();\n        var newWidth;\n        var newHeight;\n        var ev = {};\n        var delta = 10;\n        if (key === Keys.left || key === Keys.up) {\n            delta *= -1;\n        }\n        switch (key) {\n            case Keys.left:\n            case Keys.right: {\n                newWidth = offset$$1.width + delta;\n                if (newWidth !== options.width && newWidth >= options.minWidth) {\n                    ev.width = newWidth;\n                }\n                break;\n            }\n            case Keys.up:\n            case Keys.down: {\n                newHeight = offset$$1.height + delta;\n                if (newHeight !== options.height && newHeight >= options.minHeight) {\n                    ev.height = newHeight;\n                }\n                break;\n            }\n            default:\n                break;\n        }\n        if (isPresent(ev.width) || isPresent(ev.height)) {\n            OFFSET_STYLES.forEach(function (style$$1) {\n                if (isPresent(ev[style$$1])) {\n                    _this.window.options[style$$1] = ev[style$$1];\n                }\n            });\n            this.window.change.emit(ev);\n        }\n    };\n    NavigationService.prototype.handleStateChange = function (key, state$$1) {\n        if ((state$$1 === 'minimized' && key === Keys.up) ||\n            (state$$1 === 'maximized' && key === Keys.down)) {\n            this.window.restoreAction();\n            return;\n        }\n        if (state$$1 === 'default') {\n            if (key === Keys.up) {\n                this.window.maximizeAction();\n            }\n            else if (key === Keys.down) {\n                this.window.minimizeAction();\n            }\n        }\n    };\n    NavigationService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    NavigationService.ctorParameters = function () { return [\n        { type: DragResizeService }\n    ]; };\n    return NavigationService;\n}());\n\n/**\n * Represents the [Kendo UI Window component for Angular]({% slug overview_window_dialogs %}).\n */\nvar WindowComponent = /** @class */ (function () {\n    function WindowComponent(el, renderer, service, navigation, ngZone, localization) {\n        var _this = this;\n        this.el = el;\n        this.renderer = renderer;\n        this.service = service;\n        this.navigation = navigation;\n        this.ngZone = ngZone;\n        this.localization = localization;\n        /**\n         * Specifies if the content of the component is persisted in the DOM when minimized.\n         * @default false\n         */\n        this.keepContent = false;\n        /**\n         * Fires when the user starts to move the Window.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * Fires when the Window was moved by the user.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * Fires when the user starts to resize the Window.\n         */\n        this.resizeStart = new EventEmitter();\n        /**\n         * Fires when the Window was resized by the user.\n         */\n        this.resizeEnd = new EventEmitter();\n        /**\n         * Fires when the user closes the Window.\n         */\n        this.close = new EventEmitter();\n        /**\n         * Fires when the `width` property of the component was updated. The event is triggered only after the resizing\n         * has ended. The event data contains the new width. Allows a two-way binding of the `width` property.\n         */\n        this.widthChange = new EventEmitter();\n        /**\n         * Fires when the `height` property of the component was updated. The event is triggered only after the resizing\n         * has ended. The event data contains the new height. Allows a two-way binding of the `height` property.\n         */\n        this.heightChange = new EventEmitter();\n        /**\n         * Fires when the `top` property of the component was updated. The event is triggered only after the dragging\n         * and resizing have ended. The event data contains the new top offset. Allows a two-way binding of the `top` property.\n         */\n        this.topChange = new EventEmitter();\n        /**\n         * Fires when the `left` property of the component was updated. The event is triggered only after the dragging\n         * and resizing have ended. The event data contains the new left offset. Allows a two-way binding of the `left` property.\n         */\n        this.leftChange = new EventEmitter();\n        /**\n         * Fires when the `state` property of the component was updated. The event data contains the new state. Allows a\n         * two-way binding of the `state` property.\n         */\n        this.stateChange = new EventEmitter();\n        this.tabIndex = 0;\n        this.draged = false;\n        this.resized = false;\n        this.windowSubscription = new Subscription();\n        this.direction = this.localization.rtl ? 'rtl' : 'ltr';\n        this.localizationChangeSubscription = this.localization.changes\n            .subscribe(function (_a) {\n            var rtl = _a.rtl;\n            return _this.direction = rtl ? 'rtl' : 'ltr';\n        });\n        this.resizeDirections = RESIZE_DIRECTIONS;\n        this.subscribeEvents();\n    }\n    Object.defineProperty(WindowComponent.prototype, \"draggable\", {\n        get: function () {\n            return this.options.draggable;\n        },\n        /**\n         * Specifies whether the user will be able to drag the component.\n         * @default true\n         */\n        set: function (value) {\n            this.options.draggable = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"resizable\", {\n        get: function () {\n            return this.options.resizable;\n        },\n        /**\n         * Specifies whether the user will be able to resize the component.\n         * @default true\n         */\n        set: function (value) {\n            this.options.resizable = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"state\", {\n        get: function () {\n            return this.options.state;\n        },\n        /**\n         * Specifies the initial state of the component.\n         * If not specified, the value is set to `default`.\n         *\n         * The possible values are:\n         * * `minimized`\n         * * `maximized`\n         * * `default`\n         */\n        set: function (value) {\n            this.options.state = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"minWidth\", {\n        get: function () {\n            return this.options.minWidth;\n        },\n        /**\n         * Specifies the minimum width of the component.\n         * The `minWidth` property has to be set in pixels.\n         * @default 120\n         */\n        set: function (value) {\n            this.setOption('minWidth', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"minHeight\", {\n        get: function () {\n            return this.options.minHeight;\n        },\n        /**\n         * Specifies the minimum height of the Window.\n         * The `minHeight` property has to be set in pixels.\n         * @default 100\n         */\n        set: function (value) {\n            this.setOption('minHeight', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"width\", {\n        get: function () {\n            return this.options.width;\n        },\n        /**\n         * Specifies the width of the Window.\n         * The `width` property has to be set in pixels.\n         */\n        set: function (value) {\n            this.setOption('width', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"height\", {\n        get: function () {\n            return this.options.height;\n        },\n        /**\n         * Specifies the height of the Window.\n         * The `height` property has to be set in pixels.\n         */\n        set: function (value) {\n            this.setOption('height', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"top\", {\n        get: function () {\n            return this.options.top;\n        },\n        /**\n         * Specifies the initial top offset of the Window.\n         * The `top` property has to be set in pixels.\n         */\n        set: function (value) {\n            this.setOption('top', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"left\", {\n        get: function () {\n            return this.options.left;\n        },\n        /**\n         * Specifies the initial left offset of the Window.\n         * Numeric values are treated as pixels.\n         */\n        set: function (value) {\n            this.setOption('left', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"closeButtonTitle\", {\n        get: function () {\n            if (this.messages && this.messages.closeTitle) {\n                return this.messages.closeTitle;\n            }\n            return this.localization.get('closeTitle');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"restoreButtonTitle\", {\n        get: function () {\n            if (this.messages && this.messages.restoreTitle) {\n                return this.messages.restoreTitle;\n            }\n            return this.localization.get('restoreTitle');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"maximizeButtonTitle\", {\n        get: function () {\n            if (this.messages && this.messages.maximizeTitle) {\n                return this.messages.maximizeTitle;\n            }\n            return this.localization.get('maximizeTitle');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"minimizeButtonTitle\", {\n        get: function () {\n            if (this.messages && this.messages.minimizeTitle) {\n                return this.messages.minimizeTitle;\n            }\n            return this.localization.get('minimizeTitle');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"hostClasses\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WindowComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.setNextZIndex();\n        this.handleInitialFocus();\n        this.ngZone.runOutsideAngular(function () {\n            return Promise.resolve(null).then(function () { return _this.setInitialOffset(); });\n        });\n    };\n    WindowComponent.prototype.ngOnInit = function () {\n        this.renderer.removeAttribute(this.el.nativeElement, 'title');\n        this.service.init(this.el);\n    };\n    WindowComponent.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        OFFSET_STYLES.forEach(function (style$$1) {\n            if (isChanged(style$$1, changes)) {\n                _this.setStyle(style$$1, _this.options[style$$1]);\n            }\n        });\n        if (isChanged('draggable', changes)) {\n            var titleBar = isPresent(this.titleBarContent) ? this.titleBarContent : this.titleBarView;\n            if (isTruthy(changes.draggable.currentValue)) {\n                titleBar.subscribeDrag();\n            }\n            else {\n                titleBar.unsubscribeDrag();\n            }\n        }\n        if (isChanged('state', changes)) {\n            if (isPresent(this.service.lastAction)) {\n                this.service.lastAction = null;\n            }\n            else {\n                this.service.applyManualState();\n                this.updateAllOffset();\n            }\n        }\n    };\n    WindowComponent.prototype.ngOnDestroy = function () {\n        if (this.windowSubscription) {\n            this.windowSubscription.unsubscribe();\n        }\n        this.localizationChangeSubscription.unsubscribe();\n    };\n    /**\n     * Focuses the wrapper of the Window component.\n     */\n    WindowComponent.prototype.focus = function () {\n        var wrapper = this.el.nativeElement;\n        if (isPresent(wrapper)) {\n            wrapper.focus();\n        }\n    };\n    /**\n     * Brings the current Window component on top of other Window components on the page.\n     */\n    WindowComponent.prototype.bringToFront = function () {\n        this.setNextZIndex();\n    };\n    /**\n     * Manually updates the `width` or `height` option of the Window.\n     * The required style will be applied to the Window wrapper element and the\n     * corresponding property of the component instance will be updated.\n     * This method is intended to be used for sizing dynamically created components using the\n     * [`WindowService`]({% slug api_dialog_windowservice %})\n     * @param {WindowDimensionSetting} dimension - The option that will be updated\n     * @param {number} value - The value set in pixels\n     */\n    WindowComponent.prototype.setDimension = function (dimension, value) {\n        this.setOption(dimension, value);\n        this.setStyle(dimension, value);\n    };\n    /**\n     * Manually updates the `top` or `left` offset of the Window.\n     * The required style will be applied to the Window wrapper element and the\n     * corresponding property of the component instance will be updated.\n     * This method is intended to be used for positioning dynamically created components using the\n     * [`WindowService`]({% slug api_dialog_windowservice %})\n     * @param {WindowOffsetSetting} offset - The option that will be updated\n     * @param {number} value - The value set in pixels\n     */\n    WindowComponent.prototype.setOffset = function (offset$$1, value) {\n        this.setOption(offset$$1, value);\n        this.setStyle(offset$$1, value);\n    };\n    Object.defineProperty(WindowComponent.prototype, \"showDefaultTitleBar\", {\n        get: function () {\n            return !isPresent(this.titleBarContent);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"styleMinWidth\", {\n        get: function () {\n            return this.minWidth + 'px';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"styleMinHeight\", {\n        get: function () {\n            return this.minHeight + 'px';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"stylePosition\", {\n        get: function () {\n            return this.options.position;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"wrapperMaximizedClass\", {\n        get: function () {\n            return this.state === 'maximized';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WindowComponent.prototype, \"wrapperMinimizedClass\", {\n        get: function () {\n            return this.state === 'minimized';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    WindowComponent.prototype.onComponentKeydown = function (event) {\n        if (hasClasses(event.target, WINDOW_CLASSES)) {\n            this.navigation.process(event);\n        }\n    };\n    /**\n     * @hidden\n     */\n    WindowComponent.prototype.onComponentFocus = function () {\n        this.renderer.addClass(this.el.nativeElement, 'k-state-focused');\n        this.setNextZIndex();\n    };\n    /**\n     * @hidden\n     */\n    WindowComponent.prototype.onComponentBlur = function () {\n        this.renderer.removeClass(this.el.nativeElement, 'k-state-focused');\n    };\n    WindowComponent.prototype.subscribeEvents = function () {\n        var _this = this;\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.windowSubscription.add(this.service.focus.subscribe(function () {\n            _this.el.nativeElement.focus();\n        }));\n        this.windowSubscription.add(this.service.dragStart.subscribe(function () {\n            _this.draged = true;\n            _this.ngZone.run(function () {\n                _this.dragStart.emit();\n            });\n        }));\n        this.windowSubscription.add(this.service.dragEnd.subscribe(function () {\n            if (_this.draged) {\n                _this.draged = false;\n                _this.ngZone.run(function () {\n                    _this.dragEnd.emit();\n                });\n            }\n        }));\n        this.windowSubscription.add(this.service.close.subscribe(function () {\n            _this.close.emit();\n        }));\n        this.windowSubscription.add(this.service.resizeStart.subscribe(function () {\n            _this.resized = true;\n            _this.ngZone.run(function () {\n                _this.resizeStart.emit();\n            });\n        }));\n        this.windowSubscription.add(this.service.resizeEnd.subscribe(function () {\n            if (_this.resized) {\n                _this.resized = false;\n                _this.ngZone.run(function () {\n                    _this.resizeEnd.emit();\n                });\n            }\n        }));\n        this.windowSubscription.add(this.service.change.subscribe(function (ev) {\n            OFFSET_STYLES.forEach(function (style$$1) {\n                if (isPresent(ev[style$$1])) {\n                    _this.setStyle(style$$1, ev[style$$1]);\n                    if (_this.state !== 'maximized') {\n                        var emitter_1 = _this[style$$1 + 'Change'];\n                        if (emitter_1.observers.length) {\n                            _this.ngZone.run(function () {\n                                emitter_1.emit(ev[style$$1]);\n                            });\n                        }\n                    }\n                }\n            });\n        }));\n        this.windowSubscription.add(this.service.stateChange.subscribe(function (state$$1) {\n            if (isPresent(_this.service.lastAction)) {\n                _this.updateAllOffset();\n                _this.stateChange.emit(state$$1);\n            }\n        }));\n    };\n    WindowComponent.prototype.setNextZIndex = function () {\n        var currentZIndex = this.el.nativeElement.style['z-index'];\n        var nextPossibleZIndex = this.service.nextPossibleZIndex;\n        if (!currentZIndex || (nextPossibleZIndex - currentZIndex > 1)) {\n            this.renderer.setStyle(this.el.nativeElement, \"z-index\", this.service.nextZIndex);\n        }\n    };\n    WindowComponent.prototype.setInitialOffset = function () {\n        if (this.state !== 'maximized') {\n            this.updateAllOffset();\n            if (!isPresent(this.left) || !isPresent(this.top)) {\n                this.service.center();\n            }\n        }\n        else {\n            var viewPort = this.service.windowViewPort;\n            this.setStyle('width', viewPort.width);\n            this.setStyle('height', viewPort.height);\n            this.setStyle('top', 0);\n            this.setStyle('left', 0);\n        }\n    };\n    WindowComponent.prototype.updateAllOffset = function () {\n        var _this = this;\n        OFFSET_STYLES.forEach(function (style$$1) {\n            if (isPresent(_this[style$$1])) {\n                _this.setStyle(style$$1, _this[style$$1]);\n            }\n            else {\n                _this.removeStyle(style$$1);\n            }\n        });\n    };\n    WindowComponent.prototype.setStyle = function (style$$1, value) {\n        this.renderer.setStyle(this.el.nativeElement, style$$1, value + 'px');\n    };\n    WindowComponent.prototype.removeStyle = function (style$$1) {\n        this.renderer.removeStyle(this.el.nativeElement, style$$1);\n    };\n    Object.defineProperty(WindowComponent.prototype, \"options\", {\n        get: function () {\n            return this.service.options;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WindowComponent.prototype.setOption = function (style$$1, value) {\n        if (typeof value !== 'number' && typeof value !== 'string') {\n            return;\n        }\n        var parsedValue = (typeof value === 'number') ? value : parseInt(value, 10);\n        this.options[style$$1] = parsedValue;\n        this.service.setRestoreOption(style$$1, parsedValue);\n    };\n    WindowComponent.prototype.handleInitialFocus = function () {\n        var wrapper = this.el.nativeElement;\n        if (this.autoFocusedElement) {\n            var initiallyFocusedElement = wrapper.querySelector(this.autoFocusedElement);\n            if (initiallyFocusedElement) {\n                initiallyFocusedElement.focus();\n            }\n        }\n        else {\n            this.focus();\n        }\n    };\n    WindowComponent.decorators = [\n        { type: Component, args: [{\n                    exportAs: 'kendoWindow',\n                    providers: [\n                        DragResizeService,\n                        NavigationService,\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.window'\n                        }\n                    ],\n                    selector: 'kendo-window',\n                    template: \"\\n        <ng-container kendoWindowLocalizedMessages\\n            i18n-closeTitle=\\\"kendo.window.closeTitle|The title of the close button\\\"\\n            closeTitle=\\\"Close\\\"\\n\\n            i18n-restoreTitle=\\\"kendo.window.restoreTitle|The title of the restore button\\\"\\n            restoreTitle=\\\"Restore\\\"\\n\\n            i18n-maximizeTitle=\\\"kendo.window.maximizeTitle|The title of the maximize button\\\"\\n            maximizeTitle=\\\"Maximize\\\"\\n\\n            i18n-minimizeTitle=\\\"kendo.window.minimizeTitle|The title of the minimize button\\\"\\n            minimizeTitle=\\\"Minimize\\\"\\n        >\\n        <ng-container>\\n\\n        <kendo-window-titlebar *ngIf=\\\"showDefaultTitleBar\\\" [template]=\\\"titleBarTemplate\\\">\\n            <div class=\\\"k-window-title\\\">{{ title }}</div>\\n            <div class=\\\"k-window-actions\\\">\\n                <button kendoWindowMinimizeAction  [attr.title]=\\\"minimizeButtonTitle\\\" [attr.aria-label]=\\\"minimizeButtonTitle\\\"></button>\\n                <button kendoWindowMaximizeAction [attr.title]=\\\"maximizeButtonTitle\\\" [attr.aria-label]=\\\"maximizeButtonTitle\\\"></button>\\n                <button kendoWindowRestoreAction [attr.title]=\\\"restoreButtonTitle\\\" [attr.aria-label]=\\\"restoreButtonTitle\\\"></button>\\n                <button kendoWindowCloseAction [attr.title]=\\\"closeButtonTitle\\\" [attr.aria-label]=\\\"closeButtonTitle\\\"></button>\\n            </div>\\n        </kendo-window-titlebar>\\n        <ng-content select=\\\"kendo-window-titlebar\\\" *ngIf=\\\"!showDefaultTitleBar\\\"></ng-content>\\n\\n        <div *ngIf=\\\"state !== 'minimized' || keepContent\\\"\\n            [hidden]=\\\"state === 'minimized' && keepContent\\\"\\n            class=\\\"k-content k-window-content\\\"\\n        >\\n            <ng-content *ngIf=\\\"!contentTemplate\\\"></ng-content>\\n            <ng-template [ngTemplateOutlet]=\\\"contentTemplate\\\" *ngIf=\\\"contentTemplate\\\"></ng-template>\\n        </div>\\n\\n        <ng-template [ngIf]='resizable'>\\n            <div *ngFor='let dir of resizeDirections'\\n                [direction]=\\\"dir\\\"\\n                kendoWindowResizeHandle\\n                kendoDraggable>\\n            </div>\\n        </ng-template>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    WindowComponent.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: DragResizeService },\n        { type: NavigationService },\n        { type: NgZone },\n        { type: LocalizationService }\n    ]; };\n    WindowComponent.propDecorators = {\n        autoFocusedElement: [{ type: Input }],\n        title: [{ type: Input }],\n        draggable: [{ type: Input }],\n        resizable: [{ type: Input }],\n        keepContent: [{ type: Input }],\n        state: [{ type: Input }],\n        minWidth: [{ type: Input }],\n        minHeight: [{ type: Input }],\n        width: [{ type: Input }],\n        height: [{ type: Input }],\n        top: [{ type: Input }],\n        left: [{ type: Input }],\n        dragStart: [{ type: Output }],\n        dragEnd: [{ type: Output }],\n        resizeStart: [{ type: Output }],\n        resizeEnd: [{ type: Output }],\n        close: [{ type: Output }],\n        widthChange: [{ type: Output }],\n        heightChange: [{ type: Output }],\n        topChange: [{ type: Output }],\n        leftChange: [{ type: Output }],\n        stateChange: [{ type: Output }],\n        tabIndex: [{ type: HostBinding, args: ['attr.tabIndex',] }],\n        hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-window',] }],\n        dir: [{ type: HostBinding, args: ['attr.dir',] }],\n        titleBarView: [{ type: ViewChild, args: [WindowTitleBarComponent,] }],\n        titleBarContent: [{ type: ContentChild, args: [WindowTitleBarComponent,] }],\n        resizeHandles: [{ type: ViewChildren, args: [ResizeHandleDirective,] }],\n        styleMinWidth: [{ type: HostBinding, args: ['style.minWidth',] }],\n        styleMinHeight: [{ type: HostBinding, args: ['style.minHeight',] }],\n        stylePosition: [{ type: HostBinding, args: ['style.position',] }],\n        wrapperMaximizedClass: [{ type: HostBinding, args: ['class.k-window-maximized',] }],\n        wrapperMinimizedClass: [{ type: HostBinding, args: ['class.k-window-minimized',] }],\n        onComponentKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],\n        onComponentFocus: [{ type: HostListener, args: ['focus',] }],\n        onComponentBlur: [{ type: HostListener, args: ['blur',] }]\n    };\n    return WindowComponent;\n}());\n\nvar WindowMaximizeActionDirective = /** @class */ (function (_super) {\n    __extends(WindowMaximizeActionDirective, _super);\n    function WindowMaximizeActionDirective(el, renderer, _service, localization, ngZone) {\n        var _this = _super.call(this, el, renderer, null, localization, ngZone) || this;\n        _this.buttonType = 'button';\n        _this.window = _service;\n        _this.look = 'bare';\n        _this.icon = 'window-maximize';\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    WindowMaximizeActionDirective.prototype.onClick = function () {\n        if (!this.isDisabled) {\n            this.window.maximizeAction();\n        }\n    };\n    Object.defineProperty(WindowMaximizeActionDirective.prototype, \"visible\", {\n        get: function () {\n            return this.window.options.state === 'default' ? 'inline-flex' : 'none';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WindowMaximizeActionDirective.decorators = [\n        { type: Directive, args: [{\n                    exportAs: 'kendoWindowMaximizeAction',\n                    providers: [\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.button'\n                        }\n                    ],\n                    selector: 'button[kendoWindowMaximizeAction]' // tslint:disable-line\n                },] },\n    ];\n    /** @nocollapse */\n    WindowMaximizeActionDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: DragResizeService, decorators: [{ type: Optional }] },\n        { type: LocalizationService },\n        { type: NgZone }\n    ]; };\n    WindowMaximizeActionDirective.propDecorators = {\n        window: [{ type: Input }],\n        buttonType: [{ type: HostBinding, args: ['attr.type',] }],\n        onClick: [{ type: HostListener, args: ['click',] }],\n        visible: [{ type: HostBinding, args: ['style.display',] }]\n    };\n    return WindowMaximizeActionDirective;\n}(Button));\n\nvar WindowMinimizeActionDirective = /** @class */ (function (_super) {\n    __extends(WindowMinimizeActionDirective, _super);\n    function WindowMinimizeActionDirective(el, renderer, _service, localization, ngZone) {\n        var _this = _super.call(this, el, renderer, null, localization, ngZone) || this;\n        _this.buttonType = 'button';\n        _this.window = _service;\n        _this.look = 'bare';\n        _this.icon = 'window-minimize';\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    WindowMinimizeActionDirective.prototype.onClick = function () {\n        if (!this.isDisabled) {\n            this.window.minimizeAction();\n        }\n    };\n    Object.defineProperty(WindowMinimizeActionDirective.prototype, \"visible\", {\n        get: function () {\n            return this.window.options.state === 'default' ? 'inline-flex' : 'none';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WindowMinimizeActionDirective.decorators = [\n        { type: Directive, args: [{\n                    exportAs: 'kendoWindowMinimizeAction',\n                    providers: [\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.button'\n                        }\n                    ],\n                    selector: 'button[kendoWindowMinimizeAction]' // tslint:disable-line\n                },] },\n    ];\n    /** @nocollapse */\n    WindowMinimizeActionDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: DragResizeService, decorators: [{ type: Optional }] },\n        { type: LocalizationService },\n        { type: NgZone }\n    ]; };\n    WindowMinimizeActionDirective.propDecorators = {\n        window: [{ type: Input }],\n        buttonType: [{ type: HostBinding, args: ['attr.type',] }],\n        onClick: [{ type: HostListener, args: ['click',] }],\n        visible: [{ type: HostBinding, args: ['style.display',] }]\n    };\n    return WindowMinimizeActionDirective;\n}(Button));\n\nvar WindowCloseActionDirective = /** @class */ (function (_super) {\n    __extends(WindowCloseActionDirective, _super);\n    function WindowCloseActionDirective(el, renderer, _service, localization, ngZone) {\n        var _this = _super.call(this, el, renderer, null, localization, ngZone) || this;\n        _this.buttonType = 'button';\n        _this.window = _service;\n        _this.look = 'bare';\n        _this.icon = 'close';\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    WindowCloseActionDirective.prototype.onClick = function () {\n        if (!this.isDisabled) {\n            this.window.closeAction();\n        }\n    };\n    WindowCloseActionDirective.decorators = [\n        { type: Directive, args: [{\n                    exportAs: 'kendoWindowCloseAction',\n                    providers: [\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.button'\n                        }\n                    ],\n                    selector: 'button[kendoWindowCloseAction]' // tslint:disable-line\n                },] },\n    ];\n    /** @nocollapse */\n    WindowCloseActionDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: DragResizeService, decorators: [{ type: Optional }] },\n        { type: LocalizationService },\n        { type: NgZone }\n    ]; };\n    WindowCloseActionDirective.propDecorators = {\n        window: [{ type: Input }],\n        buttonType: [{ type: HostBinding, args: ['attr.type',] }],\n        onClick: [{ type: HostListener, args: ['click',] }]\n    };\n    return WindowCloseActionDirective;\n}(Button));\n\nvar WindowRestoreActionDirective = /** @class */ (function (_super) {\n    __extends(WindowRestoreActionDirective, _super);\n    function WindowRestoreActionDirective(el, renderer, _service, localization, ngZone) {\n        var _this = _super.call(this, el, renderer, null, localization, ngZone) || this;\n        _this.buttonType = 'button';\n        _this.window = _service;\n        _this.look = 'bare';\n        _this.icon = 'window-restore';\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    WindowRestoreActionDirective.prototype.onClick = function () {\n        if (!this.isDisabled) {\n            this.window.restoreAction();\n        }\n    };\n    Object.defineProperty(WindowRestoreActionDirective.prototype, \"visible\", {\n        get: function () {\n            return this.window.options.state === 'default' ? 'none' : 'inline-flex';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WindowRestoreActionDirective.decorators = [\n        { type: Directive, args: [{\n                    exportAs: 'kendoWindowRestoreAction',\n                    providers: [\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.button'\n                        }\n                    ],\n                    selector: 'button[kendoWindowRestoreAction]' // tslint:disable-line\n                },] },\n    ];\n    /** @nocollapse */\n    WindowRestoreActionDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: DragResizeService, decorators: [{ type: Optional }] },\n        { type: LocalizationService },\n        { type: NgZone }\n    ]; };\n    WindowRestoreActionDirective.propDecorators = {\n        window: [{ type: Input }],\n        buttonType: [{ type: HostBinding, args: ['attr.type',] }],\n        onClick: [{ type: HostListener, args: ['click',] }],\n        visible: [{ type: HostBinding, args: ['style.display',] }]\n    };\n    return WindowRestoreActionDirective;\n}(Button));\n\n/**\n * The settings for the Window actions when the Window is opened through `WindowService`\n * ([see example]({% slug api_dialog_windowservice %}#toc-open)).\n */\nvar WindowSettings = /** @class */ (function () {\n    function WindowSettings() {\n    }\n    return WindowSettings;\n}());\n/**\n * Indicates that the **Close** button of a Window that is opened through `WindowService` is clicked.\n */\nvar WindowCloseResult = /** @class */ (function () {\n    function WindowCloseResult() {\n    }\n    return WindowCloseResult;\n}());\n/**\n * Holds references to the object instance of the Window.\n * Controls the Windows that were opened through `WindowService`\n * ([see example]({% slug api_dialog_windowservice %}#toc-open)).\n */\nvar WindowRef = /** @class */ (function () {\n    function WindowRef() {\n    }\n    return WindowRef;\n}());\n\n/**\n * @hidden\n */\nvar WindowContainerService = /** @class */ (function () {\n    function WindowContainerService() {\n    }\n    Object.defineProperty(WindowContainerService.prototype, \"container\", {\n        get: function () {\n            return WindowContainerService.container;\n        },\n        set: function (container) {\n            WindowContainerService.container = container;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WindowContainerService.container = null;\n    WindowContainerService.decorators = [\n        { type: Injectable },\n    ];\n    return WindowContainerService;\n}());\n\nvar WindowInjector = /** @class */ (function () {\n    function WindowInjector(getWindowRef, parentInjector) {\n        this.getWindowRef = getWindowRef;\n        this.parentInjector = parentInjector;\n    }\n    WindowInjector.prototype.get = function (token, notFoundValue) {\n        if (token === WindowRef) {\n            return this.getWindowRef();\n        }\n        return this.parentInjector.get(token, notFoundValue);\n    };\n    return WindowInjector;\n}());\n/**\n * A service for opening Windows dynamically\n * ([see example]({% slug service_window %})).\n */\nvar WindowService = /** @class */ (function () {\n    function WindowService(\n    /**\n     * @hidden\n     */\n    resolver, containerService) {\n        this.resolver = resolver;\n        this.containerService = containerService;\n    }\n    /**\n     * Opens a Window component.\n     *\n     * @param {WindowSettings} settings - The settings that define the Window.\n     * @returns {WindowRef} - A reference to the Window object.\n     *\n     * @example\n     *\n     * ```ts-no-run\n     * _@Component({\n     *   selector: 'my-app',\n     *   template: `\n     *     <button kendoButton (click)=\"open()\">Open window</button>\n     *     <div kendoWindowContainer></div>\n     *   `\n     * })\n     * export class AppComponent {\n     *     constructor( private windowService: WindowService ) {}\n     *\n     *     public open() {\n     *         var window = this.windowService.open({\n     *           title: \"My window\",\n     *           content: \"My content!\"\n     *         });\n     *\n     *         window.result.subscribe((result) => {\n     *           if (result instanceof WindowCloseResult) {\n     *             console.log(\"Window was closed\");\n     *           }\n     *         });\n     *     }\n     * }\n     * ```\n     *\n     */\n    WindowService.prototype.open = function (settings) {\n        var factory = this.resolver.resolveComponentFactory(WindowComponent);\n        var container = settings.appendTo || this.containerService.container;\n        if (!container) {\n            throw new Error(\"Cannot attach window to the page.\\n                Add an element that uses the kendoWindowContainer directive, or set the 'appendTo' property.\\n                See https://www.telerik.com/kendo-angular-ui/components/dialogs/window/service/\\n            \");\n        }\n        var windowRef = {\n            close: function () { },\n            content: null,\n            result: null,\n            window: null\n        };\n        var content = this.contentFrom(settings.content, container, windowRef);\n        var window = container.createComponent(factory, undefined, undefined, content.nodes);\n        windowRef.window = window;\n        this.applyOptions(window.instance, settings);\n        var apiClose = new Subject();\n        var close = function (e) {\n            apiClose.next(e || new WindowCloseResult());\n            if (content.componentRef) {\n                content.componentRef.destroy();\n            }\n            window.destroy();\n        };\n        var result = merge(apiClose, window.instance.close).pipe(take(1));\n        result.subscribe(close);\n        windowRef.close = close;\n        windowRef.result = result;\n        window.changeDetectorRef.markForCheck();\n        return windowRef;\n    };\n    WindowService.prototype.applyOptions = function (instance, options) {\n        if (isPresent(options.title)) {\n            instance.title = options.title;\n        }\n        if (isPresent(options.keepContent)) {\n            instance.keepContent = options.keepContent;\n        }\n        if (isPresent(options.width)) {\n            instance.width = options.width;\n        }\n        if (isPresent(options.minWidth)) {\n            instance.minWidth = options.minWidth;\n        }\n        if (isPresent(options.height)) {\n            instance.height = options.height;\n        }\n        if (isPresent(options.minHeight)) {\n            instance.minHeight = options.minHeight;\n        }\n        if (isPresent(options.left)) {\n            instance.left = options.left;\n        }\n        if (isPresent(options.top)) {\n            instance.top = options.top;\n        }\n        if (isPresent(options.draggable)) {\n            instance.draggable = options.draggable;\n        }\n        if (isPresent(options.resizable)) {\n            instance.resizable = options.resizable;\n        }\n        if (isPresent(options.messages && options.messages.closeTitle)) {\n            instance.messages.closeTitle = options.messages.closeTitle;\n        }\n        if (isPresent(options.messages && options.messages.restoreTitle)) {\n            instance.messages.restoreTitle = options.messages.restoreTitle;\n        }\n        if (isPresent(options.messages && options.messages.maximizeTitle)) {\n            instance.messages.maximizeTitle = options.messages.maximizeTitle;\n        }\n        if (isPresent(options.messages && options.messages.minimizeTitle)) {\n            instance.messages.minimizeTitle = options.messages.minimizeTitle;\n        }\n        if (isPresent(options.autoFocusedElement)) {\n            instance.autoFocusedElement = options.autoFocusedElement;\n        }\n        if (isPresent(options.state)) {\n            instance.state = options.state;\n            if (options.state === 'minimized') {\n                instance.keepContent = true;\n            }\n        }\n        if (options.content instanceof TemplateRef) {\n            instance.contentTemplate = options.content;\n        }\n        if (options.titleBarContent instanceof TemplateRef) {\n            instance.titleBarTemplate = options.titleBarContent;\n        }\n    };\n    WindowService.prototype.contentFrom = function (content, container, windowRef) {\n        var renderer = container.injector.get(Renderer2);\n        var nodes = [];\n        var componentRef = null;\n        if (typeof content === 'string') {\n            nodes = [renderer.createText(content)];\n        }\n        else if (content && !(content instanceof TemplateRef)) {\n            var injector = new WindowInjector(function () { return windowRef; }, container.injector);\n            var factory = this.resolver.resolveComponentFactory(content);\n            componentRef = container.createComponent(factory, undefined, injector);\n            nodes = [componentRef.location.nativeElement];\n            windowRef.content = componentRef;\n        }\n        return {\n            componentRef: componentRef,\n            nodes: [\n                [],\n                nodes // Content\n            ]\n        };\n    };\n    WindowService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    WindowService.ctorParameters = function () { return [\n        { type: ComponentFactoryResolver },\n        { type: WindowContainerService, decorators: [{ type: Inject, args: [WindowContainerService,] }] }\n    ]; };\n    return WindowService;\n}());\n\n/**\n * Provides an insertion point for the Dialogs which are created through the\n * Dialog service ([see example]({% slug api_dialog_dialogservice %}#toc-open)).\n * Created Dialogs will be mounted after that element.\n *\n * @example\n * ```html-no-run\n * <div kendoDialogContainer></div>\n * ```\n */\nvar DialogContainerDirective = /** @class */ (function () {\n    function DialogContainerDirective(container, service) {\n        service.container = container;\n    }\n    DialogContainerDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDialogContainer]'\n                },] },\n    ];\n    /** @nocollapse */\n    DialogContainerDirective.ctorParameters = function () { return [\n        { type: ViewContainerRef },\n        { type: DialogContainerService }\n    ]; };\n    return DialogContainerDirective;\n}());\n\n/**\n * @hidden\n */\nvar Messages = /** @class */ (function (_super) {\n    __extends(Messages, _super);\n    function Messages() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Messages.propDecorators = {\n        closeTitle: [{ type: Input }],\n        restoreTitle: [{ type: Input }],\n        maximizeTitle: [{ type: Input }],\n        minimizeTitle: [{ type: Input }]\n    };\n    return Messages;\n}(ComponentMessages));\n\n/**\n * @hidden\n */\nvar LocalizedMessagesDirective = /** @class */ (function (_super) {\n    __extends(LocalizedMessagesDirective, _super);\n    function LocalizedMessagesDirective(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    LocalizedMessagesDirective.decorators = [\n        { type: Directive, args: [{\n                    providers: [\n                        {\n                            provide: Messages,\n                            useExisting: forwardRef(function () { return LocalizedMessagesDirective; })\n                        }\n                    ],\n                    selector: \"\\n    [kendoDialogTitleBarLocalizedMessages],\\n    [kendoWindowLocalizedMessages]\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    LocalizedMessagesDirective.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return LocalizedMessagesDirective;\n}(Messages));\n\n/**\n * Custom component messages override default component messages\n * ([see example]({% slug globalization_dialogs %}#toc-localization)).\n */\nvar CustomMessagesComponent = /** @class */ (function (_super) {\n    __extends(CustomMessagesComponent, _super);\n    function CustomMessagesComponent(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    Object.defineProperty(CustomMessagesComponent.prototype, \"override\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CustomMessagesComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: Messages,\n                            useExisting: forwardRef(function () { return CustomMessagesComponent; }) // tslint:disable-line:no-forward-ref\n                        }\n                    ],\n                    selector: 'kendo-dialog-messages, kendo-window-messages',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    CustomMessagesComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return CustomMessagesComponent;\n}(Messages));\n\n/**\n * @hidden\n */\nvar SHARED_DIRECTIVES = [\n    DialogActionsComponent,\n    CustomMessagesComponent,\n    LocalizedMessagesDirective\n];\n/**\n * @hidden\n */\nvar SharedModule = /** @class */ (function () {\n    function SharedModule() {\n    }\n    SharedModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [SHARED_DIRECTIVES],\n                    exports: [SHARED_DIRECTIVES, CommonModule],\n                    imports: [CommonModule]\n                },] },\n    ];\n    return SharedModule;\n}());\n\n/**\n * @hidden\n */\nvar DIALOG_DIRECTIVES = [\n    DialogComponent,\n    DialogTitleBarComponent\n];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Dialog component that includes all Dialog components and directives.\n * Imports `DialogModule` into the [root module]({{ site.data.urls.angular['ngmodules'] }}#angular-modularity)\n * of your application or into any other sub-module that will use the Dialog component.\n *\n * @example\n * ```ts-no-run\n * import { NgModule } from '@angular/core';\n * import { BrowserModule } from '@angular/platform-browser';\n * import { DialogModule } from '@progress/kendo-angular-dialog';\n * import { AppComponent } from './app.component';\n *\n * _@NgModule({\n *     bootstrap:    [AppComponent],\n *     declarations: [AppComponent],\n *     imports:      [BrowserModule, DialogModule]\n * })\n * export class AppModule {\n * }\n * ```\n */\nvar DialogModule = /** @class */ (function () {\n    function DialogModule() {\n    }\n    DialogModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [DIALOG_DIRECTIVES, DialogContainerDirective],\n                    entryComponents: [DIALOG_DIRECTIVES],\n                    exports: [DIALOG_DIRECTIVES, SHARED_DIRECTIVES, DialogContainerDirective],\n                    imports: [SharedModule],\n                    providers: [DialogContainerService, DialogService]\n                },] },\n    ];\n    return DialogModule;\n}());\n\n/**\n * Provides an insertion point for the Windows which are created through the\n * Window service ([see example]({% slug api_dialog_windowservice %}#toc-open)).\n * Created Windows will be mounted after that element.\n *\n * @example\n * ```html-no-run\n * <div kendoWindowContainer></div>\n * ```\n */\nvar WindowContainerDirective = /** @class */ (function () {\n    function WindowContainerDirective(container, service) {\n        service.container = container;\n    }\n    WindowContainerDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoWindowContainer]'\n                },] },\n    ];\n    /** @nocollapse */\n    WindowContainerDirective.ctorParameters = function () { return [\n        { type: ViewContainerRef },\n        { type: WindowContainerService }\n    ]; };\n    return WindowContainerDirective;\n}());\n\nvar WINDOW_DIRECTIVES = [\n    ResizeHandleDirective,\n    WindowComponent,\n    WindowTitleBarComponent,\n    WindowCloseActionDirective,\n    WindowMinimizeActionDirective,\n    WindowMaximizeActionDirective,\n    WindowRestoreActionDirective\n];\nvar ENTRY_COMPONENTS = [\n    WindowComponent,\n    WindowTitleBarComponent\n];\nvar exportedModules = [\n    WindowComponent,\n    WindowCloseActionDirective,\n    WindowMinimizeActionDirective,\n    WindowMaximizeActionDirective,\n    WindowRestoreActionDirective,\n    WindowTitleBarComponent\n];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Window component. Imports `WindowModule` into the\n * [root module]({{ site.data.urls.angular['ngmodules'] }}#angular-modularity)\n * of your application or into any other sub-module that will use the Window component.\n *\n * @example\n * ```ts-no-run\n * import { NgModule } from '@angular/core';\n * import { BrowserModule } from '@angular/platform-browser';\n * import { WindowModule } from '@progress/kendo-angular-window';\n * import { AppComponent } from './app.component';\n *\n * _@NgModule({\n *     bootstrap:    [AppComponent],\n *     declarations: [AppComponent],\n *     imports:      [BrowserModule, WindowModule]\n * })\n * export class AppModule {\n * }\n * ```\n */\nvar WindowModule = /** @class */ (function () {\n    function WindowModule() {\n    }\n    WindowModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [WINDOW_DIRECTIVES, WindowContainerDirective],\n                    entryComponents: [ENTRY_COMPONENTS],\n                    exports: [exportedModules, SHARED_DIRECTIVES, WindowContainerDirective],\n                    imports: [SharedModule, DraggableModule],\n                    providers: [WindowContainerService, WindowService]\n                },] },\n    ];\n    return WindowModule;\n}());\n\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Dialogs components.\n *\n * @example\n *\n * ```ts-no-run\n * import { DialogsModule } from '@progress/kendo-angular-dialog';\n *\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { NgModule } from '@angular/core';\n *\n * import { AppComponent } from './app.component';\n *\n * _@NgModule({\n *     declarations: [AppComponent],\n *     imports:      [BrowserModule, DialogsModule],\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nvar DialogsModule = /** @class */ (function () {\n    function DialogsModule() {\n    }\n    DialogsModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [DialogModule, WindowModule]\n                },] },\n    ];\n    return DialogsModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DIALOG_DIRECTIVES, DialogContainerDirective, DialogContainerService, CustomMessagesComponent, DIALOG_LOCALIZATION_SERVICE, LocalizedMessagesDirective, Messages, TitleBarLocalizationService, SHARED_DIRECTIVES, SharedModule, DragResizeService, NavigationService, WindowContainerDirective, WindowContainerService, ResizeHandleDirective, DialogComponent, DialogTitleBarComponent, DialogContentBase, DialogActionsComponent, DialogService, DialogCloseResult, DialogRef, DialogSettings, DialogAction, WindowComponent, WindowTitleBarComponent, WindowMaximizeActionDirective, WindowMinimizeActionDirective, WindowCloseActionDirective, WindowRestoreActionDirective, WindowSettings, WindowRef, WindowCloseResult, WindowService, DialogModule, WindowModule, DialogsModule };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyCM,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0CH,AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8UA,AAkCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;;;;;;;;;;;;;;;4CAoBsC;;;;;gDAGtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgNA,AAGA;;;;;;;;;;;;;kCAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA+UF,AAGD;;;;;;;;;uEAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkDH,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA0GC,AAMD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwhBH,AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA+CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA4BC,AAaD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA4BC,AAaD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAcA;;;;;;;;;;;;;;;;;;;;;MAqBA,AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA4BC,AAaD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4CAgDsC;;;;;gDAGtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgLA,AAGA;;;;;;;;;;;;;kCAKG;;;;;;;;;;;;;;;;;KAiBJ,AAKC;;;;;;;;;;;;;mHAKG;;;;;;;;;;;;;;;;;;;;mEAiBH;;;;;;;;;;;;;KAaD,AAWC;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;;;;;;OAqBF,AAYD;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;;KAiBJ;;;;;;;;;;;;;;;;;gDAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAmCD;;;;;;;;;;;;;;;;;;;;gDASC;;;;;;;;;;;;;;;;;KAiBD,AAKC;;;;;;;;;;;;;mHAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAiDJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDASC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA+BD;;;;;;;;;;;gDAKC;;;;;;;;;"}