{"version":3,"file":"dialog.component.d.ts","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-dialog/dist/es2015/dialog/dialog.component.d.ts"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { AfterContentInit, AfterViewInit, EventEmitter, OnInit, OnDestroy, ElementRef, TemplateRef, Renderer2 } from '@angular/core';\nimport { DialogActionsComponent } from './dialog-actions.component';\nimport { DialogTitleBarComponent } from './dialog-titlebar.component';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { ActionsLayout } from '../common/actions-layout';\nimport { DialogAction } from './dialog-settings';\n/**\n * Represents the [Kendo UI Dialog component for Angular]({% slug overview_dialog_dialogs %}).\n */\nexport declare class DialogComponent implements AfterContentInit, AfterViewInit, OnInit, OnDestroy {\n    private _elRef;\n    private _renderer;\n    /**\n     * Specifies the action buttons that will be rendered.\n     */\n    actions: DialogAction[];\n    /**\n     * Specifies the layout of the action buttons in the Dialog.\n     * This option is only applicable if the action buttons are specified through the `actions` options.\n     *\n     * @default 'stretched'\n     */\n    actionsLayout: ActionsLayout;\n    /**\n     * Specifies the query selector used to set the initial focus.\n     */\n    autoFocusedElement: string;\n    /**\n     * Specifies the text that is rendered in the title bar.\n     */\n    title: string;\n    /**\n     * Specifies the width of the Dialog.\n     * A numeric value sets the width in pixels.\n     * A string value sets the width in arbitrary units&mdash;for example, `50%`.\n     */\n    width: number | string;\n    /**\n     * Specifies the minimum width of the Dialog.\n     * A numeric value sets the minimum width in pixels.\n     * A string value sets the minimum width in arbitrary units&mdash;for example, `50%`.\n     */\n    minWidth: number | string;\n    /**\n     * Specifies the maximum width of the Dialog.\n     * A numeric value sets the maximum width in pixels.\n     * A string value sets the maximum width in arbitrary units&mdash;for example, `50%`.\n     */\n    maxWidth: number | string;\n    /**\n     * Specifies the height of the Dialog.\n     * A numeric value sets the height in pixels.\n     * A string value sets the height in arbitrary units&mdash;for example, `50%`.\n     */\n    height: number | string;\n    /**\n     * Specifies the minimum height of the Dialog.\n     * A numeric value sets the minimum height in pixels.\n     * A string value sets the minimum height in arbitrary units&mdash;for example, `50%`.\n     */\n    minHeight: number | string;\n    /**\n     * Specifies the maximum height of the Dialog.\n     * A numeric value sets the maximum height in pixels.\n     * A string value sets the maximum height in arbitrary units&mdash;for example, `50%`.\n     */\n    maxHeight: number | string;\n    /**\n     * @hidden\n     */\n    contentTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    titleId: string;\n    /**\n     * @hidden\n     */\n    closeTitle: string;\n    /**\n     * Fires when the user clicks an action button of the Dialog.\n     * The event is fired only when the action buttons are specified through the `actions` options.\n     */\n    action: EventEmitter<DialogAction>;\n    /**\n     * Fires when the user clicks the **Close** button of the Dialog.\n     */\n    close: EventEmitter<any>;\n    readonly dir: string;\n    tabIndex: number;\n    titlebarContent: DialogTitleBarComponent;\n    titlebarView: DialogTitleBarComponent;\n    actionsView: DialogActionsComponent;\n    private direction;\n    private subscriptions;\n    constructor(_elRef: ElementRef, _renderer: Renderer2, localization: LocalizationService);\n    /**\n     * @hidden\n     */\n    onComponentKeydown(event: any): void;\n    ngAfterContentInit(): void;\n    ngAfterViewInit(): void;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Focuses the wrapper of the Dialog component.\n     */\n    focus(): void;\n    /**\n     * @hidden\n     */\n    private handleInitialFocus;\n    /**\n     * @hidden\n     */\n    private handleActionButtonFocus;\n    /**\n     * @hidden\n     */\n    private keepFocusWithinComponent;\n    /**\n     * @hidden\n     */\n    private shouldFocusPrimary;\n    /**\n     * @hidden\n     */\n    private getAllFocusableChildren;\n    /**\n     * @hidden\n     */\n    private getLastFocusableElement;\n    /**\n     * @hidden\n     */\n    private generateTitleId;\n    readonly wrapperClass: boolean;\n    readonly styles: any;\n    private bubble;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkIA;"}