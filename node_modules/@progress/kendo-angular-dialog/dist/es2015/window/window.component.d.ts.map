{"version":3,"file":"window.component.d.ts","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-dialog/dist/es2015/window/window.component.d.ts"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { OnInit, OnDestroy, AfterViewInit, EventEmitter, ElementRef, Renderer2, QueryList, NgZone, OnChanges, SimpleChange, TemplateRef } from '@angular/core';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { DragResizeService } from './drag-resize.service';\nimport { WindowState, WindowDimensionSetting, WindowOffsetSetting, WindowMessages } from './window-settings';\nimport { ResizeHandleDirective } from './window-resize-handle.directive';\nimport { WindowTitleBarComponent } from './window-titlebar.component';\nimport { NavigationService } from './navigation.service';\n/**\n * Represents the [Kendo UI Window component for Angular]({% slug overview_window_dialogs %}).\n */\nexport declare class WindowComponent implements OnInit, OnDestroy, OnChanges, AfterViewInit {\n    private el;\n    private renderer;\n    private service;\n    private navigation;\n    private ngZone;\n    private localization;\n    /**\n     * Specifies the query selector used to set the initial focus.\n     */\n    autoFocusedElement: string;\n    /**\n     * Specifies the text that is rendered in the title bar.\n     */\n    title: string;\n    /**\n     * Specifies whether the user will be able to drag the component.\n     * @default true\n     */\n    draggable: boolean;\n    /**\n     * Specifies whether the user will be able to resize the component.\n     * @default true\n     */\n    resizable: boolean;\n    /**\n     * Specifies if the content of the component is persisted in the DOM when minimized.\n     * @default false\n     */\n    keepContent: boolean;\n    /**\n     * Specifies the initial state of the component.\n     * If not specified, the value is set to `default`.\n     *\n     * The possible values are:\n     * * `minimized`\n     * * `maximized`\n     * * `default`\n     */\n    state: WindowState;\n    /**\n     * Specifies the minimum width of the component.\n     * The `minWidth` property has to be set in pixels.\n     * @default 120\n     */\n    minWidth: number;\n    /**\n     * Specifies the minimum height of the Window.\n     * The `minHeight` property has to be set in pixels.\n     * @default 100\n     */\n    minHeight: number;\n    /**\n     * Specifies the width of the Window.\n     * The `width` property has to be set in pixels.\n     */\n    width: number;\n    /**\n     * Specifies the height of the Window.\n     * The `height` property has to be set in pixels.\n     */\n    height: number;\n    /**\n     * Specifies the initial top offset of the Window.\n     * The `top` property has to be set in pixels.\n     */\n    top: number;\n    /**\n     * Specifies the initial left offset of the Window.\n     * Numeric values are treated as pixels.\n     */\n    left: number;\n    readonly closeButtonTitle: string;\n    readonly restoreButtonTitle: string;\n    readonly maximizeButtonTitle: string;\n    readonly minimizeButtonTitle: string;\n    /**\n     * Fires when the user starts to move the Window.\n     */\n    dragStart: EventEmitter<any>;\n    /**\n     * Fires when the Window was moved by the user.\n     */\n    dragEnd: EventEmitter<any>;\n    /**\n     * Fires when the user starts to resize the Window.\n     */\n    resizeStart: EventEmitter<any>;\n    /**\n     * Fires when the Window was resized by the user.\n     */\n    resizeEnd: EventEmitter<any>;\n    /**\n     * Fires when the user closes the Window.\n     */\n    close: EventEmitter<any>;\n    /**\n     * Fires when the `width` property of the component was updated. The event is triggered only after the resizing\n     * has ended. The event data contains the new width. Allows a two-way binding of the `width` property.\n     */\n    widthChange: EventEmitter<number>;\n    /**\n     * Fires when the `height` property of the component was updated. The event is triggered only after the resizing\n     * has ended. The event data contains the new height. Allows a two-way binding of the `height` property.\n     */\n    heightChange: EventEmitter<number>;\n    /**\n     * Fires when the `top` property of the component was updated. The event is triggered only after the dragging\n     * and resizing have ended. The event data contains the new top offset. Allows a two-way binding of the `top` property.\n     */\n    topChange: EventEmitter<number>;\n    /**\n     * Fires when the `left` property of the component was updated. The event is triggered only after the dragging\n     * and resizing have ended. The event data contains the new left offset. Allows a two-way binding of the `left` property.\n     */\n    leftChange: EventEmitter<number>;\n    /**\n     * Fires when the `state` property of the component was updated. The event data contains the new state. Allows a\n     * two-way binding of the `state` property.\n     */\n    stateChange: EventEmitter<WindowState>;\n    /**\n     * @hidden\n     */\n    contentTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    titleBarTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    messages: WindowMessages;\n    tabIndex: number;\n    readonly hostClasses: boolean;\n    readonly dir: string;\n    titleBarView: WindowTitleBarComponent;\n    titleBarContent: WindowTitleBarComponent;\n    resizeHandles: QueryList<ResizeHandleDirective>;\n    resizeDirections: Array<string>;\n    private direction;\n    private draged;\n    private resized;\n    private windowSubscription;\n    private localizationChangeSubscription;\n    constructor(el: ElementRef, renderer: Renderer2, service: DragResizeService, navigation: NavigationService, ngZone: NgZone, localization: LocalizationService);\n    ngAfterViewInit(): void;\n    ngOnInit(): void;\n    ngOnChanges(changes: {\n        [propertyName: string]: SimpleChange;\n    }): void;\n    ngOnDestroy(): void;\n    /**\n     * Focuses the wrapper of the Window component.\n     */\n    focus(): void;\n    /**\n     * Brings the current Window component on top of other Window components on the page.\n     */\n    bringToFront(): void;\n    /**\n     * Manually updates the `width` or `height` option of the Window.\n     * The required style will be applied to the Window wrapper element and the\n     * corresponding property of the component instance will be updated.\n     * This method is intended to be used for sizing dynamically created components using the\n     * [`WindowService`]({% slug api_dialog_windowservice %})\n     * @param {WindowDimensionSetting} dimension - The option that will be updated\n     * @param {number} value - The value set in pixels\n     */\n    setDimension(dimension: WindowDimensionSetting, value: number): void;\n    /**\n     * Manually updates the `top` or `left` offset of the Window.\n     * The required style will be applied to the Window wrapper element and the\n     * corresponding property of the component instance will be updated.\n     * This method is intended to be used for positioning dynamically created components using the\n     * [`WindowService`]({% slug api_dialog_windowservice %})\n     * @param {WindowOffsetSetting} offset - The option that will be updated\n     * @param {number} value - The value set in pixels\n     */\n    setOffset(offset: WindowOffsetSetting, value: number): void;\n    readonly showDefaultTitleBar: boolean;\n    readonly styleMinWidth: string;\n    readonly styleMinHeight: string;\n    readonly stylePosition: string;\n    readonly wrapperMaximizedClass: boolean;\n    readonly wrapperMinimizedClass: boolean;\n    /**\n     * @hidden\n     */\n    onComponentKeydown(event: KeyboardEvent): void;\n    /**\n     * @hidden\n     */\n    onComponentFocus(): void;\n    /**\n     * @hidden\n     */\n    onComponentBlur(): void;\n    private subscribeEvents;\n    private setNextZIndex;\n    private setInitialOffset;\n    private updateAllOffset;\n    private setStyle;\n    private removeStyle;\n    private readonly options;\n    private setOption;\n    private handleInitialFocus;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+MA;"}