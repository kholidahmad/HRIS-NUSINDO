{"version":3,"file":"drag-resize.service.d.ts","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-dialog/dist/es2015/window/drag-resize.service.d.ts"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { NgZone, EventEmitter, ElementRef, OnDestroy } from \"@angular/core\";\nimport { DraggableDirective } from '@progress/kendo-angular-common';\nimport { Subscription } from 'rxjs';\nimport { WindowOptions, WindowState } from './window-settings';\nimport { ChangeEvent } from './window-events';\n/**\n * @hidden\n */\nexport declare class DragResizeService implements OnDestroy {\n    private ngZone;\n    close: EventEmitter<any>;\n    focus: EventEmitter<any>;\n    change: EventEmitter<ChangeEvent>;\n    stateChange: EventEmitter<WindowState>;\n    dragStart: EventEmitter<any>;\n    dragEnd: EventEmitter<any>;\n    resizeStart: EventEmitter<string>;\n    resizeEnd: EventEmitter<any>;\n    options: WindowOptions;\n    restoreOptions: WindowOptions;\n    window: ElementRef;\n    lastAction: string;\n    subscriptions: Subscription;\n    dragSubscription: Subscription;\n    constructor(ngZone: NgZone);\n    ngOnDestroy(): void;\n    init(el: ElementRef): void;\n    onDrag(el: DraggableDirective): void;\n    handleDrag({ originalX, originalY, pageX, pageY, startPosition }: {\n        originalX: any;\n        originalY: any;\n        pageX: any;\n        pageY: any;\n        startPosition: any;\n    }): void;\n    onResize(handle: DraggableDirective, direction: string): void;\n    handleResize(initial: any, dir: string, deltaX: number, deltaY: number): void;\n    restoreAction(): void;\n    defaultState(): void;\n    storeOptions(): void;\n    maximizeAction(): void;\n    maximizeState(): void;\n    minimizeAction(): void;\n    minimizeState(): void;\n    /**\n     * Handles manual changes of the 'state' property.\n     * Required to distinguish them from action clicks.\n     */\n    applyManualState(): void;\n    closeAction(): void;\n    ensureWidth(): void;\n    clearHeight(): void;\n    center(): void;\n    currentOffsetAndPosition(): any;\n    currentPosition(): any;\n    setPosition(): void;\n    setRestoreOption(style: string, value: number): void;\n    readonly nextPossibleZIndex: number;\n    readonly nextZIndex: number;\n    readonly windowViewPort: any;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;"}