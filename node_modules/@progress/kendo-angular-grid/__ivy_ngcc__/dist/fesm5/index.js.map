{"version":3,"file":"index.js","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-grid/dist/fesm5/index.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { EventEmitter, Directive, TemplateRef, Optional, Input, ContentChildren, ContentChild, QueryList, InjectionToken, Component, forwardRef, SkipSelf, Host, Injectable, NgZone, ChangeDetectorRef, Output, Inject, isDevMode, Renderer2, SecurityContext, ElementRef, ViewEncapsulation, HostBinding, ViewChild, ViewChildren, Self, ViewContainerRef, Pipe, NgModule, ComponentFactoryResolver, ChangeDetectionStrategy, HostListener } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { __extends } from 'tslib';\nimport { FormControl, FormGroup, NG_VALUE_ACCESSOR, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { merge, of, fromEvent, Subject, Subscription, zip, from, interval, BehaviorSubject, Observable } from 'rxjs';\nimport { auditTime, switchMap, take, map, distinctUntilChanged, filter, tap, throttleTime, takeUntil, switchMapTo, delay, debounceTime, bufferCount } from 'rxjs/operators';\nimport { isDocumentAvailable, Keys, isChanged, anyChanged, hasObservers, ResizeSensorComponent, DraggableModule, EventsModule, DraggableDirective, guid, ResizeSensorModule } from '@progress/kendo-angular-common';\nimport { orderBy, process, isCompositeFilterDescriptor, filterBy } from '@progress/kendo-data-query';\nimport { LocalizationService, L10N_PREFIX, ComponentMessages } from '@progress/kendo-angular-l10n';\nimport { PopupService, PopupModule } from '@progress/kendo-angular-popup';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DropDownListModule, AutoCompleteModule } from '@progress/kendo-angular-dropdowns';\nimport { InputsModule, NumericTextBoxComponent, NumericTextBoxModule } from '@progress/kendo-angular-inputs';\nimport { DatePickerModule } from '@progress/kendo-angular-dateinputs';\nimport { getter } from '@progress/kendo-common';\nimport { IntlService } from '@progress/kendo-angular-intl';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Button } from '@progress/kendo-angular-buttons';\nimport { PDFMarginComponent, PDFTemplateDirective, PDFExportComponent } from '@progress/kendo-angular-pdf-export';\nimport { saveAs } from '@progress/kendo-file-saver';\nimport { workbookOptions, toDataURL, ColumnBase, ExcelExportModule } from '@progress/kendo-angular-excel-export';\n\n/**\n * @hidden\n */\nvar ZoneAwareEventEmitter = /** @class */ (function (_super) {\n    __extends(ZoneAwareEventEmitter, _super);\n    function ZoneAwareEventEmitter(ngZone, isAsync) {\n        if (isAsync === void 0) { isAsync = false; }\n        var _this = _super.call(this, isAsync) || this;\n        _this.ngZone = ngZone;\n        return _this;\n    }\n    ZoneAwareEventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n        var _this = this;\n        var schedulerFn;\n        var errorFn = function (_) { return null; };\n        var completeFn = function () { return null; };\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\n            schedulerFn = function (value) { _this.ngZone.run(function () { return generatorOrNext.next(value); }); };\n            if (generatorOrNext.error) {\n                errorFn = function (err) { _this.ngZone.run(function () { return generatorOrNext.error(err); }); };\n            }\n            if (generatorOrNext.complete) {\n                completeFn = function () { _this.ngZone.run(function () { return generatorOrNext.complete(); }); };\n            }\n        }\n        else {\n            schedulerFn = function (value) { _this.ngZone.run(function () { return generatorOrNext(value); }); };\n            if (error) {\n                errorFn = function (err) { _this.ngZone.run(function () { return error(err); }); };\n            }\n            if (complete) {\n                completeFn = function () { _this.ngZone.run(function () { return complete(); }); };\n            }\n        }\n        return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n    };\n    return ZoneAwareEventEmitter;\n}(EventEmitter));\n\n/**\n * Represents the column cell template of the Grid ([more information and example]({% slug templates_columns_grid %}#toc-cell-template)).\n * Helps to customize the content of the cells. To define the cell template, nest an `<ng-template>` tag\n * with the `kendoGridCellTemplate` directive inside a `<kendo-grid-column>` tag.\n *\n * The template context is set to the current data item and the following additional fields are passed:\n * - `columnIndex`&mdash;The current column index. Use it as an alias for a template variable by utilizing the `let-columnIndex=\"columnIndex\"` syntax.\n * - `rowIndex`&mdash;The current data row index. Use it as an alias for a template variable by utilizing the `let-rowIndex=\"rowIndex\"` syntax.\n * - `dataItem`&mdash;The current data item. Represents the default context that will be assigned to any template variable which utilizes the `let-x` syntax&mdash;for example, `let-dataItem`.\n * - `column`&mdash;The current column instance. Use it as an alias for a template variable by utilizing the `let-column=\"column\"` syntax.\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *         <kendo-grid [data]=\"gridData\">\n *             <kendo-grid-column field=\"ProductName\">\n *                 <ng-template kendoGridCellTemplate let-dataItem let-rowIndex=\"rowIndex\">\n *                     Data Row #: {{rowIndex}} /\n *                     <strong>{{dataItem.ProductName}}</strong>\n *                     ({{dataItem.Discontinued ? \"discontinued\" : \"active\"}})\n *                 </ng-template>\n *             </kendo-grid-column>\n *         </kendo-grid>\n *     `\n * })\n *\n * class AppComponent {\n *     public gridData = [{\n *         \"ProductID\": 1,\n *         \"ProductName\": \"Chai\",\n *         \"UnitPrice\": 18.0000,\n *         \"Discontinued\": false\n *       }, {\n *         \"ProductID\": 2,\n *         \"ProductName\": \"Chang\",\n *         \"UnitPrice\": 19.0000,\n *         \"Discontinued\": true\n *       }\n *     ];\n * }\n *\n * ```\n */\nvar CellTemplateDirective = /** @class */ (function () {\n    function CellTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    CellTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridCellTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    CellTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return CellTemplateDirective;\n}());\n\n/**\n * Represents the group-header cell template of the Grid which helps to customize the content of the group header item.\n * To define the group header template, nest an `<ng-template>` tag with the `kendoGridGroupHeaderTemplate`\n * directive inside `<kendo-grid-column>`.\n *\n * The template context is set to the current data item and the following additional fields are passed:\n * - `group`&mdash;The current group item.\n * - `field`&mdash;The name of the field by which data is grouped.\n * - `value`&mdash;The current group value.\n * - `aggregates`&mdash;All aggregate values for the current group.\n * - `index`&mdash;The index of the current group.\n * - `expanded`&mdash;A boolean value indicating if the group is currently expanded.\n * ([see example]({% slug groupable_grid_with_aggregates %})).\n *\n * @example\n * ```ts-preview\n * import { process } from '@progress/kendo-data-query';\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *         <kendo-grid [data]=\"gridData\" [group]=\"groups\">\n *             <kendo-grid-column field=\"ProductName\">\n *                 <ng-template kendoGridGroupHeaderTemplate let-group let-field=\"field\" let-value=\"value\">\n *                    <strong>{{field}}</strong>: {{value}}\n *                 </ng-template>\n *             </kendo-grid-column>\n *         </kendo-grid>\n *     `\n * })\n *\n * class AppComponent {\n *     public groups = [{ field: \"ProductName\" }];\n *\n *     public gridData = process([{\n *         \"ProductID\": 1,\n *         \"ProductName\": \"Chai\",\n *         \"UnitPrice\": 18.0000,\n *         \"Discontinued\": false\n *       }, {\n *         \"ProductID\": 2,\n *         \"ProductName\": \"Chang\",\n *         \"UnitPrice\": 19.0000,\n *         \"Discontinued\": true\n *       }\n *     ], {\n *      group: this.groups\n *     });\n * }\n *\n * ```\n */\nvar GroupHeaderTemplateDirective = /** @class */ (function () {\n    function GroupHeaderTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    GroupHeaderTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridGroupHeaderTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    GroupHeaderTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return GroupHeaderTemplateDirective;\n}());\n\n/**\n * Represents the group-header column template of the Grid which helps to customize the content of the group headers.\n * To define the group header template, nest an `<ng-template>` tag with the `kendoGridGroupHeaderColumnTemplate`\n * directive inside `<kendo-grid-column>`.\n *\n * The template context is set to the current data item and the following additional fields are passed:\n * - `group`&mdash;The current group item.\n * - `field`&mdash;The name of the field by which data is grouped.\n * - `value`&mdash;The current group value.\n * - `aggregates`&mdash;All aggregate values for the current group.\n *\n * @example\n * {% meta height:600 %}\n * {% embed_file grouping/app.component.ts preview %}\n * {% embed_file grouping/app.module.ts %}\n * {% embed_file grouping/main.ts %}\n * {% endmeta %}\n *\n * ```\n */\nvar GroupHeaderColumnTemplateDirective = /** @class */ (function () {\n    function GroupHeaderColumnTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    GroupHeaderColumnTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridGroupHeaderColumnTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    GroupHeaderColumnTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return GroupHeaderColumnTemplateDirective;\n}());\n\n/**\n * Represents the column edit-cell template of the Grid ([see example]({% slug editing_template_forms_grid %})).\n * Helps to customize the content of the edited cells. To define the cell template, nest an `<ng-template>`\n * tag with the `kendoGridEditTemplate` directive inside a `<kendo-grid-column>` tag.\n *\n * The template context contains the following fields:\n * - `formGroup`&mdash;The current [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }}).\n * If you use the Grid inside [Template-Driven Forms]({{ site.data.urls.angular['forms'] }}), it will be `undefined`.\n * - `rowIndex`&mdash;The current data row index. If inside a new item row, `rowIndex` is `-1`.\n * - `dataItem`&mdash;The current data item.\n * - `column`&mdash;The current column instance.\n * - `isNew`&mdash;The state of the current item.\n */\nvar EditTemplateDirective = /** @class */ (function () {\n    function EditTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    EditTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridEditTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    EditTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return EditTemplateDirective;\n}());\n\n/**\n * Represents the column group footer cell template of the Grid which helps to customize the group footer cell for the column.\n * To define the group footer template, nest an `<ng-template>` tag with the `kendoGridGroupFooterTemplate` directive\n * inside `<kendo-grid-column>`.\n *\n * The template context is set to the current aggregates and the following additional fields are passed:\n * - `column`&mdash;Defines an instance of the `ColumnComponent` option.\n * - `field`&mdash;The current column field name.\n * - `group`&mdash;The current group data item.\n * - `aggregates`&mdash;All aggregate values for the current group.\n *\n * @example\n * ```ts-preview\n * import { process } from '@progress/kendo-data-query';\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *         <kendo-grid [data]=\"gridData\" [group]=\"groups\">\n *             <kendo-grid-column field=\"ProductName\">\n *                 <ng-template kendoGridGroupFooterTemplate let-aggregates let-field=\"field\">\n *                    Count: {{aggregates[field].count}}\n *                 </ng-template>\n *             </kendo-grid-column>\n *         </kendo-grid>\n *     `\n * })\n *\n * class AppComponent {\n *     public groups = [{ field: \"ProductName\", aggregates: [{ field: \"ProductName\", aggregate: \"count\" }] }];\n *\n *     public gridData = process([{\n *         \"ProductID\": 1,\n *         \"ProductName\": \"Chai\",\n *         \"UnitPrice\": 18.0000,\n *         \"Discontinued\": false\n *       }, {\n *         \"ProductID\": 2,\n *         \"ProductName\": \"Chang\",\n *         \"UnitPrice\": 19.0000,\n *         \"Discontinued\": true\n *       }\n *     ], {\n *      group: this.groups\n *     });\n * }\n * ```\n */\nvar GroupFooterTemplateDirective = /** @class */ (function () {\n    function GroupFooterTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    GroupFooterTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridGroupFooterTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    GroupFooterTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return GroupFooterTemplateDirective;\n}());\n\n/**\n * Represents the column header cell template of the Grid\n * ([more information and example]({% slug templates_columns_grid %}#toc-header-template)).\n * Helps to customize the table header cell for the column.\n * To define a header template, nest an `<ng-template>` tag with the\n * [`kendoGridHeaderTemplate`]({% slug api_grid_headertemplatedirective %}) directive inside the `<kendo-grid-column>` tag.\n *\n *  The template context is set to the current column and then the following additional fields are passed:\n * * `column`&mdash;Defines an instance of the [`ColumnComponent`]({% slug api_grid_columncomponent %}) option.\n * * `columnIndex`&mdash;Defines the current column index.\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *         <kendo-grid [data]=\"gridData\">\n *             <kendo-grid-column field=\"ProductName\">\n *                 <ng-template kendoGridHeaderTemplate let-column let-columnIndex=\"columnIndex\">\n *                   {{column.field}}({{columnIndex}})\n *                 </ng-template>\n *             </kendo-grid-column>\n *              <kendo-grid-column field=\"UnitPrice\">\n *                 <ng-template kendoGridHeaderTemplate let-column let-columnIndex=\"columnIndex\">\n *                   {{column.field}}({{columnIndex}})\n *                 </ng-template>\n *             </kendo-grid-column>\n *         </kendo-grid>\n *     `\n * })\n *\n * class AppComponent {\n *     public gridData = [{\n *         \"ProductID\": 1,\n *         \"ProductName\": \"Chai\",\n *         \"UnitPrice\": 18.0000,\n *         \"Discontinued\": false\n *       }, {\n *         \"ProductID\": 2,\n *         \"ProductName\": \"Chang\",\n *         \"UnitPrice\": 19.0000,\n *         \"Discontinued\": true\n *       }\n *     ];\n * }\n *\n * ```\n */\nvar HeaderTemplateDirective = /** @class */ (function () {\n    function HeaderTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    HeaderTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridHeaderTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    HeaderTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return HeaderTemplateDirective;\n}());\n\n/**\n * Represents the column footer cell template of the Grid\n * ([more information and example]({% slug templates_columns_grid %}#toc-footer-template)).\n * Helps to customize the table footer cell for the column.\n * To define a footer template, nest an `<ng-template>` tag with the\n * [`kendoGridFooterTemplate`]({% slug api_grid_footertemplatedirective %}) directive inside the `<kendo-grid-column>` tag.\n *\n * The template context is set to the current column and the following additional fields are passed:\n * * `column`&mdash;Defines an instance of the [`ColumnComponent`]({% slug api_grid_columncomponent %}) option.\n * * `columnIndex`&mdash;Defines the current column index.\n *\n * For more information on how to display aggregates in the footer of the Grid,\n * refer to the article on [aggregates]({% slug groupable_grid_with_aggregates %}).\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *         <kendo-grid [data]=\"gridData\" scrollable=\"none\">\n *             <kendo-grid-column field=\"ProductName\">\n *                 <ng-template kendoGridFooterTemplate let-column let-columnIndex=\"columnIndex\">\n *                   {{column.field}}({{columnIndex}})\n *                 </ng-template>\n *             </kendo-grid-column>\n *              <kendo-grid-column field=\"UnitPrice\">\n *                 <ng-template kendoGridFooterTemplate let-column let-columnIndex=\"columnIndex\">\n *                   {{column.field}}({{columnIndex}})\n *                 </ng-template>\n *             </kendo-grid-column>\n *         </kendo-grid>\n *     `\n * })\n *\n * class AppComponent {\n *     public gridData = [{\n *         \"ProductID\": 1,\n *         \"ProductName\": \"Chai\",\n *         \"UnitPrice\": 18.0000,\n *         \"Discontinued\": false\n *       }, {\n *         \"ProductID\": 2,\n *         \"ProductName\": \"Chang\",\n *         \"UnitPrice\": 19.0000,\n *         \"Discontinued\": true\n *       }\n *     ];\n * }\n *\n * ```\n */\nvar FooterTemplateDirective = /** @class */ (function () {\n    function FooterTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    FooterTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridFooterTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    FooterTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return FooterTemplateDirective;\n}());\n\n/* tslint:disable:max-line-length */\n/**\n * Represents the template for the column menu in the Grid. Provides an option for\n * customizing the content of the column menu for all or for specific columns.\n * To define the content template, nest an `<ng-template>` tag with the\n * `kendoGridColumnMenuTemplate` directive inside the `kendo-grid` or the `<kendo-grid-column>` component.\n *\n * The template context is passes through the following fields:\n * - `service`&mdash;Represents the [ColumnMenuService]({% slug api_grid_columnmenuservice %}).\n * - `column`&mdash;Represents the Grid column.\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *       <kendo-grid [kendoGridBinding]=\"data\" [sortable]=\"true\" [columnMenu]=\"true\">\n *          <ng-template kendoGridColumnMenuTemplate let-service=\"service\">\n *              <kendo-grid-columnmenu-sort [service]=\"service\">\n *              </kendo-grid-columnmenu-sort>\n *          </ng-template>\n *          <kendo-grid-column field=\"Field1\" [width]=\"100\">\n *              <ng-template kendoGridColumnMenuTemplate let-service=\"service\">\n *                  <kendo-grid-columnmenu-lock [service]=\"service\">\n *                  </kendo-grid-columnmenu-lock>\n *                  <kendo-grid-columnmenu-sort [service]=\"service\">\n *                  </kendo-grid-columnmenu-sort>\n *              </ng-template>\n *          </kendo-grid-column>\n *          <kendo-grid-column field=\"Field2\" [width]=\"100\"></kendo-grid-column>\n *       </kendo-grid>\n *     `\n * })\n *\n * class AppComponent {\n *   public data: any[] = [{ Field1: 'Foo', Field2: 'Bar' }, { Field1: 'Foo1', Field2: 'Bar1' }];\n * }\n *\n * ```\n */\nvar ColumnMenuTemplateDirective = /** @class */ (function () {\n    function ColumnMenuTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    ColumnMenuTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridColumnMenuTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    ColumnMenuTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return ColumnMenuTemplateDirective;\n}());\n\n/**\n * @hidden\n */\nvar isSpanColumn = function (column) { return column.isSpanColumn; };\n/**\n * @hidden\n */\nvar isCheckboxColumn = function (column) { return column.isCheckboxColumn; };\nvar isColumnContainer = function (column) { return column.isColumnGroup || isSpanColumn(column); };\n/**\n * The base class for the column components of the Grid.\n */\nvar ColumnBase$1 = /** @class */ (function () {\n    function ColumnBase$$1(parent) {\n        this.parent = parent;\n        /**\n         * @hidden\n         */\n        this.matchesMedia = true;\n        /**\n         * The column index after reordering.\n         *\n         * > `orderIndex` is a read-only property. Setting this field does not affect column order.\n         */\n        this.orderIndex = 0;\n        /**\n         * @hidden\n         */\n        this.isColumnGroup = false;\n        /**\n         * @hidden\n         */\n        this.isSpanColumn = false;\n        /**\n         * Indicates whether the column is resizable.\n         * @default true\n         */\n        this.resizable = true;\n        /**\n         * Indicates whether the column is reorderable.\n         * @default true\n         */\n        this.reorderable = true;\n        /**\n         * The width (in pixels) below which the user is not able to resize the column by using the UI.\n         */\n        this.minResizableWidth = 10;\n        /**\n         * Toggles the locked (frozen) state of the columns ([more information and example]({% slug locked_columns_grid %})).\n         *\n         * @default false\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         *    selector: 'my-app',\n         *    template: `\n         *        <kendo-grid [data]=\"gridData\" [scrollable]=\"scrollable\" style=\"height: 200px\">\n         *          <kendo-grid-column field=\"ProductID\" title=\"Product ID\" width=\"120\" [locked]=\"true\">\n         *          </kendo-grid-column>\n         *          <kendo-grid-column field=\"ProductName\" title=\"Product Name\" width=\"200\">\n         *          </kendo-grid-column>\n         *          <kendo-grid-column field=\"UnitPrice\" title=\"Unit Price\" width=\"230\">\n         *          </kendo-grid-column>\n         *        </kendo-grid>\n         *    `\n         * })\n         *\n         * class AppComponent {\n         *    public gridData: any[];\n         *\n         *    constructor() {\n         *        this.gridData = products;\n         *    }\n         * }\n         *\n         * const products = [{\n         *    \"ProductID\": 1,\n         *    \"ProductName\": \"Chai\",\n         *    \"UnitPrice\": 18.0000,\n         *    \"Discontinued\": true\n         *  }, {\n         *    \"ProductID\": 2,\n         *    \"ProductName\": \"Chang\",\n         *    \"UnitPrice\": 19.0000,\n         *    \"Discontinued\": false\n         *  }\n         * ];\n         *\n         * ```\n         */\n        this.locked = false;\n        /**\n         * Specifies if the column can be locked or unlocked from the column menu or by reordering the columns.\n         */\n        this.lockable = true;\n        /**\n         * Specifies if the column menu will be shown for the column.\n         */\n        this.columnMenu = true;\n        /**\n         * Specifies if the column will be included in the column-chooser list.\n         */\n        this.includeInChooser = true;\n        /**\n         * @hidden\n         */\n        this.headerTemplates = new QueryList();\n        /**\n         * @hidden\n         */\n        this.columnMenuTemplates = new QueryList();\n        if (parent && !isColumnContainer(parent)) {\n            throw new Error('Columns can be nested only inside ColumnGroupComponent');\n        }\n    }\n    Object.defineProperty(ColumnBase$$1.prototype, \"width\", {\n        get: function () { return this._width; },\n        /**\n         * The width of the column (in pixels).\n         */\n        set: function (value) {\n            this._width = parseInt(value, 10);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnBase$$1.prototype, \"level\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            if (this.parent && isSpanColumn(this.parent)) {\n                return this.parent.level;\n            }\n            return this.parent ? this.parent.level + 1 : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnBase$$1.prototype, \"isLocked\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.parent ? this.parent.isLocked : this.locked;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnBase$$1.prototype, \"colspan\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return 1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    ColumnBase$$1.prototype.rowspan = function (totalColumnLevels) {\n        return this.level < totalColumnLevels ? (totalColumnLevels - this.level) + 1 : 1;\n    };\n    Object.defineProperty(ColumnBase$$1.prototype, \"headerTemplateRef\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var template = this.headerTemplates.first;\n            return template ? template.templateRef : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnBase$$1.prototype, \"footerTemplateRef\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.footerTemplate ? this.footerTemplate.templateRef : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnBase$$1.prototype, \"columnMenuTemplateRef\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var template = this.columnMenuTemplates.first;\n            return template ? template.templateRef : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnBase$$1.prototype, \"displayTitle\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.title;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnBase$$1.prototype, \"isVisible\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return !this.hidden && this.matchesMedia;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColumnBase$$1.propDecorators = {\n        resizable: [{ type: Input }],\n        reorderable: [{ type: Input }],\n        minResizableWidth: [{ type: Input }],\n        title: [{ type: Input }],\n        width: [{ type: Input }],\n        autoSize: [{ type: Input }],\n        locked: [{ type: Input }],\n        hidden: [{ type: Input }],\n        media: [{ type: Input }],\n        lockable: [{ type: Input }],\n        columnMenu: [{ type: Input }],\n        includeInChooser: [{ type: Input }],\n        style: [{ type: Input }],\n        headerStyle: [{ type: Input }],\n        footerStyle: [{ type: Input }],\n        cssClass: [{ type: Input, args: ['class',] }],\n        headerClass: [{ type: Input }],\n        footerClass: [{ type: Input }],\n        headerTemplates: [{ type: ContentChildren, args: [HeaderTemplateDirective, { descendants: false },] }],\n        footerTemplate: [{ type: ContentChild, args: [FooterTemplateDirective,] }],\n        columnMenuTemplates: [{ type: ContentChildren, args: [ColumnMenuTemplateDirective,] }]\n    };\n    return ColumnBase$$1;\n}());\n\nvar EMPTY_REGEX = /^\\s*$/;\n/**\n * @hidden\n */\nvar isPresent = function (value) { return value !== null && value !== undefined; };\n/**\n * @hidden\n */\nvar isBlank = function (value) { return value === null || value === undefined; };\n/**\n * @hidden\n */\nvar isArray = function (value) { return Array.isArray(value); };\n/**\n * @hidden\n */\nvar isTruthy = function (value) { return !!value; };\n/**\n * @hidden\n */\nvar isNullOrEmptyString = function (value) { return isBlank(value) || EMPTY_REGEX.test(value); };\n/**\n * @hidden\n */\nvar observe = function (list) {\n    return merge(of(list), list.changes);\n};\n/**\n * @hidden\n */\nvar isUniversal = function () { return typeof document === 'undefined'; };\n/**\n * @hidden\n */\nvar isString = function (value) {\n    return typeof value === 'string';\n};\n/**\n * @hidden\n */\nvar isNumber = function (value) { return typeof value === \"number\" && !isNaN(value); };\n/**\n * @hidden\n */\nvar extractFormat = function (format) {\n    if (isString(format) && !isNullOrEmptyString(format) && format.startsWith('{0:')) {\n        return format.slice(3, format.length - 1);\n    }\n    return format;\n};\n/**\n * @hidden\n */\nvar not = function (fn) { return function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return !fn.apply(null, args);\n}; };\n/**\n * @hidden\n */\nvar or = function () {\n    var conditions = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        conditions[_i] = arguments[_i];\n    }\n    return function (value) { return conditions.reduce(function (acc, x) { return acc || x(value); }, false); };\n};\n/**\n * @hidden\n */\nvar and = function () {\n    var conditions = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        conditions[_i] = arguments[_i];\n    }\n    return function (value) { return conditions.reduce(function (acc, x) { return acc && x(value); }, true); };\n};\n/**\n * @hidden\n */\nvar Skip = new InjectionToken(\"Skip\"); // tslint:disable-line:variable-name\n/**\n * @hidden\n */\nvar createPromise = function () {\n    var resolveFn, rejectFn;\n    var promise = new Promise(function (resolve, reject) {\n        resolveFn = function (data) {\n            resolve(data);\n            return promise;\n        };\n        rejectFn = function (data) {\n            reject(data);\n            return promise;\n        };\n    });\n    promise.resolve = resolveFn;\n    promise.reject = rejectFn;\n    return promise;\n};\n/** @hidden */\nvar iterator = getIterator();\n// TODO: Move to kendo-common\nfunction getIterator() {\n    if (typeof Symbol === 'function' && Symbol.iterator) {\n        return Symbol.iterator;\n    }\n    var keys = Object.getOwnPropertyNames(Map.prototype);\n    var proto = Map.prototype;\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        if (key !== 'entries' && key !== 'size' && proto[key] === proto.entries) {\n            return key;\n        }\n    }\n}\nvar FRAME_DURATION = 1000 / 60;\nvar wnd = typeof window !== 'undefined' ? window : {};\n/** @hidden */\nvar requestAnimationFrame = wnd.requestAnimationFrame || wnd.msRequestAnimationFrame || (function (callback) { return setTimeout(callback, FRAME_DURATION); });\n/** @hidden */\nvar cancelAnimationFrame = wnd.cancelAnimationFrame || wnd.msCancelRequestAnimationFrame || clearTimeout;\n\n/**\n * Represents the filter-cell template ([see example]({% slug builtinfiltertemplate_grid %}#toc-customizing-filter-rows)).\n */\nvar FilterCellTemplateDirective = /** @class */ (function () {\n    function FilterCellTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    FilterCellTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridFilterCellTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    FilterCellTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return FilterCellTemplateDirective;\n}());\n\n/**\n * Represents the filter-menu template\n * ([see example]({% slug builtinfiltertemplate_grid %}#toc-customizing-filter-menus)).\n */\nvar FilterMenuTemplateDirective = /** @class */ (function () {\n    function FilterMenuTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    FilterMenuTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridFilterMenuTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    FilterMenuTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return FilterMenuTemplateDirective;\n}());\n\n/**\n * @hidden\n */\nfunction isColumnComponent(column) {\n    return isPresent(column.field);\n}\n/**\n * Represents the columns of the [Angular Data Grid]({% slug overview_grid %}).\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *    selector: 'my-app',\n *    template: `\n *        <kendo-grid [data]=\"gridData\">\n *          <kendo-grid-column field=\"ProductID\" title=\"Product ID\" width=\"120\">\n *          </kendo-grid-column>\n *          <kendo-grid-column field=\"ProductName\" title=\"Product Name\">\n *          </kendo-grid-column>\n *          <kendo-grid-column field=\"UnitPrice\" title=\"Unit Price\" width=\"230\">\n *          </kendo-grid-column>\n *          <kendo-grid-column field=\"Discontinued\" width=\"120\">\n *              <ng-template kendoGridCellTemplate let-dataItem>\n *                  <input type=\"checkbox\" [checked]=\"dataItem.Discontinued\" disabled/>\n *              </ng-template>\n *          </kendo-grid-column>\n *        </kendo-grid>\n *    `\n * })\n *\n * class AppComponent {\n *    public gridData: any[];\n *\n *    constructor() {\n *        this.gridData = products;\n *    }\n * }\n *\n * const products = [{\n *    \"ProductID\": 1,\n *    \"ProductName\": \"Chai\",\n *    \"UnitPrice\": 18.0000,\n *    \"Discontinued\": true\n *  }, {\n *    \"ProductID\": 2,\n *    \"ProductName\": \"Chang\",\n *    \"UnitPrice\": 19.0000,\n *    \"Discontinued\": false\n *  }\n * ];\n *\n * ```\n */\nvar ColumnComponent = /** @class */ (function (_super) {\n    __extends(ColumnComponent, _super);\n    function ColumnComponent(parent) {\n        var _this = _super.call(this, parent) || this;\n        /**\n         * Allows the column headers to be clicked and the `sortChange` event emitted.\n         * You have to handle the `sortChange` event yourself and sort the data.\n         */\n        _this.sortable = true;\n        /**\n         * Determines if the column can be dragged to the group panel. The default value is `true`.\n         * If set to `false`, you can group the columns by the column field by using the API of the Grid.\n         */\n        _this.groupable = true;\n        /**\n         * Defines the editor type ([see example]({% slug editing_reactive_forms_grid %}#toc-setup)).\n         * Used when the column enters the edit mode. The default value is `text`.\n         *\n         * @example\n         * ```html-no-run\n         * <kendo-grid>\n         *    <kendo-grid-column field=\"UnitPrice\" editor=\"numeric\">\n         *    </kendo-grid-column>\n         * </kendo-grid>\n         * ```\n         */\n        _this.editor = 'text';\n        /**\n         * Defines the filter type that is displayed inside the filter row. The default value is `text`.\n         *\n         * @example\n         * ```html-no-run\n         * <kendo-grid>\n         *    <kendo-grid-column field=\"UnitPrice\" filter=\"numeric\">\n         *    </kendo-grid-column>\n         * </kendo-grid>\n         * ```\n         */\n        _this.filter = 'text';\n        /**\n         * Defines if a filter UI will be displayed for this column. The default value is `true`.\n         *\n         * @example\n         * ```html-no-run\n         * <kendo-grid>\n         *    <kendo-grid-column field=\"UnitPrice\" [filterable]=\"false\">\n         *    </kendo-grid-column>\n         * </kendo-grid>\n         * ```\n         */\n        _this.filterable = true;\n        /**\n         * Defines whether the column is editable. The default value is `true`.\n         *\n         * @example\n         * ```html-no-run\n         * <kendo-grid>\n         *    <kendo-grid-column field=\"UnitPrice\" [editable]=\"false\">\n         *    </kendo-grid-column>\n         * </kendo-grid>\n         * ```\n         */\n        _this.editable = true;\n        return _this;\n    }\n    Object.defineProperty(ColumnComponent.prototype, \"templateRef\", {\n        get: function () {\n            return this.template ? this.template.templateRef : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnComponent.prototype, \"groupHeaderTemplateRef\", {\n        get: function () {\n            return this.groupHeaderTemplate ? this.groupHeaderTemplate.templateRef : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnComponent.prototype, \"groupHeaderColumnTemplateRef\", {\n        get: function () {\n            return this.groupHeaderColumnTemplate ? this.groupHeaderColumnTemplate.templateRef : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnComponent.prototype, \"groupFooterTemplateRef\", {\n        get: function () {\n            return this.groupFooterTemplate ? this.groupFooterTemplate.templateRef : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnComponent.prototype, \"editTemplateRef\", {\n        get: function () {\n            return this.editTemplate ? this.editTemplate.templateRef : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnComponent.prototype, \"filterCellTemplateRef\", {\n        get: function () {\n            return this.filterCellTemplate ? this.filterCellTemplate.templateRef : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnComponent.prototype, \"filterMenuTemplateRef\", {\n        get: function () {\n            return this.filterMenuTemplate ? this.filterMenuTemplate.templateRef : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnComponent.prototype, \"displayTitle\", {\n        get: function () {\n            return this.title === undefined ? this.field : this.title;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColumnComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: ColumnBase$1,\n                            useExisting: forwardRef(function () { return ColumnComponent; })\n                        }\n                    ],\n                    selector: 'kendo-grid-column',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    ColumnComponent.ctorParameters = function () { return [\n        { type: ColumnBase$1, decorators: [{ type: SkipSelf }, { type: Host }, { type: Optional }] }\n    ]; };\n    ColumnComponent.propDecorators = {\n        field: [{ type: Input }],\n        format: [{ type: Input }],\n        sortable: [{ type: Input }],\n        groupable: [{ type: Input }],\n        editor: [{ type: Input }],\n        filter: [{ type: Input }],\n        filterable: [{ type: Input }],\n        editable: [{ type: Input }],\n        template: [{ type: ContentChild, args: [CellTemplateDirective,] }],\n        groupHeaderTemplate: [{ type: ContentChild, args: [GroupHeaderTemplateDirective,] }],\n        groupHeaderColumnTemplate: [{ type: ContentChild, args: [GroupHeaderColumnTemplateDirective,] }],\n        groupFooterTemplate: [{ type: ContentChild, args: [GroupFooterTemplateDirective,] }],\n        editTemplate: [{ type: ContentChild, args: [EditTemplateDirective,] }],\n        filterCellTemplate: [{ type: ContentChild, args: [FilterCellTemplateDirective,] }],\n        filterMenuTemplate: [{ type: ContentChild, args: [FilterMenuTemplateDirective,] }]\n    };\n    return ColumnComponent;\n}(ColumnBase$1));\n\n/**\n * @hidden\n */\nfunction isSpanColumnComponent(column) {\n    return column.isSpanColumn;\n}\n/**\n * Represents a column which can be spanned over multiple data cells while the individual\n * header and footer cells are retained ([see example]({% slug spanned_columns_grid %})).\n * Enables you to achieve more flexible layout while keeping the built-in UI element for\n * [sorting]({% slug sorting_grid %}), [filtering]({% slug filtering_grid %}), and\n * [grouping]({% slug groupingbasics_grid %}). Wrap the columns that will be\n * merged inside the `<kendo-grid-span-column>` tag.\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *    selector: 'my-app',\n *    template: `\n *        <kendo-grid\n *              [sortable]=\"true\"\n *              [filterable]=\"true\"\n *              [kendoGridBinding]=\"products\">\n *          <kendo-grid-column field=\"ProductID\" title=\"Product ID\" width=\"120\">\n *          </kendo-grid-column>\n *          <kendo-grid-span-column>\n *              <kendo-grid-column field=\"ProductName\" title=\"Product Name\">\n *              </kendo-grid-column>\n *              <kendo-grid-column field=\"UnitPrice\" title=\"Unit Price\" filter=\"numeric\" width=\"180\" format=\"{0:c}\">\n *              </kendo-grid-column>\n *          </kendo-grid-span-column>\n *          <kendo-grid-column field=\"Discontinued\" width=\"120\" filter=\"boolean\">\n *              <ng-template kendoGridCellTemplate let-dataItem>\n *                  <input type=\"checkbox\" [checked]=\"dataItem.Discontinued\" disabled/>\n *              </ng-template>\n *          </kendo-grid-column>\n *        </kendo-grid>\n *    `\n * })\n *\n * class AppComponent {\n *   public products = [{\n *      \"ProductID\": 1,\n *      \"ProductName\": \"Chai\",\n *      \"UnitPrice\": 18.0000,\n *      \"Discontinued\": true\n *    }, {\n *      \"ProductID\": 2,\n *      \"ProductName\": \"Chang\",\n *      \"UnitPrice\": 19.0000,\n *      \"Discontinued\": false\n *    }\n *   ];\n * }\n *\n * ```\n *\n * By default, the data cell displays the data for the specified fields. To further customize\n * the span-column functionality, use a [cell template]({% slug api_grid_celltemplatedirective %}).\n *\n * ```html-no-run\n * <kendo-grid-span-column>\n *  <kendo-grid-column field=\"field1\" title=\"Field 1\"></kendo-grid-column>\n *  <kendo-grid-column field=\"field2\" title=\"Field 2\"></kendo-grid-column>\n *    <ng-template kendoGridCellTemplate let-dataItem>\n *        <h5>{{ dataItem.field1 }}</h5>\n *        <p>{{ dataItem.field2 }}</p>\n *    </ng-template>\n *  </kendo-grid-span-column>\n * ```\n */\nvar SpanColumnComponent = /** @class */ (function (_super) {\n    __extends(SpanColumnComponent, _super);\n    function SpanColumnComponent(parent) {\n        var _this = _super.call(this, parent) || this;\n        /*\n         * @hidden\n         */\n        _this.isSpanColumn = true;\n        _this.template = new QueryList();\n        _this.editTemplate = new QueryList();\n        /**\n         * @hidden\n         */\n        _this.childColumns = new QueryList();\n        /**\n         * @hidden\n         */\n        _this.includeInChooser = false;\n        _this._editable = true;\n        _this._locked = false;\n        if (parent && parent.isSpanColumn) {\n            throw new Error('SpanColumn cannot be nested inside another SpanColumn');\n        }\n        return _this;\n    }\n    Object.defineProperty(SpanColumnComponent.prototype, \"editable\", {\n        get: function () {\n            return isPresent(this.editTemplateRef) && this._editable;\n        },\n        /**\n         * Defines whether the edit template of the column will be rendered. The default value is `false`.\n         *\n         * > To enable the editing functionality for a spanned column, set an edit template for it.\n         *\n         * @example\n         * ```html-no-run\n         * <kendo-grid>\n         *    <kendo-grid-span-column [editable]=\"false\">\n         *      <kendo-grid-column field=\"UnitPrice\">\n         *      </kendo-grid-column>\n         *      <kendo-grid-column field=\"ProductName\">\n         *      </kendo-grid-column>\n         *      <ng-template kendoGridEditTemplate>\n         *         .....\n         *      </ng-template>\n         *    </kendo-grid-span-column>\n         * </kendo-grid>\n         * ```\n         */\n        set: function (value) {\n            this._editable = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SpanColumnComponent.prototype, \"width\", {\n        get: function () {\n            return this.childColumns.reduce(function (total, column) { return total + column.width; }, 0);\n        },\n        /**\n         * @hidden\n         * added for backwards compitability\n         */\n        set: function (_value) {\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SpanColumnComponent.prototype, \"leafIndex\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.childColumns.first.leafIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SpanColumnComponent.prototype, \"templateRef\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var template = this.template.first;\n            return template ? template.templateRef : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SpanColumnComponent.prototype, \"editTemplateRef\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var editTemplate = this.editTemplate.first;\n            return editTemplate ? editTemplate.templateRef : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SpanColumnComponent.prototype, \"colspan\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.childColumns.filter(function (c) { return c.isVisible; }).length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SpanColumnComponent.prototype, \"locked\", {\n        get: function () {\n            return this._locked || this.childColumns.some(function (c) { return c.locked; });\n        },\n        /**\n         * Toggles the locked (frozen) state of the columns. Locked columns are visible\n         * at all times during the horizontal scrolling of the Grid.\n         *\n         * For the option to work properly, make sure that:\n         * - Scrolling is enabled.\n         * - The `height` option of the Grid is set.\n         * - The widths of all Grid columns are explicitly set in pixels. In this way,\n         * the Grid adjusts the layout of the locked and unlocked columns.\n         *\n         * @default false\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         *    selector: 'my-app',\n         *    template: `\n         *        <kendo-grid [data]=\"gridData\" [scrollable]=\"scrollable\" style=\"height: 200px\">\n         *          <kendo-grid-span-column [locked]=\"true\">\n         *             <kendo-grid-column field=\"ProductID\" title=\"Product ID\" width=\"120\">\n         *             </kendo-grid-column>\n         *             <kendo-grid-column field=\"ProductName\" title=\"Product Name\" width=\"200\">\n         *             </kendo-grid-column>\n         *          </kendo-grid-span-column>\n         *          <kendo-grid-column field=\"UnitPrice\" title=\"Unit Price\" width=\"230\">\n         *          </kendo-grid-column>\n         *        </kendo-grid>\n         *    `\n         * })\n         *\n         * class AppComponent {\n         *    public gridData: any[];\n         *\n         *    constructor() {\n         *        this.gridData = products;\n         *    }\n         * }\n         *\n         * const products = [{\n         *    \"ProductID\": 1,\n         *    \"ProductName\": \"Chai\",\n         *    \"UnitPrice\": 18.0000,\n         *    \"Discontinued\": true\n         *  }, {\n         *    \"ProductID\": 2,\n         *    \"ProductName\": \"Chang\",\n         *    \"UnitPrice\": 19.0000,\n         *    \"Discontinued\": false\n         *  }\n         * ];\n         *\n         * ```\n         */\n        set: function (value) {\n            this._locked = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SpanColumnComponent.prototype, \"childrenArray\", {\n        get: function () {\n            return this.childColumns.toArray();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SpanColumnComponent.prototype, \"hasChildren\", {\n        get: function () {\n            return this.childColumns.length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SpanColumnComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: ColumnBase$1,\n                            useExisting: forwardRef(function () { return SpanColumnComponent; })\n                        }\n                    ],\n                    selector: 'kendo-grid-span-column',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    SpanColumnComponent.ctorParameters = function () { return [\n        { type: ColumnBase$1, decorators: [{ type: SkipSelf }, { type: Host }, { type: Optional }] }\n    ]; };\n    SpanColumnComponent.propDecorators = {\n        template: [{ type: ContentChildren, args: [CellTemplateDirective, { descendants: false },] }],\n        editTemplate: [{ type: ContentChildren, args: [EditTemplateDirective, { descendants: false },] }],\n        childColumns: [{ type: ContentChildren, args: [ColumnComponent,] }],\n        editable: [{ type: Input }],\n        locked: [{ type: Input }]\n    };\n    return SpanColumnComponent;\n}(ColumnBase$1));\n\n/**\n * @hidden\n */\nvar expandColumns = function (columns) { return (columns.reduce(function (acc, column) { return acc.concat(isSpanColumnComponent(column) ? column.childrenArray : [column]); }, []) // tslint:disable-line:align\n); };\n/**\n * @hidden\n */\nvar expandColumnsWithSpan = function (columns) { return (columns.reduce(function (acc, column) { return acc.concat(isSpanColumnComponent(column) ?\n    [column].concat(column.childrenArray) :\n    [column]); }, []) // tslint:disable-line:align\n); };\n/**\n * @hidden\n */\nvar columnsToRender = function (columns) { return (expandColumns(columns).filter(function (x) { return x.isVisible; })); };\nvar sumProp = function (prop) { return function (array) {\n    return (array || []).reduce(function (prev, curr) { return prev + (curr[prop] || 0); }, 0);\n}; };\n/**\n * @hidden\n */\nvar sumColumnWidths = sumProp('width');\n/**\n * @hidden\n */\nvar columnsSpan = sumProp('colspan');\n// tslint:disable-next-line:max-line-length\nvar validField = new RegExp(\"^[$A-Z_a-z][$A-Z_a-z0-9\\\\.]*$\");\n/**\n * @hidden\n */\nvar isValidFieldName = function (fieldName) {\n    return !isNullOrEmptyString(fieldName) && validField.test(fieldName) &&\n        fieldName[0] !== \".\" && fieldName[fieldName.length - 1] !== \".\";\n};\n/**\n * @hidden\n */\nvar children = function (column) { return column.children.filter(function (child) { return child !== column; }); };\n/**\n * @hidden\n */\nvar leafColumns = function (columns) {\n    return columns.reduce(function (acc, column) {\n        if (column.isColumnGroup) {\n            acc = acc.concat(leafColumns(children(column)));\n        }\n        else if (column.isSpanColumn) {\n            acc = acc.concat(column.childrenArray);\n        }\n        else {\n            acc.push(column);\n        }\n        return acc;\n    }, []).filter(function (x) { return x.isVisible; }); // tslint:disable-line:align\n};\n/**\n * @hidden\n */\nvar someLeafColumn = function (callback) {\n    var columns = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        columns[_i - 1] = arguments[_i];\n    }\n    return leafColumns(columns).some(callback);\n};\n/**\n * @hidden\n */\nvar resizableColumns = function (columns) { return columns.filter(function (column) { return isTruthy(column.resizable) && column.isVisible; }); };\n/**\n * @hidden\n */\nvar sortColumns = function (columns) {\n    return orderBy(columns, [{ field: 'orderIndex', dir: 'asc' }]);\n};\n/**\n * @hidden\n */\nvar isInSpanColumn = function (column) {\n    return isTruthy(column.parent) && isSpanColumnComponent(column.parent);\n};\n\n/**\n * @hidden\n */\nfunction isColumnGroupComponent(column) {\n    return column.isColumnGroup;\n}\n/**\n * Represents the column group header of the Grid\n * ([more information and examples]({% slug multicolumnheaders_columns_grid %})).\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *    selector: 'my-app',\n *    template: `\n *     <kendo-grid [data]=\"gridData\">\n *       <kendo-grid-column-group title=\"Product Info\">\n *         <ng-template kendoGridHeaderTemplate let-columnIndex=\"columnIndex\" let-column=\"column\">\n *               Column index: {{columnIndex}} / column title: {{column.title}}\n *         </ng-template>\n *         <kendo-grid-column field=\"ProductID\" title=\"Product ID\" width=\"120\">\n *         </kendo-grid-column>\n *         <kendo-grid-column field=\"ProductName\" title=\"Product Name\">\n *         </kendo-grid-column>\n *       </kendo-grid-column-group>\n *       <kendo-grid-column field=\"UnitPrice\" title=\"Unit Price\" width=\"230\">\n *       </kendo-grid-column>\n *       <kendo-grid-column field=\"Discontinued\" width=\"120\">\n *           <ng-template kendoGridCellTemplate let-dataItem>\n *               <input type=\"checkbox\" [checked]=\"dataItem.Discontinued\" disabled/>\n *           </ng-template>\n *       </kendo-grid-column>\n *     </kendo-grid>\n *    `\n * })\n *\n * class AppComponent {\n *    public gridData: any[];\n *\n *    constructor() {\n *        this.gridData = products;\n *    }\n * }\n *\n * const products = [{\n *    \"ProductID\": 1,\n *    \"ProductName\": \"Chai\",\n *    \"UnitPrice\": 18.0000,\n *    \"Discontinued\": true\n *  }, {\n *    \"ProductID\": 2,\n *    \"ProductName\": \"Chang\",\n *    \"UnitPrice\": 19.0000,\n *    \"Discontinued\": false\n *  }\n * ];\n *\n * ```\n */\nvar ColumnGroupComponent = /** @class */ (function (_super) {\n    __extends(ColumnGroupComponent, _super);\n    function ColumnGroupComponent(parent) {\n        var _this = _super.call(this, parent) || this;\n        _this.parent = parent;\n        /**\n         * @hidden\n         */\n        _this.includeInChooser = false;\n        /**\n         * @hidden\n         */\n        _this.isColumnGroup = true;\n        /**\n         * @hidden\n         */\n        _this.minResizableWidth = 10;\n        if (parent && parent.isSpanColumn) {\n            throw new Error('ColumnGroupComponent cannot be nested inside SpanColumnComponent');\n        }\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    ColumnGroupComponent.prototype.rowspan = function () {\n        return 1;\n    };\n    Object.defineProperty(ColumnGroupComponent.prototype, \"colspan\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var _this = this;\n            if (!this.children || this.children.length === 1) {\n                return 1;\n            }\n            return columnsSpan(this.children\n                .filter(function (child) { return child !== _this && child.isVisible; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnGroupComponent.prototype, \"leafIndex\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.children ? (this.firstChild || {}).leafIndex : -1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnGroupComponent.prototype, \"childrenArray\", {\n        get: function () {\n            var _this = this;\n            return this.children.filter(function (c) { return c !== _this; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnGroupComponent.prototype, \"hasChildren\", {\n        get: function () {\n            return Boolean(this.firstChild);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnGroupComponent.prototype, \"firstChild\", {\n        get: function () {\n            var _this = this;\n            return this.children.find(function (column) { return column !== _this; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColumnGroupComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: ColumnBase$1,\n                            useExisting: forwardRef(function () { return ColumnGroupComponent; })\n                        }\n                    ],\n                    selector: 'kendo-grid-column-group',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    ColumnGroupComponent.ctorParameters = function () { return [\n        { type: ColumnBase$1, decorators: [{ type: SkipSelf }, { type: Host }, { type: Optional }] }\n    ]; };\n    ColumnGroupComponent.propDecorators = {\n        children: [{ type: ContentChildren, args: [ColumnBase$1,] }]\n    };\n    return ColumnGroupComponent;\n}(ColumnBase$1));\n\n/**\n * Represents the detail template of the Grid ([more information and examples]({% slug detailrowtemplate_grid %})).\n * To define the detail template, nest an `<ng-template>` tag with the `kendoGridDetailTemplate` directive inside a `<kendo-grid>` tag.\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *   selector: 'my-app',\n *   template: `\n *       <kendo-grid\n *         [data]=\"data\"\n *         selectable=\"true\"\n *         style=\"height: 160px\"\n *         >\n *         <kendo-grid-column field=\"ProductID\"></kendo-grid-column>\n *         <kendo-grid-column field=\"ProductName\"></kendo-grid-column>\n *         <kendo-grid-column field=\"UnitPrice\"></kendo-grid-column>\n *         <ng-template kendoGridDetailTemplate let-dataItem>\n *           <div *ngIf=\"dataItem.Category\">\n *             <header>{{dataItem.Category?.CategoryName}}</header>\n *             <span>{{dataItem.Category?.Description}}</span>\n *           </div>\n *         </ng-template>\n *       </kendo-grid>\n *   `\n * })\n *\n * class AppComponent {\n *     public data = [{\n *         \"ProductID\": 1,\n *         \"ProductName\": \"Chai\",\n *         \"UnitPrice\": 18.0000,\n *         \"Discontinued\": false,\n *         \"Category\": {\n *             \"CategoryID\": 1,\n *             \"CategoryName\": \"Beverages\",\n *             \"Description\": \"Soft drinks, coffees, teas, beers, and ales\"\n *         }\n *       }, {\n *         \"ProductID\": 2,\n *         \"ProductName\": \"Chang\",\n *         \"UnitPrice\": 19.0000,\n *         \"Discontinued\": false,\n *         \"Category\": {\n *             \"CategoryID\": 1,\n *             \"CategoryName\": \"Beverages\",\n *             \"Description\": \"Soft drinks, coffees, teas, beers, and ales\"\n *         }\n *       }, {\n *         \"ProductID\": 3,\n *         \"ProductName\": \"Aniseed Syrup\",\n *         \"UnitPrice\": 10.0000,\n *         \"Discontinued\": false,\n *         \"Category\": {\n *             \"CategoryID\": 2,\n *             \"CategoryName\": \"Condiments\",\n *             \"Description\": \"Sweet and savory sauces, relishes, spreads, and seasonings\"\n *         }\n *     }];\n *\n * }\n *\n * ```\n *\n */\nvar DetailTemplateDirective = /** @class */ (function () {\n    function DetailTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n        this._condition = function () { return true; };\n    }\n    Object.defineProperty(DetailTemplateDirective.prototype, \"showIf\", {\n        get: function () {\n            return this._condition;\n        },\n        /**\n         * Defines the function that indicates if a given detail row and the associated **Expand** or **Collapse** button will be displayed.\n         */\n        set: function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"showIf must be a function, but received \" + JSON.stringify(fn) + \".\");\n            }\n            this._condition = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DetailTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridDetailTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    DetailTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    DetailTemplateDirective.propDecorators = {\n        showIf: [{ type: Input, args: [\"kendoGridDetailTemplateShowIf\",] }]\n    };\n    return DetailTemplateDirective;\n}());\n\nvar canCreateElement = function () { return isDocumentAvailable() && document.createElement; };\nvar cachedScrollbarWidth = null;\nvar cachedPixelRatio;\nvar cachedRtlScrollLeft = null;\nfunction scrollbarWidth() {\n    if (cachedScrollbarWidth === null && canCreateElement()) {\n        cachedPixelRatio = window.devicePixelRatio || 1;\n        var div = document.createElement(\"div\");\n        div.style.cssText = \"overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block\";\n        div.innerHTML = \"&nbsp;\";\n        document.body.appendChild(div);\n        cachedScrollbarWidth = div.offsetWidth - div.scrollWidth;\n        document.body.removeChild(div);\n    }\n    return cachedScrollbarWidth;\n}\nfunction rtlScrollLeft() {\n    if (cachedRtlScrollLeft === null && canCreateElement()) {\n        var div = document.createElement(\"div\");\n        div.style.cssText = \"overflow:scroll;zoom:1;clear:both;display:block;width:100px;visibility:hidden;position:absolute;left:-10000px;direction:rtl;\";\n        div.innerHTML = \"<div style='width:200px;height:1px;'</div>\";\n        document.body.appendChild(div);\n        var initial = div.scrollLeft;\n        div.scrollLeft = -1;\n        cachedRtlScrollLeft = div.scrollLeft < 0 ? div.scrollLeft : initial;\n        document.body.removeChild(div);\n    }\n    return cachedRtlScrollLeft;\n}\n/**\n * @hidden\n * move to kendo-common\n */\nvar BrowserSupportService = /** @class */ (function () {\n    function BrowserSupportService(zone, changeDetector) {\n        var _this = this;\n        this.zone = zone;\n        this.changeDetector = changeDetector;\n        this.changes = new EventEmitter();\n        if (typeof window !== 'undefined') {\n            this.zone.runOutsideAngular(function () {\n                fromEvent(window, 'resize').pipe(auditTime(100)).subscribe(function () {\n                    if (cachedPixelRatio !== window.devicePixelRatio) {\n                        zone.run(function () {\n                            cachedScrollbarWidth = null;\n                            _this.changes.emit();\n                            _this.changeDetector.markForCheck();\n                        });\n                    }\n                });\n            });\n        }\n    }\n    Object.defineProperty(BrowserSupportService.prototype, \"scrollbarWidth\", {\n        get: function () {\n            return scrollbarWidth();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BrowserSupportService.prototype, \"rtlScrollLeft\", {\n        get: function () {\n            return rtlScrollLeft();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BrowserSupportService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    BrowserSupportService.ctorParameters = function () { return [\n        { type: NgZone },\n        { type: ChangeDetectorRef }\n    ]; };\n    return BrowserSupportService;\n}());\n\n/* tslint:disable:use-life-cycle-interface */\nvar isGroupItem = function (source) {\n    return source.items !== undefined &&\n        source.field !== undefined;\n};\nvar isVirtualGroupItem = function (source) {\n    return source.offset !== undefined &&\n        source.skipHeader !== undefined;\n};\nvar flattenGroups = function (groups) { return (groups.reduce(function (acc, curr) {\n    if (isGroupItem(curr)) {\n        return acc.concat(flattenGroups(curr.items));\n    }\n    return acc.concat([curr]);\n}, []) // tslint:disable-line:align\n); };\n/**\n * @hidden\n */\nvar itemAt = function (data, index) {\n    var first = data[0];\n    if (isPresent(first) && isGroupItem(first)) {\n        return flattenGroups(data)[index];\n    }\n    return data[index];\n};\n/**\n * @hidden\n */\nvar getIterator$1 = function (data, _a) {\n    var footers = _a.footers, level = _a.level, dataIndex = _a.dataIndex, parentGroupIndex = _a.parentGroupIndex, groupIndex = _a.groupIndex;\n    var first = data[0];\n    if (isPresent(first) && isGroupItem(first)) {\n        if (isVirtualGroupItem(first)) {\n            groupIndex = isPresent(first.offset) ? first.offset : groupIndex;\n        }\n        //tslint:disable-next-line:no-use-before-declare\n        return new GroupIterator(data, footers, level, dataIndex, parentGroupIndex, groupIndex);\n    }\n    //tslint:disable-next-line:no-use-before-declare\n    return new ItemIterator(data, dataIndex, parentGroupIndex);\n};\nvar ArrayIterator = /** @class */ (function () {\n    function ArrayIterator(arr, idx) {\n        if (idx === void 0) { idx = 0; }\n        this.arr = arr;\n        this.idx = idx;\n        this.arr = arr || [];\n    }\n    ArrayIterator.prototype[iterator] = function () {\n        return this;\n    };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.arr.length ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : { done: true, value: undefined };\n    };\n    return ArrayIterator;\n}());\n/**\n * @hidden\n */\nvar Iterator = /** @class */ (function () {\n    function Iterator(arr, dataIndex, resultMap) {\n        if (dataIndex === void 0) { dataIndex = 0; }\n        if (resultMap === void 0) { resultMap = function (x) { return x; }; }\n        this.dataIndex = dataIndex;\n        this.resultMap = resultMap;\n        var iter = arr[iterator];\n        this._innerIterator = iter ? arr[iterator]() : new ArrayIterator(arr);\n    }\n    Iterator.prototype[iterator] = function () {\n        return this;\n    };\n    Iterator.prototype.next = function () {\n        return this.resultMap(this._innerIterator.next(), this.dataIndex++);\n    };\n    return Iterator;\n}());\n/**\n * @hidden\n */\nvar ItemIterator = /** @class */ (function (_super) {\n    __extends(ItemIterator, _super);\n    function ItemIterator(arr, dataIndex, groupIndex) {\n        return _super.call(this, arr, dataIndex, function (x, idx) { return ({\n            done: x.done,\n            value: {\n                data: x.value,\n                groupIndex: groupIndex,\n                index: idx,\n                type: 'data'\n            }\n        }); }) || this;\n    }\n    Object.defineProperty(ItemIterator.prototype, \"index\", {\n        /**\n         * The index of the next record.\n         * @readonly\n         * @type {number}\n         */\n        get: function () {\n            return this.dataIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ItemIterator;\n}(Iterator));\nvar prefix = function (s, n) {\n    var p = s ? s + \"_\" : s;\n    return \"\" + p + n;\n};\n/**\n * @hidden\n */\nvar GroupIterator = /** @class */ (function () {\n    function GroupIterator(arr, outputFooters, level, dataIndex, parentIndex, groupIndex) {\n        if (outputFooters === void 0) { outputFooters = false; }\n        if (level === void 0) { level = 0; }\n        if (dataIndex === void 0) { dataIndex = 0; }\n        if (parentIndex === void 0) { parentIndex = \"\"; }\n        if (groupIndex === void 0) { groupIndex = 0; }\n        this.arr = arr;\n        this.outputFooters = outputFooters;\n        this.level = level;\n        this.dataIndex = dataIndex;\n        this.parentIndex = parentIndex;\n        this.groupIndex = groupIndex;\n        this.currentGroupIndex = \"\";\n        this.arr = arr || [];\n        this._iterator = new Iterator(this.arr, this.dataIndex);\n    }\n    GroupIterator.prototype[iterator] = function () {\n        return this;\n    };\n    GroupIterator.prototype.nextGroupItem = function () {\n        this.current = this._iterator.next().value;\n        this._innerIterator = null;\n        if (this.current) {\n            this.currentGroupIndex = prefix(this.parentIndex, this.groupIndex++);\n            return {\n                done: false,\n                value: {\n                    data: this.current,\n                    index: this.currentGroupIndex,\n                    level: this.level,\n                    type: 'group'\n                }\n            };\n        }\n        else {\n            this.current = null;\n            return { done: true, value: undefined };\n        }\n    };\n    GroupIterator.prototype.footerItem = function () {\n        if (this.current) {\n            var group = this.current;\n            this.current = null;\n            return {\n                done: false,\n                value: {\n                    data: group,\n                    groupIndex: this.currentGroupIndex,\n                    level: this.level,\n                    type: 'footer'\n                }\n            };\n        }\n        else {\n            this.current = null;\n            return { done: true, value: undefined };\n        }\n    };\n    GroupIterator.prototype.innerIterator = function (group) {\n        if (!this._innerIterator) {\n            this._innerIterator = getIterator$1(group.items, {\n                dataIndex: this.dataIndex,\n                footers: this.outputFooters,\n                level: this.level + 1,\n                parentGroupIndex: this.currentGroupIndex\n            });\n        }\n        return this._innerIterator;\n    };\n    GroupIterator.prototype.nextDataItem = function (group) {\n        var iterator$$1 = this.innerIterator(group);\n        var result = iterator$$1.next();\n        if (isPresent(result.value) && !result.done && result.value.type === \"data\") {\n            this.dataIndex = result.value.index + 1;\n        }\n        return !result.done ? result : undefined;\n    };\n    GroupIterator.prototype.next = function () {\n        if (!isPresent(this.current)) {\n            return this.nextGroupItem();\n        }\n        var item = this.nextDataItem(this.current);\n        return item ? item : (this.outputFooters ? this.footerItem() : this.nextGroupItem());\n    };\n    Object.defineProperty(GroupIterator.prototype, \"index\", {\n        /**\n         * The index of the last iterated data record.\n         * @readonly\n         * @type {number}\n         */\n        get: function () {\n            return this.dataIndex + 1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return GroupIterator;\n}());\n\n/**\n * @hidden\n */\nvar DataResultIterator = /** @class */ (function () {\n    function DataResultIterator(source, skip, groupFooters) {\n        if (skip === void 0) { skip = 0; }\n        if (groupFooters === void 0) { groupFooters = false; }\n        this.source = source;\n        this.skip = skip;\n        this.groupFooters = groupFooters;\n        this.source = this.source ? this.source : [];\n        this.isObject = this.isGridDataResult(this.source);\n    }\n    DataResultIterator.prototype.isGridDataResult = function (source) {\n        return source.total !== undefined && source.data !== undefined;\n    };\n    Object.defineProperty(DataResultIterator.prototype, \"total\", {\n        get: function () {\n            return this.isObject ? this.source.total : this.source.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataResultIterator.prototype, \"data\", {\n        get: function () {\n            return this.isObject ? this.source.data : this.source;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DataResultIterator.prototype.map = function (fn) {\n        return this.data.map(fn);\n    };\n    DataResultIterator.prototype.filter = function (fn) {\n        return this.data.filter(fn);\n    };\n    DataResultIterator.prototype.reduce = function (fn, init) {\n        return this.data.reduce(fn, init);\n    };\n    DataResultIterator.prototype.forEach = function (fn) {\n        this.data.forEach(fn);\n    };\n    DataResultIterator.prototype.some = function (fn) {\n        return this.data.some(fn);\n    };\n    DataResultIterator.prototype[iterator] = function () {\n        return getIterator$1(this.data, {\n            dataIndex: this.skip,\n            footers: this.groupFooters,\n            groupIndex: this.skip\n        });\n    };\n    DataResultIterator.prototype.toString = function () { return this.data.toString(); };\n    return DataResultIterator;\n}());\n/**\n * @hidden\n */\nvar DataCollection = /** @class */ (function () {\n    function DataCollection(accessor) {\n        this.accessor = accessor;\n    }\n    Object.defineProperty(DataCollection.prototype, \"total\", {\n        get: function () { return this.accessor().total; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataCollection.prototype, \"length\", {\n        get: function () { return this.accessor().data.length; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataCollection.prototype, \"first\", {\n        get: function () { return this.accessor().data[0]; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataCollection.prototype, \"last\", {\n        get: function () { return this.accessor().data[this.length - 1]; },\n        enumerable: true,\n        configurable: true\n    });\n    DataCollection.prototype.at = function (index) {\n        return itemAt(this.accessor().data, index);\n    };\n    DataCollection.prototype.map = function (fn) { return this.accessor().map(fn); };\n    DataCollection.prototype.filter = function (fn) {\n        return this.accessor().filter(fn);\n    };\n    DataCollection.prototype.reduce = function (fn, init) {\n        return this.accessor().reduce(fn, init);\n    };\n    DataCollection.prototype.forEach = function (fn) {\n        this.accessor().forEach(fn);\n    };\n    DataCollection.prototype.some = function (fn) {\n        return this.accessor().some(fn);\n    };\n    DataCollection.prototype[iterator] = function () {\n        return this.accessor()[iterator]();\n    };\n    DataCollection.prototype.toString = function () { return this.accessor().toString(); };\n    return DataCollection;\n}());\n\n/**\n * @hidden\n */\nvar DomEventsService = /** @class */ (function () {\n    function DomEventsService() {\n        this.cellClick = new EventEmitter();\n        this.cellMousedown = new EventEmitter();\n        this.click = new EventEmitter();\n        this.keydown = new EventEmitter();\n        this.focus = new EventEmitter();\n        this.focusIn = new EventEmitter();\n        this.focusOut = new EventEmitter();\n        this.windowBlur = new EventEmitter();\n    }\n    DomEventsService.decorators = [\n        { type: Injectable },\n    ];\n    return DomEventsService;\n}());\n\n/**\n * @hidden\n */\nvar LocalDataChangesService = /** @class */ (function () {\n    function LocalDataChangesService() {\n        this.changes = new EventEmitter();\n    }\n    LocalDataChangesService.decorators = [\n        { type: Injectable },\n    ];\n    return LocalDataChangesService;\n}());\n\n/**\n * @hidden\n */\nvar SelectionService = /** @class */ (function () {\n    function SelectionService(domEvents, localDataChangesService) {\n        var _this = this;\n        this.changes = new EventEmitter();\n        this.lastSelectionStartIndex = 0;\n        this.currentSelection = [];\n        this.selectAllChecked = false;\n        this.cellClickSubscription = domEvents.cellClick.subscribe(function (args) {\n            if (_this.options.enabled && !_this.options.checkboxOnly && args.type !== 'contextmenu') {\n                _this.handleClick({ index: args.rowIndex, data: args.dataItem }, args.originalEvent);\n            }\n        });\n        this.mousedownSubscription = domEvents.cellMousedown.subscribe(function (args) {\n            if (_this.options.enabled && (!_this.options.mode || _this.options.mode === \"multiple\") &&\n                !_this.options.checkboxOnly && args.originalEvent.shiftKey) {\n                args.originalEvent.preventDefault();\n            }\n        });\n        if (localDataChangesService) {\n            this.dataChangedSubscription = localDataChangesService.changes.subscribe(function (args) {\n                if (isPresent(args.action) && args.action === 'remove') {\n                    _this.deselect(args.item);\n                }\n            });\n        }\n    }\n    SelectionService.prototype.init = function (settings) {\n        this.settings = settings;\n        this.currentSelection = [];\n        if (settings.selectable && settings.selectable.enabled !== false) {\n            var iterator_1 = this.getIterator();\n            this._selectAllState = true;\n            while (true) {\n                var item = iterator_1.next();\n                if (item.done) {\n                    break;\n                }\n                if (item.value && item.value.type === \"data\") {\n                    var rowArgs = {\n                        dataItem: item.value.data,\n                        index: item.value.index\n                    };\n                    if (settings.rowSelected(rowArgs)) {\n                        this.currentSelection[item.value.index] = rowArgs;\n                    }\n                    else {\n                        this._selectAllState = undefined;\n                    }\n                }\n            }\n            if (this.currentSelection.length === 0) {\n                this._selectAllState = false;\n            }\n        }\n    };\n    SelectionService.prototype.isSelected = function (index) {\n        return this.options.enabled && isPresent(this.currentSelection[index]);\n    };\n    SelectionService.prototype.handleClick = function (item, event) {\n        var ev;\n        var ctrlKey = event.ctrlKey || event.metaKey;\n        if (this.options.mode === \"single\" && ctrlKey && this.isSelected(item.index)) {\n            ev = this.toggle(item);\n        }\n        else if (this.options.mode === \"multiple\") {\n            if (ctrlKey && !event.shiftKey) {\n                ev = this.toggle(item);\n            }\n            else if (event.shiftKey) {\n                ev = this.addAllTo(item, ctrlKey);\n            }\n        }\n        if (!isPresent(ev)) {\n            ev = this.select(item);\n            this.currentSelection[item.index] = {\n                dataItem: item.data,\n                index: item.index\n            };\n        }\n        if (!ev.selectedRows.length && !ev.deselectedRows.length) {\n            return;\n        }\n        ev.ctrlKey = event.ctrlKey || event.metaKey;\n        ev.shiftKey = event.shiftKey;\n        this.changes.emit(ev);\n    };\n    SelectionService.prototype.toggle = function (item) {\n        var selectedRows = [];\n        var deselectedRows = [];\n        this.lastSelectionStartIndex = item.index;\n        if (this.isSelected(item.index)) {\n            deselectedRows.push({ dataItem: item.data, index: item.index });\n        }\n        else {\n            selectedRows.push({ dataItem: item.data, index: item.index });\n        }\n        return {\n            deselectedRows: deselectedRows,\n            selectedRows: selectedRows\n        };\n    };\n    SelectionService.prototype.toggleByIndex = function (index) {\n        var iterator$$1 = this.getIterator();\n        if (this.selectAllChecked && this.isSelected(index)) {\n            this.selectAllChecked = false;\n        }\n        while (true) {\n            var item = iterator$$1.next();\n            if (item.done) {\n                break;\n            }\n            if (item.value && item.value.type === \"data\" && item.value.index === index) {\n                var itemToToggle = {\n                    data: item.value.data,\n                    index: item.value.index\n                };\n                if (this.isSelected(index) || this.options.mode === \"multiple\") {\n                    return this.toggle(itemToToggle);\n                }\n                else {\n                    return this.select(itemToToggle);\n                }\n            }\n        }\n    };\n    SelectionService.prototype.select = function (item) {\n        var deselectedRows = [];\n        var selectedRows = [];\n        this.lastSelectionStartIndex = item.index;\n        if (!this.isSelected(item.index)) {\n            selectedRows.push({ dataItem: item.data, index: item.index });\n        }\n        this.currentSelection.forEach(function (row) {\n            if (row.index !== item.index) {\n                deselectedRows.push(row);\n            }\n        });\n        return {\n            deselectedRows: deselectedRows,\n            selectedRows: selectedRows\n        };\n    };\n    //Used to manually deselect removed items\n    SelectionService.prototype.deselect = function (removedItem) {\n        var iterator$$1 = this.getIterator();\n        while (true) {\n            var item = iterator$$1.next();\n            if (item.done) {\n                break;\n            }\n            if (item.value && item.value.type === \"data\" && item.value.data === removedItem) {\n                var rowArgs = {\n                    dataItem: item.value.data,\n                    index: item.value.index\n                };\n                if (this.isSelected(rowArgs.index)) {\n                    var ev = {\n                        ctrlKey: false,\n                        deselectedRows: [rowArgs],\n                        selectedRows: []\n                    };\n                    this.changes.emit(ev);\n                }\n            }\n        }\n    };\n    SelectionService.prototype.addAllTo = function (item, ctrlKey) {\n        var selectedRows = [];\n        var deselectedRows = [];\n        var start = Math.min(this.lastSelectionStartIndex, item.index);\n        var end = Math.max(this.lastSelectionStartIndex, item.index);\n        var iterator$$1 = this.getIterator();\n        while (true) {\n            var next = iterator$$1.next();\n            if (next.done) {\n                break;\n            }\n            if (next.value && next.value.type === \"data\") {\n                var idx = next.value.index;\n                if ((idx < start || idx > end) && this.isSelected(idx) && !ctrlKey) {\n                    deselectedRows.push({ dataItem: next.value.data, index: idx });\n                }\n                if ((idx >= start && idx <= end) && !this.isSelected(idx)) {\n                    selectedRows.push({ dataItem: next.value.data, index: idx });\n                }\n            }\n        }\n        return {\n            deselectedRows: deselectedRows,\n            selectedRows: selectedRows\n        };\n    };\n    SelectionService.prototype.updateAll = function (selectAllChecked) {\n        this.selectAllChecked = selectAllChecked;\n        var selectedRows = [];\n        var deselectedRows = [];\n        var iterator$$1 = this.getIterator();\n        while (true) {\n            var next = iterator$$1.next();\n            if (next.done) {\n                break;\n            }\n            if (next.value && next.value.type === \"data\") {\n                var idx = next.value.index;\n                if (this.isSelected(idx) && !selectAllChecked) {\n                    deselectedRows.push({ dataItem: next.value.data, index: idx });\n                }\n                if (!this.isSelected(idx) && selectAllChecked) {\n                    selectedRows.push({ dataItem: next.value.data, index: idx });\n                }\n            }\n        }\n        if (!selectedRows.length && !deselectedRows.length) {\n            return;\n        }\n        var ev = {\n            ctrlKey: true,\n            deselectedRows: deselectedRows,\n            selectedRows: selectedRows,\n            shiftKey: true\n        };\n        this.changes.emit(ev);\n    };\n    Object.defineProperty(SelectionService.prototype, \"selectAllState\", {\n        get: function () {\n            return this._selectAllState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionService.prototype, \"selected\", {\n        get: function () {\n            return this.currentSelection.map(function (item) {\n                return item.index;\n            }).filter(function (n) { return typeof n === \"number\"; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionService.prototype, \"options\", {\n        get: function () {\n            var defaultOptions = {\n                checkboxOnly: false,\n                enabled: true,\n                mode: \"multiple\"\n            };\n            if (!isPresent(this.settings)) {\n                return defaultOptions;\n            }\n            if (typeof this.settings.selectable === 'boolean') {\n                return {\n                    checkboxOnly: false,\n                    enabled: this.settings.selectable,\n                    mode: \"multiple\"\n                };\n            }\n            else {\n                return Object.assign(defaultOptions, this.settings.selectable);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionService.prototype.ngOnDestroy = function () {\n        if (this.cellClickSubscription) {\n            this.cellClickSubscription.unsubscribe();\n            this.cellClickSubscription = null;\n        }\n        if (this.mousedownSubscription) {\n            this.mousedownSubscription.unsubscribe();\n            this.mousedownSubscription = null;\n        }\n        if (this.dataChangedSubscription) {\n            this.dataChangedSubscription.unsubscribe();\n            this.dataChangedSubscription = null;\n        }\n    };\n    SelectionService.prototype.getIterator = function () {\n        var accessor = this.settings.view.accessor();\n        if (!accessor) {\n            return;\n        }\n        return accessor[iterator]();\n    };\n    SelectionService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    SelectionService.ctorParameters = function () { return [\n        { type: DomEventsService },\n        { type: LocalDataChangesService }\n    ]; };\n    return SelectionService;\n}());\n\n/* tslint:disable:no-input-rename */\n/**\n * @hidden\n */\nvar Selection = /** @class */ (function () {\n    function Selection(grid, cd) {\n        this.grid = grid;\n        this.cd = cd;\n        /**\n         * Defines the collection that will store the selected item keys.\n         */\n        this.selectedKeys = [];\n        /**\n         * Fires when the `selectedKeys` collection has been updated.\n         */\n        this.selectedKeysChange = new EventEmitter();\n        this.init();\n    }\n    Selection.prototype.init = function () {\n        var _this = this;\n        if (!isPresent(this.grid.rowSelected)) {\n            this.grid.rowSelected = function (row) {\n                return _this.selectedKeys.indexOf(_this.getItemKey(row)) >= 0;\n            };\n        }\n        this.selectionChangeSubscription = this.grid\n            .selectionChange\n            .subscribe(this.onSelectionChange.bind(this));\n    };\n    /**\n     * @hidden\n     */\n    Selection.prototype.destroy = function () {\n        this.selectionChangeSubscription.unsubscribe();\n    };\n    /**\n     * @hidden\n     */\n    Selection.prototype.reset = function () {\n        this.selectedKeys.splice(0, this.selectedKeys.length);\n    };\n    Selection.prototype.getItemKey = function (row) {\n        if (this.selectionKey) {\n            if (typeof this.selectionKey === \"string\") {\n                return row.dataItem[this.selectionKey];\n            }\n            if (typeof this.selectionKey === \"function\") {\n                return this.selectionKey(row);\n            }\n        }\n        return row.index;\n    };\n    Selection.prototype.onSelectionChange = function (selection) {\n        var _this = this;\n        selection.deselectedRows.forEach(function (item) {\n            var itemKey = _this.getItemKey(item);\n            var itemIndex = _this.selectedKeys.indexOf(itemKey);\n            if (itemIndex >= 0) {\n                _this.selectedKeys.splice(itemIndex, 1);\n            }\n        });\n        if (this.grid.selectableSettings.mode === \"single\" && this.selectedKeys.length > 0) {\n            this.reset();\n        }\n        selection.selectedRows.forEach(function (item) {\n            var itemKey = _this.getItemKey(item);\n            if (_this.selectedKeys.indexOf(itemKey) < 0) {\n                _this.selectedKeys.push(itemKey);\n            }\n        });\n        this.cd.markForCheck();\n        this.selectedKeysChange.emit(this.selectedKeys);\n    };\n    Selection.propDecorators = {\n        selectedKeys: [{ type: Input }],\n        selectionKey: [{ type: Input, args: [\"kendoGridSelectBy\",] }],\n        selectedKeysChange: [{ type: Output }]\n    };\n    return Selection;\n}());\n\n/**\n * @hidden\n */\nvar PreventableEvent = /** @class */ (function () {\n    function PreventableEvent() {\n        this.prevented = false;\n    }\n    /**\n     * Prevents the default action for a specified event.\n     * In this way, the source component suppresses\n     * the built-in behavior that follows the event.\n     */\n    PreventableEvent.prototype.preventDefault = function () {\n        this.prevented = true;\n    };\n    /**\n     * Returns `true` if the event was prevented\n     * by any of its subscribers.\n     *\n     * @returns `true` if the default action was prevented.\n     * Otherwise, returns `false`.\n     */\n    PreventableEvent.prototype.isDefaultPrevented = function () {\n        return this.prevented;\n    };\n    return PreventableEvent;\n}());\n\n/**\n * Arguments for the `cellClose` event.\n */\nvar CellCloseEvent = /** @class */ (function (_super) {\n    __extends(CellCloseEvent, _super);\n    function CellCloseEvent(options) {\n        var _this = _super.call(this) || this;\n        /**\n         * @hidden\n         */\n        _this.action = 'cellClose';\n        Object.assign(_this, options);\n        return _this;\n    }\n    return CellCloseEvent;\n}(PreventableEvent));\n\n/**\n * @hidden\n */\nvar isEqual = function (index) { return function (item) { return item.index === index; }; };\n/**\n * @hidden\n */\nvar isNotEqual = function (index) { return function (item) { return item.index !== index; }; };\n/**\n * @hidden\n */\nvar isNewRow = function (index) { return index === -1 || index === undefined; };\n/**\n * @hidden\n */\nvar EditService = /** @class */ (function () {\n    function EditService(ngZone) {\n        var _this = this;\n        this.ngZone = ngZone;\n        this.changes = new EventEmitter();\n        this.editedIndices = [];\n        this.keepEditCell = false;\n        this.closingCell = false;\n        this.changedSource = new Subject();\n        this.changed = this.changedSource.asObservable().pipe(switchMap(function () { return _this.ngZone.onStable.asObservable().pipe(take(1)); }));\n    }\n    EditService.prototype.editRow = function (index, group) {\n        if (group === void 0) { group = undefined; }\n        this.editedIndices.push({ index: index, group: group });\n        this.onChanged();\n    };\n    EditService.prototype.addRow = function (group) {\n        this.newItemGroup = { group: group };\n        this.onChanged();\n    };\n    EditService.prototype.editCell = function (rowIndex, column, group) {\n        if (isNewRow(rowIndex) || column.editable === false || !(column.editTemplate || column.field)) {\n            return;\n        }\n        this.preventCellClose();\n        if (!this.closeCell()) {\n            this.editRow(rowIndex, group);\n            this.column = column;\n            this.onChanged();\n        }\n    };\n    EditService.prototype.isEditing = function () {\n        return this.editedIndices.length > 0;\n    };\n    EditService.prototype.isEditingCell = function () {\n        return this.isEditing() && this.column !== undefined;\n    };\n    Object.defineProperty(EditService.prototype, \"hasNewItem\", {\n        get: function () {\n            return isPresent(this.newItemGroup);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditService.prototype, \"newDataItem\", {\n        get: function () {\n            if (this.hasNewItem) {\n                return this.newItemGroup.group.value;\n            }\n            return {};\n        },\n        enumerable: true,\n        configurable: true\n    });\n    EditService.prototype.close = function (index) {\n        if (isNewRow(index)) {\n            this.newItemGroup = undefined;\n            return;\n        }\n        this.editedIndices = this.editedIndices.filter(isNotEqual(index));\n        delete this.column;\n        this.onChanged();\n    };\n    EditService.prototype.closeCell = function (originalEvent) {\n        var _this = this;\n        if (this.column && !this.closingCell) {\n            return this.ngZone.run(function () {\n                var _a = _this.editedIndices[0], index = _a.index, group = _a.group;\n                var args = new CellCloseEvent({\n                    column: _this.column,\n                    formGroup: group,\n                    originalEvent: originalEvent,\n                    rowIndex: index\n                });\n                _this.closingCell = true;\n                _this.changes.emit(args);\n                _this.closingCell = false;\n                if (!args.isDefaultPrevented()) {\n                    _this.cancelCell();\n                }\n                return args.isDefaultPrevented();\n            });\n        }\n    };\n    EditService.prototype.cancelCell = function () {\n        if (this.column) {\n            this.editedIndices = [];\n            delete this.column;\n            this.onChanged();\n        }\n    };\n    EditService.prototype.shouldCloseCell = function () {\n        return this.column && !this.keepEditCell;\n    };\n    EditService.prototype.preventCellClose = function () {\n        var _this = this;\n        this.ngZone.runOutsideAngular(function () {\n            window.clearTimeout(_this.keepCellTimeout);\n            _this.keepEditCell = true;\n            _this.keepCellTimeout = window.setTimeout(function () {\n                _this.keepEditCell = false;\n            }, 0); // tslint:disable-line:align\n        });\n    };\n    EditService.prototype.context = function (index) {\n        if (isNewRow(index)) {\n            return this.newItemGroup;\n        }\n        return this.findByIndex(index);\n    };\n    EditService.prototype.columnContext = function (index, column) {\n        if (isNewRow(index)) {\n            return this.newItemGroup;\n        }\n        if (!this.column || column === this.column) {\n            return this.findByIndex(index);\n        }\n    };\n    EditService.prototype.isEdited = function (index) {\n        if (isNewRow(index) && isPresent(this.newItemGroup)) {\n            return true;\n        }\n        return !this.column && isPresent(this.findByIndex(index));\n    };\n    EditService.prototype.hasEdited = function (index) {\n        return isPresent(this.context(index));\n    };\n    EditService.prototype.isEditedColumn = function (index, column) {\n        if (this.column && this.column === column) {\n            return isPresent(this.findByIndex(index));\n        }\n        return false;\n    };\n    EditService.prototype.beginEdit = function (rowIndex) {\n        this.changes.emit({ action: 'edit', rowIndex: rowIndex });\n    };\n    EditService.prototype.beginAdd = function () {\n        this.changes.emit({ action: 'add' });\n    };\n    EditService.prototype.endEdit = function (rowIndex) {\n        var formGroup = this.context(rowIndex).group;\n        this.changes.emit({ action: 'cancel', rowIndex: rowIndex, formGroup: formGroup, isNew: isNewRow(rowIndex) });\n    };\n    EditService.prototype.save = function (rowIndex) {\n        var formGroup = this.context(rowIndex).group;\n        this.changes.emit({ action: 'save', rowIndex: rowIndex, formGroup: formGroup, isNew: isNewRow(rowIndex) });\n    };\n    EditService.prototype.remove = function (rowIndex) {\n        this.changes.emit({ action: 'remove', rowIndex: rowIndex });\n    };\n    EditService.prototype.findByIndex = function (index) {\n        return this.editedIndices.find(isEqual(index));\n    };\n    EditService.prototype.onChanged = function () {\n        var _this = this;\n        this.ngZone.runOutsideAngular(function () {\n            _this.changedSource.next();\n        });\n    };\n    EditService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    EditService.ctorParameters = function () { return [\n        { type: NgZone }\n    ]; };\n    return EditService;\n}());\n\n/**\n * @hidden\n */\nvar ExpandStateService = /** @class */ (function () {\n    function ExpandStateService(isInitiallyCollapsed) {\n        this.isInitiallyCollapsed = isInitiallyCollapsed;\n        this.changes = new Subject();\n        this.rowState = [];\n    }\n    ExpandStateService.prototype.toggleRow = function (index, dataItem) {\n        var rowIndex = this.rowState.indexOf(index);\n        var found = rowIndex === -1;\n        if (!this.emitEvent({ dataItem: dataItem, expand: this.isInitiallyCollapsed ? found : !found, index: index })) {\n            this.rowState = found ? this.rowState.concat([index]) : this.rowState.slice(0, rowIndex).concat(this.rowState.slice(rowIndex + 1));\n        }\n    };\n    ExpandStateService.prototype.isExpanded = function (index) {\n        var found = this.rowState.indexOf(index) >= 0;\n        return this.isInitiallyCollapsed ? found : !found;\n    };\n    ExpandStateService.prototype.reset = function () {\n        this.rowState = [];\n    };\n    ExpandStateService.prototype.emitEvent = function (args) {\n        this.changes.next(args);\n        return false;\n    };\n    return ExpandStateService;\n}());\n\n/**\n * Arguments for the `detailExpand` event.\n */\nvar DetailExpandEvent = /** @class */ (function (_super) {\n    __extends(DetailExpandEvent, _super);\n    function DetailExpandEvent(args) {\n        var _this = _super.call(this) || this;\n        Object.assign(_this, args);\n        return _this;\n    }\n    return DetailExpandEvent;\n}(PreventableEvent));\n\n/**\n * Arguments for the `detailCollapse` event.\n */\nvar DetailCollapseEvent = /** @class */ (function (_super) {\n    __extends(DetailCollapseEvent, _super);\n    function DetailCollapseEvent(args) {\n        var _this = _super.call(this) || this;\n        Object.assign(_this, args);\n        return _this;\n    }\n    return DetailCollapseEvent;\n}(PreventableEvent));\n\n/**\n * @hidden\n */\nvar DetailsService = /** @class */ (function (_super) {\n    __extends(DetailsService, _super);\n    function DetailsService() {\n        return _super.call(this, true) || this;\n    }\n    DetailsService.prototype.emitEvent = function (args) {\n        var eventArg = new (args.expand ? DetailExpandEvent : DetailCollapseEvent)(args);\n        this.changes.next(eventArg);\n        return eventArg.isDefaultPrevented();\n    };\n    DetailsService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    DetailsService.ctorParameters = function () { return []; };\n    return DetailsService;\n}(ExpandStateService));\n\nvar removeLast = function (groupIndex) { return groupIndex.lastIndexOf(\"_\") > -1\n    ? groupIndex.slice(0, groupIndex.lastIndexOf(\"_\"))\n    : \"\"; };\n/**\n * @hidden\n */\nvar GroupsService = /** @class */ (function (_super) {\n    __extends(GroupsService, _super);\n    function GroupsService(isCollapsed) {\n        if (isCollapsed === void 0) { isCollapsed = false; }\n        return _super.call(this, isCollapsed) || this;\n    }\n    GroupsService.prototype.isInExpandedGroup = function (groupIndex, skipSelf) {\n        if (skipSelf === void 0) { skipSelf = true; }\n        if (skipSelf) {\n            groupIndex = removeLast(groupIndex);\n        }\n        var expanded = true;\n        while (groupIndex && expanded) {\n            expanded = this.isExpanded(groupIndex);\n            groupIndex = removeLast(groupIndex);\n        }\n        return expanded;\n    };\n    GroupsService.prototype.expandChildren = function (groupIndex) {\n        this.rowState = this.rowState.filter(function (x) { return !x.startsWith(groupIndex); });\n    };\n    GroupsService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    GroupsService.ctorParameters = function () { return [\n        { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [Skip,] }] }\n    ]; };\n    return GroupsService;\n}(ExpandStateService));\n\nvar reset = function () {\n    var lists = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        lists[_i] = arguments[_i];\n    }\n    var diff = false;\n    for (var idx = 0; idx < lists.length; idx++) {\n        var _a = lists[idx], list = _a[0], columns = _a[1];\n        diff = diff || list.length !== columns.length;\n        list.reset(columns);\n    }\n    return diff;\n};\n/**\n * @hidden\n */\nvar ColumnsContainer = /** @class */ (function () {\n    function ColumnsContainer(columns) {\n        this.columns = columns;\n        this.allColumns = new QueryList();\n        this.leafColumns = new QueryList();\n        this.lockedColumns = new QueryList();\n        this.nonLockedColumns = new QueryList();\n        this.lockedLeafColumns = new QueryList();\n        this.nonLockedLeafColumns = new QueryList();\n        this.totalLevels = 0;\n        this.changes = new EventEmitter();\n        this.leafColumnsToRender = [];\n        this.lockedColumnsToRender = [];\n        this.nonLockedColumnsToRender = [];\n        this.hasGroupHeaderColumn = false;\n        this.hasGroupFooter = false;\n        this.hasFooter = false;\n        this.unlockedWidth = 0;\n    }\n    ColumnsContainer.prototype.refresh = function () {\n        var _this = this;\n        var currentLevels = this.totalLevels;\n        var leafColumns$$1 = new Array();\n        var lockedLeafColumns = new Array();\n        var nonLockedLeafColumns = new Array();\n        var lockedColumns = new Array();\n        var nonLockedColumns = new Array();\n        var allColumns = new Array();\n        var leafColumnsToRender = new Array();\n        var lockedColumnsToRender = new Array();\n        var nonLockedColumnsToRender = new Array();\n        var hasGroupHeaderColumn = false;\n        var hasGroupFooter = false;\n        var hasFooter = false;\n        var unlockedWidth = 0;\n        var leafIndex = 0;\n        this.totalLevels = 0;\n        this.columns().forEach(function (column) {\n            var containerLeafColumns = column.isLocked === true ? lockedLeafColumns : nonLockedLeafColumns;\n            var containerColumns = column.isLocked === true ? lockedColumns : nonLockedColumns;\n            var toRenderContainer = column.isLocked === true ? lockedColumnsToRender : nonLockedColumnsToRender;\n            if (!isColumnGroupComponent(column)) {\n                containerLeafColumns.push(column);\n                leafColumns$$1.push(column);\n                leafColumnsToRender.push.apply(leafColumnsToRender, columnsToRender([column]));\n                toRenderContainer.push.apply(toRenderContainer, columnsToRender([column]));\n                hasGroupHeaderColumn = hasGroupHeaderColumn || someLeafColumn(function (leaf) { return Boolean(leaf.groupHeaderColumnTemplateRef); }, column);\n                hasGroupFooter = hasGroupFooter || someLeafColumn(function (leaf) { return Boolean(leaf.groupFooterTemplateRef); }, column);\n                hasFooter = hasFooter || someLeafColumn(function (leaf) { return Boolean(leaf.footerTemplateRef); }, column);\n                if (!column.isLocked) {\n                    unlockedWidth += column.width || 0;\n                }\n                if (column.isSpanColumn) {\n                    column.childColumns.forEach(function (c) {\n                        c.leafIndex = leafIndex++;\n                    });\n                }\n                else {\n                    column.leafIndex = leafIndex++;\n                }\n            }\n            containerColumns.push(column);\n            allColumns.push(column);\n            _this.totalLevels = column.level > _this.totalLevels ? column.level : _this.totalLevels;\n        });\n        this.hasGroupHeaderColumn = hasGroupHeaderColumn;\n        this.hasGroupFooter = hasGroupFooter;\n        this.hasFooter = hasFooter;\n        this.leafColumnsToRender = leafColumnsToRender;\n        this.lockedColumnsToRender = lockedColumnsToRender;\n        this.nonLockedColumnsToRender = nonLockedColumnsToRender;\n        this.unlockedWidth = unlockedWidth;\n        var changes = reset([this.leafColumns, leafColumns$$1], [this.lockedLeafColumns, lockedLeafColumns], [this.nonLockedLeafColumns, nonLockedLeafColumns], [this.lockedColumns, lockedColumns], [this.allColumns, allColumns], [this.nonLockedColumns, nonLockedColumns]) || currentLevels !== this.totalLevels;\n        if (changes) {\n            this.changes.emit();\n        }\n        return changes;\n    };\n    return ColumnsContainer;\n}());\n\nvar forEachColumn = function (list, callback) {\n    list.forEach(function (column) {\n        callback(column);\n        if (column.isColumnGroup && column.hasChildren) {\n            forEachColumn(column.childrenArray, callback);\n        }\n    });\n};\nvar forEachLevel = function (list, callback) {\n    sortColumns(list)\n        .forEach(function (column) {\n        callback(column);\n        if (column.isColumnGroup && column.hasChildren) {\n            forEachLevel(column.childrenArray, callback);\n        }\n    });\n};\nvar filterHierarchy = function (list, predicate) {\n    var result = [];\n    sortColumns(list)\n        .forEach(function (column) {\n        if (predicate(column)) {\n            if (column.isColumnGroup) {\n                var children$$1 = filterHierarchy(column.childrenArray, predicate);\n                if (children$$1.length) {\n                    result.push.apply(result, [column].concat(children$$1));\n                }\n            }\n            else if (!column.isSpanColumn || filterHierarchy(column.childrenArray, predicate).length) {\n                result.push(column);\n            }\n        }\n    });\n    return result;\n};\n/**\n * @hidden\n */\nvar ColumnList = /** @class */ (function () {\n    function ColumnList(columns) {\n        this.columns = columns;\n    }\n    ColumnList.empty = function () {\n        return new ColumnList(new QueryList());\n    };\n    ColumnList.prototype.forEach = function (callback) {\n        forEachColumn(this.columns, callback);\n    };\n    ColumnList.prototype.filter = function (callback) {\n        var result = [];\n        forEachColumn(this.columns, function (column) {\n            if (callback(column)) {\n                result.push(column);\n            }\n        });\n        return result;\n    };\n    ColumnList.prototype.filterHierarchy = function (predicate) {\n        return filterHierarchy(this.columns.toArray(), predicate);\n    };\n    ColumnList.prototype.filterSort = function (callback) {\n        var result = [];\n        forEachLevel(this.columns.toArray(), function (column) {\n            if (callback(column)) {\n                result.push(column);\n            }\n        });\n        return result;\n    };\n    ColumnList.prototype.toArray = function () {\n        var result = [];\n        forEachColumn(this.columns, function (column) {\n            result.push(column);\n        });\n        return result;\n    };\n    ColumnList.prototype.rootColumns = function () {\n        return this.columns.toArray();\n    };\n    return ColumnList;\n}());\n\n/**\n * @hidden\n */\nvar GroupInfoService = /** @class */ (function () {\n    function GroupInfoService() {\n        this._columnList = ColumnList.empty;\n    }\n    Object.defineProperty(GroupInfoService.prototype, \"columns\", {\n        get: function () {\n            return expandColumns(this._columnList().toArray()).filter(isColumnComponent);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GroupInfoService.prototype.registerColumnsContainer = function (columns) {\n        this._columnList = columns;\n    };\n    GroupInfoService.prototype.formatForGroup = function (item) {\n        var column = this.columnForGroup(item);\n        return column ? column.format : \"\";\n    };\n    GroupInfoService.prototype.isGroupable = function (groupField) {\n        var column = this.columns.filter(function (x) { return x.field === groupField; })[0];\n        return column ? column.groupable : true;\n    };\n    GroupInfoService.prototype.groupTitle = function (item) {\n        var column = this.columnForGroup(item);\n        return column ? (column.title || column.field) : this.groupField(item);\n    };\n    GroupInfoService.prototype.groupHeaderTemplate = function (item) {\n        var column = this.columnForGroup(item);\n        return column ? column.groupHeaderTemplateRef || column.groupHeaderColumnTemplateRef : undefined;\n    };\n    GroupInfoService.prototype.groupField = function (group) {\n        return group.data ? group.data.field : group.field;\n    };\n    GroupInfoService.prototype.columnForGroup = function (group) {\n        var field = this.groupField(group);\n        var column = this.columns.filter(function (x) { return x.field === field; })[0];\n        return column;\n    };\n    return GroupInfoService;\n}());\n\n/**\n * @hidden\n */\nvar ChangeNotificationService = /** @class */ (function () {\n    function ChangeNotificationService(ngZone) {\n        this.ngZone = ngZone;\n        this.changes = new EventEmitter();\n    }\n    ChangeNotificationService.prototype.notify = function () {\n        var _this = this;\n        if (!this.subscription || this.subscription.closed) {\n            this.subscription = this.ngZone.onStable\n                .asObservable().pipe(take(1))\n                .subscribe(function () { return _this.changes.emit(); });\n        }\n    };\n    ChangeNotificationService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ChangeNotificationService.ctorParameters = function () { return [\n        { type: NgZone }\n    ]; };\n    return ChangeNotificationService;\n}());\n\n/**\n * Represents the no-records template of the Grid. Provides an option to customize the\n * appearance of the item that is displayed when no data is present. To define the no-records template,\n * nest an `<ng-template>` tag with the `kendoGridNoRecordsTemplate` directive inside `<kendo-grid>`.\n *\n * > When the locked columns of the Grid are in use, the template is displayed in the non-locked part of the content.\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *   selector: 'my-app',\n *   template: `\n *       <kendo-grid [data]=\"data\">\n *         <kendo-grid-column field=\"ProductID\"></kendo-grid-column>\n *         <kendo-grid-column field=\"ProductName\"></kendo-grid-column>\n *         <kendo-grid-column field=\"UnitPrice\"></kendo-grid-column>\n *         <ng-template kendoGridNoRecordsTemplate>\n *            There are not products. <a href=\"#\" (click)=\"refresh()\">Click here to refresh</a>.\n *         </ng-template>\n *       </kendo-grid>\n *   `\n * })\n *\n * class AppComponent {\n *     public data = [];\n *     public refresh() {\n *       this.data = [{\n *            \"ProductID\": 1,\n *            \"ProductName\": \"Chai\",\n *            \"UnitPrice\": 18.0000,\n *            \"Discontinued\": false,\n *            \"Category\": {\n *                \"CategoryID\": 1,\n *                \"CategoryName\": \"Beverages\",\n *                \"Description\": \"Soft drinks, coffees, teas, beers, and ales\"\n *            }\n *          }, {\n *            \"ProductID\": 2,\n *            \"ProductName\": \"Chang\",\n *            \"UnitPrice\": 19.0000,\n *            \"Discontinued\": false,\n *            \"Category\": {\n *                \"CategoryID\": 1,\n *                \"CategoryName\": \"Beverages\",\n *                \"Description\": \"Soft drinks, coffees, teas, beers, and ales\"\n *            }\n *          }, {\n *            \"ProductID\": 3,\n *            \"ProductName\": \"Aniseed Syrup\",\n *            \"UnitPrice\": 10.0000,\n *            \"Discontinued\": false,\n *            \"Category\": {\n *                \"CategoryID\": 2,\n *                \"CategoryName\": \"Condiments\",\n *                \"Description\": \"Sweet and savory sauces, relishes, spreads, and seasonings\"\n *            }\n *        }];\n *\n *     }\n * }\n *\n * ```\n */\nvar NoRecordsTemplateDirective = /** @class */ (function () {\n    function NoRecordsTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NoRecordsTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridNoRecordsTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    NoRecordsTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return NoRecordsTemplateDirective;\n}());\n\nvar set = function (value) { return function (pair) { return pair.forEach(function (x) { return x.style.height = value; }); }; };\nvar clearHeight = function (pairs) { return pairs\n    .filter(function (_a) {\n    var left = _a[0], right = _a[1];\n    return left.style.height || right.style.height;\n})\n    .forEach(set(\"\")); };\nvar zip$1 = function (arr1, arr2) {\n    var result = [];\n    for (var idx = 0, len = arr1.length; idx < len; idx++) {\n        if (!arr2[idx]) {\n            break;\n        }\n        result.push([arr1[idx], arr2[idx]]);\n    }\n    return result;\n};\nvar setHeight = function (heights) { return function (row, idx) { return set(heights[idx] + 1 + \"px\")(row); }; };\nvar getHeights = function (rows) { return rows.map(function (_a) {\n    var left = _a[0], right = _a[1];\n    var height = left.offsetHeight;\n    var offsetHeight2 = right.offsetHeight;\n    if (height < offsetHeight2) {\n        return offsetHeight2;\n    }\n    return height;\n}); };\n/**\n * @hidden\n */\nvar syncRowsHeight = function (table1, table2) {\n    var activeElement = document.activeElement;\n    var rows = zip$1(table1.rows, table2.rows);\n    clearHeight(rows);\n    var heights = getHeights(rows);\n    [table1, table2].forEach(function (x) { return x.style.display = 'none'; });\n    rows.forEach(setHeight(heights));\n    [table1, table2].forEach(function (x) { return x.style.display = ''; });\n    if (document.activeElement !== activeElement &&\n        (table1.contains(activeElement) || table2.contains(activeElement))) {\n        activeElement.focus();\n    }\n};\n\n/**\n * @hidden\n */\nvar CELL_CONTEXT = new InjectionToken('grid-cell-context');\n/**\n * @hidden\n */\nvar EMPTY_CELL_CONTEXT = {};\n\n/**\n * Represents a service to set the filter descriptor\n * ([see example]({% slug reusablecustomfilters_grid %})).\n */\nvar FilterService = /** @class */ (function () {\n    function FilterService() {\n        /**\n         * Fires when the filter descriptors is set.\n         */\n        this.changes = new Subject();\n    }\n    /**\n     * Sets the filter descriptor.\n     *\n     * @param {CompositeFilterDescriptor} value - The filter descriptor that will be set.\n     */\n    FilterService.prototype.filter = function (value) {\n        this.changes.next(value);\n    };\n    return FilterService;\n}());\n\n/**\n * Represents the pager template which helps to customize the pager appearance in the Grid. To define a pager\n * template, nest an `<ng-template>` tag with the `kendoPagerTemplate` directive inside `<kendo-grid>`.\n *\n * The template context provides the following fields:\n * * `currentPage`&mdash;The index of the displayed page.\n * * `pageSize`&mdash;The value of the current `pageSize`.\n * * `skip`&mdash;The current skip value.\n * * `total`&mdash;The total number of records.\n * * `totalPages`&mdash;The total number of available pages.\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *      <kendo-grid\n *        [kendoGridBinding]=\"gridData\"\n *        [pageSize]=\"1\"\n *        [pageable]=\"true\"\n *      >\n *       <kendo-grid-column field=\"ProductID\" title=\"ID\" width=\"40\">\n *       </kendo-grid-column>\n *       <kendo-grid-column field=\"ProductName\" title=\"Name\" width=\"250\">\n *       </kendo-grid-column>\n *       <kendo-grid-column field=\"UnitPrice\" title=\"Price\" width=\"80\" format=\"{0:c}\">\n *       </kendo-grid-column>\n *\n *       <ng-template kendoPagerTemplate let-totalPages=\"totalPages\" let-currentPage=\"currentPage\">\n *          <kendo-pager-prev-buttons></kendo-pager-prev-buttons>\n *          <kendo-pager-numeric-buttons [buttonCount]=\"10\"></kendo-pager-numeric-buttons>\n *          <kendo-pager-next-buttons></kendo-pager-next-buttons>\n *          <kendo-pager-info></kendo-pager-info>\n *          Current page: {{currentPage}}\n *       </ng-template>\n *\n *    </kendo-grid>\n *     `\n * })\n *\n * class AppComponent {\n *     public gridData = [{\n *         \"ProductID\": 1,\n *         \"ProductName\": \"Chai\",\n *         \"UnitPrice\": 18.0000,\n *         \"Discontinued\": false\n *       }, {\n *         \"ProductID\": 2,\n *         \"ProductName\": \"Chang\",\n *         \"UnitPrice\": 19.0000,\n *         \"Discontinued\": true\n *       }\n *     ];\n * }\n *\n * ```\n */\nvar PagerTemplateDirective = /** @class */ (function () {\n    function PagerTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    PagerTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoPagerTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    PagerTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return PagerTemplateDirective;\n}());\n\n/**\n * @hidden\n */\nvar PagerContextService = /** @class */ (function () {\n    function PagerContextService() {\n        this.changes = new Subject();\n        this.pageChange = new Subject();\n    }\n    Object.defineProperty(PagerContextService.prototype, \"currentPage\", {\n        get: function () {\n            return this.skip / this.pageSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PagerContextService.prototype.notifyChanges = function (changes) {\n        this.total = changes.total;\n        this.pageSize = changes.pageSize;\n        this.skip = changes.skip;\n        this.changes.next(changes);\n    };\n    PagerContextService.prototype.changePage = function (page) {\n        this.pageChange.next({ skip: page * this.pageSize, take: this.pageSize });\n    };\n    PagerContextService.prototype.changePageSize = function (value) {\n        this.pageChange.next({ skip: 0, take: value });\n    };\n    PagerContextService.prototype.nextPage = function () {\n        var nextPage = this.currentPage + 1;\n        if (nextPage * this.pageSize <= this.total) {\n            this.changePage(nextPage);\n        }\n    };\n    PagerContextService.prototype.prevPage = function () {\n        var prevPage = this.currentPage - 1;\n        if (prevPage * this.pageSize >= 0) {\n            this.changePage(prevPage);\n        }\n    };\n    return PagerContextService;\n}());\n\n/**\n * @hidden\n */\nvar PDFService = /** @class */ (function () {\n    function PDFService() {\n        this.savePDF = new EventEmitter();\n        this.drawPDF = new EventEmitter();\n        this.exportClick = new EventEmitter();\n        this.dataChanged = new EventEmitter();\n    }\n    PDFService.prototype.save = function (component) {\n        this.emitEvent(this.savePDF, component);\n    };\n    PDFService.prototype.draw = function (component, promise) {\n        this.emitEvent(this.drawPDF, { component: component, promise: promise });\n    };\n    PDFService.prototype.emitEvent = function (emitter, args) {\n        if (emitter.observers.length === 0) {\n            if (isDevMode()) {\n                throw new Error('Creating PDF requires including the PDFModule and adding the <kendo-grid-pdf> component.');\n            }\n        }\n        else {\n            emitter.emit(args);\n        }\n    };\n    PDFService.decorators = [\n        { type: Injectable },\n    ];\n    return PDFService;\n}());\n\n/**\n * Arguments for the `pdfExport` event.\n */\nvar PDFExportEvent = /** @class */ (function (_super) {\n    __extends(PDFExportEvent, _super);\n    function PDFExportEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return PDFExportEvent;\n}(PreventableEvent));\n\n/**\n * @hidden\n */\nvar SuspendService = /** @class */ (function () {\n    function SuspendService() {\n        this.scroll = false;\n    }\n    SuspendService.decorators = [\n        { type: Injectable },\n    ];\n    return SuspendService;\n}());\n\n/* tslint:disable: object-literal-sort-keys */\nvar bootstrapToMedia = function (media) { return (({\n    \"xs\": \"(max-width: 576px)\",\n    \"sm\": \"(min-width: 576px)\",\n    \"md\": \"(min-width: 768px)\",\n    \"lg\": \"(min-width: 992px)\",\n    \"xl\": \"(min-width: 1200px)\"\n})[media] || media); };\n/* tslint:enable: object-literal-sort-keys */\nvar browserMatchMedia = function (media) { return window.matchMedia(media).matches; };\n/**\n * @hidden\n */\nvar ResponsiveService = /** @class */ (function () {\n    function ResponsiveService() {\n        /**\n         * @hidden\n         */\n        this.matchMedia = browserMatchMedia;\n    }\n    /**\n     * @hidden\n     */\n    ResponsiveService.prototype.matchesMedia = function (media) {\n        return !media || this.matchMedia(bootstrapToMedia(media));\n    };\n    ResponsiveService.decorators = [\n        { type: Injectable },\n    ];\n    return ResponsiveService;\n}());\n\n/**\n * @hidden\n */\nvar ExcelService = /** @class */ (function () {\n    function ExcelService() {\n        this.saveToExcel = new EventEmitter();\n        this.exportClick = new EventEmitter();\n    }\n    ExcelService.prototype.save = function (component) {\n        if (this.saveToExcel.observers.length === 0) {\n            if (isDevMode()) {\n                throw new Error('Saving excel requires including the ExcelModule and adding the <kendo-grid-excel> component.');\n            }\n        }\n        else {\n            this.saveToExcel.emit(component);\n        }\n    };\n    ExcelService.decorators = [\n        { type: Injectable },\n    ];\n    return ExcelService;\n}());\n\n/**\n * Represents the toolbar template of the Grid.\n *\n * The template context has the following field:\n * - `position`&mdash;The position at which the toolbar template is rendered. The possible values are \"top\" and \"bottom\".\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *       <div class=\"example-config\">\n *         <input type=\"radio\" id=\"top\" name=\"position\" class=\"k-radio\" value=\"top\" checked (click)=\"positionChange($event)\"/>\n *         <label class=\"k-radio-label\" for=\"top\">Top</label><br/>\n *         <input type=\"radio\" id=\"bottom\" name=\"position\" class=\"k-radio\" value=\"bottom\" (click)=\"positionChange($event)\"/>\n *         <label class=\"k-radio-label\" for=\"bottom\">Bottom</label><br/>\n *         <input type=\"radio\" id=\"both\" name=\"position\" value=\"both\" class=\"k-radio\" (click)=\"positionChange($event)\"/>\n *         <label class=\"k-radio-label\" for=\"both\">Both</label><br/>\n *       </div>\n *       <kendo-grid [data]=\"gridData\" style=\"height: 200px\">\n *            <ng-template kendoGridToolbarTemplate [position]=\"position\" let-position=\"position\">\n *                <button (click)=\"onClick()\" class=\"k-button\">Custom action</button>\n *            </ng-template>\n *            <kendo-grid-column field=\"ProductName\">\n *            </kendo-grid-column>\n *            <kendo-grid-column field=\"UnitPrice\">\n *            </kendo-grid-column>\n *        </kendo-grid>\n *     `\n * })\n *\n * class AppComponent {\n *     public position: 'top' | 'bottom' | 'both' = 'top';\n *\n *     public gridData = [{\n *         \"ProductID\": 1,\n *         \"ProductName\": \"Chai\",\n *         \"UnitPrice\": 18.0000,\n *         \"Discontinued\": false\n *       }, {\n *         \"ProductID\": 2,\n *         \"ProductName\": \"Chang\",\n *         \"UnitPrice\": 19.0000,\n *         \"Discontinued\": true\n *       }\n *     ];\n *\n *     public onClick(): void {\n *         console.log(\"button was clicked\");\n *     }\n *\n *     public positionChange({ target }): void {\n *        this.position = target.value;\n *     }\n * }\n *\n * ```\n */\nvar ToolbarTemplateDirective = /** @class */ (function () {\n    function ToolbarTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n        this._position = \"top\";\n    }\n    Object.defineProperty(ToolbarTemplateDirective.prototype, \"position\", {\n        get: function () {\n            return this._position;\n        },\n        /**\n         * The position of the toolbar ([see example]({% slug toolbartemplate_grid %})).\n         *\n         * The possible values are:\n         * - `top`&mdash;Positions the toolbar above the group panel or header.\n         * - `bottom`&mdash;Positions the toolbar below the pager.\n         * - `both`&mdash;Displays two toolbar instances. Positions the first one above\n         * the group panel or header and the second one below the pager.\n         */\n        set: function (position) {\n            this._position = position;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ToolbarTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridToolbarTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    ToolbarTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    ToolbarTemplateDirective.propDecorators = {\n        position: [{ type: Input, args: [\"position\",] }]\n    };\n    return ToolbarTemplateDirective;\n}());\n\n/**\n * @hidden\n */\nvar ScrollSyncService = /** @class */ (function () {\n    function ScrollSyncService(ngZone) {\n        var _this = this;\n        this.ngZone = ngZone;\n        this.changes = new Subject();\n        this.elements = [];\n        this.subscriptions = new Subscription();\n        this.headerSubscription = new Subscription();\n        this.bodySubscription = new Subscription();\n        this.subscriptions.add(this.changes.subscribe(function (args) { return _this.scrollLeft(args); }));\n    }\n    ScrollSyncService.prototype.registerEmitter = function (el, sourceType) {\n        var _this = this;\n        this.unregister(sourceType);\n        this.elements.push({ element: el, sourceType: sourceType });\n        if (sourceType === \"body\" || sourceType === \"header\") {\n            this.ngZone.runOutsideAngular(function () {\n                var obs = fromEvent(el, \"scroll\").pipe(map(function (_a) {\n                    var scrollLeft = _a.target.scrollLeft;\n                    return ({\n                        scrollLeft: scrollLeft,\n                        sourceType: sourceType\n                    });\n                }));\n                var subscription = obs.pipe(distinctUntilChanged(function (x, y) { return (x.scrollLeft === y.scrollLeft); }), filter(function (x) { return !_this.source || _this.source === x.sourceType; }), tap(function (x) { return _this.source = x.sourceType; }))\n                    .subscribe(function (x) { return _this.changes.next(x); });\n                subscription.add(obs.pipe(filter(function (x) { return _this.source && _this.source !== x.sourceType; }))\n                    .subscribe(function () { return _this.source = undefined; }));\n                if (sourceType === \"body\") {\n                    _this.bodySubscription.add(subscription);\n                }\n                else {\n                    _this.headerSubscription.add(subscription);\n                }\n            });\n        }\n    };\n    /**\n     * destroy\n     */\n    ScrollSyncService.prototype.destroy = function () {\n        this.subscriptions.unsubscribe();\n        this.headerSubscription.unsubscribe();\n        this.bodySubscription.unsubscribe();\n    };\n    ScrollSyncService.prototype.scrollLeft = function (_a) {\n        var _this = this;\n        var scrollLeft = _a.scrollLeft, sourceType = _a.sourceType;\n        this.ngZone.runOutsideAngular(function () {\n            _this.elements\n                .filter(function (x) { return sourceType !== x.sourceType; })\n                .forEach(function (_a) {\n                var element = _a.element;\n                return element.scrollLeft = scrollLeft;\n            });\n        });\n    };\n    ScrollSyncService.prototype.unregister = function (sourceType) {\n        var index = this.elements.findIndex(function (x) { return x.sourceType === sourceType; });\n        if (index > -1) {\n            if (sourceType === \"header\") {\n                this.headerSubscription.unsubscribe();\n                this.headerSubscription = new Subscription();\n            }\n            else if (sourceType === \"body\") {\n                this.bodySubscription.unsubscribe();\n                this.bodySubscription = new Subscription();\n            }\n            this.elements.splice(index, 1);\n        }\n    };\n    ScrollSyncService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ScrollSyncService.ctorParameters = function () { return [\n        { type: NgZone }\n    ]; };\n    return ScrollSyncService;\n}());\n\n/**\n * @hidden\n */\nvar ResizeService = /** @class */ (function () {\n    function ResizeService() {\n        this.resizeSubscription = new Subscription(function () { });\n        this.dispatcher = new Subject();\n        // tslint:disable-next-line:member-ordering\n        this.changes = this.dispatcher.asObservable().pipe(throttleTime(100));\n    }\n    ResizeService.prototype.connect = function (resizes) {\n        this.resizeSubscription.add(resizes.subscribe(this.dispatcher));\n    };\n    ResizeService.prototype.destroy = function () {\n        if (this.resizeSubscription) {\n            this.resizeSubscription.unsubscribe();\n        }\n    };\n    ResizeService.decorators = [\n        { type: Injectable },\n    ];\n    return ResizeService;\n}());\n\nvar focusableRegex = /^(?:a|input|select|option|textarea|button|object)$/i;\nvar NODE_NAME_PREDICATES = {};\nvar toClassList = function (classNames) { return String(classNames).trim().split(' '); };\n/**\n * @hidden\n */\nvar hasClasses = function (element, classNames) {\n    var namesList = toClassList(classNames);\n    return Boolean(toClassList(element.className).find(function (className) { return namesList.indexOf(className) >= 0; }));\n};\n/**\n * @hidden\n */\nvar matchesClasses = function (classNames) {\n    return function (element) { return hasClasses(element, classNames); };\n};\n/**\n * @hidden\n */\nvar matchesNodeName = function (nodeName) {\n    if (!NODE_NAME_PREDICATES[nodeName]) {\n        NODE_NAME_PREDICATES[nodeName] = function (element) {\n            return String(element.nodeName).toLowerCase() === nodeName.toLowerCase();\n        };\n    }\n    return NODE_NAME_PREDICATES[nodeName];\n};\n/**\n * @hidden\n */\nvar closest = function (node, predicate) {\n    while (node && !predicate(node)) {\n        node = node.parentNode;\n    }\n    return node;\n};\n/**\n * @hidden\n */\nvar closestInScope = function (node, predicate, scope) {\n    while (node && node !== scope && !predicate(node)) {\n        node = node.parentNode;\n    }\n    if (node !== scope) {\n        return node;\n    }\n};\n/**\n * @hidden\n */\nvar contains = function (parent, node, matchSelf) {\n    if (matchSelf === void 0) { matchSelf = false; }\n    var outside = !closest(node, function (child) { return child === parent; });\n    if (outside) {\n        return false;\n    }\n    var el = closest(node, function (child) { return child === node; });\n    return el && (matchSelf || el !== parent);\n};\n/**\n * @hidden\n */\nvar isVisible = function (element) {\n    var rect = element.getBoundingClientRect();\n    var hasSize = rect.width > 0 && rect.height > 0;\n    var hasPosition = rect.x !== 0 && rect.y !== 0;\n    // Elements can have zero size due to styling, but they will still count as visible.\n    // For example, the selection checkbox has no size, but is made visible through styling.\n    return (hasSize || hasPosition) && window.getComputedStyle(element).visibility !== 'hidden';\n};\n/**\n * @hidden\n */\nvar isFocusable = function (element) {\n    if (!element.tagName) {\n        return false;\n    }\n    var tagName = element.tagName.toLowerCase();\n    var hasTabIndex = Boolean(element.getAttribute('tabIndex'));\n    var focusable = !element.disabled && focusableRegex.test(tagName);\n    return focusable || hasTabIndex;\n};\n/**\n * @hidden\n */\nvar isFocusableWithTabKey = function (element, checkVisibility) {\n    if (checkVisibility === void 0) { checkVisibility = true; }\n    if (!isFocusable(element)) {\n        return false;\n    }\n    var tabIndex = element.getAttribute('tabIndex');\n    var visible = !checkVisibility || isVisible(element);\n    return visible && tabIndex !== '-1';\n};\n/**\n * @hidden\n */\nvar findElement = function (node, predicate, matchSelf) {\n    if (matchSelf === void 0) { matchSelf = true; }\n    if (!node) {\n        return;\n    }\n    if (matchSelf && predicate(node)) {\n        return node;\n    }\n    node = node.firstChild;\n    while (node) {\n        if (node.nodeType === 1) {\n            var element = findElement(node, predicate);\n            if (element) {\n                return element;\n            }\n        }\n        node = node.nextSibling;\n    }\n};\n/**\n * @hidden\n */\nvar findFocusable = function (element, checkVisibility) {\n    if (checkVisibility === void 0) { checkVisibility = true; }\n    return findElement(element, function (node) { return isFocusableWithTabKey(node, checkVisibility); });\n};\n/**\n * @hidden\n */\nvar findFocusableChild = function (element, checkVisibility) {\n    if (checkVisibility === void 0) { checkVisibility = true; }\n    return findElement(element, function (node) { return isFocusableWithTabKey(node, checkVisibility); }, false);\n};\n/**\n * @hidden\n */\nfunction rtlScrollPosition(position, element, initial) {\n    var result = position;\n    if (initial < 0) {\n        result = -position;\n    }\n    else if (initial > 0) {\n        result = element.scrollWidth - element.offsetWidth - position;\n    }\n    return result;\n}\n\n/**\n * @hidden\n */\nvar isLocked = function (column) { return column.parent ? isLocked(column.parent) : !!column.locked; };\n/**\n * @hidden\n */\nvar resizeArgs = function (column, extra) { return Object.assign({\n    columns: leafColumns([column]),\n    locked: isLocked(column)\n}, extra); }; // tslint:disable-line:align\n/**\n * @hidden\n */\nvar ColumnResizingService = /** @class */ (function () {\n    function ColumnResizingService() {\n        this.changes = new EventEmitter();\n        this.tables = [];\n        this.batch = null;\n    }\n    ColumnResizingService.prototype.start = function (column) {\n        this.trackColumns(column);\n        var columns = (this.column.isColumnGroup ? [column] : [])\n            .concat(leafColumns([column]));\n        this.changes.emit({\n            columns: columns,\n            locked: isLocked(this.column),\n            type: 'start'\n        });\n    };\n    ColumnResizingService.prototype.resizeColumns = function (deltaPercent) {\n        var action = resizeArgs(this.column, {\n            deltaPercent: deltaPercent,\n            type: 'resizeColumn'\n        });\n        this.changes.emit(action);\n    };\n    ColumnResizingService.prototype.resizeTable = function (column, delta) {\n        var action = resizeArgs(column, {\n            delta: delta,\n            type: 'resizeTable'\n        });\n        this.changes.emit(action);\n    };\n    ColumnResizingService.prototype.resizedColumn = function (state$$1) {\n        this.resizedColumns.push(state$$1);\n    };\n    ColumnResizingService.prototype.end = function () {\n        this.changes.emit({\n            columns: [],\n            resizedColumns: this.resizedColumns,\n            type: 'end'\n        });\n    };\n    ColumnResizingService.prototype.registerTable = function (tableMetadata) {\n        var _this = this;\n        this.tables.push(tableMetadata);\n        var unregisterTable = function () {\n            _this.tables.splice(_this.tables.indexOf(tableMetadata), 1);\n        };\n        return unregisterTable;\n    };\n    ColumnResizingService.prototype.measureColumns = function (info) {\n        var _this = this;\n        var _a;\n        if (this.batch !== null) {\n            (_a = this.batch).push.apply(_a, info);\n        }\n        else {\n            this.autoFitBatch(info, function () { return _this.end(); });\n        }\n    };\n    ColumnResizingService.prototype.autoFit = function () {\n        var _this = this;\n        var columns = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            columns[_i] = arguments[_i];\n        }\n        var nonLockedColumns = columns.filter(function (column) { return !column.isLocked; });\n        this.autoFitStart(nonLockedColumns);\n        this.autoFitBatch(this.batch, function () {\n            if (nonLockedColumns.length < columns.length) {\n                var lockedColumns = columns.filter(function (column) { return column.isLocked; });\n                _this.autoFitStart(lockedColumns);\n                _this.autoFitBatch(_this.batch, function () { return _this.end(); });\n            }\n            else {\n                _this.end();\n            }\n        });\n    };\n    ColumnResizingService.prototype.trackColumns = function (column) {\n        this.resizedColumns = [];\n        this.column = column;\n    };\n    ColumnResizingService.prototype.autoFitStart = function (columns) {\n        this.batch = [];\n        this.resizedColumns = [];\n        if (columns.length === 0) {\n            return;\n        }\n        var locked = columns[0].isLocked;\n        this.changes.emit({\n            type: 'start',\n            columns: columns,\n            locked: locked\n        });\n        this.changes.emit({\n            type: 'triggerAutoFit',\n            columns: columns,\n            locked: locked\n        });\n    };\n    ColumnResizingService.prototype.autoFitBatch = function (info, onComplete) {\n        var _this = this;\n        var locked = info.length > 0 ? info[0].column.isLocked : false;\n        var observables = this.tables\n            .filter(function (table) { return table.locked === locked; })\n            .map(function (table) { return table.autoFit(info); });\n        zip.apply(void 0, observables).pipe(take(1))\n            .subscribe(function (widths) {\n            _this.changes.emit({\n                columns: info.map(function (i) { return i.column; }),\n                type: 'autoFitComplete',\n                widths: widths,\n                locked: locked\n            });\n            if (onComplete) {\n                onComplete();\n            }\n        });\n        this.batch = null;\n    };\n    ColumnResizingService.decorators = [\n        { type: Injectable },\n    ];\n    return ColumnResizingService;\n}());\n\n/**\n * @hidden\n */\n/**\n * @hidden\n */\nvar hasFilterMenu = function (settings) {\n    return typeof settings === 'string' && settings.indexOf('menu') > -1;\n};\n/**\n * @hidden\n */\nvar hasFilterRow = function (settings) {\n    return settings === true || (typeof settings === 'string' && settings.indexOf('row') > -1);\n};\n\nvar contains$1 = function (node, predicate) {\n    while (node) {\n        if (predicate(node)) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n};\n/**\n * Arguments for the `close` event of the filter and column-menu popup.\n */\nvar PopupCloseEvent = /** @class */ (function (_super) {\n    __extends(PopupCloseEvent, _super);\n    function PopupCloseEvent(e) {\n        var _this = _super.call(this) || this;\n        _this.originalEvent = e;\n        return _this;\n    }\n    return PopupCloseEvent;\n}(PreventableEvent));\nvar DEFAULT_POPUP_CLASS = 'k-grid-filter-popup';\n/**\n * The service that is used for the popups of the filter and column menus\n * ([see example]({% slug reusablecustomfilters_grid %}#toc-filter-menu-with-popup)).\n */\nvar SinglePopupService = /** @class */ (function () {\n    function SinglePopupService(popupService, renderer, ngZone, scrollSyncService, localization) {\n        var _this = this;\n        this.popupService = popupService;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.localization = localization;\n        /**\n         * Fires when the filter or column menus are about to close because the user clicked outside their popups.\n         * Used to prevent the popup from closing.\n         */\n        this.onClose = new Subject();\n        this.scrollSubscription = scrollSyncService.changes.subscribe(function () { return _this.destroy(); });\n    }\n    /**\n     * @hidden\n     */\n    SinglePopupService.prototype.open = function (anchor, template, popupRef, popupClass) {\n        if (popupClass === void 0) { popupClass = DEFAULT_POPUP_CLASS; }\n        var toggle = isPresent(popupRef) && this.popupRef === popupRef;\n        this.destroy();\n        if (!toggle) {\n            var direction = this.localization.rtl ? 'right' : 'left';\n            this.popupRef = this.popupService.open({\n                anchorAlign: { vertical: 'bottom', horizontal: direction },\n                popupAlign: { vertical: 'top', horizontal: direction },\n                anchor: anchor,\n                popupClass: popupClass,\n                content: template,\n                positionMode: \"absolute\"\n            });\n            this.renderer.setAttribute(this.popupRef.popupElement, 'dir', this.localization.rtl ? 'rtl' : 'ltr');\n            this.attachClose(anchor);\n        }\n        return this.popupRef;\n    };\n    /**\n     * @hidden\n     */\n    SinglePopupService.prototype.destroy = function () {\n        if (this.popupRef) {\n            this.detachClose();\n            this.popupRef.close();\n            this.popupRef = null;\n        }\n    };\n    SinglePopupService.prototype.ngOnDestroy = function () {\n        this.destroy();\n        this.scrollSubscription.unsubscribe();\n    };\n    SinglePopupService.prototype.detachClose = function () {\n        if (this.removeClick) {\n            this.removeClick();\n        }\n    };\n    SinglePopupService.prototype.attachClose = function (skipElement) {\n        var _this = this;\n        this.detachClose();\n        this.ngZone.runOutsideAngular(function () {\n            return _this.removeClick = _this.renderer.listen(\"document\", \"click\", function (e) {\n                if (!contains$1(e.target, function (x) { return _this.popupRef.popupElement === x || x === skipElement; })) {\n                    var args = new PopupCloseEvent(e);\n                    _this.onClose.next(args);\n                    if (!args.isDefaultPrevented()) {\n                        _this.destroy();\n                    }\n                }\n            });\n        });\n    };\n    SinglePopupService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    SinglePopupService.ctorParameters = function () { return [\n        { type: PopupService },\n        { type: Renderer2 },\n        { type: NgZone },\n        { type: ScrollSyncService },\n        { type: LocalizationService }\n    ]; };\n    return SinglePopupService;\n}());\n\n/* tslint:disable: no-bitwise */\n/**\n * @hidden\n */\nvar append = function (element) {\n    var appended = false;\n    return function () {\n        if (!appended) {\n            document.body.appendChild(element);\n            appended = true;\n        }\n        return element;\n    };\n};\n/**\n * @hidden\n */\nvar getDocument = function (element) { return element.ownerDocument.documentElement; };\n/**\n * @hidden\n */\nvar getWindow = function (element) { return element.ownerDocument.defaultView; };\n/**\n * @hidden\n */\nvar offset = function (element) {\n    var _a = getDocument(element), clientTop = _a.clientTop, clientLeft = _a.clientLeft;\n    var _b = getWindow(element), pageYOffset = _b.pageYOffset, pageXOffset = _b.pageXOffset;\n    var _c = element.getBoundingClientRect(), top = _c.top, left = _c.left;\n    return {\n        top: top + pageYOffset - clientTop,\n        left: left + pageXOffset - clientLeft\n    };\n};\n/**\n * @hidden\n * If the target is before the draggable element, returns `true`.\n *\n * DOCUMENT_POSITION_FOLLOWING = 4\n */\nvar isTargetBefore = function (draggable, target) {\n    return (target.compareDocumentPosition(draggable) & 4) !== 0;\n};\n/**\n * @hidden\n * If the container and the element are the same\n * or if the container holds (contains) the element, returns `true`.\n *\n * DOCUMENT_POSITION_CONTAINED_BY = 16\n */\nvar contains$2 = function (element, container) {\n    return element === container ||\n        (container.compareDocumentPosition(element) & 16) !== 0;\n};\n/**\n * @hidden\n */\nvar position = function (target, before) {\n    var targetRect = offset(target);\n    var offsetWidth = target.offsetWidth, offsetHeight = target.offsetHeight;\n    var left = targetRect.left + (before ? 0 : offsetWidth);\n    var top = targetRect.top;\n    var height = offsetHeight;\n    return { left: left, top: top, height: height };\n};\n\n/**\n * @hidden\n */\nvar DragAndDropService = /** @class */ (function () {\n    function DragAndDropService() {\n        this.changes = new EventEmitter();\n        this.register = [];\n        this.lastTarget = null;\n    }\n    DragAndDropService.prototype.add = function (target) {\n        this.register.push(target);\n    };\n    DragAndDropService.prototype.remove = function (target) {\n        this.register = this.register.filter(function (current) { return current !== target; });\n    };\n    DragAndDropService.prototype.notifyDrag = function (draggable, element, mouseEvent) {\n        var target = this.targetFor(element);\n        if (this.lastTarget === target) {\n            return;\n        }\n        this.changes.next({\n            draggable: draggable,\n            mouseEvent: mouseEvent,\n            target: this.lastTarget,\n            type: 'leave'\n        });\n        if (target) {\n            this.changes.next({\n                draggable: draggable,\n                mouseEvent: mouseEvent,\n                target: target,\n                type: 'enter'\n            });\n        }\n        this.lastTarget = target;\n    };\n    DragAndDropService.prototype.notifyDrop = function (draggable, mouseEvent) {\n        this.changes.next({\n            draggable: draggable,\n            mouseEvent: mouseEvent,\n            target: this.lastTarget,\n            type: 'drop'\n        });\n        this.lastTarget = null;\n    };\n    DragAndDropService.prototype.targetFor = function (element) {\n        var comparer = contains$2.bind(null, element);\n        return this.register.find(function (_a) {\n            var nativeElement = _a.element.nativeElement;\n            return comparer(nativeElement);\n        });\n    };\n    DragAndDropService.decorators = [\n        { type: Injectable },\n    ];\n    return DragAndDropService;\n}());\n\nvar updateClass = function (element, valid) {\n    var icon = element.querySelector('.k-icon');\n    icon.className = icon.className\n        .replace(/(plus|cancel)/, valid ? 'plus' : 'cancel');\n};\nvar updateLock = function (element, locked) {\n    if (locked === void 0) { locked = null; }\n    var icon = element.querySelectorAll('.k-icon')[1];\n    var value = locked == null ? '' : (locked ? 'k-i-lock' : 'k-i-unlock');\n    icon.className = icon.className\n        .replace(/(k-i-unlock|k-i-lock)/, '') + (\" \" + value);\n};\nvar decorate = function (element, target) {\n    var targetStyles = getComputedStyle(target);\n    element.className = 'k-header k-drag-clue';\n    element.style.position = 'absolute';\n    element.style.zIndex = '20000';\n    element.style.paddingLeft = targetStyles.paddingLeft;\n    element.style.paddingTop = targetStyles.paddingTop;\n    element.style.paddingBottom = targetStyles.paddingBottom;\n    element.style.paddingRight = targetStyles.paddingRight;\n    element.style.width = targetStyles.width;\n    element.style.height = targetStyles.height;\n};\n/**\n * @hidden\n */\nvar DragHintService = /** @class */ (function () {\n    function DragHintService(santizer) {\n        this.santizer = santizer;\n    }\n    DragHintService.prototype.create = function (down, target, title) {\n        this.initCoords(down);\n        this.dom = document.createElement(\"div\");\n        decorate(this.dom, target);\n        var safeTitle = this.santizer.sanitize(SecurityContext.HTML, title);\n        this.dom.innerHTML = \"\\n            <span class=\\\"k-icon k-drag-status k-i-cancel k-icon-with-modifier\\\">\\n                <span class=\\\"k-icon k-icon-modifier\\\"></span>\\n            </span>\\n            \" + safeTitle + \"\\n        \";\n    };\n    DragHintService.prototype.attach = function () {\n        return append(this.dom);\n    };\n    DragHintService.prototype.remove = function () {\n        if (this.dom && this.dom.parentNode) {\n            (function (el) {\n                setTimeout(function () { return document.body.removeChild(el); });\n            })(this.dom); // hack for IE + pointer events!\n            this.dom = null;\n        }\n    };\n    DragHintService.prototype.show = function () {\n        this.dom.style.display = \"\";\n    };\n    DragHintService.prototype.hide = function () {\n        this.dom.style.display = \"none\";\n    };\n    DragHintService.prototype.enable = function () {\n        updateClass(this.dom, true);\n    };\n    DragHintService.prototype.disable = function () {\n        updateClass(this.dom, false);\n    };\n    DragHintService.prototype.removeLock = function () {\n        updateLock(this.dom);\n    };\n    DragHintService.prototype.toggleLock = function (locked) {\n        updateLock(this.dom, locked);\n    };\n    DragHintService.prototype.move = function (move) {\n        this.dom.style.top = this.initialTop + move.pageY + 'px';\n        this.dom.style.left = this.initialLeft + move.pageX + 'px';\n    };\n    DragHintService.prototype.initCoords = function (down) {\n        var _a = offset(down.originalEvent.target), top = _a.top, left = _a.left;\n        this.initialTop = top - down.pageY;\n        this.initialLeft = left - down.pageX;\n    };\n    DragHintService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    DragHintService.ctorParameters = function () { return [\n        { type: DomSanitizer }\n    ]; };\n    return DragHintService;\n}());\n\n/**\n * @hidden\n */\nvar DropCueService = /** @class */ (function () {\n    function DropCueService() {\n    }\n    DropCueService.prototype.create = function () {\n        this.dom = document.createElement(\"div\");\n        this.dom.className = 'k-grouping-dropclue';\n        this.hide();\n    };\n    DropCueService.prototype.attach = function () {\n        return append(this.dom);\n    };\n    DropCueService.prototype.remove = function () {\n        if (this.dom && this.dom.parentElement) {\n            document.body.removeChild(this.dom);\n            this.dom = null;\n        }\n    };\n    DropCueService.prototype.hide = function () {\n        this.dom.style.display = \"none\";\n    };\n    DropCueService.prototype.position = function (_a) {\n        var left = _a.left, top = _a.top, height = _a.height;\n        this.dom.style.display = 'block';\n        this.dom.style.height = height + 'px';\n        this.dom.style.top = top + 'px';\n        var width = this.dom.offsetWidth / 2;\n        this.dom.style.left = left - width + 'px';\n    };\n    DropCueService.decorators = [\n        { type: Injectable },\n    ];\n    return DropCueService;\n}());\n\n/**\n * @hidden\n */\nvar ColumnReorderService = /** @class */ (function () {\n    function ColumnReorderService() {\n        this.changes = new EventEmitter();\n    }\n    ColumnReorderService.prototype.reorder = function (e) {\n        this.changes.emit(e);\n    };\n    ColumnReorderService.decorators = [\n        { type: Injectable },\n    ];\n    return ColumnReorderService;\n}());\n\n/**\n * Arguments for the `columnReorder` event.\n */\nvar ColumnReorderEvent = /** @class */ (function (_super) {\n    __extends(ColumnReorderEvent, _super);\n    /**\n     * @hidden\n     */\n    function ColumnReorderEvent(_a) {\n        var column = _a.column, newIndex = _a.newIndex, oldIndex = _a.oldIndex;\n        var _this = _super.call(this) || this;\n        _this.column = column;\n        _this.newIndex = newIndex;\n        _this.oldIndex = oldIndex;\n        return _this;\n    }\n    return ColumnReorderEvent;\n}(PreventableEvent));\n\n/**\n * @hidden\n */\nvar FocusRoot = /** @class */ (function () {\n    function FocusRoot() {\n        this.groups = new Set();\n    }\n    FocusRoot.prototype.registerGroup = function (group) {\n        if (this.alive) {\n            this.groups.add(group);\n        }\n    };\n    FocusRoot.prototype.unregisterGroup = function (group) {\n        if (this.alive) {\n            this.groups.delete(group);\n        }\n    };\n    FocusRoot.prototype.activate = function () {\n        if (this.alive) {\n            this.groups.forEach(function (f) { return f.activate(); });\n        }\n    };\n    FocusRoot.prototype.deactivate = function () {\n        if (this.alive) {\n            this.groups.forEach(function (f) { return f.deactivate(); });\n        }\n    };\n    FocusRoot.decorators = [\n        { type: Injectable },\n    ];\n    return FocusRoot;\n}());\n\nvar isButton = matchesNodeName('button');\nvar isInputTag = matchesNodeName('input');\nvar navigableRegex = /(button|checkbox|color|file|radio|reset|submit)/i;\nvar isNavigableInput = function (element) { return isInputTag(element) && navigableRegex.test(element.type); };\nvar isNavigable = function (element) { return !element.disabled && (isButton(element) || isNavigableInput(element)); };\n/**\n * @hidden\n */\nvar DefaultFocusableElement = /** @class */ (function () {\n    function DefaultFocusableElement(host, renderer) {\n        this.renderer = renderer;\n        this.element = host.nativeElement;\n        this.focusable = findFocusable(this.element, false) || this.element;\n    }\n    Object.defineProperty(DefaultFocusableElement.prototype, \"enabled\", {\n        get: function () {\n            return this.focusable && !this.focusable.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DefaultFocusableElement.prototype, \"visible\", {\n        get: function () {\n            return this.focusable && isVisible(this.focusable);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DefaultFocusableElement.prototype.isNavigable = function () {\n        return this.canFocus() && isNavigable(this.element);\n    };\n    DefaultFocusableElement.prototype.toggle = function (active) {\n        this.renderer.setAttribute(this.focusable, 'tabIndex', active ? '0' : '-1');\n    };\n    DefaultFocusableElement.prototype.focus = function () {\n        if (this.focusable) {\n            this.focusable.focus();\n        }\n    };\n    DefaultFocusableElement.prototype.canFocus = function () {\n        return this.visible && this.enabled;\n    };\n    DefaultFocusableElement.prototype.hasFocus = function () {\n        var _this = this;\n        return document.activeElement !== this.element && closest(document.activeElement, function (e) { return e === _this.element; });\n    };\n    return DefaultFocusableElement;\n}());\n\n/**\n * A directive that controls the way focusable elements receive\n * [focus in a navigable Grid]({% slug keyboard_navigation_grid %}).\n *\n * @example\n * ```ts-preview\n * _@Component({\n *    selector: 'my-app',\n *    template: `\n *      <input type=\"text\" placeholder=\"Tab stop #0\" />\n *      <kendo-grid [data]=\"data\" [navigable]=\"true\">\n *          <kendo-grid-column field=\"ProductID\" title=\"Product ID\" width=\"40\">\n *          </kendo-grid-column>\n *          <kendo-grid-column field=\"ProductName\" title=\"Product Name\" width=\"100\">\n *          </kendo-grid-column>\n *          <kendo-grid-column>\n *              <ng-template kendoGridCellTemplate let-dataItem>\n *                  <!-- The first focusable element will be focused when pressing Enter on the cell -->\n *                  <input type=\"text\" kendoGridFocusable [value]=\"dataItem.ProductName\" />\n *                  <input type=\"button\" kendoGridFocusable value=\"Update\" />\n *              </ng-template>\n *          </kendo-grid-column>\n *          <kendo-grid-column width=\"80\">\n *              <ng-template kendoGridCellTemplate>\n *                  <!-- A single focusable element will be focused during navigation -->\n *                  <input type=\"button\" kendoGridFocusable value=\"Delete\" />\n *              </ng-template>\n *          </kendo-grid-column>\n *      </kendo-grid>\n *      <input type=\"text\" placeholder=\"Tab stop #2\" />\n *    `\n * })\n *\n * class AppComponent {\n *     public readonly data: any = [{\n *         \"ProductID\": 1,\n *         \"ProductName\": \"Chai\",\n *         \"UnitPrice\": 18.0000,\n *         \"Discontinued\": true\n *     }, {\n *         \"ProductID\": 2,\n *         \"ProductName\": \"Chang\",\n *         \"UnitPrice\": 19.0000,\n *         \"Discontinued\": false\n *     }];\n * }\n * ```\n */\nvar FocusableDirective = /** @class */ (function () {\n    function FocusableDirective(cellContext, hostElement, renderer) {\n        this.cellContext = cellContext;\n        this.hostElement = hostElement;\n        this.renderer = renderer;\n        this.active = true;\n        if (this.cellContext) {\n            this.group = this.cellContext.focusGroup;\n        }\n        if (this.group) {\n            this.group.registerElement(this);\n        }\n    }\n    FocusableDirective.prototype.ngAfterViewInit = function () {\n        if (!this.element) {\n            this.element = new DefaultFocusableElement(this.hostElement, this.renderer);\n        }\n        if (this.group) {\n            var isActive = this.group.isActive;\n            this.toggle(isActive);\n        }\n    };\n    FocusableDirective.prototype.ngOnDestroy = function () {\n        if (this.group) {\n            this.group.unregisterElement(this);\n        }\n    };\n    /**\n     * @hidden\n     */\n    FocusableDirective.prototype.toggle = function (active) {\n        if (this.element && active !== this.active) {\n            this.active = active;\n            this.element.toggle(active);\n        }\n    };\n    /**\n     * @hidden\n     */\n    FocusableDirective.prototype.canFocus = function () {\n        return this.element && this.element.canFocus();\n    };\n    /**\n     * @hidden\n     */\n    FocusableDirective.prototype.isNavigable = function () {\n        return this.element && this.element.isNavigable();\n    };\n    /**\n     * @hidden\n     */\n    FocusableDirective.prototype.focus = function () {\n        if (this.element) {\n            this.element.focus();\n        }\n    };\n    /**\n     * @hidden\n     */\n    FocusableDirective.prototype.hasFocus = function () {\n        return this.element && this.element.hasFocus();\n    };\n    /**\n     * @hidden\n     */\n    FocusableDirective.prototype.registerElement = function (element) {\n        this.element = element;\n    };\n    FocusableDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridFocusable]' + \",\\n        [kendoGridEditCommand],\\n        [kendoGridRemoveCommand],\\n        [kendoGridSaveCommand],\\n        [kendoGridCancelCommand],\\n        [kendoGridSelectionCheckbox]\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    FocusableDirective.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CELL_CONTEXT,] }, { type: SkipSelf }] },\n        { type: ElementRef },\n        { type: Renderer2 }\n    ]; };\n    return FocusableDirective;\n}());\n\n/**\n * @hidden\n */\nvar GridFocusableElement = /** @class */ (function () {\n    function GridFocusableElement(navigationService) {\n        this.navigationService = navigationService;\n    }\n    GridFocusableElement.prototype.focus = function () {\n        this.navigationService.focusCell();\n    };\n    GridFocusableElement.prototype.toggle = function (active) {\n        this.navigationService.toggle(active);\n    };\n    GridFocusableElement.prototype.canFocus = function () {\n        return true;\n    };\n    GridFocusableElement.prototype.hasFocus = function () {\n        return this.navigationService.hasFocus();\n    };\n    GridFocusableElement.prototype.isNavigable = function () {\n        return false;\n    };\n    return GridFocusableElement;\n}());\n\n/**\n * @hidden\n */\nvar NavigationCursor = /** @class */ (function () {\n    function NavigationCursor(model) {\n        this.model = model;\n        this.changes = new Subject();\n        this.activeRow = 0;\n        this.activeCol = 0;\n        this.virtualCol = 0;\n        this.virtualRow = 0;\n    }\n    Object.defineProperty(NavigationCursor.prototype, \"row\", {\n        get: function () {\n            return this.model.findRow(this.activeRow);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NavigationCursor.prototype, \"cell\", {\n        get: function () {\n            var row = this.row;\n            if (row) {\n                return this.model.findCell(this.activeCol, row);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NavigationCursor.prototype, \"dataRowIndex\", {\n        get: function () {\n            var row = this.row;\n            if (row) {\n                return row.dataRowIndex;\n            }\n            return -1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Assumes and announces a new cursor position.\n     */\n    NavigationCursor.prototype.reset = function (rowIndex, colIndex, force) {\n        if (rowIndex === void 0) { rowIndex = this.activeRow; }\n        if (colIndex === void 0) { colIndex = this.activeCol; }\n        if (force === void 0) { force = true; }\n        if (this.activate(rowIndex, colIndex, force)) {\n            this.virtualRow = rowIndex;\n            this.virtualCol = colIndex;\n        }\n    };\n    NavigationCursor.prototype.activate = function (rowIndex, colIndex, force) {\n        if (!force && this.isActiveRange(rowIndex, colIndex)) {\n            return false;\n        }\n        var prevColIndex = this.activeCol;\n        var prevRowIndex = this.activeRow;\n        this.activeCol = colIndex;\n        this.activeRow = rowIndex;\n        this.changes.next({\n            colIndex: colIndex,\n            prevColIndex: prevColIndex,\n            prevRowIndex: prevRowIndex,\n            rowIndex: rowIndex\n        });\n        return true;\n    };\n    NavigationCursor.prototype.isActiveRange = function (rowIndex, colIndex) {\n        if (this.activeRow !== rowIndex) {\n            return false;\n        }\n        var cell = this.cell;\n        var _a = this.model.cellRange(cell), start = _a.start, end = _a.end;\n        return !Boolean(cell) || (start <= colIndex && colIndex <= end);\n    };\n    /**\n     * Assumes a new cursor position without announcing it.\n     */\n    NavigationCursor.prototype.assume = function (rowIndex, colIndex) {\n        if (rowIndex === void 0) { rowIndex = this.activeRow; }\n        if (colIndex === void 0) { colIndex = this.activeCol; }\n        this.virtualRow = rowIndex;\n        this.virtualCol = colIndex;\n        this.activeCol = colIndex;\n        this.activeRow = rowIndex;\n    };\n    /**\n     * Announces a current cursor position to subscribers.\n     */\n    NavigationCursor.prototype.announce = function () {\n        this.changes.next({\n            colIndex: this.activeCol,\n            prevColIndex: this.activeCol,\n            prevRowIndex: this.activeRow,\n            rowIndex: this.activeRow\n        });\n    };\n    NavigationCursor.prototype.activateVirtualCell = function (cell) {\n        var rowRange = this.model.rowRange(cell);\n        var cellRange = this.model.cellRange(cell);\n        var activeCol = this.activeCol;\n        var activeRow = this.activeRow;\n        if (rowRange.start <= activeRow && activeRow <= rowRange.end &&\n            cellRange.start <= activeCol && activeCol <= cellRange.end) {\n            this.activeRow = cell.rowIndex;\n            this.activeCol = cell.colIndex;\n            return true;\n        }\n    };\n    NavigationCursor.prototype.isActive = function (rowIndex, colIndex) {\n        return this.activeCol === colIndex && this.activeRow === rowIndex;\n    };\n    NavigationCursor.prototype.moveUp = function (offset) {\n        if (offset === void 0) { offset = 1; }\n        return this.offsetRow(-offset);\n    };\n    NavigationCursor.prototype.moveDown = function (offset) {\n        if (offset === void 0) { offset = 1; }\n        return this.offsetRow(offset);\n    };\n    NavigationCursor.prototype.moveLeft = function (offset) {\n        if (offset === void 0) { offset = 1; }\n        return this.offsetCol(-offset);\n    };\n    NavigationCursor.prototype.moveRight = function (offset) {\n        if (offset === void 0) { offset = 1; }\n        return this.offsetCol(offset);\n    };\n    NavigationCursor.prototype.lastCellIndex = function (row) {\n        return this.metadata.columns.leafColumnsToRender.length - 1 +\n            (this.metadata.hasDetailTemplate && (!row || !row.groupItem) ? 1 : 0);\n    };\n    NavigationCursor.prototype.offsetCol = function (offset) {\n        var prevRow = this.model.findRow(this.virtualRow);\n        var lastIndex = this.lastCellIndex(prevRow);\n        var virtualCol = this.virtualCol;\n        this.virtualCol = Math.max(0, Math.min(virtualCol + offset, lastIndex));\n        var nextColIndex = this.virtualCol;\n        var nextRowIndex = this.virtualRow;\n        var cell = this.model.findCell(this.virtualCol, prevRow);\n        if (!cell && this.metadata.virtualColumns) {\n            return this.activate(nextRowIndex, nextColIndex);\n        }\n        if (cell.colSpan > 1 && cell.colIndex <= virtualCol && virtualCol < cell.colIndex + cell.colSpan) {\n            nextColIndex = offset > 0 ? Math.min(cell.colIndex + cell.colSpan, lastIndex) : Math.max(0, cell.colIndex + offset);\n            var nextCell = this.model.findCell(nextColIndex, prevRow);\n            if (cell !== nextCell) {\n                cell = nextCell;\n                this.virtualCol = cell.colIndex;\n            }\n            else {\n                this.virtualCol = virtualCol;\n            }\n        }\n        return this.activate(cell.rowIndex, cell.colIndex);\n    };\n    NavigationCursor.prototype.offsetRow = function (offset) {\n        var nextColIndex = this.virtualCol;\n        if (this.metadata && this.metadata.isVirtual) {\n            var maxIndex = this.metadata.maxLogicalRowIndex;\n            var nextIndex = Math.max(0, Math.min(this.activeRow + offset, maxIndex));\n            if (this.metadata.hasDetailTemplate && !this.model.findRow(nextIndex)) {\n                nextIndex = offset > 0 ? nextIndex + 1 : nextIndex - 1;\n                nextIndex = Math.max(0, Math.min(nextIndex, maxIndex));\n            }\n            if (this.metadata.hasDetailTemplate && nextIndex === maxIndex) {\n                if (this.model.lastRow.index !== maxIndex) {\n                    // Don't attempt to navigate past the last collapsed row.\n                    nextIndex--;\n                }\n            }\n            var nextRow_1 = this.model.findRow(nextIndex);\n            if (nextRow_1) {\n                // remove duplication\n                var cell_1 = this.model.findCell(this.virtualCol, nextRow_1);\n                if (cell_1.rowIndex <= this.virtualRow && offset > 0 && cell_1.rowSpan > 1) {\n                    cell_1 = this.model.findCell(this.virtualCol, this.model.findRow(cell_1.rowIndex + cell_1.rowSpan - 1 + offset));\n                }\n                nextIndex = cell_1.rowIndex;\n                nextColIndex = cell_1.colIndex;\n            }\n            this.virtualRow = nextIndex;\n            return this.activate(nextIndex, nextColIndex);\n        }\n        var nextRow = this.model.findRow(this.virtualRow + offset) || this.model.nextRow(this.virtualRow, offset);\n        if (!nextRow) {\n            return false;\n        }\n        var cell = this.model.findCell(this.virtualCol, nextRow);\n        if (cell && cell.rowIndex <= this.virtualRow && offset > 0 && cell.rowSpan > 1) { // spanned cell go to next\n            var nextPos = cell.rowIndex + cell.rowSpan - 1 + offset;\n            cell = this.model.findCell(this.virtualCol, this.model.findRow(nextPos));\n        }\n        if (!cell && this.metadata.virtualColumns) {\n            return this.activate(this.virtualRow + offset, this.virtualCol);\n        }\n        this.virtualRow = cell.rowIndex;\n        return this.activate(this.virtualRow, cell.colIndex);\n    };\n    return NavigationCursor;\n}());\n\n/**\n * @hidden\n */\nvar ItemMap = /** @class */ (function () {\n    function ItemMap() {\n        this.count = 0;\n        this.items = {};\n    }\n    Object.defineProperty(ItemMap.prototype, \"first\", {\n        get: function () {\n            if (this.count > 0) {\n                var result_1;\n                this.forEach(function (item) {\n                    result_1 = item;\n                    return true;\n                });\n                return result_1;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ItemMap.prototype, \"last\", {\n        get: function () {\n            if (this.count > 0) {\n                var keys = Object.keys(this.items);\n                return this.items[keys[keys.length - 1]];\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ItemMap.prototype.removeItem = function (key) {\n        if (this.items[key]) {\n            delete this.items[key];\n            this.count--;\n        }\n    };\n    ItemMap.prototype.setItem = function (key, item) {\n        if (!this.items[key]) {\n            this.count++;\n        }\n        this.items[key] = item;\n    };\n    ItemMap.prototype.getItem = function (key) {\n        return this.items[key];\n    };\n    ItemMap.prototype.toArray = function () {\n        var result = [];\n        this.forEach(function (item) {\n            result.push(item);\n        });\n        return result;\n    };\n    ItemMap.prototype.forEach = function (callback) {\n        for (var key in this.items) {\n            if (this.items.hasOwnProperty(key) && callback(this.items[key])) {\n                return this.items[key];\n            }\n        }\n    };\n    ItemMap.prototype.find = function (callback) {\n        return this.forEach(callback);\n    };\n    return ItemMap;\n}());\n\n/**\n * @hidden\n *\n * Contains information for the currently rendered rows and cells.\n */\nvar NavigationModel = /** @class */ (function () {\n    function NavigationModel() {\n        this.rows = new ItemMap();\n    }\n    Object.defineProperty(NavigationModel.prototype, \"firstRow\", {\n        get: function () {\n            return this.rows.first;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NavigationModel.prototype, \"lastRow\", {\n        get: function () {\n            return this.rows.last;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NavigationModel.prototype.registerCell = function (cell) {\n        var row = this.rows.getItem(cell.logicalRowIndex);\n        if (!row) {\n            return;\n        }\n        var colIndex = cell.logicalColIndex;\n        var modelCell = {\n            uid: cell.uid,\n            colIndex: colIndex,\n            rowIndex: row.index,\n            colSpan: cell.colSpan,\n            rowSpan: cell.rowSpan,\n            detailExpandCell: cell.detailExpandCell,\n            dataItem: row.dataItem,\n            dataRowIndex: row.dataRowIndex,\n            focusGroup: cell.focusGroup\n        };\n        row.cells.setItem(colIndex, modelCell);\n        if (cell.groupItem) {\n            row.groupItem = cell.groupItem;\n        }\n        return modelCell;\n    };\n    NavigationModel.prototype.unregisterCell = function (index, rowIndex, cell) {\n        var row = this.rows.getItem(rowIndex);\n        if (row) {\n            var match = row.cells.getItem(index);\n            if (match && match.uid === cell.uid) {\n                row.cells.removeItem(index);\n            }\n        }\n    };\n    NavigationModel.prototype.registerRow = function (row) {\n        var modelRow = {\n            uid: row.uid,\n            index: row.logicalRowIndex,\n            dataItem: row.dataItem,\n            dataRowIndex: row.dataRowIndex,\n            cells: new ItemMap()\n        };\n        this.rows.setItem(row.logicalRowIndex, modelRow);\n    };\n    NavigationModel.prototype.updateRow = function (row) {\n        var current = this.rows.getItem(row.logicalRowIndex);\n        if (current) {\n            Object.assign(current, {\n                dataItem: row.dataItem,\n                dataRowIndex: row.dataRowIndex\n            });\n        }\n    };\n    NavigationModel.prototype.unregisterRow = function (index, row) {\n        var match = this.rows.getItem(index);\n        if (match && match.uid === row.uid) {\n            this.rows.removeItem(index);\n        }\n    };\n    NavigationModel.prototype.cellRange = function (cell) {\n        if (cell) {\n            var start = cell.colIndex;\n            var end = cell.colIndex + (cell.colSpan || 1) - 1;\n            return {\n                start: start,\n                end: end\n            };\n        }\n        return {};\n    };\n    NavigationModel.prototype.rowRange = function (cell) {\n        if (cell) {\n            var start = cell.rowIndex;\n            var end = cell.rowIndex + (cell.rowSpan || 1) - 1;\n            return {\n                start: start,\n                end: end\n            };\n        }\n        return {};\n    };\n    NavigationModel.prototype.nextRow = function (rowIndex, offset) {\n        var rows = this.rows.toArray();\n        var row = this.rows.getItem(rowIndex);\n        var position = rows.indexOf(row);\n        var next = rows[position + offset];\n        return next;\n    };\n    NavigationModel.prototype.findRow = function (index) {\n        return this.rows.getItem(index);\n    };\n    NavigationModel.prototype.findCell = function (index, row) {\n        if (!row) {\n            return;\n        }\n        var rowIndex = row.index;\n        var cell = row.cells.getItem(index);\n        var currentIndex = rowIndex;\n        while (!cell && row) {\n            row = this.rows.getItem(currentIndex);\n            cell = this.rowCell(index, row);\n            currentIndex--;\n        }\n        if (cell && rowIndex <= row.index + (cell.rowSpan || 1) - 1) {\n            return cell;\n        }\n    };\n    NavigationModel.prototype.rowCell = function (index, row) {\n        if (!row || !row.cells.count) {\n            return;\n        }\n        var firstCell = row.cells.first;\n        var cell, currentIndex = index;\n        while (!cell && currentIndex >= firstCell.colIndex) {\n            cell = row.cells.getItem(currentIndex);\n            currentIndex--;\n        }\n        if (cell && index <= cell.colIndex + (cell.colSpan || 1) - 1) {\n            return cell;\n        }\n    };\n    return NavigationModel;\n}());\n\n/**\n * @hidden\n */\nvar ScrollRequestService = /** @class */ (function () {\n    function ScrollRequestService() {\n        this.requests = new Subject();\n    }\n    ScrollRequestService.prototype.scrollTo = function (request) {\n        this.requests.next(request);\n    };\n    ScrollRequestService.decorators = [\n        { type: Injectable },\n    ];\n    return ScrollRequestService;\n}());\n\nvar isInSameGrid = function (element, gridElement) {\n    return closest(element, matchesNodeName('kendo-grid')) === gridElement;\n};\nvar matchHeaderCell = matchesNodeName('th');\nvar matchDataCell = matchesNodeName('td');\nvar matchCell = function (element) { return matchDataCell(element) || matchHeaderCell(element); };\nvar gridCell = function (element, gridElement) {\n    var target = closest(element, matchCell);\n    while (target && !isInSameGrid(target, gridElement)) {\n        target = closest(target.parentElement, matchCell);\n    }\n    return target;\n};\nvar targetCell = function (target, gridElement) {\n    var cell = gridCell(target, gridElement);\n    var row = closest(cell, matchesNodeName('tr'));\n    if (cell && row) {\n        var rowIndex = row.getAttribute('aria-rowindex');\n        rowIndex = rowIndex ? parseInt(rowIndex, 10) - 1 : null;\n        var colIndex = cell.getAttribute('aria-colindex');\n        colIndex = colIndex ? parseInt(colIndex, 10) - 1 : null;\n        if (rowIndex !== null && colIndex !== null) {\n            return { colIndex: colIndex, rowIndex: rowIndex, element: cell };\n        }\n    }\n};\nvar isArrowKey = function (keyCode) {\n    return keyCode === Keys.ArrowLeft || keyCode === Keys.ArrowRight ||\n        keyCode === Keys.ArrowUp || keyCode === Keys.ArrowDown;\n};\nvar isNavigationKey = function (keyCode) {\n    return isArrowKey(keyCode) ||\n        keyCode === Keys.PageUp || keyCode === Keys.PageDown ||\n        keyCode === Keys.Home || keyCode === Keys.End;\n};\nvar isInput = matchesNodeName('input');\nvar isTextInput = function (element) {\n    return element && isInput(element) && element.type.toLowerCase() === 'text';\n};\nvar isPrintableCharacter = function (str) {\n    return str.length === 1 && str.match(/\\S/);\n};\n/**\n * @hidden\n */\nvar NavigationViewport = /** @class */ (function () {\n    function NavigationViewport(firstItemIndex, lastItemIndex) {\n        this.firstItemIndex = firstItemIndex;\n        this.lastItemIndex = lastItemIndex;\n    }\n    NavigationViewport.prototype.containsRow = function (dataRowIndex) {\n        var headerRow = dataRowIndex < 0;\n        return headerRow || (dataRowIndex >= this.firstItemIndex && dataRowIndex <= this.lastItemIndex);\n    };\n    NavigationViewport.prototype.intersects = function (start, end) {\n        return (start <= this.firstItemIndex && this.lastItemIndex <= end) ||\n            (this.firstItemIndex <= start && start <= this.lastItemIndex) ||\n            (this.firstItemIndex <= end && end <= this.lastItemIndex);\n    };\n    return NavigationViewport;\n}());\n/**\n * @hidden\n */\nvar NavigationService = /** @class */ (function () {\n    function NavigationService(zone, domEvents, pagerContextService, scrollRequestService, groupsService, detailsService, focusRoot, editService, cd, localization, focusableParent) {\n        this.zone = zone;\n        this.domEvents = domEvents;\n        this.pagerContextService = pagerContextService;\n        this.scrollRequestService = scrollRequestService;\n        this.groupsService = groupsService;\n        this.detailsService = detailsService;\n        this.focusRoot = focusRoot;\n        this.editService = editService;\n        this.cd = cd;\n        this.localization = localization;\n        this.focusableParent = focusableParent;\n        this.cellKeydown = new EventEmitter();\n        this.activeRowIndex = 0;\n        this.alive = false;\n        this.active = true;\n        this.mode = 0 /* Standby */;\n        this.model = new NavigationModel();\n        this.cursor = new NavigationCursor(this.model);\n        this.changes = this.cursor.changes;\n    }\n    Object.defineProperty(NavigationService.prototype, \"metadata\", {\n        get: function () {\n            return this.meta;\n        },\n        set: function (value) {\n            this.meta = value;\n            this.cursor.metadata = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NavigationService.prototype, \"enabled\", {\n        get: function () {\n            return this.alive;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NavigationService.prototype, \"activeCell\", {\n        get: function () {\n            if (this.mode !== 0 /* Standby */) {\n                return this.cursor.cell;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NavigationService.prototype, \"activeRow\", {\n        get: function () {\n            if (this.mode !== 0 /* Standby */) {\n                return Object.assign({}, this.cursor.row, {\n                    cells: this.cursor.row.cells.toArray()\n                });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NavigationService.prototype, \"activeDataRow\", {\n        get: function () {\n            return Math.max(0, this.activeRowIndex - this.meta.headerRows);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NavigationService.prototype.init = function (meta) {\n        var _this = this;\n        this.alive = true;\n        this.focusRoot.alive = true;\n        this.metadata = meta;\n        var onStableSubscriber = function () {\n            var operators = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                operators[_i] = arguments[_i];\n            }\n            return function (args) {\n                var _a;\n                return _this.zone.isStable ?\n                    from([true]).pipe(map(function () { return args; })) : (_a = _this.zone.onStable).pipe.apply(_a, [take(1), map(function () { return args; })].concat(operators));\n            };\n        };\n        var onStable = onStableSubscriber();\n        this.subs = new Subscription();\n        this.subs.add(this.cursor.changes\n            .subscribe(function (args) { return _this.onCursorChanges(args); }));\n        this.subs.add(this.domEvents.focus.pipe(switchMap(onStable))\n            .subscribe(function (args) { return _this.navigateTo(args.target); }));\n        this.subs.add(this.domEvents.focusOut.pipe(filter(function () { return _this.mode !== 0 /* Standby */; }), switchMap(onStableSubscriber(takeUntil(this.domEvents.focus))))\n            .subscribe(function (args) { return _this.onFocusOut(args); }));\n        this.subs.add(this.domEvents.windowBlur.pipe(filter(function () { return _this.mode !== 0 /* Standby */; }))\n            .subscribe(function () { return _this.onWindowBlur(); }));\n        this.subs.add(\n        // Closing the editor will not always trigger focusout in Firefox.\n        // To get around this, we ensure that the cell is closed after editing.\n        this.editService.changes.pipe(filter(function (e) { return e.action !== 'edit' && _this.mode === 2 /* Content */; }), filter(function (e) { return e.action === 'cellClose' && !e.prevented; }), switchMap(onStable))\n            .subscribe(function () { return _this.leaveCell(); }));\n        this.subs.add(this.pagerContextService.pageChange\n            .subscribe(function () { return _this.cursor.reset(0, 0); }));\n        this.subs.add(this.domEvents.keydown\n            .subscribe(function (args) { return _this.onKeydown(args); }));\n        this.subs.add(this.domEvents.keydown.pipe(filter(function (args) {\n            return args.keyCode === Keys.Tab && _this.mode === 2 /* Content */;\n        }), switchMapTo(this.domEvents.focusOut.pipe(takeUntil(\n        // Timeout if focusOut doesn't fire very soon\n        interval(0).pipe(take(1))))))\n            .subscribe(function () { return _this.onTabout(); }));\n        if (this.focusableParent) {\n            var element = new GridFocusableElement(this);\n            this.focusableParent.registerElement(element);\n        }\n        this.deactivateElements();\n    };\n    NavigationService.prototype.ngOnDestroy = function () {\n        if (this.subs) {\n            this.subs.unsubscribe();\n        }\n        this.alive = false;\n    };\n    NavigationService.prototype.registerCell = function (cell) {\n        if (cell.logicalRowIndex !== this.pendingRowIndex) {\n            var modelCell = this.model.registerCell(cell);\n            if (this.virtualCell && this.cursor.activateVirtualCell(modelCell)) {\n                this.virtualCell = false;\n            }\n        }\n    };\n    NavigationService.prototype.registerCellOnCurrentRow = function (cell) {\n        if (cell.logicalRowIndex === this.pendingRowIndex) {\n            this.model.registerCell(cell);\n        }\n    };\n    NavigationService.prototype.unregisterCell = function (index, rowIndex, cell) {\n        this.model.unregisterCell(index, rowIndex, cell);\n    };\n    NavigationService.prototype.registerRow = function (row) {\n        this.model.registerRow(row);\n        this.pendingRowIndex = row.logicalRowIndex;\n    };\n    NavigationService.prototype.updateRow = function (row) {\n        this.model.updateRow(row);\n    };\n    NavigationService.prototype.unregisterRow = function (index, row) {\n        this.model.unregisterRow(index, row);\n    };\n    NavigationService.prototype.isCellFocusable = function (cell) {\n        return this.alive &&\n            this.active &&\n            this.mode !== 2 /* Content */ &&\n            this.cursor.isActive(cell.logicalRowIndex, cell.logicalColIndex);\n    };\n    NavigationService.prototype.isCellFocused = function (cell) {\n        return this.mode === 1 /* Cursor */ && this.isCellFocusable(cell);\n    };\n    NavigationService.prototype.navigateTo = function (el) {\n        if (!this.alive) {\n            return;\n        }\n        var cell = targetCell(el, this.meta.gridElement.nativeElement);\n        if (!cell) {\n            return;\n        }\n        var oldMode = this.mode;\n        var focusInCell = contains(cell.element, document.activeElement);\n        var focusInActiveRowContent = this.mode === 2 /* Content */ &&\n            this.activeRowIndex === cell.rowIndex &&\n            el !== cell.element;\n        if (focusInCell) {\n            this.mode = 2 /* Content */;\n            this.cursor.reset(cell.rowIndex, cell.colIndex);\n            this.activateRow();\n        }\n        else if (!focusInActiveRowContent) {\n            this.mode = 1 /* Cursor */;\n            this.deactivateElements();\n            var alreadyActive = this.cursor.isActive(cell.rowIndex, cell.colIndex);\n            var isCursor = oldMode === 1 /* Cursor */ && alreadyActive;\n            if (!isCursor) {\n                this.cursor.reset(cell.rowIndex, cell.colIndex);\n            }\n        }\n    };\n    NavigationService.prototype.tryFocus = function (el) {\n        this.activateElements();\n        var focusable = findFocusableChild(el);\n        if (focusable) {\n            var cell = targetCell(focusable, this.meta.gridElement.nativeElement);\n            if (cell) {\n                this.cursor.reset(cell.rowIndex, cell.colIndex);\n                this.deactivateElements();\n                this.enterCell();\n            }\n            focusable.focus();\n        }\n        else {\n            this.deactivateElements();\n        }\n        return !!focusable;\n    };\n    NavigationService.prototype.needsViewport = function () {\n        return this.meta && this.meta.isVirtual;\n    };\n    NavigationService.prototype.setViewport = function (firstItemIndex, lastItemIndex) {\n        this.viewport = new NavigationViewport(firstItemIndex, lastItemIndex);\n        if (this.meta && this.meta.isVirtual && this.activeDataRow > -1) {\n            var dataRowIndex = this.activeDataRow;\n            var ahead = firstItemIndex - dataRowIndex;\n            var behind = dataRowIndex - lastItemIndex;\n            if (ahead > 0) {\n                this.cursor.reset(firstItemIndex + this.meta.headerRows);\n            }\n            else if (behind > 0) {\n                this.cursor.reset(lastItemIndex - this.meta.headerRows);\n            }\n        }\n    };\n    NavigationService.prototype.setColumnViewport = function (firstItemIndex, lastItemIndex) {\n        this.columnViewport = new NavigationViewport(firstItemIndex, lastItemIndex);\n    };\n    NavigationService.prototype.focusCell = function (rowIndex, colIndex) {\n        if (rowIndex === void 0) { rowIndex = undefined; }\n        if (colIndex === void 0) { colIndex = undefined; }\n        this.mode = 1 /* Cursor */;\n        this.cursor.reset(rowIndex, colIndex);\n        return this.activeCell;\n    };\n    NavigationService.prototype.focusNextCell = function (wrap) {\n        if (wrap === void 0) { wrap = true; }\n        return this.focusAdjacentCell(true, wrap);\n    };\n    NavigationService.prototype.focusPrevCell = function (wrap) {\n        if (wrap === void 0) { wrap = true; }\n        return this.focusAdjacentCell(false, wrap);\n    };\n    NavigationService.prototype.toggle = function (active) {\n        this.active = active;\n        this.cursor.announce();\n    };\n    NavigationService.prototype.hasFocus = function () {\n        return this.mode === 1 /* Cursor */ || this.mode === 2 /* Content */;\n    };\n    NavigationService.prototype.autoFocusCell = function (start, end) {\n        return !this.meta.virtualColumns || end < this.meta.columns.lockedLeafColumns.length || this.columnViewport.intersects(start, end);\n    };\n    NavigationService.prototype.focusAdjacentCell = function (fwd, wrap) {\n        this.focusCell();\n        var success = fwd ? this.moveCursorFwd() : this.moveCursorBwd();\n        if (wrap && !success) {\n            success = fwd ? this.cursor.moveDown(1) : this.cursor.moveUp(1);\n            if (success) {\n                var row = this.cursor.row;\n                var colIdx = fwd ? 0 : this.cursor.lastCellIndex(row);\n                this.cursor.reset(row.index, colIdx);\n            }\n        }\n        if (success) {\n            return this.activeCell;\n        }\n        else {\n            this.mode = 0 /* Standby */;\n            this.cursor.announce();\n        }\n        return null;\n    };\n    NavigationService.prototype.enterCell = function () {\n        var cell = this.cursor.cell;\n        if (!cell) {\n            return;\n        }\n        var group = cell.focusGroup;\n        var focusable = group && group.canFocus();\n        this.mode = focusable ? 2 /* Content */ : 1 /* Cursor */;\n        this.cursor.announce();\n        if (focusable) {\n            this.activateRow();\n            group.focus();\n        }\n    };\n    NavigationService.prototype.leaveCell = function () {\n        var cell = this.cursor.cell;\n        if (!cell) {\n            return;\n        }\n        var group = cell.focusGroup;\n        var focusable = group && group.canFocus();\n        if (!focusable) {\n            this.deactivateElements();\n        }\n        this.mode = 1 /* Cursor */;\n        this.cursor.announce();\n    };\n    NavigationService.prototype.activateElements = function () {\n        this.focusRoot.activate();\n    };\n    NavigationService.prototype.deactivateElements = function () {\n        this.focusRoot.deactivate();\n    };\n    NavigationService.prototype.activateRow = function () {\n        this.cursor.row.cells\n            .forEach(function (cell) { return cell.focusGroup && cell.focusGroup.activate(); });\n    };\n    NavigationService.prototype.moveCursorFwd = function () {\n        return this.localization.rtl ? this.cursor.moveLeft() : this.cursor.moveRight();\n    };\n    NavigationService.prototype.moveCursorBwd = function () {\n        return this.localization.rtl ? this.cursor.moveRight() : this.cursor.moveLeft();\n    };\n    NavigationService.prototype.onCursorKeydown = function (args) {\n        var _this = this;\n        var preventDefault = false;\n        var modifier = args.ctrlKey || args.metaKey;\n        var step = modifier ? 5 : 1;\n        if (!this.onCellKeydown(args)) {\n            return;\n        }\n        var row = this.cursor.row;\n        switch (args.keyCode) {\n            case Keys.ArrowDown:\n                preventDefault = this.cursor.moveDown(step);\n                break;\n            case Keys.ArrowUp:\n                preventDefault = this.cursor.moveUp(step);\n                break;\n            case Keys.ArrowRight:\n                preventDefault = this.moveCursorFwd();\n                break;\n            case Keys.ArrowLeft:\n                preventDefault = this.moveCursorBwd();\n                break;\n            case Keys.PageDown:\n                if (this.metadata.isVirtual && this.viewport) {\n                    var nextItemIndex = this.meta.headerRows + this.viewport.lastItemIndex + 1;\n                    if (this.metadata.hasDetailTemplate) {\n                        nextItemIndex++;\n                    }\n                    nextItemIndex = Math.min(this.meta.maxLogicalRowIndex, nextItemIndex);\n                    this.cursor.reset(nextItemIndex);\n                    preventDefault = true;\n                }\n                else if (this.metadata.hasPager) {\n                    this.zone.run(function () { return _this.pagerContextService.nextPage(); });\n                    preventDefault = true;\n                }\n                break;\n            case Keys.PageUp:\n                if (this.metadata.isVirtual && this.viewport) {\n                    var viewportSize = this.viewport.lastItemIndex - this.viewport.firstItemIndex;\n                    var firstItemIndex = this.viewport.firstItemIndex;\n                    var nextItemIndex = Math.max(this.meta.headerRows, firstItemIndex - viewportSize - 1);\n                    this.cursor.reset(nextItemIndex);\n                    preventDefault = true;\n                }\n                else if (this.metadata.hasPager) {\n                    this.zone.run(function () { return _this.pagerContextService.prevPage(); });\n                    preventDefault = true;\n                }\n                break;\n            case Keys.Home:\n                if (modifier) {\n                    if (this.meta.isVirtual) {\n                        this.cursor.reset(this.meta.headerRows, 0, false);\n                    }\n                    else {\n                        this.cursor.reset(this.model.firstRow.index, 0, false);\n                    }\n                }\n                else {\n                    this.cursor.reset(row.index, 0, false);\n                }\n                preventDefault = true;\n                break;\n            case Keys.End:\n                if (modifier) {\n                    if (this.meta.isVirtual) {\n                        var lastRowIndex = this.meta.maxLogicalRowIndex;\n                        if (this.meta.hasDetailTemplate) {\n                            lastRowIndex--;\n                        }\n                        this.cursor.reset(lastRowIndex, this.cursor.lastCellIndex(), false);\n                    }\n                    else {\n                        this.cursor.reset(this.model.lastRow.index, this.cursor.lastCellIndex(this.model.lastRow), false);\n                    }\n                }\n                else {\n                    var lastIndex = this.cursor.lastCellIndex(row);\n                    var cell = this.model.findCell(lastIndex, row);\n                    if (cell) {\n                        this.cursor.reset(cell.rowIndex, cell.colIndex);\n                    }\n                    else {\n                        this.cursor.reset(row.index, lastIndex);\n                    }\n                }\n                preventDefault = true;\n                break;\n            case Keys.Enter:\n            case Keys.F2:\n                var groupItem_1 = row.groupItem;\n                if (groupItem_1) {\n                    this.zone.run(function () {\n                        return _this.groupsService.toggleRow(groupItem_1.index, groupItem_1.data);\n                    });\n                }\n                else if (this.cursor.cell.detailExpandCell) {\n                    this.zone.run(function () {\n                        return _this.detailsService.toggleRow(row.dataRowIndex, row.dataItem);\n                    });\n                }\n                else {\n                    this.enterCell();\n                    if (!this.cursor.cell.focusGroup.isNavigable()) {\n                        preventDefault = true;\n                    }\n                }\n                break;\n            default:\n                if (!args.ctrlKey && !args.altKey && isPrintableCharacter(args.key)) {\n                    this.enterCell();\n                }\n        }\n        if (preventDefault) {\n            args.preventDefault();\n        }\n    };\n    NavigationService.prototype.onContentKeydown = function (args) {\n        if (!this.onCellKeydown(args)) {\n            return;\n        }\n        var confirm = !args.defaultPrevented && args.keyCode === Keys.Enter && isTextInput(args.srcElement);\n        if (args.keyCode === Keys.Escape || args.keyCode === Keys.F2 || confirm) {\n            this.leaveCell();\n            this.cursor.reset();\n            args.stopPropagation();\n        }\n        else if (isNavigationKey(args.keyCode) && this.cursor.cell.focusGroup.isNavigable()) {\n            this.onCursorKeydown(args);\n            if (args.defaultPrevented) {\n                this.leaveCell();\n            }\n        }\n    };\n    NavigationService.prototype.onCellKeydown = function (args) {\n        if (this.editService.isEditingCell()) {\n            var confirm_1 = args.keyCode === Keys.Enter;\n            var cancel = args.keyCode === Keys.Escape;\n            var navigate = isNavigationKey(args.keyCode);\n            if (confirm_1) {\n                this.editService.closeCell(args);\n            }\n            else if (cancel) {\n                this.editService.cancelCell();\n                this.cd.detectChanges();\n            }\n            else if (navigate) {\n                return false;\n            }\n        }\n        this.cellKeydown.emit(args);\n        return true;\n    };\n    NavigationService.prototype.onCursorChanges = function (args) {\n        this.activeRowIndex = args.rowIndex;\n        var dataRowIndex = this.activeDataRow;\n        if (this.meta && (this.meta.isVirtual && this.viewport &&\n            !this.viewport.containsRow(dataRowIndex) && dataRowIndex > -1)) {\n            this.scrollRequestService.scrollTo({ row: dataRowIndex });\n        }\n        if (this.meta.virtualColumns && args.colIndex >= this.meta.columns.lockedLeafColumns.length) {\n            var cell = this.activeCell;\n            var _a = this.model.cellRange(cell), start = _a.start, end = _a.end;\n            if (!cell) {\n                this.virtualCell = true;\n            }\n            if ((!cell && this.mode !== 0 /* Standby */) || (cell && !this.columnViewport.intersects(start, end))) {\n                this.scrollRequestService.scrollTo({ column: args.colIndex - (this.metadata.hasDetailTemplate ? 1 : 0) });\n            }\n        }\n    };\n    NavigationService.prototype.onFocusOut = function (args) {\n        if (isVisible(args.target)) {\n            this.mode = 0 /* Standby */;\n        }\n        else {\n            // Focused target is no longer visible,\n            // reset to cursor mode and recapture focus.\n            this.mode = 1 /* Cursor */;\n        }\n        this.deactivateElements();\n        this.cursor.announce();\n    };\n    NavigationService.prototype.onWindowBlur = function () {\n        this.mode = 0 /* Standby */;\n        this.deactivateElements();\n        this.cursor.announce();\n    };\n    NavigationService.prototype.onKeydown = function (args) {\n        if (this.mode === 1 /* Cursor */) {\n            this.onCursorKeydown(args);\n        }\n        else if (this.mode === 2 /* Content */) {\n            this.onContentKeydown(args);\n        }\n    };\n    NavigationService.prototype.onTabout = function () {\n        // Tabbed out of the last focusable content element\n        // reset to cursor mode and recapture focus.\n        if (this.cursor.cell.focusGroup.isNavigable()) {\n            // Unless the cell has a single focusable element,\n            // otherwise we'd return to Content mode and enter an endless loop\n            return;\n        }\n        this.leaveCell();\n        this.cursor.reset();\n    };\n    NavigationService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    NavigationService.ctorParameters = function () { return [\n        { type: NgZone },\n        { type: DomEventsService },\n        { type: PagerContextService },\n        { type: ScrollRequestService },\n        { type: GroupsService },\n        { type: DetailsService },\n        { type: FocusRoot },\n        { type: EditService },\n        { type: ChangeDetectorRef },\n        { type: LocalizationService },\n        { type: FocusableDirective, decorators: [{ type: Optional }] }\n    ]; };\n    return NavigationService;\n}());\n\n/**\n * @hidden\n */\nvar NavigationMetadata = /** @class */ (function () {\n    function NavigationMetadata(dataRows, headerRows, isVirtual, hasPager, hasDetailTemplate, gridElement, virtualColumns, columns) {\n        this.dataRows = dataRows;\n        this.headerRows = headerRows;\n        this.isVirtual = isVirtual;\n        this.hasPager = hasPager;\n        this.hasDetailTemplate = hasDetailTemplate;\n        this.gridElement = gridElement;\n        this.virtualColumns = virtualColumns;\n        this.columns = columns;\n    }\n    Object.defineProperty(NavigationMetadata.prototype, \"maxLogicalRowIndex\", {\n        get: function () {\n            var dataRows = this.hasDetailTemplate ? this.dataRows * 2 : this.dataRows;\n            return this.headerRows + dataRows - 1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NavigationMetadata;\n}());\n\n// Incremented each time the service is instantiated.\nvar sequence = 0;\n/**\n * @hidden\n */\nvar IdService = /** @class */ (function () {\n    function IdService() {\n        this.prefix = \"k-grid\" + sequence++;\n    }\n    IdService.prototype.cellId = function (rowIndex, colIndex) {\n        return this.prefix + \"-r\" + rowIndex + \"c\" + colIndex;\n    };\n    IdService.prototype.selectionCheckboxId = function (itemIndex) {\n        return this.prefix + \"-checkbox\" + itemIndex;\n    };\n    IdService.prototype.selectAllCheckboxId = function () {\n        return this.prefix + \"-select-all\";\n    };\n    IdService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    IdService.ctorParameters = function () { return []; };\n    return IdService;\n}());\n\n/**\n * @hidden\n */\nvar ColumnInfoService = /** @class */ (function () {\n    function ColumnInfoService() {\n        this.visibilityChange = new EventEmitter();\n        this.lockedChange = new EventEmitter();\n        this.columnRangeChange = new EventEmitter();\n        this.columnsContainer = new ColumnsContainer(function () { return []; });\n    }\n    Object.defineProperty(ColumnInfoService.prototype, \"lockedLeafColumns\", {\n        get: function () {\n            return this.columnsContainer.lockedLeafColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnInfoService.prototype, \"nonLockedLeafColumns\", {\n        get: function () {\n            return this.columnsContainer.nonLockedLeafColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnInfoService.prototype, \"isLocked\", {\n        get: function () {\n            return this.lockedLeafColumns.length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnInfoService.prototype, \"totalLevels\", {\n        get: function () {\n            return this.columnsContainer.totalLevels;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnInfoService.prototype, \"leafNamedColumns\", {\n        get: function () {\n            var columns = expandColumns(this.list().filterSort(function (column) { return !column.isColumnGroup; }))\n                .filter(function (column) { return column.matchesMedia && column.displayTitle; });\n            return orderBy(columns, [{ field: 'locked', dir: 'desc' }]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnInfoService.prototype, \"unlockedRootCount\", {\n        get: function () {\n            return this.list().rootColumns().filter(function (column) { return !column.locked && column.isVisible; }).length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColumnInfoService.prototype.init = function (columns, list) {\n        this.columnsContainer = columns;\n        this.list = list;\n    };\n    ColumnInfoService.prototype.changeVisibility = function (columns) {\n        this.visibilityChange.emit(columns);\n    };\n    ColumnInfoService.prototype.changeLocked = function (columns) {\n        this.lockedChange.emit(columns);\n    };\n    ColumnInfoService.decorators = [\n        { type: Injectable },\n    ];\n    return ColumnInfoService;\n}());\n\n/**\n * @hidden\n */\nvar SortService = /** @class */ (function () {\n    function SortService() {\n        this.changes = new Subject();\n    }\n    SortService.prototype.sort = function (value) {\n        this.changes.next(value);\n    };\n    return SortService;\n}());\n\n/**\n * Arguments for the `columnVisibilityChange` event.\n */\nvar ColumnVisibilityChangeEvent = /** @class */ (function () {\n    /**\n     * @hidden\n     */\n    function ColumnVisibilityChangeEvent(columns) {\n        this.columns = columns;\n    }\n    return ColumnVisibilityChangeEvent;\n}());\n\n/**\n * Arguments for the `columnLockedChange` event.\n */\nvar ColumnLockedChangeEvent = /** @class */ (function () {\n    /**\n     * @hidden\n     */\n    function ColumnLockedChangeEvent(columns) {\n        this.columns = columns;\n    }\n    return ColumnLockedChangeEvent;\n}());\n\n/**\n * @hidden\n */\nvar GROUP_CELL_WIDTH = 32; // this should be the value of group-cell inside the theme!\n\n/**\n * @hidden\n */\nfunction defaultTrackBy(index, item) {\n    if (item.type === 'data' && item.isEditing) {\n        return item.data;\n    }\n    return index;\n}\n\nvar createControl = function (source) { return function (acc, key) {\n    acc[key] = new FormControl(source[key]);\n    return acc;\n}; };\nvar validateColumnsField = function (columns) {\n    return expandColumns(columns.toArray())\n        .filter(isColumnComponent)\n        .filter(function (_a) {\n        var field = _a.field;\n        return !isValidFieldName(field);\n    })\n        .forEach(function (_a) {\n        var field = _a.field;\n        return console.warn(\"\\n                Grid column field name '\" + field + \"' does not look like a valid JavaScript identifier.\\n                Identifiers can contain only alphanumeric characters (including \\\"$\\\" or \\\"_\\\"), and may not start with a digit.\\n                Please use only valid identifier names to ensure error-free operation.\\n            \");\n    });\n};\nvar handleExpandCollapseService = function (service, expandEmitter, collapseEmitter, map$$1) { return (service.changes.pipe(filter(function (_a) {\n    var dataItem = _a.dataItem;\n    return isPresent(dataItem);\n}))\n    .subscribe(function (x) { return x.expand ? expandEmitter.emit(map$$1(x)) : collapseEmitter.emit(map$$1(x)); })); };\nvar isInEditedCell = function (element, gridElement) {\n    return closest(element, matchesClasses('k-grid-edit-cell')) &&\n        closest(element, matchesNodeName('kendo-grid')) === gridElement;\n};\nvar Éµ4$2 = EMPTY_CELL_CONTEXT;\n/**\n * Represents the Kendo UI Grid component for Angular.\n *\n * @example\n * ```ts-preview\n * _@Component({\n *    selector: 'my-app',\n *    template: `\n *        <kendo-grid [data]=\"gridData\">\n *        </kendo-grid>\n *    `\n * })\n * class AppComponent {\n *    public gridData: any[] = products;\n * }\n *\n * const products = [{\n *    \"ProductID\": 1,\n *    \"ProductName\": \"Chai\",\n *    \"UnitPrice\": 18.0000,\n *    \"Discontinued\": true\n *  }, {\n *    \"ProductID\": 2,\n *    \"ProductName\": \"Chang\",\n *    \"UnitPrice\": 19.0000,\n *    \"Discontinued\": false\n *  }\n * ];\n * ```\n */\nvar GridComponent = /** @class */ (function () {\n    function GridComponent(supportService, selectionService, wrapper, groupInfoService, groupsService, changeNotification, detailsService, editService, filterService, pdfService, responsiveService, renderer, excelService, ngZone, scrollSyncService, domEvents, columnResizingService, changeDetectorRef, columnReorderService, columnInfoService, navigationService, sortService, scrollRequestService, localization) {\n        var _this = this;\n        this.supportService = supportService;\n        this.selectionService = selectionService;\n        this.wrapper = wrapper;\n        this.groupInfoService = groupInfoService;\n        this.groupsService = groupsService;\n        this.changeNotification = changeNotification;\n        this.detailsService = detailsService;\n        this.editService = editService;\n        this.filterService = filterService;\n        this.pdfService = pdfService;\n        this.responsiveService = responsiveService;\n        this.renderer = renderer;\n        this.excelService = excelService;\n        this.ngZone = ngZone;\n        this.scrollSyncService = scrollSyncService;\n        this.domEvents = domEvents;\n        this.columnResizingService = columnResizingService;\n        this.changeDetectorRef = changeDetectorRef;\n        this.columnReorderService = columnReorderService;\n        this.columnInfoService = columnInfoService;\n        this.navigationService = navigationService;\n        this.sortService = sortService;\n        this.scrollRequestService = scrollRequestService;\n        /**\n         * Sets the data of the Grid. If an array is provided, the Grid automatically gets the total count\n         * ([more information and example]({% slug databinding_grid %})).\n         */\n        this.data = [];\n        /**\n         * Defines the scroll mode used by the Grid.\n         *\n         * The available options are:\n         *  - `none`&mdash;Renders no scrollbar.\n         *  - `scrollable`&mdash;The default scroll mode. It requires the setting of the `height` option.\n         *  - `virtual`&mdash;Displays no pager and renders a portion of the data (optimized rendering) while the user is scrolling the content.\n         */\n        this.scrollable = 'scrollable';\n        /**\n         * Enables the single-row [selection]({% slug selection_grid %}) of the Grid.\n         */\n        this.selectable = false;\n        /**\n         * A function that defines how to track changes for the data rows.\n         *\n         * By default, the Grid tracks changes by the index of the data item.\n         * Edited rows are tracked by reference.\n         * In some cases, you might need to override the default behavior,\n         * for example, when you implement editing with immutable data items.\n         *\n         * The following example demonstrates how to track items only by index.\n         *\n         * @example\n         * ```ts\n         * import { Component } from '@angular/core';\n         * import { GridItem } from '@progress/kendo-angular-grid';\n         *\n         * _@Component({\n         *    selector: 'my-app',\n         *    template: `\n         *        <kendo-grid [data]=\"gridData\" [trackBy]=\"trackBy\">\n         *        </kendo-grid>\n         *    `\n         * })\n         * class AppComponent {\n         *    public gridData: any[] = products;\n         *\n         *    public trackBy(index: number, item: GridItem): any {\n         *        console.log(item);\n         *        return index;\n         *    }\n         * }\n         *\n         * const products = [{\n         *    \"ProductID\": 1,\n         *    \"ProductName\": \"Chai\",\n         *    \"UnitPrice\": 18.0000,\n         *    \"Discontinued\": true\n         *  }, {\n         *    \"ProductID\": 2,\n         *    \"ProductName\": \"Chang\",\n         *    \"UnitPrice\": 19.0000,\n         *    \"Discontinued\": false\n         *  }\n         * ];\n         * ```\n         */\n        this.trackBy = defaultTrackBy;\n        /**\n         * If set to `true`, the grid will render only the columns in the current viewport.\n         */\n        this.virtualColumns = false;\n        /**\n         * Enables the [filtering]({% slug filtering_grid %}) of the Grid columns that have their `field` option set.\n         */\n        this.filterable = false;\n        /**\n         * Enables the [sorting]({% slug sorting_grid %}) of the Grid columns that have their `field` option set.\n         */\n        this.sortable = false;\n        /**\n         * Configures the pager of the Grid ([see example]({% slug paging_grid %})).\n         *\n         * The available options are:\n         * - `buttonCount: Number`&mdash;Sets the maximum numeric buttons count before the buttons are collapsed.\n         * - `info: Boolean`&mdash;Toggles the information about the current page and the total number of records.\n         * - `type: PagerType`&mdash;Accepts the `numeric` (buttons with numbers) and `input` (input for typing the page number) values.\n         * - `pageSizes: Boolean` or `Array<number>`&mdash;Shows a menu for selecting the page size.\n         * - `previousNext: Boolean`&mdash;Toggles the **Previous** and **Next** buttons.\n         */\n        this.pageable = false;\n        /**\n         * If set to `true`, the user can group the Grid by dragging the column header cells.\n         * By default, grouping is disabled ([see example]({% slug groupingbasics_grid %})).\n         */\n        this.groupable = false;\n        /**\n         * If set to `true`, the user can use dedicated shortcuts to interact with the Grid.\n         * By default, navigation is disabled and the Grid content is accessible in the normal tab sequence.\n         */\n        this.navigable = false;\n        /**\n         * Indicates whether the Grid columns will be resized during initialization so that\n         * they fit their headers and row content. Defaults to `false`.\n         * Columns with `autoSize` set to `false` are excluded.\n         * To dynamically update the column width to match the new content,\n         * refer to [this example]({% slug resizing_columns_grid %}).\n         */\n        this.autoSize = false;\n        /**\n         * If set to `true`, the user can resize columns by dragging the edges (resize handles) of their header cells\n         * ([see example]({% slug resizing_columns_grid %})).\n         *\n         * @default false\n         */\n        this.resizable = false;\n        /**\n         * If set to `true`, the user can reorder columns by dragging their header cells\n         * ([see example]({% slug reordering_columns_grid %})).\n         *\n         * @default false\n         */\n        this.reorderable = false;\n        /**\n         * Specifies if the loading indicator of the Grid will be displayed ([see example]({% slug databinding_grid %})).\n         *\n         * @default false\n         */\n        this.loading = false;\n        /**\n         * Specifies if the column menu of the columns will be displayed ([see example]({% slug columnmenu_grid %})).\n         *\n         * @default false\n         */\n        this.columnMenu = false;\n        /**\n         * Specifies if the header of the grid will be hidden. The header is visible by default.\n         *\n         * > The header includes column headers and the [filter row]({% slug filtering_grid %}#toc-filter-row).\n         */\n        this.hideHeader = false;\n        /**\n         * Fires when the Grid filter is modified through the UI.\n         * You have to handle the event yourself and filter the data.\n         */\n        this.filterChange = new EventEmitter();\n        /**\n         * Fires when the page of the Grid is changed ([see example]({% slug paging_grid %})).\n         * You have to handle the event yourself and page the data.\n         */\n        this.pageChange = new EventEmitter();\n        /**\n         * Fires when the grouping of the Grid is changed.\n         * You have to handle the event yourself and group the data ([see example]({% slug groupingbasics_grid %})).\n         */\n        this.groupChange = new ZoneAwareEventEmitter(this.ngZone);\n        /**\n         * Fires when the sorting of the Grid is changed ([see example]({% slug sorting_grid %})).\n         * You have to handle the event yourself and sort the data.\n         */\n        this.sortChange = new EventEmitter();\n        /**\n         * Fires when the user selects a Grid row.\n         * Emits the [`SelectionEvent`]({% slug api_grid_selectionevent %}#toc-selectionchange).\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Fires when the data state of the Grid is changed.\n         */\n        this.dataStateChange = new EventEmitter();\n        /**\n         * Fires when the user expands a group header.\n         */\n        this.groupExpand = new EventEmitter();\n        /**\n         * Fires when the user collapses a group header.\n         */\n        this.groupCollapse = new EventEmitter();\n        /**\n         * Fires when the user expands a master row.\n         */\n        this.detailExpand = new EventEmitter();\n        /**\n         * Fires when the user collapses a master row.\n         */\n        this.detailCollapse = new EventEmitter();\n        /**\n         * Fires when the user clicks the **Edit** command button to edit a row\n         * ([see example]({% slug editing_template_forms_grid %}#toc-editing-records)).\n         */\n        this.edit = new EventEmitter();\n        /**\n         * Fires when the user clicks the **Cancel** command button to close a row\n         * ([see example]({% slug editing_template_forms_grid %}#toc-cancelling-editing)).\n         */\n        this.cancel = new EventEmitter();\n        /**\n         * Fires when the user clicks the **Save** command button to save changes in a row\n         * ([see example]({% slug editing_template_forms_grid %}#toc-saving-records)).\n         */\n        this.save = new EventEmitter();\n        /**\n         * Fires when the user clicks the **Remove** command button to remove a row\n         * ([see example]({% slug editing_template_forms_grid %}#toc-removing-records)).\n         */\n        this.remove = new EventEmitter();\n        /**\n         * Fires when the user clicks the **Add** command button to add a new row\n         * ([see example]({% slug editing_template_forms_grid %}#toc-adding-records)).\n         */\n        this.add = new EventEmitter();\n        /**\n         * Fires when the user leaves an edited cell ([see example]({% slug editing_incell_grid %}#toc-basic-concepts)).\n         */\n        this.cellClose = new EventEmitter();\n        /**\n         * Fires when the user clicks a cell ([see example]({% slug editing_incell_grid %}#toc-basic-concepts)).\n         */\n        this.cellClick = new ZoneAwareEventEmitter(this.ngZone);\n        /**\n         * Fires when the user clicks the **Export to PDF** command button.\n         */\n        this.pdfExport = new EventEmitter();\n        /**\n         * Fires when the user clicks the **Export to Excel** command button.\n         */\n        this.excelExport = new EventEmitter();\n        /**\n         * Fires when the user completes the resizing of the column.\n         */\n        this.columnResize = new ZoneAwareEventEmitter(this.ngZone);\n        /**\n         * Fires when the user completes the reordering of the column.\n         */\n        this.columnReorder = new EventEmitter();\n        /**\n         * Fires when the user changes the visibility of the columns from the column menu or column chooser.\n         */\n        this.columnVisibilityChange = new EventEmitter();\n        /**\n         * Fires when the user changes the locked state of the columns from the column menu or by reordering the columns.\n         */\n        this.columnLockedChange = new EventEmitter();\n        /**\n         * Fires when the user scrolls to the last record on the page and enables endless scrolling\n         * ([see example]({% slug scrollmmodes_grid %}#toc-endless-scrolling)).\n         * You have to handle the event yourself and page the data.\n         */\n        this.scrollBottom = new EventEmitter();\n        /**\n         * Fires when the grid content is scrolled.\n         * For performance reasons, the event is triggered outside the Angular zone. Enter the Angular zone if you make any changes that require change detection.\n         */\n        this.contentScroll = new EventEmitter();\n        /**\n         * A query list of all declared columns.\n         */\n        this.columns = new QueryList();\n        this.footer = new QueryList();\n        this.selectionDirective = false;\n        this.columnsContainer = new ColumnsContainer(function () { return _this.columnList.filterHierarchy(function (column) {\n            column.matchesMedia = _this.matchesMedia(column);\n            return column.isVisible;\n        }); });\n        this.view = new DataCollection(function () { return new DataResultIterator(_this.data, _this.skip, _this.hasGroupFooters); });\n        this.shouldGenerateColumns = true;\n        this._sort = new Array();\n        this._group = new Array();\n        this._skip = 0;\n        this.cachedWindowWidth = 0;\n        this._rowSelected = null;\n        this.rtl = false;\n        this._rowClass = function () { return null; };\n        this.localizationSubscription = localization.changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.rtl = rtl;\n            _this.direction = _this.rtl ? 'rtl' : 'ltr';\n        });\n        this.groupInfoService.registerColumnsContainer(function () { return _this.columnList; });\n        this.columnInfoService.init(this.columnsContainer, function () { return _this.columnList; });\n        this.columnVisibilityChangeSubscription = this.columnInfoService.visibilityChange.subscribe(function (changed) {\n            _this.columnVisibilityChange.emit(new ColumnVisibilityChangeEvent(changed));\n        });\n        this.columnLockedChangeSubscription = this.columnInfoService.lockedChange.subscribe(function (changed) {\n            _this.columnLockedChange.emit(new ColumnLockedChangeEvent(changed));\n        });\n        if (selectionService) {\n            this.selectionSubscription = selectionService.changes.subscribe(function (event) {\n                _this.ngZone.run(function () { return _this.selectionChange.emit(event); });\n            });\n        }\n        this.groupExpandCollapseSubscription = handleExpandCollapseService(groupsService, this.groupExpand, this.groupCollapse, function (_a) {\n            var group = _a.dataItem, index = _a.index;\n            return ({ group: group, groupIndex: index });\n        });\n        this.detailsServiceSubscription = handleExpandCollapseService(detailsService, this.detailExpand, this.detailCollapse, function (args) { return args; });\n        this.filterSubscription = this.filterService.changes.subscribe(function (x) {\n            _this.filterChange.emit(x);\n        });\n        this.sortSubscription = this.sortService.changes.subscribe(function (x) {\n            _this.sortChange.emit(x);\n        });\n        this.attachStateChangesEmitter();\n        this.attachEditHandlers();\n        this.attachDomEventHandlers();\n        this.pdfSubscription = this.pdfService.exportClick.subscribe(this.emitPDFExportEvent.bind(this));\n        this.excelSubscription = this.excelService.exportClick.subscribe(this.saveAsExcel.bind(this));\n        this.columnsContainerChange();\n        this.handleColumnResize();\n        this.columnList = new ColumnList(this.columns);\n        this.columnReorderSubscription = this.columnReorderService\n            .changes.subscribe(this.reorder.bind(this));\n        this.columnRangeChangeSubscription = this.columnInfoService.columnRangeChange.subscribe(this.onColumnRangeChange.bind(this));\n    }\n    Object.defineProperty(GridComponent.prototype, \"skip\", {\n        /**\n         * Defines the number of records to be skipped by the pager.\n         * Required by the [paging]({% slug paging_grid %}) functionality.\n         */\n        get: function () {\n            return this._skip;\n        },\n        set: function (value) {\n            if (value >= 0) {\n                this._skip = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"sort\", {\n        get: function () {\n            return this._sort;\n        },\n        /**\n         * The descriptors by which the data will be sorted ([see example]({% slug sorting_grid %})).\n         */\n        set: function (value) {\n            if (isArray(value)) {\n                this._sort = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"group\", {\n        /**\n         */\n        get: function () {\n            return this._group;\n        },\n        /**\n         * The descriptors by which the data will be grouped ([see example]({% slug groupingbasics_grid %})).\n         */\n        set: function (value) {\n            if (isArray(value)) {\n                this._group = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"showTopToolbar\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.toolbarTemplate && ['top', 'both'].indexOf(this.toolbarTemplate.position) > -1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"showBottomToolbar\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.toolbarTemplate && ['bottom', 'both'].indexOf(this.toolbarTemplate.position) > -1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"isLocked\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.lockedLeafColumns.length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"showPager\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return !this.isVirtual && this.pageable !== false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"showGroupPanel\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.groupable && this.groupable.enabled !== false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"groupableEmptyText\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.groupable.emptyText;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"navigatable\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.navigable;\n        },\n        /**\n         * @hidden\n         *\n         * An alias for `navigable` for users who migrate from Kendo UI for jQuery.\n         */\n        set: function (value) {\n            this.navigable = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"rowClass\", {\n        get: function () {\n            return this._rowClass;\n        },\n        /**\n         * Defines a function that is executed for every data row in the component.\n         *\n         * @example\n         * ```ts\n         * import { Component, ViewEncapsulation } from '@angular/core';\n         * import { RowClassArgs } from '@progress/kendo-angular-grid';\n         *\n         * _@Component({\n         *    selector: 'my-app',\n         *    encapsulation: ViewEncapsulation.None,\n         *    styles: [`\n         *        .k-grid tr.even { background-color: #f45c42; }\n         *        .k-grid tr.odd { background-color: #41f4df; }\n         *    `],\n         *    template: `\n         *        <kendo-grid [data]=\"gridData\" [rowClass]=\"rowCallback\">\n         *        </kendo-grid>\n         *    `\n         * })\n         * class AppComponent {\n         *    public gridData: any[] = products;\n         *\n         *    public rowCallback(context: RowClassArgs) {\n         *        const isEven = context.index % 2 == 0;\n         *        return {\n         *            even: isEven,\n         *            odd: !isEven\n         *        };\n         *    }\n         * }\n         *\n         * const products = [{\n         *    \"ProductID\": 1,\n         *    \"ProductName\": \"Chai\",\n         *    \"UnitPrice\": 18.0000,\n         *    \"Discontinued\": true\n         *  }, {\n         *    \"ProductID\": 2,\n         *    \"ProductName\": \"Chang\",\n         *    \"UnitPrice\": 19.0000,\n         *    \"Discontinued\": false\n         *  }\n         * ];\n         * ```\n         */\n        set: function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"rowClass must be a function, but received \" + JSON.stringify(fn) + \".\");\n            }\n            this._rowClass = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"rowSelected\", {\n        get: function () {\n            return this._rowSelected;\n        },\n        /**\n         * Defines a Boolean function that is executed for each data row in the component\n         * ([see example]({% slug selection_grid %}#toc-setting-the-selected-rows)).\n         * Determines whether the row will be selected.\n         */\n        set: function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"rowSelected must be a function, but received \" + JSON.stringify(fn) + \".\");\n            }\n            this._rowSelected = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"activeCell\", {\n        /**\n         * Returns the currently focused cell (if any).\n         */\n        get: function () {\n            return this.navigationService.activeCell;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"activeRow\", {\n        /**\n         * Returns the currently focused row (if any).\n         */\n        get: function () {\n            return this.navigationService.activeRow;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"hostClasses\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"lockedClasses\", {\n        get: function () {\n            return this.lockedLeafColumns.length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"virtualClasses\", {\n        get: function () {\n            return this.isVirtual;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"noScrollbarClass\", {\n        get: function () {\n            return this.scrollbarWidth === 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"detailTemplate\", {\n        get: function () {\n            if (this._customDetailTemplate) {\n                return this._customDetailTemplate;\n            }\n            return this.detailTemplateChildren ? this.detailTemplateChildren.first : undefined;\n        },\n        set: function (detailTemplate) {\n            this._customDetailTemplate = detailTemplate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"noRecordsTemplate\", {\n        get: function () {\n            if (this._customNoRecordsTemplate) {\n                return this._customNoRecordsTemplate;\n            }\n            return this.noRecordsTemplateChildren ? this.noRecordsTemplateChildren.first : undefined;\n        },\n        set: function (customNoRecordsTemplate) {\n            this._customNoRecordsTemplate = customNoRecordsTemplate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"pagerTemplate\", {\n        get: function () {\n            if (this._customPagerTemplate) {\n                return this._customPagerTemplate;\n            }\n            return this.pagerTemplateChildren ? this.pagerTemplateChildren.first : undefined;\n        },\n        set: function (customPagerTemplate) {\n            this._customPagerTemplate = customPagerTemplate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"toolbarTemplate\", {\n        get: function () {\n            if (this._customToolbarTemplate) {\n                return this._customToolbarTemplate;\n            }\n            return this.toolbarTemplateChildren ? this.toolbarTemplateChildren.first : undefined;\n        },\n        set: function (customToolbarTemplate) {\n            this._customToolbarTemplate = customToolbarTemplate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"scrollbarWidth\", {\n        get: function () {\n            return this.supportService.scrollbarWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"headerPadding\", {\n        get: function () {\n            if (isUniversal()) {\n                return \"\";\n            }\n            var padding = Math.max(0, this.scrollbarWidth - 1) + 'px';\n            var right = this.rtl ? 0 : padding;\n            var left = this.rtl ? padding : 0;\n            return \"0 \" + right + \" 0 \" + left;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"hasGroupFooters\", {\n        get: function () {\n            return this.columnsContainer.hasGroupFooter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"showFooter\", {\n        get: function () {\n            return this.columnsContainer.hasFooter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"showGroupFooters\", {\n        get: function () {\n            return this.groupable && this.groupable.showFooter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"ariaRowCount\", {\n        get: function () {\n            return this.totalColumnLevels + 1 + this.view.total;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"ariaColCount\", {\n        get: function () {\n            return this.columnsContainer.leafColumnsToRender.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"isVirtual\", {\n        get: function () {\n            return this.scrollable === 'virtual';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"isScrollable\", {\n        get: function () {\n            return this.scrollable !== 'none';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"visibleColumns\", {\n        get: function () {\n            return this.columnsContainer.allColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"lockedColumns\", {\n        get: function () {\n            return this.columnsContainer.lockedColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"nonLockedColumns\", {\n        get: function () {\n            return this.columnsContainer.nonLockedColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"lockedLeafColumns\", {\n        get: function () {\n            return this.columnsContainer.lockedLeafColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"nonLockedLeafColumns\", {\n        get: function () {\n            return this.columnsContainer.nonLockedLeafColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"leafColumns\", {\n        get: function () {\n            return this.columnsContainer.leafColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"totalColumnLevels\", {\n        get: function () {\n            return this.columnsContainer.totalLevels;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"headerColumns\", {\n        get: function () {\n            if (this.virtualColumns && !this.pdfService.exporting) {\n                return this.viewportColumns;\n            }\n            return this.nonLockedColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"headerLeafColumns\", {\n        get: function () {\n            if (this.virtualColumns && !this.pdfService.exporting) {\n                return this.leafViewportColumns;\n            }\n            return this.nonLockedLeafColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"lockedWidth\", {\n        get: function () {\n            var groupCellsWidth = this.group.length * GROUP_CELL_WIDTH;\n            return expandColumns(this.lockedLeafColumns.toArray()).reduce(function (prev, curr) { return prev + (curr.width || 0); }, groupCellsWidth);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"nonLockedWidth\", {\n        get: function () {\n            if ((!this.rtl && this.lockedLeafColumns.length) || this.virtualColumns) {\n                return !this.virtualColumns ? this.columnsContainer.unlockedWidth :\n                    this.leafViewportColumns.reduce(function (acc, column) { return acc + (column.width || 0); }, 0);\n            }\n            return undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"selectableSettings\", {\n        get: function () {\n            if (this.selectionService) {\n                return this.selectionService.options;\n            }\n            return undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"columnMenuTemplate\", {\n        get: function () {\n            var template = this.columnMenuTemplates.first;\n            return template ? template.templateRef : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"totalCount\", {\n        get: function () {\n            if (this.isVirtual || !isPresent(this.pageSize)) {\n                return this.view.total;\n            }\n            return this.pageSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Expands the specified master row ([see example]({% slug hierarchy_grid %})).\n     *\n     * @param {number} index - The absolute index of the master row.\n     */\n    GridComponent.prototype.expandRow = function (index) {\n        if (!this.detailsService.isExpanded(index)) {\n            this.detailsService.toggleRow(index, null);\n        }\n    };\n    /**\n     * Collapses the specified master row.\n     *\n     * @param {number} index - The absolute index of the master row.\n     */\n    GridComponent.prototype.collapseRow = function (index) {\n        if (this.detailsService.isExpanded(index)) {\n            this.detailsService.toggleRow(index, null);\n        }\n    };\n    /**\n     * Expands a group header item for the given index. For example,\n     * `0_1` expands the second inner group of the first master group.\n     *\n     * > * When you use the [`kendoGridGroupBinding`]({% slug api_grid_groupbindingdirective %}) directive,\n     * > the `expandGroup` method is not supported.\n     * > * When a Grid is pageable, the indexes of the groups are offset by the current Grid [`skip`]({% slug api_grid_gridcomponent %}#toc-skip).\n     *\n     * @param {string} index - The underscore separated hierarchical index of the group.\n     */\n    GridComponent.prototype.expandGroup = function (index) {\n        if (!this.groupsService.isExpanded(index)) {\n            this.groupsService.toggleRow(index, null);\n        }\n    };\n    /**\n     * Collapses a group header item for the given index. For example,\n     * `0_1` collapses the second inner group of the first master group.\n     *\n     * > * When you use the [`kendoGridGroupBinding`]({% slug api_grid_groupbindingdirective %}) directive,\n     * > the `expandGroup` method is not supported.\n     * > * When a Grid is pageable, the indexes of the groups are offset by the current Grid [`skip`]({% slug api_grid_gridcomponent %}#toc-skip).\n     *\n     * @param {string} index - The underscore separated hierarchical index of the group.\n     */\n    GridComponent.prototype.collapseGroup = function (index) {\n        if (this.groupsService.isExpanded(index)) {\n            this.groupsService.toggleRow(index, null);\n        }\n    };\n    /**\n     * @hidden\n     */\n    GridComponent.prototype.resetGroupsState = function () {\n        this.groupsService.reset();\n    };\n    /**\n     * @hidden\n     */\n    GridComponent.prototype.expandGroupChildren = function (groupIndex) {\n        this.groupsService.expandChildren(groupIndex);\n    };\n    /**\n     * @hidden\n     */\n    GridComponent.prototype.onDataChange = function () {\n        this.autoGenerateColumns();\n        this.changeNotification.notify();\n        this.pdfService.dataChanged.emit();\n        if (isPresent(this.defaultSelection)) {\n            this.defaultSelection.reset();\n        }\n        this.initSelectionService();\n        this.updateNavigationMetadata();\n    };\n    GridComponent.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        if (isChanged(\"data\", changes)) {\n            this.onDataChange();\n        }\n        if (this.lockedLeafColumns.length && anyChanged([\"pageSize\", \"skip\", \"sort\", \"group\"], changes)) {\n            this.changeNotification.notify();\n        }\n        if (anyChanged([\"pageSize\", \"scrollable\", 'virtualColumns'], changes)) {\n            this.updateNavigationMetadata();\n        }\n        if (isChanged(\"virtualColumns\", changes)) {\n            this.viewportColumns = this.leafViewportColumns = null;\n        }\n        if (isChanged(\"height\", changes, false)) {\n            this.renderer.setStyle(this.wrapper.nativeElement, 'height', this.height + \"px\");\n        }\n        if (isChanged(\"filterable\", changes) && this.lockedColumns.length) {\n            this.syncHeaderHeight(this.ngZone.onStable.asObservable().pipe(take(1)));\n        }\n        if (anyChanged([\"columnMenu\", \"sortable\", \"filterable\"], changes, false)) {\n            this.columnMenuOptions = this.columnMenu && Object.assign({\n                filter: Boolean(this.filterable),\n                sort: Boolean(this.sortable)\n            }, this.columnMenu); // tslint:disable-line:align\n        }\n        if (isChanged(\"scrollable\", changes) && this.isScrollable) {\n            this.ngZone.onStable.pipe(take(1)).subscribe(function () { return _this.attachScrollSync(); });\n        }\n    };\n    GridComponent.prototype.ngAfterViewInit = function () {\n        this.attachScrollSync();\n        this.attachElementEventHandlers();\n        this.updateNavigationMetadata();\n        this.applyAutoSize();\n    };\n    GridComponent.prototype.ngAfterContentChecked = function () {\n        this.columnsContainer.refresh();\n        this.verifySettings();\n        this.initSelectionService();\n    };\n    GridComponent.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.shouldGenerateColumns = !this.columns.length;\n        this.autoGenerateColumns();\n        this.columnList = new ColumnList(this.columns);\n        this.columnsChangeSubscription = this.columns.changes.subscribe(function () { return _this.verifySettings(); });\n    };\n    GridComponent.prototype.ngOnInit = function () {\n        if (this.navigable) {\n            this.navigationService.init(this.navigationMetadata());\n        }\n    };\n    GridComponent.prototype.ngOnDestroy = function () {\n        if (this.selectionSubscription) {\n            this.selectionSubscription.unsubscribe();\n        }\n        if (this.stateChangeSubscription) {\n            this.stateChangeSubscription.unsubscribe();\n        }\n        if (this.groupExpandCollapseSubscription) {\n            this.groupExpandCollapseSubscription.unsubscribe();\n        }\n        if (this.detailsServiceSubscription) {\n            this.detailsServiceSubscription.unsubscribe();\n        }\n        if (this.editServiceSubscription) {\n            this.editServiceSubscription.unsubscribe();\n        }\n        if (this.pdfSubscription) {\n            this.pdfSubscription.unsubscribe();\n        }\n        if (this.filterSubscription) {\n            this.filterSubscription.unsubscribe();\n        }\n        if (this.sortSubscription) {\n            this.sortSubscription.unsubscribe();\n        }\n        if (this.columnsChangeSubscription) {\n            this.columnsChangeSubscription.unsubscribe();\n        }\n        if (this.excelSubscription) {\n            this.excelSubscription.unsubscribe();\n        }\n        if (this.columnsContainerChangeSubscription) {\n            this.columnsContainerChangeSubscription.unsubscribe();\n        }\n        if (this.scrollSyncService) {\n            this.scrollSyncService.destroy();\n        }\n        if (this.detachElementEventHandlers) {\n            this.detachElementEventHandlers();\n        }\n        if (this.defaultSelection) {\n            this.defaultSelection.destroy();\n        }\n        if (this.cellClickSubscription) {\n            this.cellClickSubscription.unsubscribe();\n        }\n        if (this.footerChangeSubscription) {\n            this.footerChangeSubscription.unsubscribe();\n        }\n        this.ngZone = null;\n        if (this.columnResizingSubscription) {\n            this.columnResizingSubscription.unsubscribe();\n        }\n        if (this.columnReorderSubscription) {\n            this.columnReorderSubscription.unsubscribe();\n        }\n        if (this.localizationSubscription) {\n            this.localizationSubscription.unsubscribe();\n        }\n        if (this.columnVisibilityChangeSubscription) {\n            this.columnVisibilityChangeSubscription.unsubscribe();\n        }\n        if (this.columnLockedChangeSubscription) {\n            this.columnLockedChangeSubscription.unsubscribe();\n        }\n        if (this.focusElementSubscription) {\n            this.focusElementSubscription.unsubscribe();\n        }\n        this.columnRangeChangeSubscription.unsubscribe();\n    };\n    /**\n     * @hidden\n     */\n    GridComponent.prototype.attachScrollSync = function () {\n        var _this = this;\n        if (isUniversal()) {\n            return;\n        }\n        if (this.header) {\n            this.scrollSyncService.registerEmitter(this.header.nativeElement, \"header\");\n        }\n        if (this.footer) {\n            this.footerChangeSubscription = observe(this.footer)\n                .subscribe(function (footers) {\n                return footers\n                    .map(function (footer) { return footer.nativeElement; })\n                    .filter(isPresent)\n                    .forEach(function (element) {\n                    return _this.scrollSyncService.registerEmitter(element, \"footer\");\n                });\n            });\n        }\n    };\n    /**\n     * Switches the specified table row in the edit mode ([see example]({% slug editing_template_forms_grid %}#toc-editing-records)).\n     *\n     * @param index - The row index that will be switched in the edit mode.\n     * @param group - The [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }})\n     * that describes the edit form.\n     * @param options - Additional options. Use skipFocus to determine if the row's edit element should be focused. Defaults to `false`.\n     */\n    GridComponent.prototype.editRow = function (index, group, options) {\n        this.editService.editRow(index, group);\n        if (options && options.skipFocus) {\n            return;\n        }\n        this.focusEditElement(\"tr[data-kendo-grid-item-index=\\\"\" + index + \"\\\"]\");\n    };\n    /**\n     * Closes the editor for a given row ([see example]({% slug editing_template_forms_grid %}#toc-cancelling-editing)).\n     *\n     * @param {number} index - The row index that will be switched out of the edit mode. If no index is provided, it is assumed\n     * that the new item editor will be closed.\n     */\n    GridComponent.prototype.closeRow = function (index) {\n        this.editService.close(index);\n    };\n    /**\n     * Creates a new row editor ([see example]({% slug editing_template_forms_grid %}#toc-adding-records)).\n     *\n     * @param {FormGroup} group - The [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }}) that describes\n     * the edit form. If called with a data item, it will build the `FormGroup` from the data item fields.\n     */\n    GridComponent.prototype.addRow = function (group) {\n        var isFormGroup = group instanceof FormGroup;\n        if (!isFormGroup) {\n            var fields = Object.keys(group).reduce(createControl(group), {}); // FormBuilder?\n            group = new FormGroup(fields);\n        }\n        this.editService.addRow(group);\n        this.focusEditElement('.k-grid-add-row');\n    };\n    /**\n     * Puts the cell that is specified by the table row and column in edit mode.\n     *\n     * @param {number} rowIndex - The data row index that will be switched in the edit mode.\n     * @param {number|string|any} column - The leaf column index, or the field name or the column instance that should be edited.\n     * @param {FormGroup} group - The [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }})\n     * that describes the edit form.\n     */\n    GridComponent.prototype.editCell = function (rowIndex, column, group) {\n        var instance = this.columnInstance(column);\n        this.editService.editCell(rowIndex, instance, group);\n        this.focusEditElement('.k-grid-edit-cell');\n    };\n    /**\n     * Closes the current cell in edit mode and fires\n     * the [`cellClose`]({% slug api_grid_gridcomponent %}#toc-cellclose) event.\n     *\n     * @return {boolean} Indicates whether the edited cell was closed.\n     * A `false` value indicates that the\n     * [`cellClose`]({% slug api_grid_gridcomponent %}#toc-cellclose) event was prevented.\n     */\n    GridComponent.prototype.closeCell = function () {\n        return !this.editService.closeCell();\n    };\n    /**\n     * Closes the current cell in edit mode.\n     */\n    GridComponent.prototype.cancelCell = function () {\n        this.editService.cancelCell();\n    };\n    /**\n     * Returns a flag which indicates if a row or a cell is currently edited.\n     *\n     * @return {boolean} A flag which indicates if a row or a cell is currently edited.\n     */\n    GridComponent.prototype.isEditing = function () {\n        return this.editService.isEditing();\n    };\n    /**\n     * Returns a flag which indicates if a cell is currently edited.\n     *\n     * @return {boolean} A flag which indicates if a cell is currently being edited.\n     */\n    GridComponent.prototype.isEditingCell = function () {\n        return this.editService.isEditingCell();\n    };\n    /**\n     * Initiates the PDF export ([see example]({% slug pdfexport_grid %})).\n     */\n    GridComponent.prototype.saveAsPDF = function () {\n        this.pdfService.save(this);\n    };\n    /**\n     * Exports the Grid element to a Drawing [`Group`]({% slug api_kendo-drawing_group %}) by using the `kendo-grid-pdf` component options.\n     * ([see example]({% slug pdfexport_grid %}#toc-exporting-multiple-grids-to-the-same-pdf)).\n     *\n     * @return {Promise} - A promise that will be resolved with the Drawing `Group`.\n     */\n    GridComponent.prototype.drawPDF = function () {\n        var promise = createPromise();\n        this.pdfService.draw(this, promise);\n        return promise;\n    };\n    /**\n     * Initiates the Excel export ([see example]({% slug excelexport_grid %})).\n     */\n    GridComponent.prototype.saveAsExcel = function () {\n        this.excelService.save(this);\n    };\n    /**\n     * Applies the minimum possible width for the specified column,\n     * so that the whole text fits without wrapping. This method expects the Grid\n     * to be resizable (set `resizable` to `true`).\n     * Makes sense to execute this method only\n     * after the Grid is already populated with data.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     *    selector: 'my-app',\n     *    template: `\n     *        <kendo-grid\n     *            #grid\n     *            [data]=\"gridData\"\n     *            [resizable]=\"true\"\n     *            style=\"height: 300px\">\n     *            <ng-template kendoGridToolbarTemplate>\n     *                 <button class=\"k-button\" (click)=\"grid.autoFitColumn(groupColumn)\">\n     *                     Auto-fit the group column\n     *                 </button>\n     *            </ng-template>\n     *            <kendo-grid-column-group #groupColumn title=\"Product Info\">\n     *                <kendo-grid-column\n     *                    field=\"ProductID\"\n     *                    [width]=\"50\"\n     *                    [minResizableWidth]=\"30\"\n     *                    title=\"ID\">\n     *                </kendo-grid-column>\n     *\n     *                <kendo-grid-column\n     *                    field=\"ProductName\"\n     *                    title=\"Product Name\">\n     *                </kendo-grid-column>\n     *            </kendo-grid-column-group>\n     *\n     *            <kendo-grid-column\n     *                field=\"UnitPrice\"\n     *                title=\"Unit Price\"\n     *                [width]=\"180\"\n     *                filter=\"numeric\"\n     *                format=\"{0:c}\">\n     *            </kendo-grid-column>\n     *        </kendo-grid>\n     *    `\n     * })\n     * class AppComponent {\n     *    public gridData: any[] = products;\n     * }\n     *\n     * const products = [{\n     *    \"ProductID\": 1,\n     *    \"ProductName\": \"Chai\",\n     *    \"UnitPrice\": 18.0000,\n     *    \"Discontinued\": true\n     *  }, {\n     *    \"ProductID\": 2,\n     *    \"ProductName\": \"Chang\",\n     *    \"UnitPrice\": 19.0000,\n     *    \"Discontinued\": false\n     *  }\n     * ];\n     * ```\n     */\n    GridComponent.prototype.autoFitColumn = function (column) {\n        this.columnResizingService.autoFit(column);\n    };\n    /**\n     * Adjusts the width of the specified columns to fit the entire content, including headers, without wrapping.\n     * If no columns are specified, `autoFitColumns` is applied to all columns.\n     *\n     * This method requires the Grid to be resizable (set `resizable` to `true`).\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     *    selector: 'my-app',\n     *    template: `\n     *      <kendo-grid\n     *          #grid\n     *          [data]=\"gridData\"\n     *          [resizable]=\"true\"\n     *          style=\"height: 300px\">\n     *          <ng-template kendoGridToolbarTemplate>\n     *              <button class=\"k-button\" (click)=\"grid.autoFitColumns([firstColumn, lastColumn])\">\n     *                  Auto-fit the first and last column\n     *              </button>\n     *              <button class=\"k-button\" (click)=\"grid.autoFitColumns()\">\n     *                  Auto-fit all columns\n     *              </button>\n     *          </ng-template>\n     *          <kendo-grid-column-group title=\"Product Info\">\n     *              <kendo-grid-column\n     *                  #firstColumn\n     *                  field=\"ProductID\"\n     *                  [width]=\"50\"\n     *                  [minResizableWidth]=\"30\"\n     *                  title=\"ID\">\n     *              </kendo-grid-column>\n     *\n     *              <kendo-grid-column\n     *                  field=\"ProductName\"\n     *                  title=\"Product Name\"\n     *                  >\n     *              </kendo-grid-column>\n     *          </kendo-grid-column-group>\n     *\n     *          <kendo-grid-column\n     *              #lastColumn\n     *              field=\"UnitPrice\"\n     *              title=\"Unit Price\"\n     *              [width]=\"180\"\n     *              filter=\"numeric\"\n     *              format=\"{0:c}\">\n     *          </kendo-grid-column>\n     *      </kendo-grid>\n     *    `\n     * })\n     * class AppComponent {\n     *    public gridData: any[] = products;\n     * }\n     *\n     * const products = [{\n     *    \"ProductID\": 1,\n     *    \"ProductName\": \"Chai\",\n     *    \"UnitPrice\": 18.0000,\n     *    \"Discontinued\": true\n     *  }, {\n     *    \"ProductID\": 2,\n     *    \"ProductName\": \"Chang\",\n     *    \"UnitPrice\": 19.0000,\n     *    \"Discontinued\": false\n     *  }\n     * ];\n     * ```\n     */\n    GridComponent.prototype.autoFitColumns = function (columns) {\n        if (columns === void 0) { columns = this.columns; }\n        var _a;\n        var cols;\n        if (columns instanceof QueryList) {\n            cols = columns.toArray();\n        }\n        else {\n            cols = columns;\n        }\n        (_a = this.columnResizingService).autoFit.apply(_a, cols);\n    };\n    /**\n     * @hidden\n     */\n    GridComponent.prototype.notifyPageChange = function (source, event) {\n        if (source === \"list\" && !this.isVirtual) {\n            return;\n        }\n        this.pageChange.emit(event);\n    };\n    /**\n     * @hidden\n     */\n    GridComponent.prototype.notifyScrollBottom = function () {\n        var _this = this;\n        if (this.scrollable === 'none') {\n            return;\n        }\n        if (hasObservers(this.scrollBottom)) {\n            this.ngZone.run(function () { return _this.scrollBottom.emit({ sender: _this }); });\n        }\n    };\n    /**\n     * @hidden\n     */\n    GridComponent.prototype.focusEditElement = function (containerSelector) {\n        var _this = this;\n        if (this.focusElementSubscription) {\n            this.focusElementSubscription.unsubscribe();\n        }\n        this.ngZone.runOutsideAngular(function () {\n            _this.focusElementSubscription = _this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n                var wrapper = _this.wrapper.nativeElement;\n                if (!_this.setEditFocus(wrapper.querySelector(containerSelector)) && _this.isLocked) {\n                    _this.setEditFocus(wrapper.querySelector(\".k-grid-content \" + containerSelector));\n                }\n                _this.focusElementSubscription = null;\n            });\n        });\n    };\n    /**\n     * Focuses the last active or the first cell of the Grid.\n     *\n     * @returns {NavigationCell} The focused cell.\n     */\n    GridComponent.prototype.focus = function () {\n        this.assertNavigable();\n        return this.navigationService.focusCell();\n    };\n    /**\n     * Focuses the cell with the specified row and column index.\n     *\n     * The row index is based on the logical structure of the Grid and does not correspond to the data item index:\n     * * Header rows are included, starting at index 0.\n     * * Group headers and footers are included.\n     * * The row indexing is absolute and does not change with paging.\n     *\n     * If the Grid is configured for scrolling, including virtual scrolling, the scroll position will be updated.\n     * If the row is not present on the current page, the method will have no effect.\n     *\n     * @param rowIndex - The logical row index to focus. The top header row has an index 0.\n     * @param colIndex - The column index to focus.\n     * @returns {NavigationCell} The focused cell.\n     *\n     */\n    GridComponent.prototype.focusCell = function (rowIndex, colIndex) {\n        this.assertNavigable();\n        return this.navigationService.focusCell(rowIndex, colIndex);\n    };\n    /**\n     * Focuses the next cell, optionally wrapping to the next row.\n     *\n     * @param wrap - A Boolean value which indicates if the focus will move to the next row. Defaults to `true`.\n     * @returns {NavigationCell} The focused cell. If the focus is already on the last cell, returns `null`.\n     */\n    GridComponent.prototype.focusNextCell = function (wrap) {\n        if (wrap === void 0) { wrap = true; }\n        this.assertNavigable();\n        return this.navigationService.focusNextCell(wrap);\n    };\n    /**\n     * Focuses the previous cell. Optionally wraps to the previous row.\n     *\n     * @param wrap - A Boolean value which indicates if the focus will move to the next row. Defaults to `true`.\n     * @returns {NavigationCell} The focused cell. If the focus is already on the first cell, returns `null`.\n     */\n    GridComponent.prototype.focusPrevCell = function (wrap) {\n        if (wrap === void 0) { wrap = true; }\n        this.assertNavigable();\n        return this.navigationService.focusPrevCell(wrap);\n    };\n    /**\n     * Scrolls to the specified row and column\n     */\n    GridComponent.prototype.scrollTo = function (request) {\n        this.scrollRequestService.scrollTo(request);\n    };\n    /**\n     * Changes the position of the specified column.\n     * The reordering of columns operates only on the level\n     * which is inferred by the source column.\n     * For the `reorderColumn` method to work properly,\n     * the `source` column has to be visible.\n     *\n     * @param {ColumnBase} source - The column whose position will be changed.\n     * @param {number} destIndex - The new position of the column.\n     * @param {ColumnReorderConfig} options - Additional options.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     *    selector: 'my-app',\n     *    template: `\n     *        <kendo-grid\n     *            #grid\n     *            [data]=\"gridData\"\n     *            [reorderable]=\"true\"\n     *            style=\"height: 300px\">\n     *            <ng-template kendoGridToolbarTemplate>\n     *                 <button class=\"k-button\"\n     *                     (click)=\"grid.reorderColumn(groupColumn, 2, { before: true })\">\n     *                     Move the group column before the last one.\n     *                 </button>\n     *            </ng-template>\n     *            <kendo-grid-column-group #groupColumn title=\"Product Info\">\n     *                <kendo-grid-column\n     *                    field=\"ProductID\"\n     *                    [width]=\"50\"\n     *                    title=\"ID\">\n     *                </kendo-grid-column>\n     *\n     *                <kendo-grid-column\n     *                    field=\"ProductName\"\n     *                    title=\"Product Name\">\n     *                </kendo-grid-column>\n     *            </kendo-grid-column-group>\n     *\n     *            <kendo-grid-column\n     *                field=\"UnitPrice\"\n     *                title=\"Unit Price\"\n     *                [width]=\"180\"\n     *                format=\"{0:c}\">\n     *            </kendo-grid-column>\n     *\n     *            <kendo-grid-column\n     *                field=\"Discontinued\"\n     *                title=\"Discontinued\"\n     *                [width]=\"100\">\n     *            </kendo-grid-column>\n     *        </kendo-grid>\n     *    `\n     * })\n     * class AppComponent {\n     *    public gridData: any[] = products;\n     * }\n     *\n     * const products = [{\n     *    \"ProductID\": 1,\n     *    \"ProductName\": \"Chai\",\n     *    \"UnitPrice\": 18.0000,\n     *    \"Discontinued\": true\n     *  }, {\n     *    \"ProductID\": 2,\n     *    \"ProductName\": \"Chang\",\n     *    \"UnitPrice\": 19.0000,\n     *    \"Discontinued\": false\n     *  }\n     * ];\n     * ```\n     */\n    GridComponent.prototype.reorderColumn = function (source, destIndex, options) {\n        if (options === void 0) { options = { before: false }; }\n        var columnsForLevel = this.columnsForLevel(source.level);\n        var target = columnsForLevel[destIndex];\n        if (!target) {\n            return;\n        }\n        var lastNonLocked = target.isLocked &&\n            !source.isLocked &&\n            this.columnsContainer.nonLockedColumns.length === 1;\n        if (lastNonLocked) {\n            return;\n        }\n        if (isSpanColumnComponent(target) && !options.before) {\n            target = target.childColumns.last;\n        }\n        this.reorder({\n            before: options.before,\n            source: source,\n            target: target\n        });\n    };\n    /**\n     * @hidden\n     */\n    GridComponent.prototype.reorder = function (_a) {\n        var _this = this;\n        var target = _a.target, source = _a.source, before = _a.before, changeContainer = _a.changeContainer;\n        this.ngZone.run(function () {\n            var columnsForLevel = _this.columnsForLevel(source.level);\n            var newIndex = columnsForLevel.indexOf(target);\n            if (target.parent && target.parent.isSpanColumn) {\n                newIndex = columnsForLevel.indexOf(target.parent);\n                if (before) {\n                    target = target.parent;\n                }\n            }\n            var oldIndex = columnsForLevel.indexOf(source);\n            if (changeContainer) {\n                if (before && 0 < newIndex && oldIndex < newIndex) { // dropped before the first not locked column\n                    newIndex--;\n                }\n                else if (!before && oldIndex > newIndex) { // dropped after the last locked column\n                    newIndex++;\n                }\n            }\n            var args = new ColumnReorderEvent({\n                column: source,\n                oldIndex: oldIndex,\n                newIndex: newIndex\n            });\n            _this.columnReorder.emit(args);\n            if (args.isDefaultPrevented()) {\n                return;\n            }\n            if (changeContainer) {\n                _this.columnLockedChange.emit(new ColumnLockedChangeEvent([source]));\n            }\n            _this.updateColumnIndices({ source: source, target: target, before: before });\n            if (source.locked !== target.locked) {\n                source.locked = target.locked;\n            }\n            _this.columnsContainer.refresh();\n            _this.changeDetectorRef.markForCheck();\n        });\n    };\n    GridComponent.prototype.updateColumnIndices = function (_a) {\n        var source = _a.source, target = _a.target, before = _a.before;\n        var expandedColumns = expandColumnsWithSpan(this.columnsForLevel(source.level));\n        var sourceColumnIndex = expandedColumns.indexOf(source);\n        var nextSourceIndex = 0;\n        var nextIndex = 0;\n        var toSkip = 1;\n        // Possible only when called from the API.\n        if (source.isSpanColumn) {\n            toSkip += source.childColumns.length;\n        }\n        var i = 0;\n        while (i < expandedColumns.length) {\n            var column = expandedColumns[i];\n            if (column === target) {\n                nextSourceIndex = before ? nextIndex : nextIndex + 1;\n                nextIndex = before ? nextIndex + toSkip : nextIndex;\n                column.orderIndex = nextIndex;\n                if (nextSourceIndex === nextIndex + 1) {\n                    nextIndex += toSkip;\n                }\n            }\n            else if (column === source) {\n                i += toSkip;\n                continue;\n            }\n            else {\n                column.orderIndex = nextIndex;\n            }\n            nextIndex++;\n            i++;\n        }\n        for (i = sourceColumnIndex; i < sourceColumnIndex + toSkip; i++) {\n            expandedColumns[i].orderIndex = nextSourceIndex++;\n        }\n        this.updateIndicesForLevel(source.level + 1);\n    };\n    GridComponent.prototype.updateIndicesForLevel = function (level) {\n        var colsForParentLevel = this.columnsForLevel(level - 1);\n        var colsForLevel = [];\n        sortColumns(colsForParentLevel).forEach(function (c) {\n            if (c.isColumnGroup) {\n                colsForLevel.push.apply(colsForLevel, c.childrenArray.sort(function (a, b) { return a.orderIndex - b.orderIndex; }));\n            }\n        });\n        expandColumnsWithSpan(colsForLevel).map(function (c, i) { return c.orderIndex = i; });\n        if (level < this.columnsContainer.totalLevels) {\n            this.updateIndicesForLevel(level + 1);\n        }\n    };\n    GridComponent.prototype.columnsForLevel = function (level) {\n        return this.columnsContainer\n            .allColumns.filter(function (column) { return column.level === level; });\n    };\n    GridComponent.prototype.initSelectionService = function () {\n        if (!this.selectionDirective && !isPresent(this.defaultSelection)) {\n            this.defaultSelection = new Selection(this, this.changeDetectorRef);\n        }\n        this.selectionService.init({\n            rowSelected: this.rowSelected,\n            selectable: this.selectable,\n            view: this.view\n        });\n        if (!this.selectionDirective && !this.selectableSettings.enabled) {\n            this.defaultSelection.reset();\n        }\n    };\n    GridComponent.prototype.setEditFocus = function (element) {\n        if (element) {\n            return this.navigationService.tryFocus(element);\n        }\n    };\n    GridComponent.prototype.columnInstance = function (column) {\n        var instance;\n        if (typeof column === 'number') {\n            instance = this.columnsContainer.lockedLeafColumns.toArray()\n                .concat(this.columnsContainer.nonLockedLeafColumns.toArray())[column];\n        }\n        else if (typeof column === 'string') {\n            instance = this.columnList.filter(function (item) { return item.field === column; })[0];\n        }\n        else {\n            instance = column;\n        }\n        if (!instance && isDevMode()) {\n            throw new Error(\"Invalid column \" + column);\n        }\n        return instance;\n    };\n    GridComponent.prototype.verifySettings = function () {\n        if (isDevMode()) {\n            var locked = this.lockedLeafColumns.length || (this.columnMenu && this.columnMenu.lock);\n            if (locked && this.detailTemplate) {\n                throw new Error('Having both detail template and locked columns is not supported.');\n            }\n            if (this.lockedLeafColumns.length && !this.nonLockedLeafColumns.length) {\n                throw new Error('There should be at least one non-locked column');\n            }\n            if ((locked || this.virtualColumns) && expandColumns(this.columnList.toArray()).filter(function (column) { return !column.width && !isColumnGroupComponent(column); }).length) {\n                throw new Error((locked ? 'Locked' : 'Virtual') + ' columns feature requires all columns to have set width.');\n            }\n            if (locked && !this.isScrollable) {\n                throw new Error('Locked columns are only supported when scrolling is enabled.');\n            }\n            if (this.columnList.filter(isColumnGroupComponent).filter(function (x) { return !x.hasChildren; }).length) {\n                throw new Error('ColumnGroupComponent should contain ColumnComponent or CommandColumnComponent.');\n            }\n            if (this.columnList.filter(function (x) { return x.locked && x.parent && !x.parent.isLocked; }).length) {\n                throw new Error('Locked child columns require their parent columns to be locked.');\n            }\n            if ((this.rowHeight || this.detailRowHeight) && !this.isVirtual) {\n                throw new Error('Row height and detail row height settings require virtual scrolling mode to be enabled.');\n            }\n            validateColumnsField(this.columnList);\n        }\n    };\n    GridComponent.prototype.autoGenerateColumns = function () {\n        if (this.shouldGenerateColumns && !this.columns.length && this.view.length) {\n            this.columns.reset(Object.keys(this.view.at(0)).map(function (field) {\n                var column = new ColumnComponent();\n                column.field = field;\n                return column;\n            }));\n        }\n    };\n    GridComponent.prototype.attachStateChangesEmitter = function () {\n        var _this = this;\n        this.stateChangeSubscription =\n            merge(this.pageChange.pipe(map(function (x) { return ({\n                filter: _this.filter, group: _this.group, skip: x.skip, sort: _this.sort, take: x.take\n            }); })), this.sortChange.pipe(map(function (sort) { return ({ filter: _this.filter, group: _this.group, skip: _this.skip, sort: sort, take: _this.pageSize }); })), this.groupChange.pipe(map(function (group) { return ({\n                filter: _this.filter, group: group, skip: _this.skip, sort: _this.sort, take: _this.pageSize\n            }); })), this.filterChange.pipe(map(function (filter$$1) { return ({\n                filter: filter$$1, group: _this.group, skip: 0, sort: _this.sort, take: _this.pageSize\n            }); })))\n                .subscribe(function (x) {\n                _this.closeCell();\n                _this.cancelCell();\n                _this.dataStateChange.emit(x);\n            });\n    };\n    GridComponent.prototype.attachEditHandlers = function () {\n        if (!this.editService) {\n            return;\n        }\n        this.editServiceSubscription = this.editService\n            .changes.subscribe(this.emitCRUDEvent.bind(this));\n    };\n    GridComponent.prototype.emitCRUDEvent = function (args) {\n        var action = args.action, rowIndex = args.rowIndex, formGroup = args.formGroup;\n        var dataItem = this.view.at(rowIndex - this.skip);\n        if (action !== 'add' && !dataItem) {\n            dataItem = formGroup.value;\n        }\n        this.closeCell();\n        Object.assign(args, {\n            dataItem: dataItem,\n            sender: this\n        });\n        switch (action) {\n            case 'add':\n                this.add.emit(args);\n                break;\n            case 'cancel':\n                this.cancel.emit(args);\n                break;\n            case 'edit':\n                this.edit.emit(args);\n                break;\n            case 'remove':\n                this.remove.emit(args);\n                break;\n            case 'save':\n                this.save.emit(args);\n                break;\n            case 'cellClose':\n                this.cellClose.emit(args);\n                break;\n            default: break;\n        }\n    };\n    GridComponent.prototype.attachDomEventHandlers = function () {\n        var _this = this;\n        this.cellClickSubscription = this.domEvents.cellClick.subscribe(function (args) {\n            _this.cellClick.emit(Object.assign({ sender: _this }, args));\n        });\n    };\n    GridComponent.prototype.attachElementEventHandlers = function () {\n        var _this = this;\n        if (isUniversal()) {\n            return;\n        }\n        var wrapper = this.wrapper.nativeElement;\n        var ariaRoot = this.ariaRoot.nativeElement;\n        this.ngZone.runOutsideAngular(function () {\n            var resizeCheck = _this.resizeCheck.bind(_this);\n            var resizeSubscription = _this.renderer.listen('window', 'resize', resizeCheck);\n            var orientationSubscription = _this.renderer.listen('window', 'orientationchange', resizeCheck);\n            var documentClickSubscription = _this.renderer.listen('document', 'click', function (args) {\n                var activeElement = document.activeElement;\n                if (_this.editService.shouldCloseCell() &&\n                    !closest(args.target, matchesClasses('k-animation-container k-grid-ignore-click')) &&\n                    !(activeElement &&\n                        (closest(activeElement, matchesClasses('k-animation-container')) ||\n                            isInEditedCell(activeElement, _this.wrapper.nativeElement)))) {\n                    _this.editService.closeCell(args);\n                }\n            });\n            var windowBlurSubscription = _this.renderer.listen('window', 'blur', function (args) {\n                var activeElement = document.activeElement;\n                if (activeElement && !(matchesNodeName('input')(activeElement) && activeElement.type === 'file' &&\n                    isInEditedCell(activeElement, _this.wrapper.nativeElement))) {\n                    _this.editService.closeCell(args);\n                }\n                _this.domEvents.windowBlur.emit(args);\n            });\n            var clickSubscription = _this.renderer.listen(wrapper, 'click', function (args) {\n                _this.domEvents.click.emit(args);\n            });\n            var keydownSubscription = _this.renderer.listen(wrapper, 'keydown', function (args) {\n                _this.domEvents.keydown.emit(args);\n            });\n            // focusIn and focusOut are relative to the element with ARIA role \"grid\"\n            var focused = false;\n            var focusInSubscription = _this.renderer.listen(ariaRoot, 'focusin', function (args) {\n                _this.domEvents.focus.emit(args);\n                if (!focused) {\n                    _this.domEvents.focusIn.emit(args);\n                    focused = true;\n                }\n            });\n            var focusOutSubscription = _this.renderer.listen(ariaRoot, 'focusout', function (args) {\n                var next = args.relatedTarget || document.activeElement;\n                var outside = !closest(next, function (node) { return node === ariaRoot; });\n                if (outside) {\n                    _this.domEvents.focusOut.emit(args);\n                    focused = false;\n                }\n            });\n            _this.detachElementEventHandlers = function () {\n                resizeSubscription();\n                orientationSubscription();\n                documentClickSubscription();\n                windowBlurSubscription();\n                clickSubscription();\n                keydownSubscription();\n                focusInSubscription();\n                focusOutSubscription();\n            };\n        });\n    };\n    GridComponent.prototype.matchesMedia = function (c) {\n        return this.responsiveService.matchesMedia(c.media);\n    };\n    GridComponent.prototype.resizeCheck = function () {\n        var _this = this;\n        if (window.innerWidth !== this.cachedWindowWidth) {\n            this.cachedWindowWidth = window.innerWidth;\n            var hasChanges_1 = false;\n            this.columnList.filterHierarchy(function (column) {\n                var matchesMedia = _this.matchesMedia(column);\n                if (column.matchesMedia !== matchesMedia) {\n                    hasChanges_1 = true;\n                    column.matchesMedia = matchesMedia;\n                }\n                return column.isVisible;\n            });\n            if (hasChanges_1) {\n                this.ngZone.run(function () {\n                    _this.changeDetectorRef.markForCheck();\n                });\n            }\n        }\n    };\n    GridComponent.prototype.emitPDFExportEvent = function () {\n        var args = new PDFExportEvent();\n        this.pdfExport.emit(args);\n        if (!args.isDefaultPrevented()) {\n            this.saveAsPDF();\n        }\n    };\n    GridComponent.prototype.syncHeaderHeight = function (observable) {\n        var _this = this;\n        return observable\n            .pipe(filter(function () { return isPresent(_this.lockedHeader); }))\n            .subscribe(function () {\n            return syncRowsHeight(_this.lockedHeader.nativeElement.children[0], _this.header.nativeElement.children[0]);\n        });\n    };\n    GridComponent.prototype.columnsContainerChange = function () {\n        var _this = this;\n        this.columnsContainerChangeSubscription =\n            this.syncHeaderHeight(this.columnsContainer.changes.pipe(filter(function () { return _this.lockedColumns.length > 0; }), switchMap(function () { return _this.ngZone.onStable.asObservable().pipe(take(1)); })));\n    };\n    GridComponent.prototype.handleColumnResize = function () {\n        var _this = this;\n        var resizes = this.columnResizingService.changes;\n        this.columnResizingSubscription = resizes.pipe(tap(function (e) {\n            if (e.type === 'start') {\n                _this.renderer.addClass(_this.wrapper.nativeElement, 'k-grid-column-resizing');\n            }\n            else if (e.type === 'end') {\n                _this.renderer.removeClass(_this.wrapper.nativeElement, 'k-grid-column-resizing');\n            }\n        }), filter(function (e) { return e.type === 'start'; }), switchMap(function () {\n            return resizes.pipe(\n            // tslint:disable-next-line: rxjs-no-unsafe-takeuntil\n            takeUntil(resizes.pipe(filter(function (e) { return e.type === 'triggerAutoFit'; }))), filter(function (e) { return e.type === 'end'; }));\n        }))\n            .subscribe(this.notifyResize.bind(this));\n    };\n    GridComponent.prototype.notifyResize = function (e) {\n        var args = e.resizedColumns\n            .filter(function (item) { return isTruthy(item.column.resizable) && !item.column.isColumnGroup; })\n            .map(function (item) { return ({\n            column: item.column,\n            newWidth: item.column.width,\n            oldWidth: item.oldWidth\n        }); });\n        this.columnResize.emit(args);\n    };\n    GridComponent.prototype.assertNavigable = function () {\n        if (isDevMode() && !this.navigable) {\n            throw new Error('The Grid should be configured as [navigable]=\"true\" to control focus');\n        }\n    };\n    GridComponent.prototype.navigationMetadata = function () {\n        var isVirtual = this.isVirtual;\n        var pageSize = this.pageSize;\n        var dataRows = isVirtual ? this.view.total : pageSize;\n        var addRowOffset = this.editService.hasNewItem ? 1 : 0;\n        var filterRowOffset = hasFilterRow(this.filterable) ? 1 : 0;\n        var headerRows = this.totalColumnLevels + 1 + filterRowOffset + addRowOffset;\n        return new NavigationMetadata(dataRows, headerRows, isVirtual, this.showPager, isPresent(this.detailTemplate), this.wrapper, this.virtualColumns, this.columnsContainer);\n    };\n    GridComponent.prototype.updateNavigationMetadata = function () {\n        this.navigationService.metadata = this.navigationMetadata();\n    };\n    GridComponent.prototype.applyAutoSize = function () {\n        var _this = this;\n        var cols = this.columns.filter(function (c) { return _this.autoSize ? c.autoSize !== false : c.autoSize; });\n        if (cols.length > 0) {\n            this.ngZone.onStable.pipe(take(1)).subscribe(function (_) { return _this.autoFitColumns(cols); });\n        }\n    };\n    GridComponent.prototype.onColumnRangeChange = function (range) {\n        var viewportColumns = this.viewportColumns = [];\n        var leafViewportColumns = this.columnsContainer\n            .nonLockedLeafColumns.toArray().slice(range.start, range.end + 1);\n        for (var idx = 0; idx < leafViewportColumns.length; idx++) {\n            var column = leafViewportColumns[idx];\n            while (column.parent) {\n                column = column.parent;\n            }\n            var toAdd = [column];\n            while (toAdd.length) {\n                column = toAdd.shift();\n                viewportColumns.push(column);\n                if (column.isColumnGroup) {\n                    toAdd.unshift.apply(toAdd, column.childrenArray);\n                }\n            }\n            var lastFromGroup = viewportColumns[viewportColumns.length - 1];\n            column = leafViewportColumns[idx];\n            while (column !== lastFromGroup && idx < leafViewportColumns.length) {\n                idx++;\n                column = leafViewportColumns[idx];\n            }\n        }\n        if (range.start > 0) {\n            var first = leafViewportColumns[0];\n            var offset = range.offset;\n            var current = viewportColumns[0];\n            var index = 0;\n            while (current !== first) {\n                offset -= current.isColumnGroup ? 0 : current.width;\n                index++;\n                current = viewportColumns[index];\n            }\n            if (offset > 0) {\n                var totalLevels = this.columnsContainer.totalLevels;\n                var previous = void 0;\n                for (var idx = 0; idx <= totalLevels; idx++) {\n                    var offsetColumn = idx < totalLevels ? new ColumnGroupComponent(previous) : new ColumnBase$1(previous);\n                    previous = offsetColumn;\n                    offsetColumn.title = \"\\u00A0\";\n                    offsetColumn.width = offset;\n                    viewportColumns.unshift(offsetColumn);\n                }\n            }\n        }\n        this.leafViewportColumns = viewportColumns.filter(function (c) { return !c.isColumnGroup; });\n    };\n    GridComponent.decorators = [\n        { type: Component, args: [{\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'kendoGrid',\n                    providers: [\n                        BrowserSupportService,\n                        LocalizationService,\n                        ColumnInfoService,\n                        SelectionService,\n                        DetailsService,\n                        GroupsService,\n                        GroupInfoService,\n                        ChangeNotificationService,\n                        EditService,\n                        PDFService,\n                        SuspendService,\n                        {\n                            provide: CELL_CONTEXT,\n                            useValue: Éµ4$2\n                        },\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.grid'\n                        },\n                        FilterService,\n                        ResponsiveService,\n                        PagerContextService,\n                        ExcelService,\n                        ScrollSyncService,\n                        ResizeService,\n                        LocalDataChangesService,\n                        DomEventsService,\n                        ColumnResizingService,\n                        SinglePopupService,\n                        DragAndDropService,\n                        DragHintService,\n                        DropCueService,\n                        ColumnReorderService,\n                        NavigationService,\n                        FocusRoot,\n                        IdService,\n                        ScrollRequestService,\n                        SortService\n                    ],\n                    selector: 'kendo-grid',\n                    styles: [\n                        // Styles for backwards compatibility with kendo-theme-default@v2.46.0 and earlier.\n                        \"   .k-grid .k-grid-aria-root {\\n            display: flex;\\n            flex-direction: column;\\n            flex: 1 1 auto;\\n            overflow: hidden;\\n        }\\n\\n        .k-grid .k-filter-row td {\\n            white-space: nowrap;\\n        }\"\n                    ],\n                    template: \"\\n        <ng-container kendoGridLocalizedMessages\\n            i18n-groupPanelEmpty=\\\"kendo.grid.groupPanelEmpty|The label visible in the Grid group panel when it is empty\\\"\\n            groupPanelEmpty=\\\"Drag a column header and drop it here to group by that column\\\"\\n\\n            i18n-noRecords=\\\"kendo.grid.noRecords|The label visible in the Grid when there are no records\\\"\\n            noRecords=\\\"No records available.\\\"\\n\\n            i18n-pagerFirstPage=\\\"kendo.grid.pagerFirstPage|The label for the first page button in Grid pager\\\"\\n            pagerFirstPage=\\\"Go to the first page\\\"\\n\\n            i18n-pagerPreviousPage=\\\"kendo.grid.pagerPreviousPage|The label for the previous page button in Grid pager\\\"\\n            pagerPreviousPage=\\\"Go to the previous page\\\"\\n\\n            i18n-pagerNextPage=\\\"kendo.grid.pagerNextPage|The label for the next page button in Grid pager\\\"\\n            pagerNextPage=\\\"Go to the next page\\\"\\n\\n            i18n-pagerLastPage=\\\"kendo.grid.pagerLastPage|The label for the last page button in Grid pager\\\"\\n            pagerLastPage=\\\"Go to the last page\\\"\\n\\n            i18n-pagerPage=\\\"kendo.grid.pagerPage|The label before the current page number in the Grid pager\\\"\\n            pagerPage=\\\"Page\\\"\\n\\n            i18n-pagerOf=\\\"kendo.grid.pagerOf|The label before the total pages number in the Grid pager\\\"\\n            pagerOf=\\\"of\\\"\\n\\n            i18n-pagerItems=\\\"kendo.grid.pagerItems|The label after the total pages number in the Grid pager\\\"\\n            pagerItems=\\\"items\\\"\\n\\n            i18n-pagerItemsPerPage=\\\"kendo.grid.pagerItemsPerPage|The label for the page size chooser in the Grid pager\\\"\\n            pagerItemsPerPage=\\\"items per page\\\"\\n\\n            i18n-filter=\\\"kendo.grid.filter|The label of the filter cell or icon\\\"\\n            filter=\\\"Filter\\\"\\n\\n            i18n-filterEqOperator=\\\"kendo.grid.filterEqOperator|The text of the equal filter operator\\\"\\n            filterEqOperator=\\\"Is equal to\\\"\\n\\n            i18n-filterNotEqOperator=\\\"kendo.grid.filterNotEqOperator|The text of the not equal filter operator\\\"\\n            filterNotEqOperator=\\\"Is not equal to\\\"\\n\\n            i18n-filterIsNullOperator=\\\"kendo.grid.filterIsNullOperator|The text of the is null filter operator\\\"\\n            filterIsNullOperator=\\\"Is null\\\"\\n\\n            i18n-filterIsNotNullOperator=\\\"kendo.grid.filterIsNotNullOperator|The text of the is not null filter operator\\\"\\n            filterIsNotNullOperator=\\\"Is not null\\\"\\n\\n            i18n-filterIsEmptyOperator=\\\"kendo.grid.filterIsEmptyOperator|The text of the is empty filter operator\\\"\\n            filterIsEmptyOperator=\\\"Is empty\\\"\\n\\n            i18n-filterIsNotEmptyOperator=\\\"kendo.grid.filterIsNotEmptyOperator|The text of the is not empty filter operator\\\"\\n            filterIsNotEmptyOperator=\\\"Is not empty\\\"\\n\\n            i18n-filterStartsWithOperator=\\\"kendo.grid.filterStartsWithOperator|The text of the starts with filter operator\\\"\\n            filterStartsWithOperator=\\\"Starts with\\\"\\n\\n            i18n-filterContainsOperator=\\\"kendo.grid.filterContainsOperator|The text of the contains filter operator\\\"\\n            filterContainsOperator=\\\"Contains\\\"\\n\\n            i18n-filterNotContainsOperator=\\\"kendo.grid.filterNotContainsOperator|The text of the does not contain filter operator\\\"\\n            filterNotContainsOperator=\\\"Does not contain\\\"\\n\\n            i18n-filterEndsWithOperator=\\\"kendo.grid.filterEndsWithOperator|The text of the ends with filter operator\\\"\\n            filterEndsWithOperator=\\\"Ends with\\\"\\n\\n            i18n-filterGteOperator=\\\"kendo.grid.filterGteOperator|The text of the greater than or equal filter operator\\\"\\n            filterGteOperator=\\\"Is greater than or equal to\\\"\\n\\n            i18n-filterGtOperator=\\\"kendo.grid.filterGtOperator|The text of the greater than filter operator\\\"\\n            filterGtOperator=\\\"Is greater than\\\"\\n\\n            i18n-filterLteOperator=\\\"kendo.grid.filterLteOperator|The text of the less than or equal filter operator\\\"\\n            filterLteOperator=\\\"Is less than or equal to\\\"\\n\\n            i18n-filterLtOperator=\\\"kendo.grid.filterLtOperator|The text of the less than filter operator\\\"\\n            filterLtOperator=\\\"Is less than\\\"\\n\\n            i18n-filterIsTrue=\\\"kendo.grid.filterIsTrue|The text of the IsTrue boolean filter option\\\"\\n            filterIsTrue=\\\"Is True\\\"\\n\\n            i18n-filterIsFalse=\\\"kendo.grid.filterIsFalse|The text of the IsFalse boolean filter option\\\"\\n            filterIsFalse=\\\"Is False\\\"\\n\\n            i18n-filterBooleanAll=\\\"kendo.grid.filterBooleanAll|The text of the (All) boolean filter option\\\"\\n            filterBooleanAll=\\\"(All)\\\"\\n\\n            i18n-filterAfterOrEqualOperator=\\\"kendo.grid.filterAfterOrEqualOperator|The text of the after or equal date filter operator\\\"\\n            filterAfterOrEqualOperator=\\\"Is after or equal to\\\"\\n\\n            i18n-filterAfterOperator=\\\"kendo.grid.filterAfterOperator|The text of the after date filter operator\\\"\\n            filterAfterOperator=\\\"Is after\\\"\\n\\n            i18n-filterBeforeOperator=\\\"kendo.grid.filterBeforeOperator|The text of the before date filter operator\\\"\\n            filterBeforeOperator=\\\"Is before\\\"\\n\\n            i18n-filterBeforeOrEqualOperator=\\\"kendo.grid.filterBeforeOrEqualOperator|The text of the before or equal date filter operator\\\"\\n            filterBeforeOrEqualOperator=\\\"Is before or equal to\\\"\\n\\n            i18n-filterFilterButton=\\\"kendo.grid.filterFilterButton|The text of the filter button\\\"\\n            filterFilterButton=\\\"Filter\\\"\\n\\n            i18n-filterClearButton=\\\"kendo.grid.filterClearButton|The text of the clear filter button\\\"\\n            filterClearButton=\\\"Clear\\\"\\n\\n            i18n-filterAndLogic=\\\"kendo.grid.filterAndLogic|The text of the And filter logic\\\"\\n            filterAndLogic=\\\"And\\\"\\n\\n            i18n-filterOrLogic=\\\"kendo.grid.filterOrLogic|The text of the Or filter logic\\\"\\n            filterOrLogic=\\\"Or\\\"\\n\\n            i18n-loading=\\\"kendo.grid.loading|The loading text\\\"\\n            loading=\\\"Loading\\\"\\n\\n            i18n-columnMenu=\\\"kendo.grid.columnMenu|The title of the column menu icon\\\"\\n            columnMenu=\\\"Column Menu\\\"\\n\\n            i18n-columns=\\\"kendo.grid.columns|The text shown in the column menu for the columns item\\\"\\n            columns=\\\"Columns\\\"\\n\\n            i18n-lock=\\\"kendo.grid.lock|The text shown in the column menu for the lock item\\\"\\n            lock=\\\"Lock\\\"\\n\\n            i18n-unlock=\\\"kendo.grid.unlock|The text shown in the column menu for the unlock item\\\"\\n            unlock=\\\"Unlock\\\"\\n\\n            i18n-sortable=\\\"kendo.grid.sortable|The label of the sort icon\\\"\\n            sortable=\\\"Sortable\\\"\\n\\n            i18n-sortAscending=\\\"kendo.grid.sortAscending|The text shown in the column menu for the sort ascending item\\\"\\n            sortAscending=\\\"Sort Ascending\\\"\\n\\n            i18n-sortDescending=\\\"kendo.grid.sortDescending|The text shown in the column menu for the sort descending item\\\"\\n            sortDescending=\\\"Sort Descending\\\"\\n\\n            i18n-sortedAscending=\\\"kendo.grid.sortedAscending|The status announcement when a column is sorted ascending\\\"\\n            sortedAscending=\\\"Sorted Ascending\\\"\\n\\n            i18n-sortedDescending=\\\"kendo.grid.sortedDescending|The status announcement when a column is sorted descending\\\"\\n            sortedDescending=\\\"Sorted Descending\\\"\\n\\n            i18n-sortedDefault=\\\"kendo.grid.sortedDefault|The status announcement when a column is no longer sorted\\\"\\n            sortedDefault=\\\"Not Sorted\\\"\\n\\n            i18n-columnsApply=\\\"kendo.grid.columnsApply|The text shown in the column menu or column chooser for the columns apply button\\\"\\n            columnsApply=\\\"Apply\\\"\\n\\n            i18n-columnsReset=\\\"kendo.grid.columnsReset|The text shown in the column menu or column chooser for the columns reset button\\\"\\n            columnsReset=\\\"Reset\\\"\\n\\n            i18n-detailExpand=\\\"kendo.grid.detailExpand|The title of the expand icon of detail rows.\\\"\\n            detailExpand=\\\"Expand Details\\\"\\n\\n            i18n-detailCollapse=\\\"kendo.grid.detailCollapse|The title of the collapse icon of detail rows.\\\"\\n            detailCollapse=\\\"Collapse Details\\\"\\n         >\\n        </ng-container>\\n        <kendo-grid-toolbar *ngIf=\\\"showTopToolbar\\\" position=\\\"top\\\"></kendo-grid-toolbar>\\n        <kendo-grid-group-panel\\n            *ngIf=\\\"showGroupPanel\\\"\\n            [text]=\\\"groupableEmptyText\\\"\\n            [groups]=\\\"group\\\"\\n            (change)=\\\"groupChange.emit($event)\\\">\\n        </kendo-grid-group-panel>\\n        <div #ariaRoot\\n            class=\\\"k-grid-aria-root\\\"\\n            role=\\\"grid\\\"\\n            [attr.aria-rowcount]=\\\"ariaRowCount\\\"\\n            [attr.aria-colcount]=\\\"ariaColCount\\\">\\n        <ng-template [ngIf]=\\\"isScrollable\\\">\\n            <div *ngIf=\\\"!hideHeader\\\"\\n                class=\\\"k-grid-header\\\"\\n                role=\\\"presentation\\\"\\n                [style.padding]=\\\"headerPadding\\\">\\n                <div *ngIf=\\\"isLocked\\\"\\n                     #lockedHeader\\n                     role=\\\"presentation\\\"\\n                     class=\\\"k-grid-header-locked\\\"\\n                     [style.width.px]=\\\"lockedWidth\\\">\\n                    <table [locked]=\\\"true\\\" role=\\\"presentation\\\" [style.width.px]=\\\"lockedWidth\\\">\\n                        <colgroup kendoGridColGroup\\n                            role=\\\"presentation\\\"\\n                            [columns]=\\\"lockedLeafColumns\\\"\\n                            [groups]=\\\"group\\\"\\n                            [detailTemplate]=\\\"detailTemplate\\\">\\n                        </colgroup>\\n                        <thead kendoGridHeader\\n                            [resizable]=\\\"resizable\\\"\\n                            [scrollable]=\\\"true\\\"\\n                            [columns]=\\\"lockedColumns\\\"\\n                            [totalColumnLevels]=\\\"totalColumnLevels\\\"\\n                            [sort]=\\\"sort\\\"\\n                            [groups]=\\\"group\\\"\\n                            [filter]=\\\"filter\\\"\\n                            [filterable]=\\\"filterable\\\"\\n                            [groupable]=\\\"showGroupPanel\\\"\\n                            [reorderable]=\\\"reorderable\\\"\\n                            [sortable]=\\\"sortable\\\"\\n                            [columnMenu]=\\\"columnMenuOptions\\\"\\n                            [columnMenuTemplate]=\\\"columnMenuTemplate\\\"\\n                            [totalColumnsCount]=\\\"leafColumns.length\\\"\\n                            [detailTemplate]=\\\"detailTemplate\\\">\\n                        </thead>\\n                    </table>\\n                </div><div #header class=\\\"k-grid-header-wrap\\\" role=\\\"presentation\\\" data-scrollable\\n                    [kendoGridResizableContainer]=\\\"lockedLeafColumns.length\\\"\\n                    [lockedWidth]=\\\"lockedWidth + scrollbarWidth + 2\\\">\\n                    <table role=\\\"presentation\\\" [style.width.px]=\\\"nonLockedWidth\\\" [virtualColumns]=\\\"virtualColumns\\\">\\n                        <colgroup kendoGridColGroup\\n                            role=\\\"presentation\\\"\\n                            [columns]=\\\"headerLeafColumns\\\"\\n                            [groups]=\\\"isLocked ? [] : group\\\"\\n                            [detailTemplate]=\\\"detailTemplate\\\">\\n                        </colgroup>\\n                        <thead kendoGridHeader\\n                            [resizable]=\\\"resizable\\\"\\n                            role=\\\"presentation\\\"\\n                            [scrollable]=\\\"true\\\"\\n                            [columns]=\\\"headerColumns\\\"\\n                            [totalColumnLevels]=\\\"totalColumnLevels\\\"\\n                            [sort]=\\\"sort\\\"\\n                            [filter]=\\\"filter\\\"\\n                            [filterable]=\\\"filterable\\\"\\n                            [groupable]=\\\"showGroupPanel\\\"\\n                            [reorderable]=\\\"reorderable\\\"\\n                            [groups]=\\\"isLocked ? [] : group\\\"\\n                            [sortable]=\\\"sortable\\\"\\n                            [columnMenu]=\\\"columnMenuOptions\\\"\\n                            [columnMenuTemplate]=\\\"columnMenuTemplate\\\"\\n                            [lockedColumnsCount]=\\\"lockedLeafColumns.length\\\"\\n                            [totalColumnsCount]=\\\"leafColumns.length\\\"\\n                            [detailTemplate]=\\\"detailTemplate\\\">\\n                        </thead>\\n                    </table>\\n                    <div *ngIf=\\\"virtualColumns\\\" class=\\\"k-width-container\\\" role=\\\"presentation\\\">\\n                        <div [style.width.px]=\\\"columnsContainer.unlockedWidth\\\"></div>\\n                    </div>\\n                </div>\\n            </div>\\n            <kendo-grid-list\\n                [data]=\\\"view\\\"\\n                [rowHeight]=\\\"rowHeight\\\"\\n                [detailRowHeight]=\\\"detailRowHeight\\\"\\n                [total]=\\\"totalCount\\\"\\n                [take]=\\\"pageSize\\\"\\n                [groups]=\\\"group\\\"\\n                [groupable]=\\\"groupable\\\"\\n                [skip]=\\\"skip\\\"\\n                [trackBy]=\\\"trackBy\\\"\\n                [columns]=\\\"columnsContainer\\\"\\n                [selectable]=\\\"selectable\\\"\\n                [filterable]=\\\"filterable\\\"\\n                [detailTemplate]=\\\"detailTemplate\\\"\\n                [noRecordsTemplate]=\\\"noRecordsTemplate\\\"\\n                (pageChange)=\\\"notifyPageChange('list', $event)\\\"\\n                [rowClass]=\\\"rowClass\\\"\\n                [loading]=\\\"loading\\\"\\n                [isVirtual]=\\\"isVirtual\\\"\\n                [virtualColumns]=\\\"virtualColumns\\\"\\n                (scrollBottom)=\\\"notifyScrollBottom()\\\"\\n                (contentScroll)=\\\"contentScroll.emit($event)\\\"\\n                >\\n            </kendo-grid-list>\\n            <div\\n                *ngIf=\\\"showFooter\\\"\\n                class=\\\"k-grid-footer\\\"\\n                [style.padding]=\\\"headerPadding\\\">\\n                <div\\n                    *ngIf=\\\"lockedLeafColumns.length\\\"\\n                    class=\\\"k-grid-footer-locked\\\"\\n                    [style.width.px]=\\\"lockedWidth\\\">\\n                    <table [locked]=\\\"true\\\" [style.width.px]=\\\"lockedWidth\\\">\\n                        <colgroup kendoGridColGroup\\n                            [columns]=\\\"lockedLeafColumns\\\"\\n                            [groups]=\\\"group\\\"\\n                            [detailTemplate]=\\\"detailTemplate\\\">\\n                        </colgroup>\\n                        <tfoot kendoGridFooter\\n                            [scrollable]=\\\"true\\\"\\n                            [groups]=\\\"group\\\"\\n                            [columns]=\\\"lockedLeafColumns\\\"\\n                            [detailTemplate]=\\\"detailTemplate\\\">\\n                        </tfoot>\\n                    </table>\\n                </div><div #footer\\n                    class=\\\"k-grid-footer-wrap\\\" data-scrollable\\n                    [kendoGridResizableContainer]=\\\"lockedLeafColumns.length\\\"\\n                    [lockedWidth]=\\\"lockedWidth + scrollbarWidth + 3\\\">\\n                    <table [style.width.px]=\\\"nonLockedWidth\\\">\\n                        <colgroup kendoGridColGroup\\n                            [columns]=\\\"nonLockedLeafColumns\\\"\\n                            [groups]=\\\"isLocked ? [] : group\\\"\\n                            [detailTemplate]=\\\"detailTemplate\\\">\\n                        </colgroup>\\n                        <tfoot kendoGridFooter\\n                            [scrollable]=\\\"true\\\"\\n                            [groups]=\\\"isLocked ? [] : group\\\"\\n                            [columns]=\\\"nonLockedLeafColumns\\\"\\n                            [lockedColumnsCount]=\\\"lockedLeafColumns.length\\\"\\n                            [detailTemplate]=\\\"detailTemplate\\\">\\n                        </tfoot>\\n                    </table>\\n                </div>\\n            </div>\\n        </ng-template>\\n        <ng-template [ngIf]=\\\"!isScrollable\\\">\\n            <table [style.table-layout]=\\\"resizable ? 'fixed' : null\\\">\\n                <colgroup kendoGridColGroup\\n                    [columns]=\\\"leafColumns\\\"\\n                    [groups]=\\\"group\\\"\\n                    [detailTemplate]=\\\"detailTemplate\\\">\\n                </colgroup>\\n                <thead kendoGridHeader\\n                    *ngIf=\\\"!hideHeader\\\"\\n                    [resizable]=\\\"resizable\\\"\\n                    [scrollable]=\\\"false\\\"\\n                    [columns]=\\\"visibleColumns\\\"\\n                    [totalColumnLevels]=\\\"totalColumnLevels\\\"\\n                    [groups]=\\\"group\\\"\\n                    [groupable]=\\\"showGroupPanel\\\"\\n                    [reorderable]=\\\"reorderable\\\"\\n                    [sort]=\\\"sort\\\"\\n                    [sortable]=\\\"sortable\\\"\\n                    [filter]=\\\"filter\\\"\\n                    [filterable]=\\\"filterable\\\"\\n                    [columnMenu]=\\\"columnMenuOptions\\\"\\n                    [columnMenuTemplate]=\\\"columnMenuTemplate\\\"\\n                    [detailTemplate]=\\\"detailTemplate\\\">\\n                </thead>\\n                <tbody kendoGridTableBody\\n                    [groups]=\\\"group\\\"\\n                    [data]=\\\"view\\\"\\n                    [skip]=\\\"skip\\\"\\n                    [columns]=\\\"leafColumns\\\"\\n                    [selectable]=\\\"selectable\\\"\\n                    [filterable]=\\\"filterable\\\"\\n                    [noRecordsTemplate]=\\\"noRecordsTemplate\\\"\\n                    [detailTemplate]=\\\"detailTemplate\\\"\\n                    [showGroupFooters]=\\\"showGroupFooters\\\"\\n                    [trackBy]=\\\"trackBy\\\"\\n                    [rowClass]=\\\"rowClass\\\">\\n                </tbody>\\n                <tfoot kendoGridFooter\\n                    *ngIf=\\\"showFooter\\\"\\n                    [scrollable]=\\\"false\\\"\\n                    [groups]=\\\"group\\\"\\n                    [columns]=\\\"leafColumns\\\"\\n                    [detailTemplate]=\\\"detailTemplate\\\">\\n                </tfoot>\\n            </table>\\n            <div *ngIf=\\\"loading\\\" kendoGridLoading>\\n            </div>\\n        </ng-template>\\n        </div>\\n        <kendo-pager\\n            *ngIf=\\\"showPager\\\"\\n            [template]=\\\"pagerTemplate\\\"\\n            [pageSize]=\\\"pageSize\\\"\\n            [total]=\\\"view.total\\\"\\n            [skip]=\\\"skip\\\"\\n            [options]=\\\"pageable\\\"\\n            (pageChange)=\\\"notifyPageChange('pager', $event)\\\">\\n        </kendo-pager>\\n        <kendo-grid-toolbar *ngIf=\\\"showBottomToolbar\\\" position=\\\"bottom\\\"></kendo-grid-toolbar>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    GridComponent.ctorParameters = function () { return [\n        { type: BrowserSupportService },\n        { type: SelectionService },\n        { type: ElementRef },\n        { type: GroupInfoService },\n        { type: GroupsService },\n        { type: ChangeNotificationService },\n        { type: DetailsService },\n        { type: EditService },\n        { type: FilterService },\n        { type: PDFService },\n        { type: ResponsiveService },\n        { type: Renderer2 },\n        { type: ExcelService },\n        { type: NgZone },\n        { type: ScrollSyncService },\n        { type: DomEventsService },\n        { type: ColumnResizingService },\n        { type: ChangeDetectorRef },\n        { type: ColumnReorderService },\n        { type: ColumnInfoService },\n        { type: NavigationService },\n        { type: SortService },\n        { type: ScrollRequestService },\n        { type: LocalizationService }\n    ]; };\n    GridComponent.propDecorators = {\n        data: [{ type: Input }],\n        pageSize: [{ type: Input }],\n        height: [{ type: Input }],\n        rowHeight: [{ type: Input }],\n        detailRowHeight: [{ type: Input }],\n        skip: [{ type: Input }],\n        scrollable: [{ type: Input }],\n        selectable: [{ type: Input }],\n        sort: [{ type: Input }],\n        trackBy: [{ type: Input }],\n        filter: [{ type: Input }],\n        group: [{ type: Input }],\n        virtualColumns: [{ type: Input }],\n        filterable: [{ type: Input }],\n        sortable: [{ type: Input }],\n        pageable: [{ type: Input }],\n        groupable: [{ type: Input }],\n        navigable: [{ type: Input }],\n        navigatable: [{ type: Input }],\n        autoSize: [{ type: Input }],\n        rowClass: [{ type: Input }],\n        rowSelected: [{ type: Input }],\n        resizable: [{ type: Input }],\n        reorderable: [{ type: Input }],\n        loading: [{ type: Input }],\n        columnMenu: [{ type: Input }],\n        hideHeader: [{ type: Input }],\n        filterChange: [{ type: Output }],\n        pageChange: [{ type: Output }],\n        groupChange: [{ type: Output }],\n        sortChange: [{ type: Output }],\n        selectionChange: [{ type: Output }],\n        dataStateChange: [{ type: Output }],\n        groupExpand: [{ type: Output }],\n        groupCollapse: [{ type: Output }],\n        detailExpand: [{ type: Output }],\n        detailCollapse: [{ type: Output }],\n        edit: [{ type: Output }],\n        cancel: [{ type: Output }],\n        save: [{ type: Output }],\n        remove: [{ type: Output }],\n        add: [{ type: Output }],\n        cellClose: [{ type: Output }],\n        cellClick: [{ type: Output }],\n        pdfExport: [{ type: Output }],\n        excelExport: [{ type: Output }],\n        columnResize: [{ type: Output }],\n        columnReorder: [{ type: Output }],\n        columnVisibilityChange: [{ type: Output }],\n        columnLockedChange: [{ type: Output }],\n        scrollBottom: [{ type: Output }],\n        contentScroll: [{ type: Output }],\n        columns: [{ type: ContentChildren, args: [ColumnBase$1,] }],\n        dir: [{ type: HostBinding, args: ['attr.dir',] }],\n        hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-grid',] }],\n        lockedClasses: [{ type: HostBinding, args: ['class.k-grid-lockedcolumns',] }],\n        virtualClasses: [{ type: HostBinding, args: ['class.k-grid-virtual',] }],\n        noScrollbarClass: [{ type: HostBinding, args: ['class.k-grid-no-scrollbar',] }],\n        detailTemplateChildren: [{ type: ContentChildren, args: [DetailTemplateDirective,] }],\n        noRecordsTemplateChildren: [{ type: ContentChildren, args: [NoRecordsTemplateDirective,] }],\n        pagerTemplateChildren: [{ type: ContentChildren, args: [PagerTemplateDirective,] }],\n        toolbarTemplateChildren: [{ type: ContentChildren, args: [ToolbarTemplateDirective,] }],\n        columnMenuTemplates: [{ type: ContentChildren, args: [ColumnMenuTemplateDirective,] }],\n        lockedHeader: [{ type: ViewChild, args: [\"lockedHeader\",] }],\n        header: [{ type: ViewChild, args: [\"header\",] }],\n        footer: [{ type: ViewChildren, args: [\"footer\",] }],\n        ariaRoot: [{ type: ViewChild, args: ['ariaRoot',] }]\n    };\n    return GridComponent;\n}());\n\n/**\n * @hidden\n */\nvar update = function (arr, idx, value) { return (arr.slice(0, idx + 1).concat((arr.slice(idx + 1).map(function (x) { return x + value; })))); };\n/**\n * @hidden\n */\nvar RowHeightService = /** @class */ (function () {\n    function RowHeightService(total, rowHeight, detailRowHeight) {\n        if (total === void 0) { total = 0; }\n        this.total = total;\n        this.rowHeight = rowHeight;\n        this.detailRowHeight = detailRowHeight;\n        this.offsets = [];\n        this.heights = [];\n        var agg = 0;\n        for (var idx = 0; idx < total; idx++) {\n            this.offsets.push(agg);\n            agg += rowHeight;\n            this.heights.push(rowHeight);\n        }\n    }\n    RowHeightService.prototype.height = function (rowIndex) {\n        return this.heights[rowIndex];\n    };\n    RowHeightService.prototype.expandDetail = function (rowIndex) {\n        if (this.height(rowIndex) === this.rowHeight) {\n            this.updateRowHeight(rowIndex, this.detailRowHeight);\n        }\n    };\n    RowHeightService.prototype.collapseDetail = function (rowIndex) {\n        if (this.height(rowIndex) > this.rowHeight) {\n            this.updateRowHeight(rowIndex, this.detailRowHeight * -1);\n        }\n    };\n    RowHeightService.prototype.isExpanded = function (rowIndex) {\n        return this.height(rowIndex) > this.rowHeight;\n    };\n    RowHeightService.prototype.index = function (position) {\n        if (position < 0) {\n            return undefined;\n        }\n        var result = this.offsets.reduce(function (prev, current, idx) {\n            if (prev !== undefined) {\n                return prev;\n            }\n            else if (current === position) {\n                return idx;\n            }\n            else if (current > position) {\n                return idx - 1;\n            }\n            return undefined;\n        }, undefined); // tslint:disable-line:align\n        return result === undefined ? this.total - 1 : result;\n    };\n    RowHeightService.prototype.offset = function (rowIndex) {\n        return this.offsets[rowIndex];\n    };\n    RowHeightService.prototype.totalHeight = function () {\n        return this.heights.reduce(function (prev, curr) { return prev + curr; }, 0);\n    };\n    RowHeightService.prototype.updateRowHeight = function (rowIndex, value) {\n        if (this.total > 0) {\n            this.heights[rowIndex] += value;\n            this.offsets = update(this.offsets, rowIndex, value);\n        }\n    };\n    return RowHeightService;\n}());\n\n/**\n * @hidden\n */\nvar ScrollAction = /** @class */ (function () {\n    function ScrollAction(offset) {\n        this.offset = offset;\n    }\n    return ScrollAction;\n}());\n/**\n * @hidden\n */\nvar PageAction = /** @class */ (function () {\n    function PageAction(skip, take$$1) {\n        this.skip = skip;\n        this.take = take$$1;\n    }\n    return PageAction;\n}());\n/**\n * @hidden\n */\nvar ScrollBottomAction = /** @class */ (function () {\n    function ScrollBottomAction() {\n    }\n    return ScrollBottomAction;\n}());\nvar SCROLL_BOTTOM_THRESHOLD = 1;\n/**\n * @hidden\n */\nvar ScrollerService = /** @class */ (function () {\n    function ScrollerService(scrollObservable) {\n        this.scrollObservable = scrollObservable;\n        this.firstLoaded = 0;\n    }\n    ScrollerService.prototype.create = function (rowHeightService, skip, take$$1, total) {\n        var _this = this;\n        this.rowHeightService = rowHeightService;\n        this.firstLoaded = skip;\n        this.lastLoaded = skip + take$$1;\n        this.take = take$$1;\n        this.total = total;\n        this.lastScrollTop = 0;\n        var subject = new BehaviorSubject(new ScrollAction(this.rowHeightService.offset(skip)));\n        this.subscription = Observable.create(function (observer) {\n            _this.unsubscribe();\n            _this.scrollSubscription = _this.scrollObservable.subscribe(function (x) { return _this.onScroll(x, observer); });\n        }).subscribe(function (x) { return subject.next(x); });\n        return subject;\n    };\n    ScrollerService.prototype.destroy = function () {\n        this.unsubscribe();\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    ScrollerService.prototype.onScroll = function (_a, observer) {\n        var scrollTop = _a.scrollTop, offsetHeight = _a.offsetHeight, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;\n        if (this.lastScrollTop === scrollTop) {\n            return;\n        }\n        var up = this.lastScrollTop >= scrollTop;\n        this.lastScrollTop = scrollTop;\n        var firstItemIndex = this.rowHeightService.index(scrollTop);\n        var firstItemOffset = this.rowHeightService.offset(firstItemIndex);\n        var lastItemIndex = this.rowHeightService.index(scrollTop + offsetHeight);\n        if (!up) {\n            if (lastItemIndex >= this.lastLoaded && this.lastLoaded < this.total) {\n                var overflow = (firstItemIndex + this.take) - this.total;\n                if (overflow > 0) {\n                    firstItemIndex = firstItemIndex - overflow;\n                    firstItemOffset = this.rowHeightService.offset(firstItemIndex);\n                }\n                this.firstLoaded = firstItemIndex;\n                observer.next(new ScrollAction(firstItemOffset));\n                var nextTake = this.firstLoaded + this.take;\n                this.lastLoaded = Math.min(nextTake, this.total);\n                nextTake = nextTake > this.total ? this.total - this.firstLoaded : this.take;\n                observer.next(new PageAction(this.firstLoaded, this.take));\n            }\n            else {\n                var atBottom = scrollHeight - clientHeight - scrollTop < SCROLL_BOTTOM_THRESHOLD;\n                if (atBottom) {\n                    observer.next(new ScrollBottomAction());\n                }\n            }\n        }\n        if (up && firstItemIndex < this.firstLoaded) {\n            var nonVisibleBuffer = Math.floor(this.take * 0.3);\n            this.firstLoaded = Math.max(firstItemIndex - nonVisibleBuffer, 0);\n            observer.next(new ScrollAction(this.rowHeightService.offset(this.firstLoaded)));\n            this.lastLoaded = Math.min(this.firstLoaded + this.take, this.total);\n            observer.next(new PageAction(this.firstLoaded, this.take));\n        }\n    };\n    ScrollerService.prototype.unsubscribe = function () {\n        if (this.scrollSubscription) {\n            this.scrollSubscription.unsubscribe();\n            this.scrollSubscription = undefined;\n        }\n    };\n    return ScrollerService;\n}());\n\n/**\n * @hidden\n */\nvar NON_DATA_CELL_CLASSES = 'k-hierarchy-cell k-detail-cell k-group-cell';\n/**\n * @hidden\n */\nvar NON_DATA_ROW_CLASSES = 'k-grouping-row k-group-footer k-detail-row k-grid-norecords';\n/**\n * @hidden\n */\nvar IGNORE_TARGET_CLASSSES = 'k-icon';\n/**\n * @hidden\n */\nvar IGNORE_CONTAINER_CLASSES = 'k-widget k-grid-ignore-click';\n\nvar elementAt = function (index, elements, elementOffset) {\n    for (var idx = 0, elementIdx = 0; idx < elements.length; idx++) {\n        var offset = elementOffset(elements[idx]);\n        if (elementIdx <= index && index <= elementIdx + offset - 1) {\n            return elements[idx];\n        }\n        elementIdx += offset;\n    }\n};\nvar rowAt = function (index, rows) {\n    return elementAt(index, rows, function (row) { return row.hasAttribute('data-kendo-grid-item-index') ? 1 : 0; });\n};\nvar cellAt = function (index, cells) {\n    return elementAt(index, cells, function (cell) { return !hasClasses(cell, NON_DATA_CELL_CLASSES) ? parseInt(cell.getAttribute('colSpan'), 10) || 1 : 0; });\n};\nvar EMPTY_OBJECT = {};\n/**\n * @hidden\n */\nvar SCROLLER_FACTORY_TOKEN = new InjectionToken('grid-scroll-service-factory');\n/**\n * @hidden\n */\nfunction DEFAULT_SCROLLER_FACTORY(observable) {\n    return new ScrollerService(observable);\n}\nvar wheelDeltaY = function (e) {\n    var deltaY = e.wheelDeltaY;\n    if (e.wheelDelta && (deltaY === undefined || deltaY)) {\n        return e.wheelDelta;\n    }\n    else if (e.detail && e.axis === e.VERTICAL_AXIS) {\n        return (-e.detail) * 10;\n    }\n    return 0;\n};\nvar preventLockedScroll = function (args, element) {\n    var delta = wheelDeltaY(args);\n    var scrollTop = element.scrollTop;\n    var allowScroll = (scrollTop === 0 && 0 < delta) || (element.scrollHeight <= element.offsetHeight + scrollTop && delta < 0);\n    if (!allowScroll) {\n        event.preventDefault();\n    }\n};\nvar translateY = function (renderer, value) { return function (el) { return renderer.setStyle(el, \"transform\", \"translateY(\" + value + \"px)\"); }; };\nvar maybeNativeElement = function (el) { return el ? el.nativeElement : null; };\nvar hasScrollbar = function (el, parent) { return el.nativeElement.offsetWidth > parent.nativeElement.clientWidth; };\nvar setHeight$1 = function (renderer) { return function (_a) {\n    var el = _a.el, height = _a.height;\n    return renderer.setStyle(el, \"height\", height + \"px\");\n}; };\nvar bufferSize = 1;\n/**\n * @hidden\n */\nvar ListComponent = /** @class */ (function () {\n    function ListComponent(scrollerFactory, detailsService, changeNotification, suspendService, groupsService, ngZone, renderer, scrollSyncService, resizeService, editService, supportService, navigationService, scrollRequestService, localization, columnResizingService, changeDetector, pdfService, columnInfo) {\n        var _this = this;\n        this.changeNotification = changeNotification;\n        this.suspendService = suspendService;\n        this.groupsService = groupsService;\n        this.ngZone = ngZone;\n        this.renderer = renderer;\n        this.scrollSyncService = scrollSyncService;\n        this.resizeService = resizeService;\n        this.editService = editService;\n        this.supportService = supportService;\n        this.navigationService = navigationService;\n        this.localization = localization;\n        this.columnResizingService = columnResizingService;\n        this.changeDetector = changeDetector;\n        this.pdfService = pdfService;\n        this.columnInfo = columnInfo;\n        this.groups = [];\n        this.skip = 0;\n        this.columns = new ColumnsContainer(function () { return []; });\n        this.selectable = false;\n        this.groupable = false;\n        this.trackBy = defaultTrackBy;\n        this.contentScroll = new EventEmitter();\n        this.pageChange = new EventEmitter();\n        this.scrollBottom = new EventEmitter();\n        this.columnsStartIdx = 0;\n        this.resizeSensors = new QueryList();\n        this.dispatcher = new Subject();\n        this.containerScrollTop = 0;\n        this.scrollLeft = 0;\n        this.rtl = false;\n        this.scroller = scrollerFactory(this.dispatcher);\n        this.subscriptions =\n            detailsService.changes.subscribe(function (x) { return _this.detailExpand(x); }).add(scrollRequestService.requests.subscribe(function (x) { return _this.scrollTo(x); }));\n    }\n    Object.defineProperty(ListComponent.prototype, \"hostClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"hostRole\", {\n        get: function () {\n            return 'presentation';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"showFooter\", {\n        get: function () {\n            return this.groupable && this.groupable.showFooter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"totalWidth\", {\n        get: function () {\n            if (this.virtualColumns && this.columns.unlockedWidth) {\n                return this.columns.unlockedWidth;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"lockedLeafColumns\", {\n        get: function () {\n            return this.columns.lockedLeafColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"nonLockedLeafColumns\", {\n        get: function () {\n            return this.columns.nonLockedLeafColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"nonLockedColumnsToRender\", {\n        get: function () {\n            if (this.virtualColumns && !this.pdfService.exporting) {\n                return this.viewportColumns;\n            }\n            return this.nonLockedLeafColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"leafColumns\", {\n        get: function () {\n            return this.columns.leafColumnsToRender;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"lockedWidth\", {\n        get: function () {\n            var groupCellsWidth = this.groups.length * GROUP_CELL_WIDTH;\n            return expandColumns(this.lockedLeafColumns.toArray()).reduce(function (prev, curr) { return prev + (curr.width || 0); }, groupCellsWidth);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"nonLockedWidth\", {\n        get: function () {\n            if ((!this.rtl && this.lockedLeafColumns.length) || this.virtualColumns) {\n                return sumColumnWidths(expandColumns(this.nonLockedColumnsToRender.toArray()));\n            }\n            return undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"isLocked\", {\n        get: function () {\n            return this.lockedLeafColumns.length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ListComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.init();\n        this.subscriptions.add(this.ngZone.runOutsideAngular(this.handleRowSync.bind(this)));\n        this.subscriptions.add(this.ngZone.runOutsideAngular(this.handleRowNavigationLocked.bind(this)));\n        this.subscriptions.add(merge(this.columns.changes, this.resizeService.changes).subscribe(function () {\n            if (_this.virtualColumns) {\n                _this.ngZone.run(function () {\n                    _this.updateViewportColumns();\n                    _this.changeDetector.markForCheck();\n                });\n            }\n        }));\n        this.subscriptions.add(this.localization.changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            return _this.rtl = rtl;\n        }));\n    };\n    ListComponent.prototype.ngOnChanges = function (changes) {\n        if (isChanged(\"skip\", changes) && !this.rebind) {\n            this.skipScroll = true;\n            this.container.nativeElement.scrollTop = this.rowHeightService.offset(this.skip);\n        }\n        if (anyChanged([\"total\", \"take\"], changes)) {\n            this.init();\n        }\n        this.rebind = false;\n    };\n    ListComponent.prototype.ngDoCheck = function () {\n        if (this.virtualColumns && (!this.viewportColumns || this.viewportWidthChange())) {\n            this.updateViewportColumns();\n        }\n    };\n    ListComponent.prototype.ngAfterViewInit = function () {\n        if (this.skip && this.isVirtual) {\n            this.container.nativeElement.scrollTop = this.rowHeightService.offset(this.skip);\n        }\n        this.resetNavigationViewport();\n        this.attachContainerScroll();\n        this.initResizeService();\n    };\n    ListComponent.prototype.ngAfterViewChecked = function () {\n        var isLocked = this.isLocked;\n        if (isLocked && !this.hasLockedContainer) {\n            this.syncRowsHeight();\n        }\n        this.hasLockedContainer = isLocked;\n    };\n    ListComponent.prototype.syncRowsHeight = function () {\n        if (this.lockedContainer) {\n            syncRowsHeight(this.lockedTable.nativeElement, this.table.nativeElement);\n        }\n    };\n    ListComponent.prototype.ngOnDestroy = function () {\n        if (this.subscriptions) {\n            this.subscriptions.unsubscribe();\n        }\n        if (this.resizeService) {\n            this.resizeService.destroy();\n        }\n        this.cleanupScroller();\n    };\n    ListComponent.prototype.init = function () {\n        if (this.suspendService.scroll) {\n            return;\n        }\n        this.rowHeightService = new RowHeightService(this.total, this.rowHeight, this.detailRowHeight);\n        this.totalHeight = this.rowHeightService.totalHeight();\n        if (!isUniversal()) {\n            this.ngZone.runOutsideAngular(this.createScroller.bind(this));\n        }\n    };\n    ListComponent.prototype.lockedScroll = function () {\n        if (!this.suspendService.scroll) {\n            var lockedScrollTop = this.lockedContainer.nativeElement.scrollTop;\n            if (lockedScrollTop !== this.containerScrollTop) {\n                this.container.nativeElement.scrollTop = this.containerScrollTop = lockedScrollTop;\n            }\n        }\n    };\n    ListComponent.prototype.lockedMousewheel = function (args) {\n        if (!args.ctrlKey) {\n            preventLockedScroll(args, this.container.nativeElement);\n            var scrollDelta = wheelDeltaY(args);\n            this.container.nativeElement.scrollTop -= scrollDelta;\n        }\n    };\n    ListComponent.prototype.lockedKeydown = function (args) {\n        if (args.keyCode === Keys.PageDown || args.keyCode === Keys.PageUp) {\n            var dir = args.keyCode === Keys.PageDown ? 1 : -1;\n            var element = this.container.nativeElement;\n            element.scrollTop += element.offsetHeight * dir * 0.8;\n            args.preventDefault();\n        }\n    };\n    ListComponent.prototype.detailExpand = function (_a) {\n        var index = _a.index, expand = _a.expand;\n        if (expand) {\n            this.rowHeightService.expandDetail(index);\n        }\n        else {\n            this.rowHeightService.collapseDetail(index);\n        }\n        this.totalHeight = this.rowHeightService.totalHeight();\n        this.resetNavigationViewport();\n    };\n    ListComponent.prototype.attachContainerScroll = function () {\n        var _this = this;\n        if (isUniversal()) {\n            return;\n        }\n        this.ngZone.runOutsideAngular(function () {\n            _this.subscriptions.add(fromEvent(_this.container.nativeElement, 'scroll').pipe(map(function (event) { return event.target; }), filter(function () { return !_this.suspendService.scroll; }), tap(function (target) {\n                _this.onContainerScroll(target);\n                _this.resetNavigationViewport();\n                if (_this.virtualColumns) {\n                    _this.handleColumnScroll();\n                }\n                var rowViewport = _this.navigationService.viewport || EMPTY_OBJECT;\n                var columnViewport = _this.navigationService.columnViewport || EMPTY_OBJECT;\n                _this.contentScroll.emit({\n                    scrollLeft: target.scrollLeft,\n                    scrollTop: target.scrollTop,\n                    startRow: rowViewport.firstItemIndex,\n                    endRow: rowViewport.lastItemIndex,\n                    startColumn: columnViewport.firstItemIndex,\n                    endColumn: columnViewport.lastItemIndex\n                });\n            })).subscribe(_this.dispatcher));\n        });\n        this.scrollSyncService.registerEmitter(this.container.nativeElement, \"body\");\n    };\n    ListComponent.prototype.createScroller = function () {\n        var _this = this;\n        this.cleanupScroller();\n        var observable = this.scroller\n            .create(this.rowHeightService, this.skip, this.take, this.total);\n        this.skipScroll = false;\n        this.scrollerSubscription = observable.pipe(filter(function (x) { return x instanceof PageAction; }), filter(function () {\n            var temp = _this.skipScroll;\n            _this.skipScroll = false;\n            return !temp;\n        }), tap(function () { return _this.rebind = true; }))\n            .subscribe(function (x) { return _this.ngZone.run(function () { return _this.pageChange.emit(x); }); });\n        this.scrollerSubscription.add(observable.pipe(filter(function (x) { return x instanceof ScrollAction; }))\n            .subscribe(this.scroll.bind(this)));\n        this.scrollerSubscription.add(observable.pipe(filter(function (x) { return x instanceof ScrollBottomAction; }))\n            .subscribe(function () { return _this.scrollBottom.emit(); }));\n    };\n    ListComponent.prototype.scroll = function (_a) {\n        var _b = _a.offset, offset = _b === void 0 ? 0 : _b;\n        if (this.isVirtual) {\n            [\n                maybeNativeElement(this.table),\n                maybeNativeElement(this.lockedTable)\n            ].filter(isPresent).forEach(translateY(this.renderer, offset));\n        }\n        this.resetNavigationViewport();\n    };\n    ListComponent.prototype.onContainerScroll = function (_a) {\n        var scrollTop = _a.scrollTop;\n        this.containerScrollTop = scrollTop;\n        if (this.lockedContainer) {\n            this.lockedContainer.nativeElement.scrollTop = scrollTop;\n        }\n    };\n    ListComponent.prototype.handleRowSync = function () {\n        var _this = this;\n        var isLocked = function () { return isPresent(_this.lockedContainer); };\n        var onStable = function () { return _this.ngZone.onStable.asObservable().pipe(take(1)); };\n        return merge(this.changeNotification.changes, this.groupsService.changes\n            .pipe(filter(isLocked), switchMapTo(onStable())), this.editService.changed, this.resizeService.changes, this.columnResizingService.changes\n            .pipe(filter(function (change) { return change.type === 'end'; })), this.supportService.changes)\n            .pipe(tap(function () { return _this.resetNavigationViewport(); }), filter(isLocked))\n            .subscribe(function () {\n            var scrollTop = _this.container.nativeElement.scrollTop;\n            var scrollLeft = _this.container.nativeElement.scrollLeft;\n            _this.syncRowsHeight();\n            _this.syncContainerHeight();\n            _this.lockedContainer.nativeElement.scrollTop = _this.container.nativeElement.scrollTop = scrollTop;\n            // fixes scroll left position in IE when editing\n            _this.container.nativeElement.scrollLeft = scrollLeft;\n            _this.resizeSensors.forEach(function (sensor) { return sensor.acceptSize(); });\n        });\n    };\n    ListComponent.prototype.handleRowNavigationLocked = function () {\n        var _this = this;\n        return this.navigationService.changes.pipe(filter(function () { return isPresent(_this.lockedContainer); }), delay(10)).subscribe(function (args) {\n            if (_this.lockedLeafColumns.length <= args.prevColIndex && args.colIndex < _this.lockedLeafColumns.length) {\n                var cell = _this.navigationService.activeCell;\n                if (cell && cell.colIndex + cell.colSpan < args.prevColIndex) {\n                    _this.container.nativeElement.scrollLeft = 0;\n                }\n            }\n        });\n    };\n    ListComponent.prototype.scrollToVirtualRow = function (itemIndex) {\n        if (isPresent(this.detailTemplate)) {\n            itemIndex = Math.floor(itemIndex / 2);\n        }\n        var offset = this.rowHeightService.offset(itemIndex);\n        this.container.nativeElement.scrollTop = offset;\n        this.resetNavigationViewport();\n    };\n    ListComponent.prototype.scrollTo = function (_a) {\n        var row = _a.row, column = _a.column;\n        if (isNumber(row)) {\n            if (this.isVirtual) {\n                this.scrollToVirtualRow(row);\n            }\n            else {\n                var element = rowAt(row, this.table.nativeElement.rows);\n                if (element) {\n                    this.container.nativeElement.scrollTop = element.offsetTop;\n                }\n            }\n        }\n        if (isNumber(column)) {\n            column -= this.lockedLeafColumns.length;\n            if (this.virtualColumns) {\n                var columns = this.columns.leafColumnsToRender;\n                var offset = 0;\n                for (var idx = 0; idx < column; idx++) {\n                    offset += columns[idx].width || 0;\n                }\n                var startOffset = this.lockedLeafColumns.length ? 0 : this.groups.length * GROUP_CELL_WIDTH + (this.detailTemplate && column > 0 ? GROUP_CELL_WIDTH : 0);\n                this.container.nativeElement.scrollLeft = this.normalizeScrollLeft(offset + startOffset);\n            }\n            else if (column === 0 && this.detailTemplate) {\n                this.container.nativeElement.scrollLeft = this.normalizeScrollLeft(0);\n            }\n            else {\n                var firstRow = rowAt(0, this.table.nativeElement.rows);\n                if (firstRow) {\n                    var element = cellAt(column, firstRow.cells);\n                    if (element) {\n                        this.container.nativeElement.scrollLeft = this.elementScrollLeft(element);\n                    }\n                }\n            }\n        }\n    };\n    ListComponent.prototype.resetNavigationViewport = function () {\n        if (!this.container || !this.navigationService.enabled ||\n            !this.navigationService.needsViewport() || this.data.length === 0) {\n            return;\n        }\n        var _a = this.container.nativeElement, scrollTop = _a.scrollTop, offsetHeight = _a.offsetHeight;\n        var scrollBottom = scrollTop + offsetHeight;\n        var firstItemIndex = this.rowHeightService.index(scrollTop);\n        var lastItemIndex = this.rowHeightService.index(scrollBottom);\n        var lastItemOffset = this.rowHeightService.offset(lastItemIndex);\n        var lastItemOverflows = lastItemOffset + this.rowHeight > scrollBottom;\n        if (lastItemIndex > 0 && lastItemOverflows) {\n            lastItemIndex--;\n        }\n        var viewportStart = firstItemIndex;\n        var viewportEnd = lastItemIndex;\n        if (isPresent(this.detailTemplate)) {\n            viewportStart *= 2;\n            viewportEnd *= 2;\n            var firstItemHeight = this.rowHeightService.offset(firstItemIndex);\n            if (firstItemHeight + this.rowHeight < scrollTop) {\n                viewportStart++;\n            }\n            var lastItemHeight = this.rowHeightService.height(lastItemIndex);\n            var lastItemExpanded = this.rowHeightService.isExpanded(lastItemIndex);\n            var lastItemDetailOverflows = lastItemOffset + lastItemHeight > scrollBottom;\n            if (lastItemExpanded && !lastItemDetailOverflows) {\n                viewportEnd++;\n            }\n        }\n        this.navigationService.setViewport(viewportStart, viewportEnd);\n    };\n    ListComponent.prototype.cleanupScroller = function () {\n        if (this.scrollerSubscription) {\n            this.scrollerSubscription.unsubscribe();\n        }\n        if (this.scroller) {\n            this.scroller.destroy();\n        }\n    };\n    ListComponent.prototype.initResizeService = function () {\n        this.resizeService.connect(merge.apply(void 0, this.resizeSensors.map(function (sensor) { return sensor.resize; })));\n    };\n    ListComponent.prototype.syncContainerHeight = function () {\n        var _this = this;\n        [maybeNativeElement(this.lockedContainer)]\n            .filter(isPresent)\n            .map(function (el) {\n            el.style.height = '';\n            var height = _this.container.nativeElement.offsetHeight;\n            if (hasScrollbar(_this.table, _this.container)) {\n                height -= _this.supportService.scrollbarWidth;\n            }\n            return { el: el, height: height };\n        })\n            .forEach(setHeight$1(this.renderer));\n    };\n    ListComponent.prototype.updateViewportColumns = function (range) {\n        var columns = this.columns.nonLockedLeafColumns.toArray();\n        var _a = range || this.calculateViewportColumns(), startIdx = _a.startIdx, endIdx = _a.endIdx, offset = _a.offset;\n        var start = Math.max(0, startIdx - bufferSize);\n        var end = Math.min(endIdx + bufferSize, columns.length - 1);\n        if (start < startIdx) {\n            for (var idx = startIdx - 1; idx >= start; idx--) {\n                offset -= columns[idx].width;\n            }\n        }\n        var currentColumns = columns.slice(start, end + 1);\n        this.viewportColumnsWidth = currentColumns.reduce(function (total, column) { return total + column.width; }, 0);\n        if (start > 0) {\n            var offsetColumn = new ColumnBase$1();\n            offsetColumn.width = offset;\n            currentColumns.unshift(offsetColumn);\n        }\n        this.viewportColumns = new QueryList();\n        this.viewportColumns.reset(currentColumns);\n        this.columnsStartIdx = start;\n        this.columnsEndIdx = end;\n        this.columnInfo.columnRangeChange.emit({ start: start, end: end, offset: offset });\n        if (!range) {\n            this.updateColumnViewport(startIdx, endIdx);\n        }\n    };\n    ListComponent.prototype.handleColumnScroll = function () {\n        var _this = this;\n        var container = this.container.nativeElement;\n        var scrollLeft = container.scrollLeft;\n        if (this.scrollLeft !== scrollLeft) {\n            this.scrollLeft = scrollLeft;\n            var range_1 = this.calculateViewportColumns();\n            this.updateColumnViewport(range_1.startIdx, range_1.endIdx);\n            if (range_1.startIdx < this.columnsStartIdx || this.columnsEndIdx < range_1.endIdx) {\n                cancelAnimationFrame(this.columnUpdateFrame);\n                this.columnUpdateFrame = requestAnimationFrame(function () {\n                    _this.ngZone.run(function () {\n                        _this.updateViewportColumns(range_1);\n                        _this.changeDetector.markForCheck();\n                    });\n                });\n            }\n        }\n    };\n    ListComponent.prototype.updateColumnViewport = function (startIdx, endIdx) {\n        var lockedCount = this.lockedLeafColumns.length;\n        var leafColumns$$1 = this.nonLockedLeafColumns.toArray();\n        var viewportStart = lockedCount + startIdx + (this.detailTemplate && startIdx > 0 ? 1 : 0);\n        var viewportEnd = lockedCount + endIdx + (this.detailTemplate ? 1 : 0);\n        for (var idx = 0; idx < leafColumns$$1.length; idx++) {\n            var column = leafColumns$$1[idx];\n            if (column.isSpanColumn) {\n                viewportEnd += column.childColumns.length;\n            }\n        }\n        this.navigationService.setColumnViewport(viewportStart, viewportEnd);\n    };\n    ListComponent.prototype.calculateViewportColumns = function () {\n        var _a = this.container.nativeElement, scrollLeft = _a.scrollLeft, clientWidth = _a.clientWidth;\n        var columns = this.columns.nonLockedLeafColumns.toArray();\n        var normalizedScrollLeft = this.normalizeScrollLeft(scrollLeft);\n        var viewportEnd = normalizedScrollLeft + clientWidth;\n        var startIdx;\n        var endIdx = 0;\n        var current = 0;\n        var offset = 0;\n        var idx;\n        for (idx = 0; idx < columns.length; idx++) {\n            var column = columns[idx];\n            current += column.width || 0;\n            if (startIdx === undefined && current > normalizedScrollLeft) {\n                startIdx = idx;\n                offset = current - (column.width || 0);\n            }\n            if (current >= viewportEnd) {\n                endIdx = idx;\n                break;\n            }\n        }\n        if (!endIdx && idx > 0) {\n            endIdx = columns.length - 1;\n        }\n        return { startIdx: startIdx, endIdx: endIdx, offset: offset };\n    };\n    ListComponent.prototype.viewportWidthChange = function () {\n        var currentWidth = this.viewportColumns.toArray().reduce(function (total, column) { return total + column.width; }, 0);\n        return currentWidth !== this.viewportColumnsWidth;\n    };\n    ListComponent.prototype.normalizeScrollLeft = function (position) {\n        return this.rtl ? rtlScrollPosition(position, this.container.nativeElement, this.supportService.rtlScrollLeft) : position;\n    };\n    ListComponent.prototype.elementScrollLeft = function (element) {\n        if (this.rtl) {\n            return this.normalizeScrollLeft(this.container.nativeElement.scrollWidth - element.offsetLeft - element.offsetWidth);\n        }\n        return element.offsetLeft;\n    };\n    ListComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: SCROLLER_FACTORY_TOKEN,\n                            useValue: DEFAULT_SCROLLER_FACTORY\n                        }\n                    ],\n                    selector: 'kendo-grid-list',\n                    template: \"\\n    <div #lockedContainer class=\\\"k-grid-content-locked\\\" role=\\\"presentation\\\"\\n        *ngIf=\\\"isLocked\\\" [style.width.px]=\\\"lockedWidth\\\"\\n        [kendoEventsOutsideAngular]=\\\"{\\n            keydown: lockedKeydown,\\n            scroll: lockedScroll,\\n            mousewheel: lockedMousewheel,\\n            DOMMouseScroll: lockedMousewheel\\n        }\\\"\\n        [scope]=\\\"this\\\"\\n        >\\n        <div role=\\\"presentation\\\" class=\\\"k-grid-table-wrap\\\">\\n            <table [locked]=\\\"true\\\" #lockedTable class=\\\"k-grid-table\\\" role=\\\"presentation\\\" [style.width.px]=\\\"lockedWidth\\\">\\n                <colgroup kendoGridColGroup\\n                    role=\\\"presentation\\\"\\n                    [groups]=\\\"groups\\\"\\n                    [columns]=\\\"lockedLeafColumns\\\"\\n                    [detailTemplate]=\\\"detailTemplate\\\">\\n                </colgroup>\\n                <tbody kendoGridTableBody\\n                    role=\\\"presentation\\\"\\n                    [groups]=\\\"groups\\\"\\n                    [isLocked]=\\\"true\\\"\\n                    [data]=\\\"data\\\"\\n                    [noRecordsText]=\\\"''\\\"\\n                    [columns]=\\\"lockedLeafColumns\\\"\\n                    [totalColumnsCount]=\\\"leafColumns.length\\\"\\n                    [detailTemplate]=\\\"detailTemplate\\\"\\n                    [showGroupFooters]=\\\"showFooter\\\"\\n                    [skip]=\\\"skip\\\"\\n                    [selectable]=\\\"selectable\\\"\\n                    [trackBy]=\\\"trackBy\\\"\\n                    [filterable]=\\\"filterable\\\"\\n                    [rowClass]=\\\"rowClass\\\">\\n                </tbody>\\n            </table>\\n            <kendo-resize-sensor></kendo-resize-sensor>\\n        </div>\\n        <div class=\\\"k-height-container\\\" role=\\\"presentation\\\">\\n            <div [style.height.px]=\\\"totalHeight\\\"></div>\\n        </div>\\n    </div><div #container\\n               class=\\\"k-grid-content k-virtual-content\\\"\\n               role=\\\"presentation\\\" tabindex=\\\"-1\\\"\\n               [kendoGridResizableContainer]=\\\"lockedLeafColumns.length\\\"\\n               [lockedWidth]=\\\"lockedWidth + 1\\\">\\n        <div role=\\\"presentation\\\" class=\\\"k-grid-table-wrap\\\">\\n            <table [style.width.px]=\\\"nonLockedWidth\\\" #table [virtualColumns]=\\\"virtualColumns\\\"\\n              class=\\\"k-grid-table\\\" role=\\\"presentation\\\">\\n                <colgroup kendoGridColGroup\\n                    role=\\\"presentation\\\"\\n                    [groups]=\\\"isLocked ? [] : groups\\\"\\n                    [columns]=\\\"nonLockedColumnsToRender\\\"\\n                    [detailTemplate]=\\\"detailTemplate\\\">\\n                </colgroup>\\n                <tbody kendoGridTableBody\\n                    role=\\\"presentation\\\"\\n                    [skipGroupDecoration]=\\\"isLocked\\\"\\n                    [data]=\\\"data\\\"\\n                    [groups]=\\\"groups\\\"\\n                    [showGroupFooters]=\\\"showFooter\\\"\\n                    [columns]=\\\"nonLockedColumnsToRender\\\"\\n                    [allColumns]=\\\"nonLockedLeafColumns\\\"\\n                    [detailTemplate]=\\\"detailTemplate\\\"\\n                    [noRecordsTemplate]=\\\"noRecordsTemplate\\\"\\n                    [lockedColumnsCount]=\\\"lockedLeafColumns.length\\\"\\n                    [totalColumnsCount]=\\\"leafColumns.length\\\"\\n                    [skip]=\\\"skip\\\"\\n                    [selectable]=\\\"selectable\\\"\\n                    [trackBy]=\\\"trackBy\\\"\\n                    [filterable]=\\\"filterable\\\"\\n                    [rowClass]=\\\"rowClass\\\"\\n                    [virtualColumns]=\\\"virtualColumns\\\">\\n                </tbody>\\n            </table>\\n            <kendo-resize-sensor *ngIf=\\\"isLocked\\\"></kendo-resize-sensor>\\n        </div>\\n        <kendo-resize-sensor *ngIf=\\\"isLocked || virtualColumns\\\"></kendo-resize-sensor>\\n        <div class=\\\"k-height-container\\\" role=\\\"presentation\\\">\\n            <div [style.height.px]=\\\"totalHeight\\\"></div>\\n        </div>\\n        <div *ngIf=\\\"virtualColumns\\\" class=\\\"k-width-container\\\" role=\\\"presentation\\\">\\n            <div [style.width.px]=\\\"totalWidth\\\"></div>\\n        </div>\\n    </div>\\n    <div *ngIf=\\\"loading\\\" kendoGridLoading>\\n    </div>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    ListComponent.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [SCROLLER_FACTORY_TOKEN,] }] },\n        { type: DetailsService },\n        { type: ChangeNotificationService },\n        { type: SuspendService },\n        { type: GroupsService },\n        { type: NgZone },\n        { type: Renderer2 },\n        { type: ScrollSyncService },\n        { type: ResizeService },\n        { type: EditService },\n        { type: BrowserSupportService },\n        { type: NavigationService },\n        { type: ScrollRequestService },\n        { type: LocalizationService },\n        { type: ColumnResizingService },\n        { type: ChangeDetectorRef },\n        { type: PDFService },\n        { type: ColumnInfoService }\n    ]; };\n    ListComponent.propDecorators = {\n        hostClass: [{ type: HostBinding, args: [\"class.k-grid-container\",] }],\n        hostRole: [{ type: HostBinding, args: [\"attr.role\",] }],\n        data: [{ type: Input }],\n        groups: [{ type: Input }],\n        total: [{ type: Input }],\n        rowHeight: [{ type: Input }],\n        detailRowHeight: [{ type: Input }],\n        take: [{ type: Input }],\n        skip: [{ type: Input }],\n        columns: [{ type: Input }],\n        detailTemplate: [{ type: Input }],\n        noRecordsTemplate: [{ type: Input }],\n        selectable: [{ type: Input }],\n        groupable: [{ type: Input }],\n        filterable: [{ type: Input }],\n        rowClass: [{ type: Input }],\n        loading: [{ type: Input }],\n        trackBy: [{ type: Input }],\n        virtualColumns: [{ type: Input }],\n        isVirtual: [{ type: Input }],\n        contentScroll: [{ type: Output }],\n        pageChange: [{ type: Output }],\n        scrollBottom: [{ type: Output }],\n        container: [{ type: ViewChild, args: [\"container\", { static: true },] }],\n        lockedContainer: [{ type: ViewChild, args: [\"lockedContainer\",] }],\n        lockedTable: [{ type: ViewChild, args: [\"lockedTable\",] }],\n        table: [{ type: ViewChild, args: [\"table\",] }],\n        resizeSensors: [{ type: ViewChildren, args: [ResizeSensorComponent,] }]\n    };\n    return ListComponent;\n}());\n\n/**\n * A directive which encapsulates the in-memory handling of data operations such as [paging]({% slug paging_grid %}),\n * [sorting]({% slug sorting_grid %}), and [grouping]({% slug groupingbasics_grid %})\n * ([more information and examples]({% slug automaticoperations_grid %})).\n */\nvar DataBindingDirective = /** @class */ (function () {\n    function DataBindingDirective(grid, changeDetector, localDataChangesService) {\n        this.grid = grid;\n        this.changeDetector = changeDetector;\n        this.localDataChangesService = localDataChangesService;\n        this.state = {\n            skip: 0\n        };\n        this.originalData = [];\n        if (localDataChangesService) {\n            this.dataChangedSubscription = this.localDataChangesService.changes.subscribe(this.rebind.bind(this));\n        }\n    }\n    Object.defineProperty(DataBindingDirective.prototype, \"skip\", {\n        /**\n         * Defines the number of records that will be skipped by the pager.\n         */\n        set: function (value) {\n            if (!isPresent(value)) {\n                value = 0;\n            }\n            this.grid.skip = this.state.skip = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataBindingDirective.prototype, \"sort\", {\n        /**\n         * Defines the descriptors by which the data will be sorted.\n         */\n        set: function (value) {\n            this.grid.sort = this.state.sort = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataBindingDirective.prototype, \"filter\", {\n        /**\n         * Defines the descriptor by which the data will be filtered.\n         */\n        set: function (value) {\n            this.grid.filter = this.state.filter = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataBindingDirective.prototype, \"pageSize\", {\n        /**\n         * Defines the page size used by the Grid pager.\n         */\n        set: function (value) {\n            this.grid.pageSize = this.state.take = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataBindingDirective.prototype, \"group\", {\n        /**\n         * The descriptors by which the data will be grouped.\n         */\n        set: function (value) {\n            this.grid.group = this.state.group = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataBindingDirective.prototype, \"data\", {\n        /**\n         * The array of data which will be used to populate the Grid.\n         */\n        set: function (value) {\n            this.originalData = value || [];\n            if (this.localDataChangesService) {\n                this.localDataChangesService.data = value;\n            }\n            this.dataChanged = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    DataBindingDirective.prototype.ngOnInit = function () {\n        this.applyState(this.state);\n        this.stateChangeSubscription = this.grid\n            .dataStateChange\n            .subscribe(this.onStateChange.bind(this));\n    };\n    /**\n     * @hidden\n     */\n    DataBindingDirective.prototype.ngOnDestroy = function () {\n        if (this.stateChangeSubscription) {\n            this.stateChangeSubscription.unsubscribe();\n        }\n        if (this.dataChangedSubscription) {\n            this.dataChangedSubscription.unsubscribe();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DataBindingDirective.prototype.ngOnChanges = function (changes) {\n        if (anyChanged([\"pageSize\", \"skip\", \"sort\", \"group\", \"filter\"], changes)) {\n            this.rebind();\n        }\n    };\n    DataBindingDirective.prototype.ngDoCheck = function () {\n        if (this.dataChanged) {\n            this.updateGridData();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DataBindingDirective.prototype.onStateChange = function (state$$1) {\n        this.applyState(state$$1);\n        this.rebind();\n    };\n    /**\n     * @hidden\n     */\n    DataBindingDirective.prototype.rebind = function () {\n        this.data = this.originalData;\n        this.updateGridData();\n        this.notifyDataChange();\n    };\n    /**\n     * Notifies the Grid that its data has changed.\n     */\n    DataBindingDirective.prototype.notifyDataChange = function () {\n        this.grid.onDataChange();\n        if (this.changeDetector) {\n            this.changeDetector.markForCheck();\n        }\n    };\n    DataBindingDirective.prototype.process = function (state$$1) {\n        return process(this.originalData, state$$1);\n    };\n    DataBindingDirective.prototype.applyState = function (_a) {\n        var skip = _a.skip, take$$1 = _a.take, sort = _a.sort, group = _a.group, filter$$1 = _a.filter;\n        this.skip = skip;\n        this.pageSize = take$$1;\n        this.sort = sort;\n        this.group = group;\n        this.filter = filter$$1;\n    };\n    DataBindingDirective.prototype.updateGridData = function () {\n        this.grid.data = this.process(this.state);\n        this.dataChanged = false;\n    };\n    DataBindingDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridBinding]'\n                },] },\n    ];\n    /** @nocollapse */\n    DataBindingDirective.ctorParameters = function () { return [\n        { type: GridComponent },\n        { type: ChangeDetectorRef },\n        { type: LocalDataChangesService }\n    ]; };\n    DataBindingDirective.propDecorators = {\n        skip: [{ type: Input }],\n        sort: [{ type: Input }],\n        filter: [{ type: Input }],\n        pageSize: [{ type: Input }],\n        group: [{ type: Input }],\n        data: [{ type: Input, args: [\"kendoGridBinding\",] }]\n    };\n    return DataBindingDirective;\n}());\n\n/**\n * A directive which stores the row selection state of the Grid in memory\n * ([see example]({% slug selection_grid %}#toc-during-data-operations)).\n */\nvar SelectionDirective = /** @class */ (function (_super) {\n    __extends(SelectionDirective, _super);\n    function SelectionDirective(grid, cd) {\n        var _this = _super.call(this, grid, cd) || this;\n        _this.grid = grid;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    SelectionDirective.prototype.ngOnInit = function () {\n        if (this.grid.selectable === false) {\n            this.grid.selectable = true;\n        }\n        this.grid.selectionDirective = true;\n    };\n    /**\n     * @hidden\n     */\n    SelectionDirective.prototype.ngOnDestroy = function () {\n        _super.prototype.destroy.call(this);\n    };\n    SelectionDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridSelectBy]'\n                },] },\n    ];\n    /** @nocollapse */\n    SelectionDirective.ctorParameters = function () { return [\n        { type: GridComponent },\n        { type: ChangeDetectorRef }\n    ]; };\n    return SelectionDirective;\n}(Selection));\n\n/**\n * @hidden\n */\nvar Messages = /** @class */ (function (_super) {\n    __extends(Messages, _super);\n    function Messages() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Messages.propDecorators = {\n        groupPanelEmpty: [{ type: Input }],\n        noRecords: [{ type: Input }],\n        pagerFirstPage: [{ type: Input }],\n        pagerLastPage: [{ type: Input }],\n        pagerPreviousPage: [{ type: Input }],\n        pagerNextPage: [{ type: Input }],\n        pagerPage: [{ type: Input }],\n        pagerItemsPerPage: [{ type: Input }],\n        pagerOf: [{ type: Input }],\n        pagerItems: [{ type: Input }],\n        filter: [{ type: Input }],\n        filterEqOperator: [{ type: Input }],\n        filterNotEqOperator: [{ type: Input }],\n        filterIsNullOperator: [{ type: Input }],\n        filterIsNotNullOperator: [{ type: Input }],\n        filterIsEmptyOperator: [{ type: Input }],\n        filterIsNotEmptyOperator: [{ type: Input }],\n        filterStartsWithOperator: [{ type: Input }],\n        filterContainsOperator: [{ type: Input }],\n        filterNotContainsOperator: [{ type: Input }],\n        filterEndsWithOperator: [{ type: Input }],\n        filterGteOperator: [{ type: Input }],\n        filterGtOperator: [{ type: Input }],\n        filterLteOperator: [{ type: Input }],\n        filterLtOperator: [{ type: Input }],\n        filterIsTrue: [{ type: Input }],\n        filterIsFalse: [{ type: Input }],\n        filterBooleanAll: [{ type: Input }],\n        filterAfterOrEqualOperator: [{ type: Input }],\n        filterAfterOperator: [{ type: Input }],\n        filterBeforeOperator: [{ type: Input }],\n        filterBeforeOrEqualOperator: [{ type: Input }],\n        filterFilterButton: [{ type: Input }],\n        filterClearButton: [{ type: Input }],\n        filterAndLogic: [{ type: Input }],\n        filterOrLogic: [{ type: Input }],\n        loading: [{ type: Input }],\n        columnMenu: [{ type: Input }],\n        columns: [{ type: Input }],\n        lock: [{ type: Input }],\n        unlock: [{ type: Input }],\n        sortable: [{ type: Input }],\n        sortAscending: [{ type: Input }],\n        sortDescending: [{ type: Input }],\n        sortedAscending: [{ type: Input }],\n        sortedDescending: [{ type: Input }],\n        sortedDefault: [{ type: Input }],\n        columnsApply: [{ type: Input }],\n        columnsReset: [{ type: Input }],\n        detailExpand: [{ type: Input }],\n        detailCollapse: [{ type: Input }]\n    };\n    return Messages;\n}(ComponentMessages));\n\n/**\n * @hidden\n */\nvar LocalizedMessagesDirective = /** @class */ (function (_super) {\n    __extends(LocalizedMessagesDirective, _super);\n    function LocalizedMessagesDirective(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    LocalizedMessagesDirective.decorators = [\n        { type: Directive, args: [{\n                    providers: [\n                        {\n                            provide: Messages,\n                            useExisting: forwardRef(function () { return LocalizedMessagesDirective; })\n                        }\n                    ],\n                    selector: '[kendoGridLocalizedMessages]'\n                },] },\n    ];\n    /** @nocollapse */\n    LocalizedMessagesDirective.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return LocalizedMessagesDirective;\n}(Messages));\n\n/**\n * Custom component messages override default component messages\n * ([see example]({% slug globalization_grid %}#toc-localization)).\n */\nvar CustomMessagesComponent = /** @class */ (function (_super) {\n    __extends(CustomMessagesComponent, _super);\n    function CustomMessagesComponent(service) {\n        var _this = _super.call(this) || this;\n        _this.service = service;\n        return _this;\n    }\n    Object.defineProperty(CustomMessagesComponent.prototype, \"override\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CustomMessagesComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: Messages,\n                            useExisting: forwardRef(function () { return CustomMessagesComponent; })\n                        }\n                    ],\n                    selector: 'kendo-grid-messages',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    CustomMessagesComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return CustomMessagesComponent;\n}(Messages));\n\n/**\n * @hidden\n */\nvar FilterRowComponent = /** @class */ (function () {\n    function FilterRowComponent(localization) {\n        this.localization = localization;\n        this.columns = [];\n        this.groups = [];\n        this.filterRowClass = true;\n        this.filterLabel = this.localization.get('filter');\n    }\n    FilterRowComponent.decorators = [\n        { type: Component, args: [{\n                    selector: '[kendoGridFilterRow]',\n                    template: \"\\n      <td\\n         [class.k-group-cell]=\\\"true\\\"\\n         *ngFor=\\\"let g of groups\\\"\\n         role=\\\"presentation\\\">\\n      </td>\\n      <td\\n         [class.k-hierarchy-cell]=\\\"true\\\"\\n         *ngIf=\\\"detailTemplate?.templateRef\\\"\\n         role=\\\"presentation\\\">\\n      </td>\\n      <td *ngFor=\\\"let column of columns; let columnIndex = index\\\"\\n          [attr.aria-label]=\\\"filterLabel\\\"\\n          kendoGridFilterCell\\n            [column]=\\\"column\\\"\\n            [filter]=\\\"filter\\\"\\n          kendoGridLogicalCell\\n            [logicalRowIndex]=\\\"logicalRowIndex\\\"\\n            [logicalColIndex]=\\\"lockedColumnsCount + columnIndex\\\"\\n      ></td>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    FilterRowComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    FilterRowComponent.propDecorators = {\n        columns: [{ type: Input }],\n        filter: [{ type: Input }],\n        groups: [{ type: Input }],\n        detailTemplate: [{ type: Input }],\n        logicalRowIndex: [{ type: Input }],\n        lockedColumnsCount: [{ type: Input }],\n        filterRowClass: [{ type: HostBinding, args: ['class.k-filter-row',] }]\n    };\n    return FilterRowComponent;\n}());\n\nvar areDifferent = function (a, b) {\n    return a.field !== b.field || a.operator !== b.operator || a.value !== b.value;\n};\nvar isChanged$1 = function (a, b) {\n    if (a.length !== b.length) {\n        return true;\n    }\n    for (var idx = 0, len = a.length; idx < len; idx++) {\n        var prev = a[idx];\n        var curr = b[idx];\n        if (isCompositeFilterDescriptor(prev)) {\n            // tslint:disable-next-line:no-use-before-declare\n            if (diffFilters(prev, curr[idx])) {\n                return true;\n            }\n        }\n        else if (areDifferent(prev, curr)) {\n            return true;\n        }\n    }\n    return false;\n};\nvar copyObject = function (obj) {\n    var result = {};\n    Object.assign(result, obj);\n    if (obj.constructor !== Object) {\n        var proto_1 = obj.constructor.prototype;\n        Object.getOwnPropertyNames(proto_1).forEach(function (property) {\n            if (property !== 'constructor' && proto_1.hasOwnProperty(property)) {\n                result[property] = obj[property];\n            }\n        });\n    }\n    return result;\n};\nvar cloneFilter = function (filter$$1) { return copyObject(filter$$1); };\n/**\n * @hidden\n */\nvar cloneFilters = function (filter$$1) {\n    if (!filter$$1) {\n        return;\n    }\n    if (isCompositeFilterDescriptor(filter$$1)) {\n        return {\n            filters: cloneFilters(filter$$1.filters),\n            logic: filter$$1.logic\n        };\n    }\n    else if (Array.isArray(filter$$1)) {\n        return filter$$1.map(cloneFilters);\n    }\n    return cloneFilter(filter$$1);\n};\n/**\n * @hidden\n */\nvar diffFilters = function (a, b) {\n    if (isPresent(a) && !isPresent(b)) {\n        return true;\n    }\n    if (!isPresent(a) && isPresent(b)) {\n        return true;\n    }\n    return isPresent(a) && isPresent(b) && isChanged$1(a.filters, b.filters);\n};\n\n/**\n * @hidden\n */\nvar FilterCellComponent = /** @class */ (function () {\n    function FilterCellComponent() {\n        this._templateContext = {};\n    }\n    Object.defineProperty(FilterCellComponent.prototype, \"filter\", {\n        get: function () {\n            return this._filter;\n        },\n        set: function (value) {\n            this._filter = cloneFilters(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FilterCellComponent.prototype, \"templateContext\", {\n        get: function () {\n            this._templateContext.column = this.column;\n            this._templateContext.filter = this.filter;\n            // tslint:disable-next-line:no-string-literal\n            this._templateContext[\"$implicit\"] = this.filter;\n            return this._templateContext;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FilterCellComponent.prototype, \"hasTemplate\", {\n        get: function () {\n            return isPresent(this.column.filterCellTemplateRef);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FilterCellComponent.prototype, \"isFilterable\", {\n        get: function () {\n            return isPresent(this.column) && !isNullOrEmptyString(this.column.field) && this.column.filterable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FilterCellComponent.decorators = [\n        { type: Component, args: [{\n                    selector: '[kendoGridFilterCell]',\n                    template: \"\\n        <ng-template [ngIf]=\\\"isFilterable\\\">\\n            <ng-container [ngSwitch]=\\\"hasTemplate\\\">\\n                <ng-container *ngSwitchCase=\\\"false\\\">\\n                    <ng-container kendoFilterCellHost [column]=\\\"column\\\" [filter]=\\\"filter\\\"></ng-container>\\n                </ng-container>\\n                <ng-container *ngSwitchCase=\\\"true\\\">\\n                    <ng-template\\n                        *ngIf=\\\"column.filterCellTemplateRef\\\"\\n                        [ngTemplateOutlet]=\\\"column.filterCellTemplateRef\\\"\\n                        [ngTemplateOutletContext]=\\\"templateContext\\\">\\n                    </ng-template>\\n                </ng-container>\\n            </ng-container>\\n        </ng-template>\\n    \"\n                },] },\n    ];\n    FilterCellComponent.propDecorators = {\n        column: [{ type: Input }],\n        filter: [{ type: Input }]\n    };\n    return FilterCellComponent;\n}());\n\nvar localizeOperators = function (operators) { return function (localization) {\n    return Object.keys(operators).reduce(function (acc, key) {\n        acc[operators[key]] = localization.get(key);\n        return acc;\n    }, {});\n}; }; // tslint:disable-line:align\nvar operatorTexts = localizeOperators({\n    \"filterEqOperator\": \"eq\",\n    \"filterNotEqOperator\": \"neq\",\n    // tslint:disable-next-line:object-literal-sort-keys\n    \"filterGteOperator\": \"gte\",\n    \"filterGtOperator\": \"gt\",\n    \"filterLteOperator\": \"lte\",\n    \"filterLtOperator\": \"lt\",\n    \"filterIsNullOperator\": \"isnull\",\n    \"filterIsNotNullOperator\": \"isnotnull\",\n    \"filterIsEmptyOperator\": \"isempty\",\n    \"filterIsNotEmptyOperator\": \"isnotempty\",\n    \"filterContainsOperator\": \"contains\",\n    \"filterNotContainsOperator\": \"doesnotcontain\",\n    \"filterStartsWithOperator\": \"startswith\",\n    \"filterEndsWithOperator\": \"endswith\",\n    \"filterAfterOrEqualOperator\": \"after-eq\",\n    \"filterAfterOperator\": \"after\",\n    \"filterBeforeOrEqualOperator\": \"before-eq\",\n    \"filterBeforeOperator\": \"before\"\n});\n/**\n * @hidden\n */\nvar toJSON = function (xs) { return xs.map(function (x) { return x.toJSON(); }); };\n/**\n * @hidden\n */\nvar FilterOperatorBase = /** @class */ (function () {\n    function FilterOperatorBase(operator, localization) {\n        this.operator = operator;\n        this.localization = localization;\n        this.messages = operatorTexts(this.localization);\n        this._text = this.messages[this.operator];\n        this.localization.changes.subscribe(this.refreshText.bind(this));\n    }\n    Object.defineProperty(FilterOperatorBase.prototype, \"text\", {\n        /**\n         * The text that will be displayed in the drop-down list.\n         * @readonly\n         * @type {string}\n         * @memberOf FilterOperatorBase\n         */\n        get: function () {\n            return this._text;\n        },\n        /**\n         *\n         */\n        set: function (value) {\n            this._text = isNullOrEmptyString(value) ? this.messages[this.operator] : value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    FilterOperatorBase.prototype.toJSON = function () {\n        return {\n            text: this.text,\n            value: this.operator\n        };\n    };\n    FilterOperatorBase.prototype.refreshText = function () {\n        var update = this._text === this.messages[this.operator];\n        this.messages = operatorTexts(this.localization);\n        if (update) {\n            this._text = this.messages[this.operator];\n        }\n    };\n    FilterOperatorBase.propDecorators = {\n        text: [{ type: Input }]\n    };\n    return FilterOperatorBase;\n}());\n\nvar insertDefaultFilter = function (index, rootFilter, filter$$1) {\n    rootFilter = (rootFilter || { filters: [], logic: \"and\" });\n    rootFilter.filters[index] = filter$$1;\n    return filter$$1;\n};\n/**\n * @hidden\n */\nvar setFilter = function (index, filter$$1, field, defaultOperator) {\n    if (isPresent(filter$$1) && isPresent(filter$$1.filters) && filter$$1.filters.length > index) {\n        return filter$$1.filters[index];\n    }\n    else {\n        return insertDefaultFilter(index, filter$$1, {\n            field: field,\n            operator: defaultOperator\n        });\n    }\n};\n/**\n * @hidden\n */\nvar logicOperators = function (localization) { return [\n    { text: localization.get(\"filterAndLogic\"), value: \"and\" },\n    { text: localization.get(\"filterOrLogic\"), value: \"or\" }\n]; };\n/**\n * @hidden\n */\nvar flatten = function (filter$$1) {\n    if (isPresent(filter$$1.filters)) {\n        return filter$$1.filters.reduce(function (acc, curr) {\n            return acc.concat(isCompositeFilterDescriptor(curr) ? flatten(curr) : [curr]);\n        }, []);\n    }\n    return [];\n};\nvar trimFilterByField = function (filter$$1, field) {\n    if (isPresent(filter$$1) && isPresent(filter$$1.filters)) {\n        filter$$1.filters = filter$$1.filters.filter(function (x) {\n            if (isCompositeFilterDescriptor(x)) {\n                trimFilterByField(x, field);\n                return x.filters.length;\n            }\n            else {\n                return x.field !== field;\n            }\n        });\n    }\n};\n/**\n * @hidden\n */\nvar filtersByField = function (filter$$1, field) {\n    return flatten(filter$$1 || {}).filter(function (x) { return x.field === field; });\n};\n/**\n * @hidden\n */\nvar filterByField = function (filter$$1, field) {\n    var currentFilter = filtersByField(filter$$1, field)[0];\n    return currentFilter;\n};\n/**\n * @hidden\n */\nvar removeFilter = function (filter$$1, field) {\n    trimFilterByField(filter$$1, field);\n    return filter$$1;\n};\n/**\n * @hidden\n */\nvar localizeOperators$1 = function (operators) { return function (localization) { return Object.keys(operators).map(function (key) { return ({\n    text: localization.get(key),\n    value: operators[key]\n}); }); }; };\n/**\n * An abstract base class for the filter-cell component ([see example]({% slug reusablecustomfilters_grid %}#toc-filter-row)).\n */\nvar BaseFilterCellComponent = /** @class */ (function () {\n    function BaseFilterCellComponent(filterService) {\n        this.filterService = filterService;\n        this.operatorList = new QueryList();\n    }\n    Object.defineProperty(BaseFilterCellComponent.prototype, \"hostClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseFilterCellComponent.prototype, \"operators\", {\n        get: function () {\n            return this._operators.length ? this._operators : this.defaultOperators;\n        },\n        set: function (values) {\n            this._operators = values;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    BaseFilterCellComponent.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.operationListSubscription = observe(this.operatorList)\n            .pipe(map(function (q) { return q.toArray(); }), map(toJSON))\n            .subscribe(function (x) {\n            _this.operators = x;\n        });\n    };\n    BaseFilterCellComponent.prototype.ngOnDestroy = function () {\n        if (this.operationListSubscription) {\n            this.operationListSubscription.unsubscribe();\n        }\n    };\n    BaseFilterCellComponent.prototype.filterByField = function (field) {\n        return filterByField(this.filter, field);\n    };\n    BaseFilterCellComponent.prototype.filtersByField = function (field) {\n        return filtersByField(this.filter, field);\n    };\n    BaseFilterCellComponent.prototype.removeFilter = function (field) {\n        return removeFilter(this.filter, field);\n    };\n    BaseFilterCellComponent.prototype.updateFilter = function (filter$$1) {\n        var root = this.filter || {\n            filters: [],\n            logic: \"and\"\n        };\n        var currentFilter = flatten(root).filter(function (x) { return x.field === filter$$1.field; })[0];\n        if (!isPresent(currentFilter)) {\n            root.filters.push(filter$$1);\n        }\n        else {\n            Object.assign(currentFilter, filter$$1);\n        }\n        return root;\n    };\n    BaseFilterCellComponent.prototype.applyFilter = function (filter$$1) {\n        this.filterService.filter(filter$$1);\n    };\n    BaseFilterCellComponent.propDecorators = {\n        hostClasses: [{ type: HostBinding, args: ['class.k-filtercell',] }],\n        operatorList: [{ type: ContentChildren, args: [FilterOperatorBase,] }]\n    };\n    return BaseFilterCellComponent;\n}());\n\nvar numericOperators = localizeOperators$1({\n    \"filterEqOperator\": \"eq\",\n    \"filterNotEqOperator\": \"neq\",\n    // tslint:disable-next-line:object-literal-sort-keys\n    \"filterGteOperator\": \"gte\",\n    \"filterGtOperator\": \"gt\",\n    \"filterLteOperator\": \"lte\",\n    \"filterLtOperator\": \"lt\",\n    \"filterIsNullOperator\": \"isnull\",\n    \"filterIsNotNullOperator\": \"isnotnull\"\n});\n/**\n * Represents a base numeric filter component.\n */\nvar NumericFilterComponent = /** @class */ (function (_super) {\n    __extends(NumericFilterComponent, _super);\n    function NumericFilterComponent(filterService, localization) {\n        var _this = _super.call(this, filterService) || this;\n        _this.localization = localization;\n        /**\n         * The default filter operator. Defaults to `eq`.\n         * @type {string}\n         */\n        _this.operator = \"eq\";\n        /**\n         * Specifies the value that is used to increment or decrement the component value.\n         * @type {numeric}\n         */\n        _this.step = 1;\n        /**\n         * Specifies whether the **Up** and **Down** spin buttons will be rendered.\n         * @type {boolean}\n         */\n        _this.spinners = true;\n        _this.defaultOperators = numericOperators(_this.localization);\n        return _this;\n    }\n    Object.defineProperty(NumericFilterComponent.prototype, \"format\", {\n        /**\n         * Specifies the number format used when the component is not focused.\n         * By default, the `column.format` value is used (if set).\n         *\n         * @readonly\n         * @type {string}\n         */\n        get: function () {\n            return !isNullOrEmptyString(this._format) ? this._format : this.columnFormat;\n        },\n        /**\n         * Specifies the number format used when the component is not focused.\n         * By default, the `column.format` value is used (if set).\n         */\n        set: function (value) {\n            this._format = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericFilterComponent.prototype, \"currentFilter\", {\n        /**\n         * The current filter for the associated column field.\n         * @readonly\n         * @type {FilterDescriptor}\n         */\n        get: function () {\n            return this.filterByField(this.column.field);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericFilterComponent.prototype, \"currentOperator\", {\n        /**\n         * The current filter operator for the associated column field.\n         * @readonly\n         * @type {string}\n         */\n        get: function () {\n            return this.currentFilter ? this.currentFilter.operator : this.operator;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericFilterComponent.prototype, \"columnFormat\", {\n        get: function () {\n            return this.column && !isNullOrEmptyString(this.column.format) ?\n                extractFormat(this.column.format) : \"n2\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NumericFilterComponent.prototype.ngOnInit = function () {\n        this.subscription = this.localization.changes.subscribe(this.localizationChange.bind(this));\n    };\n    NumericFilterComponent.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n        _super.prototype.ngOnDestroy.call(this);\n    };\n    NumericFilterComponent.prototype.localizationChange = function () {\n        this.defaultOperators = numericOperators(this.localization);\n        if (this.operatorList.length) {\n            this.operators = toJSON(this.operatorList.toArray());\n        }\n    };\n    NumericFilterComponent.propDecorators = {\n        column: [{ type: Input }],\n        filter: [{ type: Input }],\n        operator: [{ type: Input }],\n        step: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        spinners: [{ type: Input }],\n        decimals: [{ type: Input }],\n        format: [{ type: Input }]\n    };\n    return NumericFilterComponent;\n}(BaseFilterCellComponent));\n\n/**\n * Represents a numeric filter cell.\n *\n * @example\n *  ```html-no-run\n *      <kendo-grid-column field=\"ProductName\" title=\"Product Name\">\n *          <ng-template kendoGridFilterCellTemplate let-filter let-column=\"column\">\n *          <kendo-grid-numeric-filter-cell\n *              [column]=\"column\"\n *              [filter]=\"filter\">\n *          </kendo-grid-numeric-filter-cell>\n *          </ng-template>\n *      </kendo-grid-column>\n *   ```\n */\nvar NumericFilterCellComponent = /** @class */ (function (_super) {\n    __extends(NumericFilterCellComponent, _super);\n    function NumericFilterCellComponent(filterService, localization) {\n        var _this = _super.call(this, filterService, localization) || this;\n        _this.localization = localization;\n        /**\n         * Determines the delay time (in milliseconds) before the filter value is submitted.\n         * A value of `0` indicates no delay. The default value is `500`.\n         * @type {boolean}\n         */\n        _this.filterDelay = 500;\n        /**\n         * Determines if the drop-down filter operators will be displayed.\n         * The default value is `true`.\n         * @type {boolean}\n         */\n        _this.showOperators = true;\n        return _this;\n    }\n    NumericFilterCellComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-numeric-filter-cell',\n                    template: \"\\n        <kendo-grid-filter-wrapper-cell\\n            [column]=\\\"column\\\"\\n            [filter]=\\\"filter\\\"\\n            [operators]=\\\"operators\\\"\\n            [defaultOperator]=\\\"operator\\\"\\n            [showOperators]=\\\"showOperators\\\">\\n            <kendo-numerictextbox\\n                kendoGridFocusable\\n                kendoFilterInput\\n                [filterDelay]=\\\"filterDelay\\\"\\n                [autoCorrect]=\\\"true\\\"\\n                [value]=\\\"currentFilter?.value\\\"\\n                [format]=\\\"format\\\"\\n                [decimals]=\\\"decimals\\\"\\n                [spinners]=\\\"spinners\\\"\\n                [min]=\\\"min\\\"\\n                [max]=\\\"max\\\"\\n                [step]=\\\"step\\\">\\n            </kendo-numerictextbox>\\n        </kendo-grid-filter-wrapper-cell>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    NumericFilterCellComponent.ctorParameters = function () { return [\n        { type: FilterService },\n        { type: LocalizationService }\n    ]; };\n    NumericFilterCellComponent.propDecorators = {\n        filterDelay: [{ type: Input }],\n        showOperators: [{ type: Input }]\n    };\n    return NumericFilterCellComponent;\n}(NumericFilterComponent));\n\n/**\n * @hidden\n */\nvar FilterInputDirective = /** @class */ (function () {\n    function FilterInputDirective(valueAccessors, ngZone, element, renderer) {\n        var _this = this;\n        this.change = new EventEmitter();\n        this.composing = false;\n        this.filterDelay = 500;\n        this.changeRequests = new Subject();\n        this.accessor = valueAccessors[0];\n        ngZone.runOutsideAngular(function () {\n            var unsubscribeStart = renderer.listen(element.nativeElement, 'compositionstart', function () { return _this.composing = true; });\n            var unsubscribeEnd = renderer.listen(element.nativeElement, 'compositionend', function () { return _this.composing = false; });\n            _this.unsubscribeEvents = function () {\n                unsubscribeStart();\n                unsubscribeEnd();\n            };\n        });\n    }\n    Object.defineProperty(FilterInputDirective.prototype, \"value\", {\n        set: function (value) {\n            this.accessor.writeValue(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FilterInputDirective.prototype, \"disabled\", {\n        set: function (value) {\n            this.accessor.setDisabledState(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FilterInputDirective.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.accessor.registerOnChange(function (x) {\n            return _this.filterDelay > 0 ?\n                _this.changeRequests.next(x) :\n                _this.change.emit(x);\n        });\n        this.subscribeChanges();\n    };\n    FilterInputDirective.prototype.ngOnChanges = function (changes) {\n        if (isChanged('filterDelay', changes)) {\n            this.unsubscribeChanges();\n            this.subscribeChanges();\n        }\n    };\n    FilterInputDirective.prototype.ngOnDestroy = function () {\n        this.unsubscribeChanges();\n        this.unsubscribeEvents();\n    };\n    FilterInputDirective.prototype.subscribeChanges = function () {\n        var _this = this;\n        this.changeRequestsSubscription = this.changeRequests\n            .pipe(debounceTime(this.filterDelay), filter(function () { return !_this.composing; }))\n            .subscribe(function (x) { return _this.change.emit(x); });\n    };\n    FilterInputDirective.prototype.unsubscribeChanges = function () {\n        if (this.changeRequestsSubscription) {\n            this.changeRequestsSubscription.unsubscribe();\n        }\n    };\n    FilterInputDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoFilterInput]'\n                },] },\n    ];\n    /** @nocollapse */\n    FilterInputDirective.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] },\n        { type: NgZone },\n        { type: ElementRef },\n        { type: Renderer2 }\n    ]; };\n    FilterInputDirective.propDecorators = {\n        filterDelay: [{ type: Input }],\n        value: [{ type: Input }]\n    };\n    return FilterInputDirective;\n}());\n\nvar EMPTY_VALUE_OPERATORS = new Set(['isnull', 'isnotnull', 'isempty', 'isnotempty']);\nvar isEmptyValueOperator = function (operator) { return EMPTY_VALUE_OPERATORS.has(operator); };\n/**\n * @hidden\n */\nvar FilterInputWrapperComponent = /** @class */ (function (_super) {\n    __extends(FilterInputWrapperComponent, _super);\n    function FilterInputWrapperComponent(filterService) {\n        var _this = _super.call(this, filterService) || this;\n        _this.operators = [];\n        return _this;\n    }\n    Object.defineProperty(FilterInputWrapperComponent.prototype, \"currentFilter\", {\n        get: function () {\n            return this.filterByField(this.column.field);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FilterInputWrapperComponent.prototype, \"currentOperator\", {\n        get: function () {\n            var filter$$1 = this.currentFilter;\n            if (!this._operator) {\n                this._operator = filter$$1 ? filter$$1.operator : this.defaultOperator;\n            }\n            return this._operator;\n        },\n        set: function (value) {\n            this._operator = value;\n            var emptyValueOperator = isEmptyValueOperator(value);\n            this.filterInputDisabled = emptyValueOperator;\n            if (emptyValueOperator) {\n                this.applyNoValueFilter(value);\n            }\n            else if (!isBlank(value) && isPresent(this.currentFilter)) {\n                this.onChange(this.currentFilter.value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FilterInputWrapperComponent.prototype, \"defaultOperator\", {\n        get: function () {\n            if (!isNullOrEmptyString(this._defaultOperator)) {\n                return this._defaultOperator;\n            }\n            else if (this.operators && this.operators.length) {\n                return this.operators[0].value;\n            }\n            return \"eq\";\n        },\n        set: function (value) {\n            this._defaultOperator = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FilterInputWrapperComponent.prototype, \"filterInputDisabled\", {\n        set: function (disabled) {\n            if (!this.input) {\n                return;\n            }\n            this.input.disabled = disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FilterInputWrapperComponent.prototype.ngAfterContentInit = function () {\n        if (isPresent(this.input)) {\n            this.changeSubscription = this.input.change.subscribe(this.onChange.bind(this));\n            this.filterInputDisabled = isEmptyValueOperator(this.currentOperator);\n        }\n    };\n    FilterInputWrapperComponent.prototype.ngOnDestroy = function () {\n        _super.prototype.ngOnDestroy.call(this);\n        if (this.changeSubscription) {\n            this.changeSubscription.unsubscribe();\n        }\n    };\n    FilterInputWrapperComponent.prototype.onChange = function (value) {\n        if (!isNullOrEmptyString(value) || this.filterByField(this.column.field)) {\n            this.filterChange(isNullOrEmptyString(value) ?\n                this.removeFilter(this.column.field) :\n                this.updateFilter({\n                    field: this.column.field,\n                    operator: this.currentOperator,\n                    value: value\n                }));\n        }\n    };\n    FilterInputWrapperComponent.prototype.onClear = function () {\n        this.onChange(null);\n        this.filterInputDisabled = isEmptyValueOperator(this.defaultOperator);\n    };\n    FilterInputWrapperComponent.prototype.applyNoValueFilter = function (operator) {\n        this.filterChange(this.updateFilter({\n            field: this.column.field,\n            operator: operator,\n            value: null\n        }));\n    };\n    FilterInputWrapperComponent.prototype.ngOnChanges = function (changes) {\n        if (isChanged(\"filter\", changes, false)) {\n            this._operator = null;\n            this.filterInputDisabled = isEmptyValueOperator(this.currentOperator);\n        }\n    };\n    FilterInputWrapperComponent.propDecorators = {\n        operators: [{ type: Input }],\n        column: [{ type: Input }],\n        filter: [{ type: Input }],\n        input: [{ type: ContentChild, args: [FilterInputDirective,] }],\n        defaultOperator: [{ type: Input }]\n    };\n    return FilterInputWrapperComponent;\n}(BaseFilterCellComponent));\n\nvar EMPTY_FILTER_OPERATORS = ['isnull', 'isnotnull', 'isempty', 'isnotempty'];\n/**\n * @hidden\n */\nvar FilterCellWrapperComponent = /** @class */ (function (_super) {\n    __extends(FilterCellWrapperComponent, _super);\n    function FilterCellWrapperComponent(filterService) {\n        var _this = _super.call(this, filterService) || this;\n        _this.showOperators = true;\n        return _this;\n    }\n    Object.defineProperty(FilterCellWrapperComponent.prototype, \"hostClasses\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FilterCellWrapperComponent.prototype, \"overrideBaseClasses\", {\n        get: function () {\n            return false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FilterCellWrapperComponent.prototype, \"showButton\", {\n        get: function () {\n            var filter$$1 = this.currentFilter;\n            return isPresent(filter$$1) && (!isNullOrEmptyString(filter$$1.value) ||\n                EMPTY_FILTER_OPERATORS.indexOf(String(filter$$1.operator)) >= 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FilterCellWrapperComponent.prototype.filterChange = function (filter$$1) {\n        this.applyFilter(filter$$1);\n    };\n    FilterCellWrapperComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-filter-wrapper-cell',\n                    template: \"\\n        <ng-content></ng-content>\\n        <kendo-grid-filter-cell-operators\\n            [showOperators]=\\\"showOperators\\\"\\n            [operators]=\\\"operators\\\"\\n            (clear)=\\\"onClear()\\\"\\n            [showButton]=\\\"showButton\\\"\\n            [(value)]=\\\"currentOperator\\\">\\n        </kendo-grid-filter-cell-operators>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    FilterCellWrapperComponent.ctorParameters = function () { return [\n        { type: FilterService }\n    ]; };\n    FilterCellWrapperComponent.propDecorators = {\n        hostClasses: [{ type: HostBinding, args: ['class.k-filtercell-wrapper',] }],\n        overrideBaseClasses: [{ type: HostBinding, args: ['class.k-filtercell',] }],\n        showOperators: [{ type: Input }]\n    };\n    return FilterCellWrapperComponent;\n}(FilterInputWrapperComponent));\n\n// tslint:disable:no-access-missing-member\nvar stringOperators = localizeOperators$1({\n    \"filterEqOperator\": \"eq\",\n    \"filterNotEqOperator\": \"neq\",\n    // tslint:disable-next-line:object-literal-sort-keys\n    \"filterContainsOperator\": \"contains\",\n    \"filterNotContainsOperator\": \"doesnotcontain\",\n    \"filterStartsWithOperator\": \"startswith\",\n    \"filterEndsWithOperator\": \"endswith\",\n    \"filterIsNullOperator\": \"isnull\",\n    \"filterIsNotNullOperator\": \"isnotnull\",\n    \"filterIsEmptyOperator\": \"isempty\",\n    \"filterIsNotEmptyOperator\": \"isnotempty\"\n});\n/**\n * Represents a base string filter component.\n */\nvar StringFilterComponent = /** @class */ (function (_super) {\n    __extends(StringFilterComponent, _super);\n    function StringFilterComponent(filterService, localization) {\n        var _this = _super.call(this, filterService) || this;\n        _this.localization = localization;\n        /**\n         * The default filter operator. Defaults to `contains`.\n         * @type {string}\n         */\n        _this.operator = \"contains\";\n        return _this;\n    }\n    Object.defineProperty(StringFilterComponent.prototype, \"currentFilter\", {\n        /**\n         * The current filter for the associated column field.\n         * @readonly\n         * @type {FilterDescriptor}\n         */\n        get: function () {\n            return this.filterByField((this.column || {}).field);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StringFilterComponent.prototype, \"currentOperator\", {\n        /**\n         * The current filter operator for the associated column field.\n         * @readonly\n         * @type {string}\n         */\n        get: function () {\n            return this.currentFilter ? this.currentFilter.operator : this.operator;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StringFilterComponent.prototype.ngOnInit = function () {\n        this.subscription = this.localization.changes.subscribe(this.localizationChange.bind(this));\n    };\n    StringFilterComponent.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n        _super.prototype.ngOnDestroy.call(this);\n    };\n    StringFilterComponent.prototype.localizationChange = function () {\n        this.defaultOperators = stringOperators(this.localization);\n        if (this.operatorList.length) {\n            this.operators = toJSON(this.operatorList.toArray());\n        }\n    };\n    StringFilterComponent.propDecorators = {\n        column: [{ type: Input }],\n        filter: [{ type: Input }],\n        operator: [{ type: Input }]\n    };\n    return StringFilterComponent;\n}(BaseFilterCellComponent));\n\n/**\n * Represents a string-filter cell component\n * ([see example]({% slug builtinfiltertemplate_grid %}#toc-configuration-components-for-filter-templates)).\n *\n * @example\n *\n *  ```html-no-run\n *      <kendo-grid-column field=\"ProductName\" title=\"Product Name\">\n *          <ng-template kendoGridFilterCellTemplate let-filter let-column=\"column\">\n *          <kendo-grid-string-filter-cell\n *              [showOperators]=\"false\"\n *              [column]=\"column\"\n *              [filter]=\"filter\">\n *          </kendo-grid-string-filter-cell>\n *          </ng-template>\n *      </kendo-grid-column>\n *   ```\n */\nvar StringFilterCellComponent = /** @class */ (function (_super) {\n    __extends(StringFilterCellComponent, _super);\n    function StringFilterCellComponent(filterService, localization) {\n        var _this = _super.call(this, filterService, localization) || this;\n        /**\n         * Determines the delay time (in milliseconds) before the filter value is submitted.\n         * A value of `0` indicates no delay. The default value is `500`.\n         * @type {boolean}\n         */\n        _this.filterDelay = 500;\n        /**\n         * Determines if the drop-down filter operators will be displayed.\n         * The default value is `true`.\n         * @type {boolean}\n         */\n        _this.showOperators = true;\n        return _this;\n    }\n    StringFilterCellComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-string-filter-cell',\n                    template: \"\\n        <kendo-grid-filter-wrapper-cell\\n            [column]=\\\"column\\\"\\n            [filter]=\\\"filter\\\"\\n            [operators]=\\\"operators\\\"\\n            [defaultOperator]=\\\"operator\\\"\\n            [showOperators]=\\\"showOperators\\\">\\n            <input\\n                class=\\\"k-textbox\\\"\\n                kendoGridFocusable\\n                kendoFilterInput\\n                [filterDelay]=\\\"filterDelay\\\"\\n                [ngModel]=\\\"currentFilter?.value\\\" />\\n        </kendo-grid-filter-wrapper-cell>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    StringFilterCellComponent.ctorParameters = function () { return [\n        { type: FilterService },\n        { type: LocalizationService }\n    ]; };\n    StringFilterCellComponent.propDecorators = {\n        filterDelay: [{ type: Input }],\n        showOperators: [{ type: Input }]\n    };\n    return StringFilterCellComponent;\n}(StringFilterComponent));\n\n/**\n * Represents a component which accommodates the filter operators.\n */\nvar FilterCellOperatorsComponent = /** @class */ (function () {\n    function FilterCellOperatorsComponent(localization) {\n        this.localization = localization;\n        this.clearText = 'Clear';\n        /**\n         * The filter operators that will be displayed.\n         */\n        this.operators = [];\n        /**\n         * Determines if the list of operators will be displayed.\n         * @type {boolean}\n         */\n        this.showOperators = true;\n        /**\n         * Fires when the operator is selected.\n         * @type {EventEmitter<string>}\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires when the **Clear** button is clicked.\n         * @type {EventEmitter<{}>}\n         */\n        this.clear = new EventEmitter();\n    }\n    Object.defineProperty(FilterCellOperatorsComponent.prototype, \"hostClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    FilterCellOperatorsComponent.prototype.onChange = function (dataItem) {\n        this.valueChange.emit(dataItem);\n    };\n    /**\n     * @hidden\n     */\n    FilterCellOperatorsComponent.prototype.clearClick = function () {\n        this.clear.emit();\n        return false;\n    };\n    /**\n     * @hidden\n     */\n    FilterCellOperatorsComponent.prototype.clearKeydown = function (args) {\n        if (args.keyCode === Keys.Enter || args.keyCode === Keys.Space) {\n            this.clear.emit();\n        }\n    };\n    /**\n     * @hidden\n     */\n    FilterCellOperatorsComponent.prototype.dropdownKeydown = function (args) {\n        if (args.defaultPrevented) {\n            return;\n        }\n        if (args.keyCode === Keys.Enter && !this.dropdown.isOpen) {\n            this.dropdown.toggle(true);\n            args.preventDefault();\n        }\n    };\n    FilterCellOperatorsComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.localization.changes.subscribe(function () { return _this.clearText = _this.localization.get(\"filterClearButton\"); });\n    };\n    FilterCellOperatorsComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-filter-cell-operators',\n                    template: \"\\n        <kendo-dropdownlist\\n            #dropdown\\n            *ngIf=\\\"showOperators\\\"\\n            kendoGridFocusable\\n            [data]=\\\"operators\\\"\\n            class=\\\"k-dropdown-operator\\\"\\n            (valueChange)=\\\"onChange($event)\\\"\\n            [value]=\\\"value\\\"\\n            iconClass=\\\"k-i-filter\\\"\\n            [valuePrimitive]=\\\"true\\\"\\n            textField=\\\"text\\\"\\n            [popupSettings]=\\\"{ width: 'auto' }\\\"\\n            valueField=\\\"value\\\"\\n            (keydown)=\\\"dropdownKeydown($event)\\\">\\n        </kendo-dropdownlist>\\n        <button type=\\\"button\\\"\\n            kendoGridFocusable\\n            [ngClass]=\\\"{'k-clear-button-visible': showButton}\\\"\\n            class=\\\"k-button k-button-icon\\\"\\n            [title]=\\\"clearText\\\"\\n            (click)=\\\"clearClick()\\\"\\n            (keydown)=\\\"clearKeydown($event)\\\">\\n                <span class=\\\"k-icon k-i-filter-clear\\\"></span>\\n        </button>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    FilterCellOperatorsComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    FilterCellOperatorsComponent.propDecorators = {\n        hostClasses: [{ type: HostBinding, args: ['class.k-filtercell-operator',] }],\n        dropdown: [{ type: ViewChild, args: ['dropdown',] }],\n        operators: [{ type: Input }],\n        showButton: [{ type: Input }],\n        showOperators: [{ type: Input }],\n        value: [{ type: Input }],\n        valueChange: [{ type: Output }],\n        clear: [{ type: Output }]\n    };\n    return FilterCellOperatorsComponent;\n}());\n\n// tslint:disable:no-access-missing-member\nvar stringOperators$1 = localizeOperators$1({\n    \"filterContainsOperator\": \"contains\",\n    \"filterNotContainsOperator\": \"doesnotcontain\",\n    // tslint:disable-next-line:object-literal-sort-keys\n    \"filterEqOperator\": \"eq\",\n    \"filterNotEqOperator\": \"neq\",\n    \"filterStartsWithOperator\": \"startswith\",\n    \"filterEndsWithOperator\": \"endswith\",\n    \"filterIsNullOperator\": \"isnull\",\n    \"filterIsNotNullOperator\": \"isnotnull\",\n    \"filterIsEmptyOperator\": \"isempty\",\n    \"filterIsNotEmptyOperator\": \"isnotempty\"\n});\n/**\n * @hidden\n */\nvar AutoCompleteFilterCellComponent = /** @class */ (function (_super) {\n    __extends(AutoCompleteFilterCellComponent, _super);\n    function AutoCompleteFilterCellComponent(filterService, column, localization) {\n        var _this = _super.call(this, filterService) || this;\n        _this.localization = localization;\n        _this.showOperators = true;\n        _this.defaultOperators = stringOperators$1(_this.localization);\n        _this.column = column;\n        return _this;\n    }\n    Object.defineProperty(AutoCompleteFilterCellComponent.prototype, \"valueField\", {\n        get: function () {\n            return this._valueField ? this._valueField : this.column.field;\n        },\n        set: function (value) {\n            this._valueField = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteFilterCellComponent.prototype, \"currentFilter\", {\n        get: function () {\n            return this.filterByField(this.column.field);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoCompleteFilterCellComponent.prototype, \"currentOperator\", {\n        get: function () {\n            return this.currentFilter ? this.currentFilter.operator : \"contains\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AutoCompleteFilterCellComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-autocomplete-filter-cell',\n                    template: \"\\n        <kendo-grid-filter-wrapper-cell\\n            [column]=\\\"column\\\"\\n            [filter]=\\\"filter\\\"\\n            [operators]=\\\"operators\\\"\\n            [showOperators]=\\\"showOperators\\\">\\n            <kendo-autocomplete\\n                kendoFilterInput\\n                [data]=\\\"data\\\"\\n                [valueField]=\\\"valueField\\\"\\n                [value]=\\\"currentFilter?.value\\\">\\n            </kendo-autocomplete>\\n        </kendo-grid-filter-wrapper-cell>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    AutoCompleteFilterCellComponent.ctorParameters = function () { return [\n        { type: FilterService },\n        { type: ColumnComponent },\n        { type: LocalizationService }\n    ]; };\n    AutoCompleteFilterCellComponent.propDecorators = {\n        showOperators: [{ type: Input }],\n        column: [{ type: Input }],\n        filter: [{ type: Input }],\n        data: [{ type: Input }],\n        valueField: [{ type: Input }]\n    };\n    return AutoCompleteFilterCellComponent;\n}(BaseFilterCellComponent));\n\n// tslint:disable:no-access-missing-member\n/**\n * @hidden\n */\nvar BooleanFilterComponent = /** @class */ (function (_super) {\n    __extends(BooleanFilterComponent, _super);\n    function BooleanFilterComponent(filterService, localization) {\n        var _this = _super.call(this, filterService) || this;\n        _this.localization = localization;\n        /**\n         * @hidden\n         */\n        _this.operator = \"eq\";\n        /**\n         * @hidden\n         */\n        _this.items = [\n            { text: _this.localization.get(\"filterIsTrue\"), value: true },\n            { text: _this.localization.get(\"filterIsFalse\"), value: false }\n        ];\n        /**\n         * @hidden\n         */\n        _this.defaultItem = { text: _this.localization.get(\"filterBooleanAll\"), value: null };\n        return _this;\n    }\n    Object.defineProperty(BooleanFilterComponent.prototype, \"hostClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BooleanFilterComponent.prototype, \"currentFilter\", {\n        /**\n         * The current filter for the associated column field.\n         * @readonly\n         * @type {FilterDescriptor}\n         */\n        get: function () {\n            return this.filterByField(this.column.field);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BooleanFilterComponent.prototype, \"currentOperator\", {\n        /**\n         * The current filter operator for the associated column field.\n         * @readonly\n         * @type {string}\n         */\n        get: function () {\n            return this.currentFilter ? this.currentFilter.operator : this.operator;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BooleanFilterComponent.prototype.ngOnInit = function () {\n        this.subscription = this.localization.changes.subscribe(this.localizationChange.bind(this));\n    };\n    BooleanFilterComponent.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n        _super.prototype.ngOnDestroy.call(this);\n    };\n    BooleanFilterComponent.prototype.localizationChange = function () {\n        this.items = [\n            { text: this.localization.get(\"filterIsTrue\"), value: true },\n            { text: this.localization.get(\"filterIsFalse\"), value: false }\n        ];\n        this.defaultItem = { text: this.localization.get(\"filterBooleanAll\"), value: null };\n    };\n    BooleanFilterComponent.propDecorators = {\n        hostClasses: [{ type: HostBinding, args: ['class.k-filtercell-boolean',] }],\n        column: [{ type: Input }],\n        filter: [{ type: Input }]\n    };\n    return BooleanFilterComponent;\n}(BaseFilterCellComponent));\n\n/**\n * Represents a Boolean filter-cell component.\n *\n * @example\n *\n *  ```html-no-run\n *      <kendo-grid-column field=\"ProductName\" title=\"Product Name\">\n *          <ng-template kendoGridFilterCellTemplate let-filter let-column=\"column\">\n *          <kendo-grid-boolean-filter-cell\n *              [column]=\"column\"\n *              [filter]=\"filter\">\n *          </kendo-grid-boolean-filter-cell>\n *          </ng-template>\n *      </kendo-grid-column>\n *   ```\n */\nvar BooleanFilterCellComponent = /** @class */ (function (_super) {\n    __extends(BooleanFilterCellComponent, _super);\n    function BooleanFilterCellComponent(filterService, localization, cd) {\n        var _this = _super.call(this, filterService, localization) || this;\n        _this.cd = cd;\n        return _this;\n    }\n    BooleanFilterCellComponent.prototype.localizationChange = function () {\n        _super.prototype.localizationChange.call(this);\n        this.cd.markForCheck();\n    };\n    BooleanFilterCellComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-boolean-filter-cell',\n                    template: \"\\n        <kendo-grid-filter-wrapper-cell\\n            [column]=\\\"column\\\"\\n            [filter]=\\\"filter\\\"\\n            [showOperators]=\\\"false\\\"\\n            [defaultOperator]=\\\"operator\\\">\\n            <kendo-dropdownlist\\n                kendoFilterInput\\n                [defaultItem]=\\\"defaultItem\\\"\\n                [data]=\\\"items\\\"\\n                textField=\\\"text\\\"\\n                valueField=\\\"value\\\"\\n                [popupSettings]=\\\"{ width: 'auto' }\\\"\\n                [valuePrimitive]=\\\"true\\\"\\n                [value]=\\\"currentFilter?.value\\\">\\n            </kendo-dropdownlist>\\n        </kendo-grid-filter-wrapper-cell>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    BooleanFilterCellComponent.ctorParameters = function () { return [\n        { type: FilterService },\n        { type: LocalizationService },\n        { type: ChangeDetectorRef }\n    ]; };\n    return BooleanFilterCellComponent;\n}(BooleanFilterComponent));\n\n// tslint:disable:no-access-missing-member\nvar dateOperators = localizeOperators$1({\n    \"filterEqOperator\": \"eq\",\n    \"filterNotEqOperator\": \"neq\",\n    // tslint:disable-next-line:object-literal-sort-keys\n    \"filterAfterOrEqualOperator\": \"gte\",\n    \"filterAfterOperator\": \"gt\",\n    \"filterBeforeOrEqualOperator\": \"lte\",\n    \"filterBeforeOperator\": \"lt\",\n    \"filterIsNullOperator\": \"isnull\",\n    \"filterIsNotNullOperator\": \"isnotnull\"\n});\n/**\n * @hidden\n */\nvar DateFilterComponent = /** @class */ (function (_super) {\n    __extends(DateFilterComponent, _super);\n    function DateFilterComponent(filterService, localization) {\n        var _this = _super.call(this, filterService) || this;\n        _this.localization = localization;\n        /**\n         * The default filter operator. Defaults to `contains`.\n         * @type {string}\n         */\n        _this.operator = \"gte\";\n        /**\n         * Defines the active view that the calendar initially renders.\n         * By default, the active view is `month`.\n         *\n         * > You have to set `activeView` within the `topView`-`bottomView` range.\n         */\n        _this.activeView = \"month\";\n        /**\n         * Defines the bottommost calendar view, to which the user can navigate.\n         */\n        _this.bottomView = \"month\";\n        /**\n         * Defines the topmost calendar view, to which the user can navigate.\n         */\n        _this.topView = \"century\";\n        /**\n         * Determines whether to display a week number column in the `month` view of the Calendar.\n         */\n        _this.weekNumber = false;\n        _this.defaultOperators = dateOperators(_this.localization);\n        return _this;\n    }\n    Object.defineProperty(DateFilterComponent.prototype, \"currentFilter\", {\n        /**\n         * The current filter for the associated column field.\n         * @readonly\n         * @type {FilterDescriptor}\n         */\n        get: function () {\n            return this.filterByField(this.column.field);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateFilterComponent.prototype, \"format\", {\n        /**\n         * Specifies the date format that is used when the component is not focused.\n         * By default, the `column.format` value is used (if set).\n         *\n         * @readonly\n         * @type {string}\n         */\n        get: function () {\n            return !isNullOrEmptyString(this._format) ? this._format : this.columnFormat;\n        },\n        /**\n         * Specifies the date format that is used when the component is not focused.\n         * By default, the `column.format` value is used (if set).\n         */\n        set: function (value) {\n            this._format = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateFilterComponent.prototype, \"columnFormat\", {\n        get: function () {\n            return this.column && !isNullOrEmptyString(this.column.format) ?\n                extractFormat(this.column.format) : \"d\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateFilterComponent.prototype, \"currentOperator\", {\n        /**\n         * The current filter operator for the associated column field.\n         * @readonly\n         * @type {string}\n         */\n        get: function () {\n            return this.currentFilter ? this.currentFilter.operator : this.operator;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DateFilterComponent.prototype.ngOnInit = function () {\n        this.subscription = this.localization.changes.subscribe(this.localizationChange.bind(this));\n    };\n    DateFilterComponent.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n        _super.prototype.ngOnDestroy.call(this);\n    };\n    DateFilterComponent.prototype.localizationChange = function () {\n        this.defaultOperators = dateOperators(this.localization);\n        if (this.operatorList.length) {\n            this.operators = toJSON(this.operatorList.toArray());\n        }\n    };\n    DateFilterComponent.propDecorators = {\n        column: [{ type: Input }],\n        filter: [{ type: Input }],\n        operator: [{ type: Input }],\n        format: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        formatPlaceholder: [{ type: Input }],\n        placeholder: [{ type: Input }],\n        activeView: [{ type: Input }],\n        bottomView: [{ type: Input }],\n        topView: [{ type: Input }],\n        weekNumber: [{ type: Input }]\n    };\n    return DateFilterComponent;\n}(BaseFilterCellComponent));\n\n/**\n * Represents a date-filter cell component.\n *\n * @example\n *\n *  ```html-no-run\n *      <kendo-grid-column field=\"OrderDate\" title=\"Order Date\">\n *          <ng-template kendoGridFilterCellTemplate let-filter let-column=\"column\">\n *          <kendo-grid-date-filter-cell\n *              [showOperators]=\"false\"\n *              [column]=\"column\"\n *              [filter]=\"filter\">\n *          </kendo-grid-date-filter-cell>\n *          </ng-template>\n *      </kendo-grid-column>\n *   ```\n */\nvar DateFilterCellComponent = /** @class */ (function (_super) {\n    __extends(DateFilterCellComponent, _super);\n    function DateFilterCellComponent(filterService, localization) {\n        var _this = _super.call(this, filterService, localization) || this;\n        _this.localization = localization;\n        /**\n         * Determines if the drop-down filter operators will be displayed. The default value is `true`.\n         * @type {boolean}\n         */\n        _this.showOperators = true;\n        return _this;\n    }\n    DateFilterCellComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-date-filter-cell',\n                    template: \"\\n        <kendo-grid-filter-wrapper-cell\\n            [column]=\\\"column\\\"\\n            [filter]=\\\"filter\\\"\\n            [operators]=\\\"operators\\\"\\n            [defaultOperator]=\\\"operator\\\"\\n            [showOperators]=\\\"showOperators\\\"\\n            >\\n            <kendo-datepicker\\n                kendoFilterInput\\n                [value]=\\\"currentFilter?.value\\\"\\n                [format]=\\\"format\\\"\\n                [formatPlaceholder]=\\\"formatPlaceholder\\\"\\n                [placeholder]=\\\"placeholder\\\"\\n                [activeView]=\\\"activeView\\\"\\n                [bottomView]=\\\"bottomView\\\"\\n                [topView]=\\\"topView\\\"\\n                [min]=\\\"min\\\"\\n                [max]=\\\"max\\\"\\n                [weekNumber]=\\\"weekNumber\\\"\\n                >\\n            </kendo-datepicker>\\n        </kendo-grid-filter-wrapper-cell>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    DateFilterCellComponent.ctorParameters = function () { return [\n        { type: FilterService },\n        { type: LocalizationService }\n    ]; };\n    DateFilterCellComponent.propDecorators = {\n        showOperators: [{ type: Input }]\n    };\n    return DateFilterCellComponent;\n}(DateFilterComponent));\n\n/**\n * @hidden\n */\nvar ColGroupComponent = /** @class */ (function () {\n    function ColGroupComponent() {\n        this.columns = [];\n        this.groups = [];\n    }\n    Object.defineProperty(ColGroupComponent.prototype, \"columnsToRender\", {\n        get: function () {\n            return columnsToRender(this.columns);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColGroupComponent.prototype.trackBy = function (index, _item) {\n        return index;\n    };\n    ColGroupComponent.decorators = [\n        { type: Component, args: [{\n                    selector: '[kendoGridColGroup]',\n                    template: \"\\n    <ng-template [ngIf]=\\\"true\\\">\\n        <col [class.k-group-col]=\\\"true\\\" *ngFor=\\\"let g of groups\\\" />\\n        <col [class.k-hierarchy-col]=\\\"true\\\" *ngIf=\\\"detailTemplate?.templateRef\\\"/>\\n        <col *ngFor=\\\"let column of columnsToRender; trackBy: trackBy;\\\" [style.width.px]=\\\"column.width\\\"/>\\n    </ng-template>\\n    \"\n                },] },\n    ];\n    ColGroupComponent.propDecorators = {\n        columns: [{ type: Input }],\n        groups: [{ type: Input }],\n        detailTemplate: [{ type: Input }]\n    };\n    return ColGroupComponent;\n}());\n\n/**\n * @hidden\n */\nvar LoadingComponent = /** @class */ (function () {\n    function LoadingComponent(localization) {\n        this.localization = localization;\n        this.hostClass = true;\n    }\n    Object.defineProperty(LoadingComponent.prototype, \"loadingText\", {\n        get: function () {\n            return this.localization.get('loading');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LoadingComponent.decorators = [\n        { type: Component, args: [{\n                    selector: '[kendoGridLoading]',\n                    template: \"\\n        <span class=\\\"k-loading-text\\\">{{ loadingText }}</span>\\n        <div class=\\\"k-loading-image\\\"></div>\\n        <div class=\\\"k-loading-color\\\"></div>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    LoadingComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    LoadingComponent.propDecorators = {\n        hostClass: [{ type: HostBinding, args: ['class.k-loading-mask',] }]\n    };\n    return LoadingComponent;\n}());\n\n/**\n * @hidden\n */\nvar ResizableContainerDirective = /** @class */ (function () {\n    function ResizableContainerDirective(el, renderer, resizeService, grid) {\n        this.el = el;\n        this.renderer = renderer;\n        this.resizeService = resizeService;\n        this.grid = grid;\n        this.enabled = false;\n    }\n    Object.defineProperty(ResizableContainerDirective.prototype, \"lockedWidth\", {\n        set: function (value) {\n            this._lockedWidth = value;\n            if (this.enabled) {\n                this.attachResize();\n                this.resize();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ResizableContainerDirective.prototype, \"kendoGridResizableContainer\", {\n        set: function (enabled) {\n            var refresh = enabled !== this.enabled;\n            this.enabled = enabled;\n            if (refresh) {\n                this.attachResize();\n                this.resize();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ResizableContainerDirective.prototype.ngOnDestroy = function () {\n        if (this.resizeSubscription) {\n            this.resizeSubscription.unsubscribe();\n        }\n    };\n    ResizableContainerDirective.prototype.attachResize = function () {\n        if (this.resizeSubscription && !this.enabled) {\n            this.resizeSubscription.unsubscribe();\n            this.resizeSubscription = null;\n        }\n        if (!this.resizeSubscription && this.enabled) {\n            this.resizeSubscription = this.resizeService.changes.subscribe(this.resize.bind(this));\n        }\n    };\n    ResizableContainerDirective.prototype.resize = function () {\n        if (this.grid && this.grid.wrapper) {\n            var containerElement = this.grid.wrapper.nativeElement;\n            var width = Math.max(containerElement.clientWidth - this._lockedWidth, 0);\n            if (this.enabled && width > 0) {\n                this.renderer.setStyle(this.el.nativeElement, \"width\", width + \"px\");\n            }\n            else {\n                this.renderer.setStyle(this.el.nativeElement, \"width\", \"\");\n            }\n        }\n    };\n    ResizableContainerDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridResizableContainer]'\n                },] },\n    ];\n    /** @nocollapse */\n    ResizableContainerDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: ResizeService },\n        { type: GridComponent, decorators: [{ type: Optional }] }\n    ]; };\n    ResizableContainerDirective.propDecorators = {\n        lockedWidth: [{ type: Input, args: ['lockedWidth',] }],\n        kendoGridResizableContainer: [{ type: Input }]\n    };\n    return ResizableContainerDirective;\n}());\n\n/**\n * @hidden\n */\nvar TemplateContextDirective = /** @class */ (function () {\n    function TemplateContextDirective(viewContainerRef) {\n        this.viewContainerRef = viewContainerRef;\n    }\n    Object.defineProperty(TemplateContextDirective.prototype, \"templateContext\", {\n        set: function (context) {\n            this.removeView();\n            if (context.templateRef) {\n                this.insertedViewRef = this.viewContainerRef.createEmbeddedView(context.templateRef, context);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TemplateContextDirective.prototype.ngOnDestroy = function () {\n        this.removeView();\n    };\n    TemplateContextDirective.prototype.removeView = function () {\n        if (this.insertedViewRef) {\n            this.viewContainerRef.remove(this.viewContainerRef.indexOf(this.insertedViewRef));\n            this.insertedViewRef = undefined;\n        }\n    };\n    TemplateContextDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[templateContext]' // tslint:disable-line:directive-selector\n                },] },\n    ];\n    /** @nocollapse */\n    TemplateContextDirective.ctorParameters = function () { return [\n        { type: ViewContainerRef }\n    ]; };\n    TemplateContextDirective.propDecorators = {\n        templateContext: [{ type: Input }]\n    };\n    return TemplateContextDirective;\n}());\n\n/**\n * @hidden\n */\nvar FocusGroup = /** @class */ (function () {\n    function FocusGroup(root) {\n        this.root = root;\n        this.active = true;\n        this.children = [];\n        this.root.registerGroup(this);\n    }\n    Object.defineProperty(FocusGroup.prototype, \"focusableChildren\", {\n        get: function () {\n            return this.children.filter(function (el) { return el.canFocus(); });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FocusGroup.prototype, \"isActive\", {\n        get: function () {\n            return this.active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FocusGroup.prototype.ngOnDestroy = function () {\n        this.root.unregisterGroup(this);\n    };\n    FocusGroup.prototype.registerElement = function (element) {\n        this.unregisterElement(element);\n        this.children.push(element);\n    };\n    FocusGroup.prototype.unregisterElement = function (element) {\n        this.children = this.children.filter(function (f) { return f !== element; });\n    };\n    /**\n     * Returns a Boolean value which indicates if the group will receive focus when the cell is focused.\n     * Requires a single \"simple\" focusable element such as a button or a checkbox.\n     */\n    FocusGroup.prototype.isNavigable = function () {\n        var focusable = this.focusableChildren;\n        return focusable.length === 1 && focusable[0].isNavigable();\n    };\n    FocusGroup.prototype.canFocus = function () {\n        return this.focusableChildren.length > 0;\n    };\n    FocusGroup.prototype.focus = function () {\n        if (this.canFocus() && !this.hasFocus()) {\n            this.focusableChildren[0].focus();\n        }\n    };\n    FocusGroup.prototype.activate = function () {\n        this.toggleState(true);\n    };\n    FocusGroup.prototype.deactivate = function () {\n        this.toggleState(false);\n    };\n    FocusGroup.prototype.hasFocus = function () {\n        return this.children.reduce(function (focused, element) { return focused || element.hasFocus(); }, false);\n    };\n    FocusGroup.prototype.toggleState = function (active) {\n        if (this.active !== active) {\n            this.active = active;\n            this.children.forEach(function (f) { return f.toggle(active); });\n        }\n    };\n    FocusGroup.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    FocusGroup.ctorParameters = function () { return [\n        { type: FocusRoot }\n    ]; };\n    return FocusGroup;\n}());\n\nvar id = 0;\nfunction nextId() {\n    return id++;\n}\n/**\n * @hidden\n */\nvar LogicalCellDirective = /** @class */ (function () {\n    function LogicalCellDirective(focusGroup, element, columnInfoService, idService, navigationService, renderer, zone, cellContext) {\n        this.focusGroup = focusGroup;\n        this.element = element;\n        this.columnInfoService = columnInfoService;\n        this.idService = idService;\n        this.navigationService = navigationService;\n        this.renderer = renderer;\n        this.zone = zone;\n        this.cellContext = cellContext;\n        this.logicalSlaveCell = false;\n        this.colSpan = 1;\n        this.rowSpan = 1;\n        this.dataRowIndex = -1;\n        this.detailExpandCell = false;\n        this.uid = nextId();\n    }\n    Object.defineProperty(LogicalCellDirective.prototype, \"id\", {\n        get: function () {\n            if (!this.logicalSlaveCell && this.columnInfoService.isLocked) {\n                return this.idService.cellId(this.logicalRowIndex, this.logicalColIndex);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogicalCellDirective.prototype, \"ariaColIndex\", {\n        get: function () {\n            if (this.logicalSlaveCell || this.logicalColIndex === -1) {\n                return undefined;\n            }\n            return this.logicalColIndex + 1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LogicalCellDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        if (!this.navigationService.enabled) {\n            return;\n        }\n        this.navigationChange = this.navigationService.changes.subscribe(function (e) { return _this.onNavigationChange(e); });\n    };\n    LogicalCellDirective.prototype.ngDoCheck = function () {\n        if (!this.navigationService.enabled || this.logicalColIndex === -1) {\n            return;\n        }\n        if (this.cellContext) {\n            this.cellContext.focusGroup = this.focusGroup;\n        }\n        this.registerNoChanges();\n    };\n    LogicalCellDirective.prototype.ngOnChanges = function (changes) {\n        if (!this.navigationService.enabled) {\n            return;\n        }\n        var keys = Object.keys(changes);\n        if ((keys.length === 1 && keys[0] === 'groupItem') || this.logicalColIndex === -1) {\n            // Ignore groupItem changes as the reference is not stable\n            return;\n        }\n        var indexChange = changes.logicalColIndex;\n        var rowIndexChange = changes.logicalRowIndex;\n        var index = indexChange && !indexChange.isFirstChange() ? indexChange.previousValue : this.logicalColIndex;\n        var rowIndex = rowIndexChange && !rowIndexChange.isFirstChange() ? rowIndexChange.previousValue : this.logicalRowIndex;\n        this.navigationService.unregisterCell(index, rowIndex, this);\n        this.registerChanges();\n        this.updateElement();\n    };\n    LogicalCellDirective.prototype.ngOnDestroy = function () {\n        if (this.navigationChange) {\n            this.navigationChange.unsubscribe();\n        }\n        this.navigationService.unregisterCell(this.logicalColIndex, this.logicalRowIndex, this);\n    };\n    LogicalCellDirective.prototype.onNavigationChange = function (e) {\n        var active = this.logicalColIndex === e.colIndex && this.logicalRowIndex === e.rowIndex;\n        var wasActive = this.logicalColIndex === e.prevColIndex && this.logicalRowIndex === e.prevRowIndex;\n        if (active || wasActive) {\n            this.updateElement();\n        }\n    };\n    LogicalCellDirective.prototype.updateElement = function () {\n        var _this = this;\n        var el = this.element.nativeElement;\n        this.renderer.setAttribute(el, 'tabIndex', this.isFocusable() && !this.logicalSlaveCell ? '0' : '-1');\n        if (this.isFocused()) {\n            if (this.focusGroup.isNavigable()) {\n                this.focusGroup.focus();\n            }\n            else {\n                if (!this.logicalSlaveCell && this.navigationService.autoFocusCell(this.logicalColIndex, this.logicalColIndex + this.colSpan - 1)) {\n                    this.microtask(function () {\n                        return _this.isFocused() && el.focus();\n                    });\n                }\n                this.renderer.addClass(el, 'k-state-focused');\n            }\n        }\n        else {\n            this.renderer.removeClass(el, 'k-state-focused');\n        }\n    };\n    LogicalCellDirective.prototype.microtask = function (callback) {\n        this.zone.runOutsideAngular(function () {\n            return Promise.resolve(null).then(callback);\n        });\n    };\n    LogicalCellDirective.prototype.registerChanges = function () {\n        if (!this.logicalSlaveCell) {\n            this.navigationService.registerCell(this);\n        }\n    };\n    LogicalCellDirective.prototype.registerNoChanges = function () {\n        if (!this.logicalSlaveCell) {\n            this.navigationService.registerCellOnCurrentRow(this);\n        }\n    };\n    LogicalCellDirective.prototype.isFocusable = function () {\n        return this.navigationService.isCellFocusable(this);\n    };\n    LogicalCellDirective.prototype.isFocused = function () {\n        return this.navigationService.isCellFocused(this);\n    };\n    LogicalCellDirective.decorators = [\n        { type: Directive, args: [{\n                    providers: [{\n                            provide: FocusGroup,\n                            deps: [FocusRoot],\n                            useClass: FocusGroup\n                        }],\n                    selector: '[kendoGridLogicalCell]'\n                },] },\n    ];\n    /** @nocollapse */\n    LogicalCellDirective.ctorParameters = function () { return [\n        { type: FocusGroup },\n        { type: ElementRef },\n        { type: ColumnInfoService },\n        { type: IdService },\n        { type: NavigationService },\n        { type: Renderer2 },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CELL_CONTEXT,] }] }\n    ]; };\n    LogicalCellDirective.propDecorators = {\n        logicalColIndex: [{ type: Input }],\n        logicalRowIndex: [{ type: Input }],\n        logicalSlaveCell: [{ type: Input }],\n        colIndex: [{ type: Input }],\n        colSpan: [{ type: Input }],\n        rowSpan: [{ type: Input }],\n        groupItem: [{ type: Input }],\n        dataRowIndex: [{ type: Input }],\n        dataItem: [{ type: Input }],\n        detailExpandCell: [{ type: Input }],\n        id: [{ type: HostBinding, args: ['attr.id',] }],\n        ariaColIndex: [{ type: HostBinding, args: ['attr.aria-colindex',] }]\n    };\n    return LogicalCellDirective;\n}());\n\nvar id$1 = 0;\nfunction nextId$1() {\n    return id$1++;\n}\n/**\n * @hidden\n */\nvar LogicalRowDirective = /** @class */ (function () {\n    function LogicalRowDirective(idService, navigation) {\n        this.idService = idService;\n        this.navigation = navigation;\n        this.logicalSlaveRow = false;\n        this.logicalSlaveCellsCount = 0;\n        this.dataRowIndex = -1;\n        this.uid = nextId$1();\n    }\n    Object.defineProperty(LogicalRowDirective.prototype, \"hostRole\", {\n        get: function () {\n            return this.logicalSlaveRow ? 'presentation' : 'row';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogicalRowDirective.prototype, \"ariaRowIndex\", {\n        get: function () {\n            if (this.navigation.enabled) {\n                return this.logicalRowIndex + 1;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogicalRowDirective.prototype, \"ariaOwns\", {\n        get: function () {\n            if (!this.navigation.enabled || this.logicalSlaveRow || this.logicalSlaveCellsCount === 0) {\n                return undefined;\n            }\n            var ids = [];\n            var total = this.logicalCellsCount + this.logicalSlaveCellsCount;\n            for (var cellIndex = this.logicalCellsCount; cellIndex < total; cellIndex++) {\n                ids.push(this.idService.cellId(this.logicalRowIndex, cellIndex));\n            }\n            return ids.join(' ');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LogicalRowDirective.prototype.ngOnChanges = function (changes) {\n        if (!this.navigation.enabled || this.logicalSlaveRow) {\n            return;\n        }\n        var indexChange = changes.logicalRowIndex;\n        var logicalSlaveRowChange = changes.logicalSlaveRow;\n        if (indexChange || logicalSlaveRowChange) {\n            var index = indexChange && !indexChange.isFirstChange() ? indexChange.previousValue : this.logicalRowIndex;\n            this.navigation.unregisterRow(index, this);\n            this.navigation.registerRow(this);\n        }\n        else if (anyChanged(['dataRowIndex', 'dataItem'], changes)) {\n            this.navigation.updateRow(this);\n        }\n    };\n    LogicalRowDirective.prototype.ngOnDestroy = function () {\n        this.navigation.unregisterRow(this.logicalRowIndex, this);\n    };\n    LogicalRowDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridLogicalRow]'\n                },] },\n    ];\n    /** @nocollapse */\n    LogicalRowDirective.ctorParameters = function () { return [\n        { type: IdService },\n        { type: NavigationService }\n    ]; };\n    LogicalRowDirective.propDecorators = {\n        logicalRowIndex: [{ type: Input }],\n        logicalSlaveRow: [{ type: Input }],\n        logicalCellsCount: [{ type: Input }],\n        logicalSlaveCellsCount: [{ type: Input }],\n        dataRowIndex: [{ type: Input }],\n        dataItem: [{ type: Input }],\n        hostRole: [{ type: HostBinding, args: ['attr.role',] }],\n        ariaRowIndex: [{ type: HostBinding, args: ['attr.aria-rowindex',] }],\n        ariaOwns: [{ type: HostBinding, args: ['attr.aria-owns',] }]\n    };\n    return LogicalRowDirective;\n}());\n\n/* tslint:disable:pipe-naming */\nvar FORMAT_REGEX = /\\{\\d+:?/;\n/**\n * @hidden\n */\nvar FieldAccessorPipe = /** @class */ (function () {\n    function FieldAccessorPipe(intlService) {\n        this.intlService = intlService;\n    }\n    FieldAccessorPipe.prototype.transform = function (dataItem, fieldName, format) {\n        if (!isNullOrEmptyString(fieldName)) {\n            var value = getter(fieldName)(dataItem);\n            if (!isNullOrEmptyString(format)) {\n                return this.formatValue(format, value);\n            }\n            return value;\n        }\n        return dataItem;\n    };\n    FieldAccessorPipe.prototype.formatValue = function (format, value) {\n        var intl = this.intlService;\n        if (isString(format) && format.match(FORMAT_REGEX)) {\n            return intl.format(format, value);\n        }\n        return intl.toString(value, format);\n    };\n    FieldAccessorPipe.decorators = [\n        { type: Pipe, args: [{\n                    name: 'valueOf',\n                    pure: false\n                },] },\n    ];\n    /** @nocollapse */\n    FieldAccessorPipe.ctorParameters = function () { return [\n        { type: IntlService }\n    ]; };\n    return FieldAccessorPipe;\n}());\n\n/**\n * @hidden\n */\nvar columnsToResize = function (_a) {\n    var columns = _a.columns;\n    return Math.max(1, resizableColumns(columns).length);\n};\n/**\n * @hidden\n */\nvar row = function (selector) { return function (element) { return element.querySelector(selector); }; };\n/**\n * @hidden\n */\nvar headerRow = function (index) { return function (element) { return element.querySelectorAll('thead>tr')[index]; }; };\n/**\n * @hidden\n */\nvar cell = function (index, selector) {\n    if (selector === void 0) { selector = 'td'; }\n    return function (element) {\n        return element.querySelectorAll(selector + \":not(.k-group-cell):not(.k-hierarchy-cell)\")[index];\n    };\n};\n/**\n * @hidden\n */\nvar offsetWidth = function (element) { return element.offsetWidth; };\n/**\n * @hidden\n */\nvar pipe = function () {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return function (data) { return fns.reduce(function (state$$1, fn) { return state$$1 ? fn(state$$1) : 0; }, data); };\n};\n/**\n * @hidden\n */\nvar TableDirective = /** @class */ (function () {\n    function TableDirective(element, renderer, service, zone, cdr) {\n        this.element = element;\n        this.renderer = renderer;\n        this.service = service;\n        this.zone = zone;\n        this.cdr = cdr;\n        this.locked = false;\n        this.firstResize = false;\n    }\n    Object.defineProperty(TableDirective.prototype, \"minWidth\", {\n        get: function () {\n            return this.firstResize ? 0 : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TableDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        var obs = this.service\n            .changes.pipe(filter(function (e) { return _this.locked === e.locked; }));\n        this.subscription = obs.pipe(filter(function (e) { return e.type === 'start'; }), tap(this.initState.bind(this)), map(columnsToResize), switchMap(function (take$$1) {\n            return obs.pipe(filter(function (e) { return e.type === 'resizeTable'; }), map(function (e) { return e.delta; }), bufferCount(take$$1));\n        })).subscribe(this.resize.bind(this));\n        this.autoFitSubscription = this.service\n            .registerTable({\n            autoFit: this.autoFitObservable.bind(this),\n            locked: this.locked\n        });\n    };\n    TableDirective.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n        if (this.autoFitSubscription) {\n            this.autoFitSubscription();\n            this.autoFitSubscription = null;\n        }\n    };\n    TableDirective.prototype.initState = function () {\n        this.firstResize = true;\n        if (!this.virtualColumns || this.locked) {\n            this.originalWidth = offsetWidth(this.element.nativeElement);\n        }\n    };\n    TableDirective.prototype.resize = function (deltas) {\n        if (!this.virtualColumns || this.locked) {\n            var delta = deltas.reduce(function (sum, item) { return sum + item; }, 0);\n            var width = this.originalWidth + delta;\n            this.renderer.setStyle(this.element.nativeElement, 'width', width + 'px');\n        }\n        this.cdr.detectChanges();\n    };\n    TableDirective.prototype.autoFitObservable = function (columnInfo) {\n        var _this = this;\n        return Observable.create(function (observer) {\n            _this.zone.runOutsideAngular(function () {\n                _this.renderer.addClass(_this.element.nativeElement, 'k-autofitting');\n                _this.cdr.detectChanges();\n                var widths = columnInfo.map(_this.measureColumn.bind(_this));\n                _this.renderer.removeClass(_this.element.nativeElement, 'k-autofitting');\n                observer.next(widths);\n            });\n        });\n    };\n    TableDirective.prototype.measureColumn = function (info) {\n        var dom = this.element.nativeElement;\n        var header = pipe(headerRow(info.level), cell(info.headerIndex, 'th'), offsetWidth)(dom);\n        var data = 0;\n        if (!info.isParentSpan || (info.isParentSpan && info.isLastInSpan)) {\n            data = pipe(row('tbody>tr:not(.k-grouping-row):not(.k-grid-norecords)'), cell(info.index), offsetWidth)(dom);\n        }\n        var footer = pipe(row('tfoot>tr'), cell(info.index), offsetWidth)(dom);\n        return Math.max(header, data, footer);\n    };\n    TableDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: 'table' // tslint:disable-line:directive-selector\n                },] },\n    ];\n    /** @nocollapse */\n    TableDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: ColumnResizingService },\n        { type: NgZone },\n        { type: ChangeDetectorRef }\n    ]; };\n    TableDirective.propDecorators = {\n        locked: [{ type: Input }],\n        virtualColumns: [{ type: Input }],\n        minWidth: [{ type: HostBinding, args: ['style.min-width',] }]\n    };\n    return TableDirective;\n}());\n\nvar exportedModules = [\n    ColumnComponent,\n    ColumnGroupComponent,\n    LogicalCellDirective,\n    LogicalRowDirective,\n    FocusableDirective,\n    FooterTemplateDirective,\n    ColGroupComponent,\n    ResizableContainerDirective,\n    TemplateContextDirective,\n    FieldAccessorPipe,\n    DetailTemplateDirective,\n    SpanColumnComponent,\n    TableDirective,\n    LoadingComponent\n];\n/**\n * @hidden\n */\nvar SharedModule = /** @class */ (function () {\n    function SharedModule() {\n    }\n    SharedModule.exports = function () {\n        return [\n            ColumnComponent,\n            SpanColumnComponent,\n            ColumnGroupComponent,\n            FooterTemplateDirective,\n            DetailTemplateDirective,\n            FocusableDirective\n        ];\n    };\n    SharedModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [exportedModules],\n                    exports: [exportedModules, DraggableModule, EventsModule],\n                    imports: [CommonModule]\n                },] },\n    ];\n    return SharedModule;\n}());\n\n/**\n * Represents the `Contains` (**Contains**) filter operator.\n *\n * For more information and examples, refer to:\n * * [Setting the default filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-default-filter-operator)\n * * [Setting the order of the filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-order-of-the-filter-operators)\n */\nvar ContainsFilterOperatorComponent = /** @class */ (function (_super) {\n    __extends(ContainsFilterOperatorComponent, _super);\n    function ContainsFilterOperatorComponent(localization) {\n        return _super.call(this, \"contains\", localization) || this;\n    }\n    ContainsFilterOperatorComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: FilterOperatorBase,\n                            useExisting: forwardRef(function () { return ContainsFilterOperatorComponent; })\n                        }\n                    ],\n                    selector: 'kendo-filter-contains-operator',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    ContainsFilterOperatorComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return ContainsFilterOperatorComponent;\n}(FilterOperatorBase));\n\n/**\n * Represents the `DoesNotContain` (**Does not contain**) filter operator.\n *\n * For more information and examples, refer to:\n * * [Setting the default filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-default-filter-operator)\n * * [Setting the order of the filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-order-of-the-filter-operators)\n */\nvar DoesNotContainFilterOperatorComponent = /** @class */ (function (_super) {\n    __extends(DoesNotContainFilterOperatorComponent, _super);\n    function DoesNotContainFilterOperatorComponent(localization) {\n        return _super.call(this, \"doesnotcontain\", localization) || this;\n    }\n    DoesNotContainFilterOperatorComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: FilterOperatorBase,\n                            useExisting: forwardRef(function () { return DoesNotContainFilterOperatorComponent; })\n                        }\n                    ],\n                    selector: 'kendo-filter-not-contains-operator',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    DoesNotContainFilterOperatorComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return DoesNotContainFilterOperatorComponent;\n}(FilterOperatorBase));\n\n/**\n * Represents the `EndsWith` (**Ends with**) string filter operator.\n *\n * For more information and examples, refer to:\n * * [Setting the default filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-default-filter-operator)\n * * [Setting the order of the filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-order-of-the-filter-operators)\n */\nvar EndsWithFilterOperatorComponent = /** @class */ (function (_super) {\n    __extends(EndsWithFilterOperatorComponent, _super);\n    function EndsWithFilterOperatorComponent(localization) {\n        return _super.call(this, \"endswith\", localization) || this;\n    }\n    EndsWithFilterOperatorComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: FilterOperatorBase,\n                            useExisting: forwardRef(function () { return EndsWithFilterOperatorComponent; })\n                        }\n                    ],\n                    selector: 'kendo-filter-endswith-operator',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    EndsWithFilterOperatorComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return EndsWithFilterOperatorComponent;\n}(FilterOperatorBase));\n\n/**\n * Represents the `Equal` (**Is equal to**) filter operator.\n *\n * For more information and examples, refer to:\n * * [Setting the default filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-default-filter-operator)\n * * [Setting the order of the filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-order-of-the-filter-operators)\n */\nvar EqualFilterOperatorComponent = /** @class */ (function (_super) {\n    __extends(EqualFilterOperatorComponent, _super);\n    function EqualFilterOperatorComponent(localization) {\n        return _super.call(this, \"eq\", localization) || this;\n    }\n    EqualFilterOperatorComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: FilterOperatorBase,\n                            useExisting: forwardRef(function () { return EqualFilterOperatorComponent; })\n                        }\n                    ],\n                    selector: 'kendo-filter-eq-operator',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    EqualFilterOperatorComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return EqualFilterOperatorComponent;\n}(FilterOperatorBase));\n\n/**\n * Represents the `IsEmpty` (**Is empty**) filter operator.\n *\n * For more information and examples, refer to:\n * * [Setting the default filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-default-filter-operator)\n * * [Setting the order of the filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-order-of-the-filter-operators)\n */\nvar IsEmptyFilterOperatorComponent = /** @class */ (function (_super) {\n    __extends(IsEmptyFilterOperatorComponent, _super);\n    function IsEmptyFilterOperatorComponent(localization) {\n        return _super.call(this, \"isempty\", localization) || this;\n    }\n    IsEmptyFilterOperatorComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: FilterOperatorBase,\n                            useExisting: forwardRef(function () { return IsEmptyFilterOperatorComponent; })\n                        }\n                    ],\n                    selector: 'kendo-filter-isempty-operator',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    IsEmptyFilterOperatorComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return IsEmptyFilterOperatorComponent;\n}(FilterOperatorBase));\n\n/**\n * Represents the `IsNotEmpty` (**Is not empty**) filter operator.\n *\n * For more information and examples, refer to:\n * * [Setting the default filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-default-filter-operator)\n * * [Setting the order of the filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-order-of-the-filter-operators)\n */\nvar IsNotEmptyFilterOperatorComponent = /** @class */ (function (_super) {\n    __extends(IsNotEmptyFilterOperatorComponent, _super);\n    function IsNotEmptyFilterOperatorComponent(localization) {\n        return _super.call(this, \"isnotempty\", localization) || this;\n    }\n    IsNotEmptyFilterOperatorComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: FilterOperatorBase,\n                            useExisting: forwardRef(function () { return IsNotEmptyFilterOperatorComponent; })\n                        }\n                    ],\n                    selector: 'kendo-filter-isnotempty-operator',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    IsNotEmptyFilterOperatorComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return IsNotEmptyFilterOperatorComponent;\n}(FilterOperatorBase));\n\n/**\n * Represents the `IsNotNull` (**Is not null**) filter operator.\n *\n * For more information and examples, refer to:\n * * [Setting the default filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-default-filter-operator)\n * * [Setting the order of the filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-order-of-the-filter-operators)\n */\nvar IsNotNullFilterOperatorComponent = /** @class */ (function (_super) {\n    __extends(IsNotNullFilterOperatorComponent, _super);\n    function IsNotNullFilterOperatorComponent(localization) {\n        return _super.call(this, \"isnotnull\", localization) || this;\n    }\n    IsNotNullFilterOperatorComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: FilterOperatorBase,\n                            useExisting: forwardRef(function () { return IsNotNullFilterOperatorComponent; })\n                        }\n                    ],\n                    selector: 'kendo-filter-isnotnull-operator',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    IsNotNullFilterOperatorComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return IsNotNullFilterOperatorComponent;\n}(FilterOperatorBase));\n\n/**\n * Represents the `IsNull` (**Is null**) filter operator.\n *\n * For more information and examples, refer to:\n * * [Setting the default filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-default-filter-operator)\n * * [Setting the order of the filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-order-of-the-filter-operators)\n */\nvar IsNullFilterOperatorComponent = /** @class */ (function (_super) {\n    __extends(IsNullFilterOperatorComponent, _super);\n    function IsNullFilterOperatorComponent(localization) {\n        return _super.call(this, \"isnull\", localization) || this;\n    }\n    IsNullFilterOperatorComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: FilterOperatorBase,\n                            useExisting: forwardRef(function () { return IsNullFilterOperatorComponent; })\n                        }\n                    ],\n                    selector: 'kendo-filter-isnull-operator',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    IsNullFilterOperatorComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return IsNullFilterOperatorComponent;\n}(FilterOperatorBase));\n\n/**\n * Represents the `NotEqual` (**Is not equal to**) filter operator.\n *\n * For more information and examples, refer to:\n * * [Setting the default filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-default-filter-operator)\n * * [Setting the order of the filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-order-of-the-filter-operators)\n */\nvar NotEqualFilterOperatorComponent = /** @class */ (function (_super) {\n    __extends(NotEqualFilterOperatorComponent, _super);\n    function NotEqualFilterOperatorComponent(localization) {\n        return _super.call(this, \"neq\", localization) || this;\n    }\n    NotEqualFilterOperatorComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: FilterOperatorBase,\n                            useExisting: forwardRef(function () { return NotEqualFilterOperatorComponent; })\n                        }\n                    ],\n                    selector: 'kendo-filter-neq-operator',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    NotEqualFilterOperatorComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return NotEqualFilterOperatorComponent;\n}(FilterOperatorBase));\n\n/**\n * Represents the `StartsWith` (**Starts with**) filter operator.\n *\n * For more information and examples, refer to:\n * * [Setting the default filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-default-filter-operator)\n * * [Setting the order of the filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-order-of-the-filter-operators)\n */\nvar StartsWithFilterOperatorComponent = /** @class */ (function (_super) {\n    __extends(StartsWithFilterOperatorComponent, _super);\n    function StartsWithFilterOperatorComponent(localization) {\n        return _super.call(this, \"startswith\", localization) || this;\n    }\n    StartsWithFilterOperatorComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: FilterOperatorBase,\n                            useExisting: forwardRef(function () { return StartsWithFilterOperatorComponent; })\n                        }\n                    ],\n                    selector: 'kendo-filter-startswith-operator',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    StartsWithFilterOperatorComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return StartsWithFilterOperatorComponent;\n}(FilterOperatorBase));\n\n/*\n * Represents the `Greater` (**Is greater than**) numeric filter operator.\n *\n * For more information and examples, refer to:\n * * [Setting the default filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-default-filter-operator)\n * * [Setting the order of the filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-order-of-the-filter-operators)\n */\nvar GreaterFilterOperatorComponent = /** @class */ (function (_super) {\n    __extends(GreaterFilterOperatorComponent, _super);\n    function GreaterFilterOperatorComponent(localization) {\n        return _super.call(this, \"gt\", localization) || this;\n    }\n    GreaterFilterOperatorComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: FilterOperatorBase,\n                            useExisting: forwardRef(function () { return GreaterFilterOperatorComponent; })\n                        }\n                    ],\n                    selector: 'kendo-filter-gt-operator',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    GreaterFilterOperatorComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return GreaterFilterOperatorComponent;\n}(FilterOperatorBase));\n\n/**\n * Represents the `GreaterOrEqualTo` (**Is greater than or equal to**) numeric filter operator.\n *\n * For more information and examples, refer to:\n * * [Setting the default filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-default-filter-operator)\n * * [Setting the order of the filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-order-of-the-filter-operators)\n */\nvar GreaterOrEqualToFilterOperatorComponent = /** @class */ (function (_super) {\n    __extends(GreaterOrEqualToFilterOperatorComponent, _super);\n    function GreaterOrEqualToFilterOperatorComponent(localization) {\n        return _super.call(this, \"gte\", localization) || this;\n    }\n    GreaterOrEqualToFilterOperatorComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: FilterOperatorBase,\n                            useExisting: forwardRef(function () { return GreaterOrEqualToFilterOperatorComponent; })\n                        }\n                    ],\n                    selector: 'kendo-filter-gte-operator',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    GreaterOrEqualToFilterOperatorComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return GreaterOrEqualToFilterOperatorComponent;\n}(FilterOperatorBase));\n\n/*\n * Represents the `Less` (**Is less than**) numeric filter operator.\n *\n * For more information and examples, refer to:\n * * [Setting the default filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-default-filter-operator)\n * * [Setting the order of the filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-order-of-the-filter-operators)\n */\nvar LessFilterOperatorComponent = /** @class */ (function (_super) {\n    __extends(LessFilterOperatorComponent, _super);\n    function LessFilterOperatorComponent(localization) {\n        return _super.call(this, \"lt\", localization) || this;\n    }\n    LessFilterOperatorComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: FilterOperatorBase,\n                            useExisting: forwardRef(function () { return LessFilterOperatorComponent; })\n                        }\n                    ],\n                    selector: 'kendo-filter-lt-operator',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    LessFilterOperatorComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return LessFilterOperatorComponent;\n}(FilterOperatorBase));\n\n/*\n * Represents the `LessOrEqualTo` (**Is less than or equal to**) numeric filter operator.\n *\n * For more information and examples, refer to:\n * * [Setting the default filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-default-filter-operator)\n * * [Setting the order of the filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-order-of-the-filter-operators)\n */\nvar LessOrEqualToFilterOperatorComponent = /** @class */ (function (_super) {\n    __extends(LessOrEqualToFilterOperatorComponent, _super);\n    function LessOrEqualToFilterOperatorComponent(localization) {\n        return _super.call(this, \"lte\", localization) || this;\n    }\n    LessOrEqualToFilterOperatorComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: FilterOperatorBase,\n                            useExisting: forwardRef(function () { return LessOrEqualToFilterOperatorComponent; })\n                        }\n                    ],\n                    selector: 'kendo-filter-lte-operator',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    LessOrEqualToFilterOperatorComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return LessOrEqualToFilterOperatorComponent;\n}(FilterOperatorBase));\n\n/*\n * Represents the `Greater` (**Is after**) date filter operator.\n *\n * For more information and examples, refer to:\n * * [Setting the default filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-default-filter-operator)\n * * [Setting the order of the filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-order-of-the-filter-operators)\n */\nvar AfterFilterOperatorComponent = /** @class */ (function (_super) {\n    __extends(AfterFilterOperatorComponent, _super);\n    function AfterFilterOperatorComponent(localization) {\n        return _super.call(this, \"after\", localization) || this;\n    }\n    /**\n     * @hidden\n     */\n    AfterFilterOperatorComponent.prototype.toJSON = function () {\n        return {\n            text: this.text,\n            value: \"gt\"\n        };\n    };\n    AfterFilterOperatorComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: FilterOperatorBase,\n                            useExisting: forwardRef(function () { return AfterFilterOperatorComponent; })\n                        }\n                    ],\n                    selector: 'kendo-filter-after-operator',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    AfterFilterOperatorComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return AfterFilterOperatorComponent;\n}(FilterOperatorBase));\n\n/*\n * Represents the `GreaterOrEqualTo` (**Is after or equal to**) date filter operator.\n *\n * For more information and examples, refer to:\n * * [Setting the default filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-default-filter-operator)\n * * [Setting the order of the filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-order-of-the-filter-operators)\n */\nvar AfterEqFilterOperatorComponent = /** @class */ (function (_super) {\n    __extends(AfterEqFilterOperatorComponent, _super);\n    function AfterEqFilterOperatorComponent(localization) {\n        return _super.call(this, \"after-eq\", localization) || this;\n    }\n    /**\n     * @hidden\n     */\n    AfterEqFilterOperatorComponent.prototype.toJSON = function () {\n        return {\n            text: this.text,\n            value: \"gte\"\n        };\n    };\n    AfterEqFilterOperatorComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: FilterOperatorBase,\n                            useExisting: forwardRef(function () { return AfterEqFilterOperatorComponent; })\n                        }\n                    ],\n                    selector: 'kendo-filter-after-eq-operator',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    AfterEqFilterOperatorComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return AfterEqFilterOperatorComponent;\n}(FilterOperatorBase));\n\n/*\n * Represents the `LessOrEqualTo` (**Is before or equal to**) date filter operator.\n *\n * For more information and examples, refer to:\n * * [Setting the default filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-default-filter-operator)\n * * [Setting the order of the filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-order-of-the-filter-operators)\n */\nvar BeforeEqFilterOperatorComponent = /** @class */ (function (_super) {\n    __extends(BeforeEqFilterOperatorComponent, _super);\n    function BeforeEqFilterOperatorComponent(localization) {\n        return _super.call(this, \"before-eq\", localization) || this;\n    }\n    /**\n     * @hidden\n     */\n    BeforeEqFilterOperatorComponent.prototype.toJSON = function () {\n        return {\n            text: this.text,\n            value: \"lte\"\n        };\n    };\n    BeforeEqFilterOperatorComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: FilterOperatorBase,\n                            useExisting: forwardRef(function () { return BeforeEqFilterOperatorComponent; })\n                        }\n                    ],\n                    selector: 'kendo-filter-before-eq-operator',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    BeforeEqFilterOperatorComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return BeforeEqFilterOperatorComponent;\n}(FilterOperatorBase));\n\n/*\n * Represents the `Less then` (**Is before**) date filter operator.\n *\n * For more information and examples, refer to:\n * * [Setting the default filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-default-filter-operator)\n * * [Setting the order of the filter operators]({% slug builtinfiltertemplate_grid %}#toc-setting-the-order-of-the-filter-operators)\n */\nvar BeforeFilterOperatorComponent = /** @class */ (function (_super) {\n    __extends(BeforeFilterOperatorComponent, _super);\n    function BeforeFilterOperatorComponent(localization) {\n        return _super.call(this, \"before\", localization) || this;\n    }\n    /**\n     * @hidden\n     */\n    BeforeFilterOperatorComponent.prototype.toJSON = function () {\n        return {\n            text: this.text,\n            value: \"lt\"\n        };\n    };\n    BeforeFilterOperatorComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: FilterOperatorBase,\n                            useExisting: forwardRef(function () { return BeforeFilterOperatorComponent; })\n                        }\n                    ],\n                    selector: 'kendo-filter-before-operator',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    BeforeFilterOperatorComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    return BeforeFilterOperatorComponent;\n}(FilterOperatorBase));\n\nvar FILTER_OPERATORS = [\n    FilterCellOperatorsComponent,\n    ContainsFilterOperatorComponent,\n    DoesNotContainFilterOperatorComponent,\n    EndsWithFilterOperatorComponent,\n    EqualFilterOperatorComponent,\n    IsEmptyFilterOperatorComponent,\n    IsNotEmptyFilterOperatorComponent,\n    IsNotNullFilterOperatorComponent,\n    IsNullFilterOperatorComponent,\n    NotEqualFilterOperatorComponent,\n    StartsWithFilterOperatorComponent,\n    GreaterFilterOperatorComponent,\n    GreaterOrEqualToFilterOperatorComponent,\n    LessFilterOperatorComponent,\n    LessOrEqualToFilterOperatorComponent,\n    AfterFilterOperatorComponent,\n    AfterEqFilterOperatorComponent,\n    BeforeEqFilterOperatorComponent,\n    BeforeFilterOperatorComponent\n];\nvar importedModules = [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    DropDownListModule,\n    AutoCompleteModule,\n    InputsModule,\n    DatePickerModule,\n    PopupModule,\n    SharedModule\n];\nvar COMPONENTS = [\n    FilterInputDirective\n];\n/**\n * @hidden\n */\nvar SharedFilterModule = /** @class */ (function () {\n    function SharedFilterModule() {\n    }\n    SharedFilterModule.exports = function () {\n        return FILTER_OPERATORS.slice();\n    };\n    SharedFilterModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [FILTER_OPERATORS, COMPONENTS],\n                    exports: [FILTER_OPERATORS, importedModules, COMPONENTS],\n                    imports: importedModules.slice()\n                },] },\n    ];\n    return SharedFilterModule;\n}());\n\n/**\n * @hidden\n */\nvar FilterHostDirective = /** @class */ (function () {\n    function FilterHostDirective(host, resolver) {\n        this.host = host;\n        this.resolver = resolver;\n    }\n    FilterHostDirective.prototype.ngOnInit = function () {\n        this.component = this.host.createComponent(this.resolver.resolveComponentFactory(this.componentType()));\n        this.initComponent({\n            column: this.column,\n            filter: this.filter\n        });\n    };\n    FilterHostDirective.prototype.ngOnDestroy = function () {\n        if (this.component) {\n            this.component.destroy();\n            this.component = null;\n        }\n    };\n    FilterHostDirective.prototype.ngOnChanges = function (changes) {\n        if (anyChanged([\"column\", \"filter\"], changes)) {\n            this.initComponent({\n                column: this.column,\n                filter: this.filter\n            });\n        }\n    };\n    FilterHostDirective.prototype.initComponent = function (_a) {\n        var column = _a.column, filter$$1 = _a.filter;\n        var instance = this.component.instance;\n        instance.column = column;\n        instance.filter = filter$$1;\n    };\n    FilterHostDirective.propDecorators = {\n        column: [{ type: Input }],\n        filter: [{ type: Input }]\n    };\n    return FilterHostDirective;\n}());\n\n/**\n * @hidden\n *\n * > List the following components in the GridModule as `entryComponents`.\n */\nvar filterComponentFactory = function (type) { return ({\n    \"boolean\": BooleanFilterCellComponent,\n    \"date\": DateFilterCellComponent,\n    \"numeric\": NumericFilterCellComponent,\n    \"text\": StringFilterCellComponent\n}[type]); };\n\n/**\n * @hidden\n */\nvar FilterCellHostDirective = /** @class */ (function (_super) {\n    __extends(FilterCellHostDirective, _super);\n    function FilterCellHostDirective(host, resolver) {\n        return _super.call(this, host, resolver) || this;\n    }\n    FilterCellHostDirective.prototype.componentType = function () {\n        if (!isNullOrEmptyString(this.column.filter)) {\n            return filterComponentFactory(this.column.filter);\n        }\n        return StringFilterCellComponent;\n    };\n    FilterCellHostDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoFilterCellHost]'\n                },] },\n    ];\n    /** @nocollapse */\n    FilterCellHostDirective.ctorParameters = function () { return [\n        { type: ViewContainerRef },\n        { type: ComponentFactoryResolver }\n    ]; };\n    return FilterCellHostDirective;\n}(FilterHostDirective));\n\nvar INTERNAL_COMPONENTS = [\n    FilterRowComponent,\n    FilterCellComponent,\n    FilterCellTemplateDirective,\n    StringFilterCellComponent,\n    NumericFilterCellComponent,\n    AutoCompleteFilterCellComponent,\n    BooleanFilterCellComponent,\n    FilterCellHostDirective,\n    FilterCellWrapperComponent,\n    DateFilterCellComponent\n];\nvar ENTRY_COMPONENTS = [\n    StringFilterCellComponent,\n    NumericFilterCellComponent,\n    BooleanFilterCellComponent,\n    DateFilterCellComponent\n];\n/**\n * @hidden\n */\nvar RowFilterModule = /** @class */ (function () {\n    function RowFilterModule() {\n    }\n    RowFilterModule.exports = function () {\n        return [\n            FilterRowComponent,\n            FilterCellComponent,\n            FilterCellTemplateDirective,\n            FilterCellOperatorsComponent,\n            StringFilterCellComponent,\n            NumericFilterCellComponent,\n            AutoCompleteFilterCellComponent,\n            BooleanFilterCellComponent,\n            DateFilterCellComponent,\n            SharedFilterModule.exports()\n        ];\n    };\n    RowFilterModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [INTERNAL_COMPONENTS],\n                    entryComponents: ENTRY_COMPONENTS,\n                    exports: [INTERNAL_COMPONENTS, SharedFilterModule],\n                    imports: [SharedFilterModule]\n                },] },\n    ];\n    return RowFilterModule;\n}());\n\n/**\n * @hidden\n */\nvar normalizeSettings = function (_a) {\n    var _b = _a.buttonCount, buttonCount = _b === void 0 ? 10 : _b, _c = _a.info, info = _c === void 0 ? true : _c, _d = _a.type, type = _d === void 0 ? 'numeric' : _d, _e = _a.pageSizes, pageSizes = _e === void 0 ? false : _e, _f = _a.previousNext, previousNext = _f === void 0 ? true : _f;\n    return ({\n        buttonCount: buttonCount,\n        info: info,\n        pageSizes: pageSizes === true ? [5, 10, 20] : pageSizes,\n        previousNext: previousNext,\n        type: type\n    });\n};\n/**\n * @hidden\n */\nvar normalize = function (settings) {\n    return normalizeSettings(settings === true ? {} : settings);\n};\n\n/**\n * @hidden\n */\nvar PagerComponent = /** @class */ (function () {\n    function PagerComponent(pagerContext) {\n        this.pagerContext = pagerContext;\n        this.total = 0;\n        this.skip = 1;\n        this.pageChange = new EventEmitter();\n        this.settings = normalize({});\n        this._templateContext = {};\n    }\n    Object.defineProperty(PagerComponent.prototype, \"options\", {\n        set: function (value) {\n            this.settings = normalize(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PagerComponent.prototype, \"pagerWrapClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PagerComponent.prototype, \"gridPagerClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PagerComponent.prototype, \"widgetClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PagerComponent.prototype, \"totalPages\", {\n        get: function () {\n            return Math.ceil((this.total || 0) / this.pageSize);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PagerComponent.prototype, \"currentPage\", {\n        get: function () {\n            return Math.floor((this.skip || 0) / this.pageSize) + 1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PagerComponent.prototype, \"templateContext\", {\n        get: function () {\n            var context = this._templateContext;\n            context.totalPages = this.totalPages;\n            context.total = this.total;\n            context.skip = this.skip;\n            context.pageSize = this.pageSize;\n            context.currentPage = this.currentPage;\n            return context;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PagerComponent.prototype.ngOnInit = function () {\n        this.pageChangeSubscription = this.pagerContext.pageChange.subscribe(this.changePage.bind(this));\n    };\n    PagerComponent.prototype.ngOnChanges = function (changes) {\n        if (anyChanged([\"pageSize\", \"skip\", \"total\"], changes, false)) {\n            this.pagerContext.notifyChanges({\n                pageSize: this.pageSize,\n                skip: this.skip,\n                total: this.total\n            });\n        }\n    };\n    PagerComponent.prototype.ngOnDestroy = function () {\n        if (this.pageChangeSubscription) {\n            this.pageChangeSubscription.unsubscribe();\n        }\n    };\n    PagerComponent.prototype.changePage = function (event) {\n        this.pageChange.emit(event);\n    };\n    PagerComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-pager',\n                    template: \"\\n        <ng-container\\n            *ngIf=\\\"template?.templateRef\\\"\\n            [ngTemplateOutlet]=\\\"template.templateRef\\\"\\n            [ngTemplateOutletContext]=\\\"templateContext\\\">\\n        </ng-container>\\n        <ng-container *ngIf=\\\"!template?.templateRef\\\">\\n            <kendo-pager-prev-buttons *ngIf=\\\"settings.previousNext\\\"></kendo-pager-prev-buttons>\\n            <kendo-pager-numeric-buttons\\n                *ngIf=\\\"settings.type === 'numeric'\\\"\\n                [buttonCount]=\\\"settings.buttonCount\\\">\\n            </kendo-pager-numeric-buttons>\\n            <kendo-pager-input *ngIf=\\\"settings.type === 'input'\\\"></kendo-pager-input>\\n            <kendo-pager-next-buttons *ngIf=\\\"settings.previousNext\\\"></kendo-pager-next-buttons>\\n            <kendo-pager-info *ngIf='settings.info'></kendo-pager-info>\\n            <kendo-pager-page-sizes *ngIf=\\\"settings.pageSizes\\\" [pageSizes]=\\\"settings.pageSizes\\\"></kendo-pager-page-sizes>\\n        </ng-container>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    PagerComponent.ctorParameters = function () { return [\n        { type: PagerContextService }\n    ]; };\n    PagerComponent.propDecorators = {\n        total: [{ type: Input }],\n        skip: [{ type: Input }],\n        pageSize: [{ type: Input }],\n        options: [{ type: Input }],\n        template: [{ type: Input }],\n        pageChange: [{ type: Output }],\n        pagerWrapClass: [{ type: HostBinding, args: ['class.k-pager-wrap',] }],\n        gridPagerClass: [{ type: HostBinding, args: ['class.k-grid-pager',] }],\n        widgetClass: [{ type: HostBinding, args: ['class.k-widget',] }]\n    };\n    return PagerComponent;\n}());\n\n/**\n * @hidden\n */\nvar PagerElementComponent = /** @class */ (function () {\n    function PagerElementComponent(localization, pagerContext, cd) {\n        this.localization = localization;\n        this.pagerContext = pagerContext;\n        this.cd = cd;\n        this.total = this.pagerContext.total;\n        this.skip = this.pagerContext.skip;\n        this.pageSize = this.pagerContext.pageSize;\n    }\n    Object.defineProperty(PagerElementComponent.prototype, \"currentPage\", {\n        /**\n         * @hidden\n         *\n         * @readonly\n         * @type {number}\n         * @memberOf PagerElementComponent\n         */\n        get: function () {\n            return Math.floor((this.skip || 0) / this.pageSize) + 1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PagerElementComponent.prototype, \"totalPages\", {\n        /**\n         * @hidden\n         *\n         * @readonly\n         * @type {number}\n         * @memberOf PagerElementComponent\n         */\n        get: function () {\n            return Math.ceil((this.total || 0) / this.pageSize);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     *\n     * @param {string} key\n     * @returns {string}\n     *\n     * @memberOf PagerElementComponent\n     */\n    PagerElementComponent.prototype.textFor = function (key) {\n        return this.localization.get(key);\n    };\n    /**\n     * @hidden\n     *\n     * @param {number} page\n     *\n     * @memberOf PagerElementComponent\n     */\n    PagerElementComponent.prototype.changePage = function (page) {\n        this.pagerContext.changePage(page);\n        return false;\n    };\n    /**\n     * @hidden\n     *\n     * @memberOf PagerElementComponent\n     */\n    PagerElementComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscriptions = this.pagerContext.changes.subscribe(this.onChanges.bind(this));\n        this.subscriptions.add(this.localization.changes.subscribe(function () { return _this.cd.markForCheck(); }));\n    };\n    PagerElementComponent.prototype.ngOnDestroy = function () {\n        if (this.subscriptions) {\n            this.subscriptions.unsubscribe();\n        }\n    };\n    return PagerElementComponent;\n}());\n\n/**\n * Displays buttons for navigating to the first and to the previous page ([see example]({% slug paging_grid %}#toc-pager-templates)).\n */\nvar PagerPrevButtonsComponent = /** @class */ (function (_super) {\n    __extends(PagerPrevButtonsComponent, _super);\n    function PagerPrevButtonsComponent(localization, pagerContext, cd) {\n        return _super.call(this, localization, pagerContext, cd) || this;\n    }\n    Object.defineProperty(PagerPrevButtonsComponent.prototype, \"disabled\", {\n        /**\n         * @hidden\n         *\n         * @readonly\n         * @type {boolean}\n         * @memberOf PagerPrevButtonsComponent\n         */\n        get: function () {\n            return this.currentPage === 1 || !this.total;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PagerPrevButtonsComponent.prototype.onChanges = function (_a) {\n        var total = _a.total, skip = _a.skip, pageSize = _a.pageSize;\n        this.total = total;\n        this.skip = skip;\n        this.pageSize = pageSize;\n        this.cd.markForCheck();\n    };\n    PagerPrevButtonsComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    selector: 'kendo-pager-prev-buttons',\n                    template: \"\\n        <a  href=\\\"#\\\"\\n            tabindex=\\\"-1\\\"\\n            [title]=\\\"textFor('pagerFirstPage')\\\"\\n            (click)=\\\"currentPage !== 1 ? changePage(0) : false\\\"\\n            [ngClass]=\\\"{\\n                'k-link': true,\\n                'k-pager-nav': true,\\n                'k-state-disabled': disabled,\\n                'k-pager-first': true\\n            }\\\">\\n            <span [attr.aria-label]=\\\"textFor('pagerFirstPage')\\\"\\n                [ngClass]=\\\"{\\n                    'k-icon':true,\\n                    'k-i-seek-w': true\\n                }\\\">\\n            </span>\\n        </a>\\n        <a  href=\\\"#\\\"\\n            tabindex=\\\"-1\\\"\\n            [title]=\\\"textFor('pagerPreviousPage')\\\"\\n            (click)=\\\"currentPage !== 1 ? changePage(currentPage-2) : false\\\"\\n            [ngClass]=\\\"{\\n                'k-link': true,\\n                'k-pager-nav': true,\\n                'k-state-disabled': disabled,\\n                '': true\\n            }\\\">\\n            <span [attr.aria-label]=\\\"textFor('pagerPreviousPage')\\\"\\n                [ngClass]=\\\"{\\n                    'k-icon':true,\\n                    'k-i-arrow-w': true\\n                }\\\">\\n            </span>\\n        </a>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    PagerPrevButtonsComponent.ctorParameters = function () { return [\n        { type: LocalizationService },\n        { type: PagerContextService },\n        { type: ChangeDetectorRef }\n    ]; };\n    return PagerPrevButtonsComponent;\n}(PagerElementComponent));\n\n/**\n * Displays buttons for navigating to the next and to the last page ([see example]({% slug paging_grid %}#toc-pager-templates)).\n */\nvar PagerNextButtonsComponent = /** @class */ (function (_super) {\n    __extends(PagerNextButtonsComponent, _super);\n    function PagerNextButtonsComponent(localization, pagerContext, cd) {\n        return _super.call(this, localization, pagerContext, cd) || this;\n    }\n    Object.defineProperty(PagerNextButtonsComponent.prototype, \"disabled\", {\n        /**\n         * @hidden\n         *\n         * @readonly\n         * @type {boolean}\n         * @memberOf PagerNextButtonsComponent\n         */\n        get: function () {\n            return this.currentPage === this.totalPages || !this.total;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PagerNextButtonsComponent.prototype.onChanges = function (_a) {\n        var total = _a.total, skip = _a.skip, pageSize = _a.pageSize;\n        this.total = total;\n        this.skip = skip;\n        this.pageSize = pageSize;\n        this.cd.markForCheck();\n    };\n    PagerNextButtonsComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    selector: 'kendo-pager-next-buttons',\n                    template: \"\\n        <a  href=\\\"#\\\"\\n            tabindex=\\\"-1\\\"\\n            [title]=\\\"textFor('pagerNextPage')\\\"\\n            (click)=\\\"currentPage !== totalPages ? changePage(currentPage) : false\\\"\\n            [ngClass]=\\\"{\\n                'k-link': true,\\n                'k-pager-nav': true,\\n                'k-state-disabled': disabled,\\n                '': true\\n            }\\\">\\n            <span [attr.aria-label]=\\\"textFor('pagerNextPage')\\\"\\n                [ngClass]=\\\"{\\n                    'k-icon':true,\\n                    'k-i-arrow-e': true\\n                }\\\">\\n            </span>\\n        </a>\\n        <a  href=\\\"#\\\"\\n            tabindex=\\\"-1\\\"\\n            [title]=\\\"textFor('pagerLastPage')\\\"\\n            (click)=\\\"currentPage !== totalPages ? changePage(totalPages-1) : false\\\"\\n            [ngClass]=\\\"{\\n                'k-link': true,\\n                'k-pager-nav': true,\\n                'k-state-disabled': disabled,\\n                'k-pager-last': true\\n            }\\\">\\n            <span [attr.aria-label]=\\\"textFor('pagerLastPage')\\\"\\n                [ngClass]=\\\"{\\n                    'k-icon':true,\\n                    'k-i-seek-e': true\\n                }\\\">\\n            </span>\\n        </a>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    PagerNextButtonsComponent.ctorParameters = function () { return [\n        { type: LocalizationService },\n        { type: PagerContextService },\n        { type: ChangeDetectorRef }\n    ]; };\n    return PagerNextButtonsComponent;\n}(PagerElementComponent));\n\n/**\n * Displays numeric buttons to enable navigation between the pages.\n */\nvar PagerNumericButtonsComponent = /** @class */ (function (_super) {\n    __extends(PagerNumericButtonsComponent, _super);\n    function PagerNumericButtonsComponent(localization, cd, pagerContext) {\n        var _this = _super.call(this, localization, pagerContext, cd) || this;\n        _this.pagerContext = pagerContext;\n        return _this;\n    }\n    Object.defineProperty(PagerNumericButtonsComponent.prototype, \"buttons\", {\n        /**\n         * @hidden\n         *\n         * @readonly\n         * @type {number[]}\n         * @memberOf PagerNumericButtonsComponent\n         */\n        get: function () {\n            var result = [];\n            for (var idx = this.start; idx <= this.end; idx++) {\n                result.push(idx);\n            }\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PagerNumericButtonsComponent.prototype, \"end\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return Math.min((this.start + this.buttonCount) - 1, this.totalPages);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PagerNumericButtonsComponent.prototype, \"start\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var page = this.currentPage;\n            var buttonCount = this.buttonCount;\n            if (page > buttonCount) {\n                var reminder = (page % buttonCount);\n                return (reminder === 0) ? (page - buttonCount) + 1 : (page - reminder) + 1;\n            }\n            return 1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    PagerNumericButtonsComponent.prototype.pageLabel = function (num) {\n        var pageText = this.textFor('pagerPage');\n        if (pageText) {\n            return pageText + ' ' + num;\n        }\n        return num.toString();\n    };\n    PagerNumericButtonsComponent.prototype.onChanges = function (_a) {\n        var total = _a.total, skip = _a.skip, pageSize = _a.pageSize;\n        this.total = total;\n        this.skip = skip;\n        this.pageSize = pageSize;\n        this.cd.markForCheck();\n    };\n    PagerNumericButtonsComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    selector: 'kendo-pager-numeric-buttons',\n                    template: \"\\n       <ul [ngClass]=\\\"{'k-pager-numbers': true, 'k-reset': true}\\\">\\n            <li *ngIf=\\\"start > 1\\\">\\n                <a  class=\\\"k-link\\\"\\n                    [attr.aria-label]=\\\"pageLabel(start - 1)\\\"\\n                    href=\\\"#\\\"\\n                    tabindex=\\\"-1\\\"\\n                    (click)=\\\"changePage(start - 2)\\\">...</a>\\n            </li>\\n            <li *ngFor=\\\"let num of buttons\\\">\\n                <a  href=\\\"#\\\"\\n                    [attr.aria-label]=\\\"pageLabel(num)\\\"\\n                    tabindex=\\\"-1\\\"\\n                    [ngClass]=\\\"{'k-link': true, 'k-state-selected':currentPage == num}\\\"\\n                    (click)=\\\"changePage(num - 1)\\\">\\n                    {{num}}\\n                </a>\\n            </li>\\n            <li *ngIf=\\\"end < totalPages\\\">\\n                <a  class=\\\"k-link\\\"\\n                    [attr.aria-label]=\\\"pageLabel(end + 1)\\\"\\n                    href=\\\"#\\\"\\n                    tabindex=\\\"-1\\\"\\n                    (click)=\\\"changePage(end)\\\">...</a>\\n            </li>\\n        </ul>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    PagerNumericButtonsComponent.ctorParameters = function () { return [\n        { type: LocalizationService },\n        { type: ChangeDetectorRef },\n        { type: PagerContextService }\n    ]; };\n    PagerNumericButtonsComponent.propDecorators = {\n        buttonCount: [{ type: Input }]\n    };\n    return PagerNumericButtonsComponent;\n}(PagerElementComponent));\n\n/**\n * Displays an input element which allows the typing and rendering of page numbers.\n */\nvar PagerInputComponent = /** @class */ (function (_super) {\n    __extends(PagerInputComponent, _super);\n    function PagerInputComponent(localization, pagerContext, zone, cd) {\n        var _this = _super.call(this, localization, pagerContext, cd) || this;\n        _this.pagerContext = pagerContext;\n        _this.zone = zone;\n        /**\n         * @hidden\n         *\n         * @param {string} value\n         *\n         * @memberOf PagerInputComponent\n         */\n        _this.handleKeyDown = function (event) {\n            var incomingValue = _this.numericInput.value || _this.current;\n            if (event.keyCode === Keys.Enter) {\n                event.preventDefault();\n                if (incomingValue !== _this.current) {\n                    _this.zone.run(function () {\n                        _this.changePage(incomingValue - 1);\n                    });\n                }\n            }\n        };\n        /**\n         * @hidden\n         *\n         * @param {string} value\n         *\n         * @memberOf PagerInputComponent\n         */\n        _this.handleBlur = function () {\n            var inputValue = _this.numericInput.value;\n            if (!inputValue) {\n                _this.numericInput.writeValue(_this.current);\n                return;\n            }\n            if (inputValue !== _this.current) {\n                _this.zone.run(function () {\n                    _this.changePage(inputValue - 1);\n                });\n            }\n        };\n        return _this;\n    }\n    Object.defineProperty(PagerInputComponent.prototype, \"current\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.hasPages ? this.currentPage : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PagerInputComponent.prototype, \"hasPages\", {\n        get: function () {\n            return this.totalPages !== 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PagerInputComponent.prototype.onChanges = function (_a) {\n        var total = _a.total, skip = _a.skip, pageSize = _a.pageSize;\n        this.total = total;\n        this.skip = skip;\n        this.pageSize = pageSize;\n        this.cd.markForCheck();\n    };\n    PagerInputComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-pager-input',\n                    template: \"\\n     <span [ngClass]=\\\"{'k-pager-input': true, 'k-label': true}\\\">\\n        {{textFor('pagerPage')}}\\n        <kendo-numerictextbox\\n            [spinners]=\\\"false\\\"\\n            [decimals]=\\\"0\\\"\\n            format=\\\"n0\\\"\\n            [disabled]=\\\"!hasPages\\\"\\n            [value]=\\\"current\\\"\\n            [min]=\\\"hasPages ? 1 : 0\\\"\\n            [max]=\\\"totalPages\\\"\\n            [autoCorrect]=\\\"true\\\"\\n            [kendoEventsOutsideAngular]=\\\"{\\n                keydown: handleKeyDown,\\n                focusout: handleBlur\\n            }\\\"></kendo-numerictextbox>\\n        {{textFor('pagerOf')}} {{totalPages}}\\n     </span>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    PagerInputComponent.ctorParameters = function () { return [\n        { type: LocalizationService },\n        { type: PagerContextService },\n        { type: NgZone },\n        { type: ChangeDetectorRef }\n    ]; };\n    PagerInputComponent.propDecorators = {\n        numericInput: [{ type: ViewChild, args: [NumericTextBoxComponent,] }]\n    };\n    return PagerInputComponent;\n}(PagerElementComponent));\n\n/**\n * Displays information about the current page and the total number of records ([see example]({% slug paging_grid %}#toc-pager-templates)).\n */\nvar PagerInfoComponent = /** @class */ (function (_super) {\n    __extends(PagerInfoComponent, _super);\n    function PagerInfoComponent(localization, cd, pagerContext) {\n        var _this = _super.call(this, localization, pagerContext, cd) || this;\n        _this.pagerContext = pagerContext;\n        return _this;\n    }\n    Object.defineProperty(PagerInfoComponent.prototype, \"maxItems\", {\n        /**\n         * @hidden\n         *\n         * @readonly\n         * @type {number}\n         * @memberOf PagerInfoComponent\n         */\n        get: function () {\n            return Math.min(this.currentPage * this.pageSize, this.total);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PagerInfoComponent.prototype, \"currentPageText\", {\n        /**\n         * @hidden\n         *\n         * @readonly\n         * @type {number}\n         * @memberOf PagerInfoComponent\n         */\n        get: function () {\n            return this.total ?\n                (this.currentPage - 1) * this.pageSize + 1 :\n                0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PagerInfoComponent.prototype, \"classes\", {\n        /**\n         * @hidden\n         *\n         * @readonly\n         * @type {boolean}\n         * @memberOf PagerInfoComponent\n         */\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PagerInfoComponent.prototype.onChanges = function (_a) {\n        var total = _a.total, skip = _a.skip, pageSize = _a.pageSize;\n        this.total = total;\n        this.skip = skip;\n        this.pageSize = pageSize;\n        this.cd.markForCheck();\n    };\n    PagerInfoComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    selector: 'kendo-pager-info',\n                    template: \"{{currentPageText}} - {{maxItems}} {{textFor('pagerOf')}} {{total}} {{textFor('pagerItems')}}\"\n                },] },\n    ];\n    /** @nocollapse */\n    PagerInfoComponent.ctorParameters = function () { return [\n        { type: LocalizationService },\n        { type: ChangeDetectorRef },\n        { type: PagerContextService }\n    ]; };\n    PagerInfoComponent.propDecorators = {\n        classes: [{ type: HostBinding, args: [\"class.k-pager-info\",] }, { type: HostBinding, args: [\"class.k-label\",] }]\n    };\n    return PagerInfoComponent;\n}(PagerElementComponent));\n\n/**\n * Displays a drop-down list for the page size selection ([see example]({% slug paging_grid %}#toc-pager-templates)).\n */\nvar PagerPageSizesComponent = /** @class */ (function (_super) {\n    __extends(PagerPageSizesComponent, _super);\n    function PagerPageSizesComponent(localization, cd, pagerContext) {\n        var _this = _super.call(this, localization, pagerContext, cd) || this;\n        _this.pagerContext = pagerContext;\n        _this._pageSizes = [];\n        return _this;\n    }\n    Object.defineProperty(PagerPageSizesComponent.prototype, \"pageSizes\", {\n        get: function () {\n            return this._pageSizes;\n        },\n        /**\n         * The page sizes collection. Can be an Array of numbers and/or PageSizeItem objects.\n         *\n         * @example\n         * ```ts-preview\n         * _@Component({\n         *    selector: 'my-app',\n         *    template: `\n         *        <kendo-grid [kendoGridBinding]=\"gridData\" [height]=\"200\"\n         *           [pageable]=\"true\"\n         *            [pageSize]=\"pageSize\">\n         *            <ng-template kendoPagerTemplate let-totalPages=\"totalPages\" let-currentPage=\"currentPage\">\n         *                <kendo-pager-page-sizes [pageSizes]=\"pagesizes\"></kendo-pager-page-sizes>\n         *            </ng-template>\n         *        </kendo-grid>\n         *    `\n         * })\n         * class AppComponent {\n         *    public gridData: any[] = products;\n         *    public pageSize = 2;\n         *    public pagesizes = [{text: 'One', value: 1}, {text: 'Two', value: 2}, {text: 'All', value : 'all'}];\n         * }\n         *\n         * const products = [{\n         *   'ProductID' : 1,\n         *   'ProductName' : \"Chai\",\n         *   'SupplierID' : 1,\n         *   'CategoryID' : 1,\n         *   'QuantityPerUnit' : \"10 boxes x 20 bags\",\n         *   'UnitPrice' : 18.0000,\n         *   'UnitsInStock' : 39,\n         *   'UnitsOnOrder' : 0,\n         *   'ReorderLevel' : 10,\n         *   'Discontinued' : false\n         *\n         * }, {\n         *   'ProductID' : 2,\n         *   'ProductName' : \"Chang\",\n         *   'SupplierID' : 1,\n         *   'CategoryID' : 1,\n         *   'QuantityPerUnit' : \"24 - 12 oz bottles\",\n         *   'UnitPrice' : 19.0000,\n         *   'UnitsInStock' : 17,\n         *   'UnitsOnOrder' : 40,\n         *   'ReorderLevel' : 25,\n         *   'Discontinued' : false\n         * }, {\n         *   'ProductID' : 3,\n         *   'ProductName' : \"Aniseed Syrup\",\n         *   'SupplierID' : 1,\n         *   'CategoryID' : 2,\n         *   'QuantityPerUnit' : \"12 - 550 ml bottles\",\n         *   'UnitPrice' : 10.0000,\n         *   'UnitsInStock' : 13,\n         *   'UnitsOnOrder' : 70,\n         *   'ReorderLevel' : 25,\n         *   'Discontinued' : false\n         * }, {\n         *   'ProductID' : 4,\n         *   'ProductName' : \"Chef Anton\\'s Cajun Seasoning\",\n         *   'SupplierID' : 2,\n         *  'CategoryID' : 2,\n         *   'QuantityPerUnit' : \"48 - 6 oz jars\",\n         *   'UnitPrice' : 22.0000,\n         *   'UnitsInStock' : 53,\n         *   'UnitsOnOrder' : 0,\n         *   'ReorderLevel' : 0,\n         *   'Discontinued' : false\n         * }, {\n         *   'ProductID' : 5,\n         *   'ProductName' : \"Chef Anton\\'s Gumbo Mix\",\n         *   'SupplierID' : 2,\n         *   'CategoryID' : 2,\n         *   'QuantityPerUnit' : \"36 boxes\",\n         *   'UnitPrice' : 21.3500,\n         *   'UnitsInStock' : 0,\n         *   'UnitsOnOrder' : 0,\n         *   'ReorderLevel' : 0,\n         *   'Discontinued' : true\n         * }, {\n         *   'ProductID' : 6,\n         *   'ProductName' : \"Grandma\\'s Boysenberry Spread\",\n         *   'SupplierID' : 3,\n         *   'CategoryID' : 2,\n         *   'QuantityPerUnit' : \"12 - 8 oz jars\",\n         *   'UnitPrice' : 25.0000,\n         *   'UnitsInStock' : 120,\n         *   'UnitsOnOrder' : 0,\n         *   'ReorderLevel' : 25,\n         *   'Discontinued' : false\n         * }];\n         * ```\n         */\n        set: function (pageSizes) {\n            var normalizedItems = [];\n            pageSizes.forEach(function (item) {\n                if (typeof item === 'number') {\n                    normalizedItems.push({\n                        text: item.toString(),\n                        value: item\n                    });\n                }\n                else {\n                    normalizedItems.push(item);\n                }\n            });\n            this._pageSizes = normalizedItems;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PagerPageSizesComponent.prototype, \"classes\", {\n        /**\n         * @hidden\n         *\n         * @readonly\n         */\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PagerPageSizesComponent.prototype, \"showInitialPageSize\", {\n        /**\n         * @hidden\n         *\n         * @readonly\n         */\n        get: function () {\n            var _this = this;\n            return this.pageSizes\n                .filter(function (item) {\n                if (typeof item.value === 'number') {\n                    return item.value === Number(_this.pageSize);\n                }\n                return _this.total === Number(_this.pageSize);\n            })\n                .length === 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    PagerPageSizesComponent.prototype.pageSizeChange = function (value) {\n        this.pageSize = parseInt(value, 10);\n        this.pagerContext.changePageSize(this.pageSize);\n    };\n    /**\n     * @hidden\n     */\n    PagerPageSizesComponent.prototype.getValue = function (page) {\n        return typeof page.value === 'number' ? page.value : this.total;\n    };\n    /**\n     * @hidden\n     */\n    PagerPageSizesComponent.prototype.getSelectedState = function (page) {\n        if (typeof page.value === 'number') {\n            return page.value === this.pageSize ? true : undefined;\n        }\n        return this.pageSize === this.total;\n    };\n    PagerPageSizesComponent.prototype.onChanges = function (_a) {\n        var total = _a.total, skip = _a.skip, pageSize = _a.pageSize;\n        this.total = total;\n        this.skip = skip;\n        this.pageSize = typeof pageSize === 'number' ? pageSize : this.total;\n        this.cd.markForCheck();\n    };\n    PagerPageSizesComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    selector: 'kendo-pager-page-sizes',\n                    template: \"\\n        <select #select\\n            (change)=\\\"pageSizeChange(select.value)\\\"\\n            [attr.aria-label]=\\\"textFor('pagerItemsPerPage')\\\">\\n            <option *ngIf=\\\"showInitialPageSize\\\" [value]=\\\"pageSize\\\">{{pageSize}}</option>\\n            <option *ngFor=\\\"let page of pageSizes\\\" [value]=\\\"getValue(page)\\\" [selected]=\\\"getSelectedState(page)\\\">\\n                {{page['text']}}\\n            </option>\\n        </select>\\n        {{ textFor('pagerItemsPerPage') }}\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    PagerPageSizesComponent.ctorParameters = function () { return [\n        { type: LocalizationService },\n        { type: ChangeDetectorRef },\n        { type: PagerContextService }\n    ]; };\n    PagerPageSizesComponent.propDecorators = {\n        pageSizes: [{ type: Input }],\n        classes: [{ type: HostBinding, args: [\"class.k-pager-sizes\",] }, { type: HostBinding, args: [\"class.k-label\",] }]\n    };\n    return PagerPageSizesComponent;\n}(PagerElementComponent));\n\nvar importedModules$1 = [\n    CommonModule,\n    InputsModule,\n    SharedModule\n];\nvar INTERNAL_COMPONENTS$1 = [\n    PagerComponent,\n    PagerPrevButtonsComponent,\n    PagerNextButtonsComponent,\n    PagerNumericButtonsComponent,\n    PagerInputComponent,\n    PagerInfoComponent,\n    PagerPageSizesComponent,\n    PagerTemplateDirective\n];\n/**\n * @hidden\n */\nvar PagerModule = /** @class */ (function () {\n    function PagerModule() {\n    }\n    PagerModule.exports = function () {\n        return [\n            PagerComponent,\n            PagerPrevButtonsComponent,\n            PagerNextButtonsComponent,\n            PagerNumericButtonsComponent,\n            PagerInputComponent,\n            PagerInfoComponent,\n            PagerPageSizesComponent,\n            PagerTemplateDirective\n        ];\n    };\n    PagerModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [INTERNAL_COMPONENTS$1],\n                    exports: [INTERNAL_COMPONENTS$1],\n                    imports: importedModules$1.slice()\n                },] },\n    ];\n    return PagerModule;\n}());\n\n/**\n * @hidden\n */\nvar GroupHeaderComponent = /** @class */ (function () {\n    function GroupHeaderComponent(groupsService, groupInfoService) {\n        this.groupsService = groupsService;\n        this.groupInfoService = groupInfoService;\n        this.skipGroupDecoration = false;\n        this.hasDetails = false;\n        this.totalColumnsCount = 0;\n        this.groups = [];\n        this.isExpanded = false;\n    }\n    Object.defineProperty(GroupHeaderComponent.prototype, \"groupItemClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GroupHeaderComponent.prototype.ngDoCheck = function () {\n        this.isExpanded = this.groupsService.isExpanded(this.item.index);\n    };\n    GroupHeaderComponent.prototype.prefixGroupCell = function (item) {\n        return new Array(item.level);\n    };\n    GroupHeaderComponent.prototype.toggleGroup = function (item) {\n        this.groupsService.toggleRow(item.index, item.data);\n        return false;\n    };\n    GroupHeaderComponent.prototype.groupSpan = function (item) {\n        var groupCount = (this.groups || []).length;\n        var detailOffset = this.hasDetails ? 1 : 0;\n        if (this.hasGroupHeaderColumn) {\n            return groupCount + 1 + detailOffset - item.level;\n        }\n        var columnCount = columnsSpan(this.columns);\n        if (this.skipGroupDecoration) {\n            return columnCount;\n        }\n        return groupCount + columnCount + detailOffset - item.level;\n    };\n    GroupHeaderComponent.prototype.logicalColSpan = function () {\n        return this.skipGroupDecoration ? 1 : this.totalColumnsCount;\n    };\n    GroupHeaderComponent.prototype.ariaRole = function () {\n        if (this.skipGroupDecoration) {\n            return 'presentation';\n        }\n        return 'gridcell';\n    };\n    GroupHeaderComponent.prototype.formatForGroup = function (item) {\n        return this.groupInfoService.formatForGroup(item);\n    };\n    GroupHeaderComponent.prototype.groupTitle = function (item) {\n        return this.groupInfoService.groupTitle(item);\n    };\n    GroupHeaderComponent.prototype.groupHeaderTemplate = function (item) {\n        return this.groupInfoService.groupHeaderTemplate(item);\n    };\n    GroupHeaderComponent.decorators = [\n        { type: Component, args: [{\n                    selector: '[kendoGridGroupHeader]',\n                    template: \"\\n        <ng-template [ngIf]=\\\"!skipGroupDecoration\\\">\\n            <td class=\\\"k-group-cell\\\"\\n                role=\\\"presentation\\\"\\n                *ngFor=\\\"let g of prefixGroupCell(item)\\\"></td>\\n        </ng-template>\\n        <td [attr.colspan]=\\\"groupSpan(item)\\\" *ngIf=\\\"!(skipGroupDecoration && hasGroupHeaderColumn)\\\"\\n            [attr.role]=\\\"ariaRole()\\\"\\n            aria-selected=\\\"false\\\"\\n            [attr.aria-expanded]=\\\"isExpanded\\\"\\n            kendoGridLogicalCell\\n            [logicalRowIndex]=\\\"logicalRowIndex\\\"\\n            [logicalColIndex]=\\\"0\\\"\\n            [logicalSlaveCell]=\\\"skipGroupDecoration\\\"\\n            [groupItem]=\\\"item\\\"\\n            [colSpan]=\\\"logicalColSpan()\\\">\\n            <p class=\\\"k-reset\\\">\\n                <ng-template [ngIf]=\\\"!skipGroupDecoration\\\">\\n                    <a href=\\\"#\\\" tabindex=\\\"-1\\\" (click)=\\\"toggleGroup(item)\\\"\\n                        class=\\\"k-icon\\\"\\n                        [ngClass]=\\\"{ 'k-i-collapse': isExpanded, 'k-i-expand': !isExpanded }\\\" role=\\\"presentation\\\">\\n                    </a>\\n                    <ng-template [ngIf]=\\\"!groupHeaderTemplate(item)\\\">\\n                    {{groupTitle(item)}}: {{item.data | valueOf:\\\"value\\\": formatForGroup(item)}}\\n                    </ng-template>\\n                    <ng-template\\n                        [templateContext]=\\\"{\\n                            templateRef: groupHeaderTemplate(item),\\n                            group: item.data,\\n                            aggregates: item.data?.aggregates,\\n                            value: item.data?.value,\\n                            field: item.data?.field,\\n                            index: item.index,\\n                            expanded: isExpanded,\\n                            $implicit: item.data\\n                            }\\\">\\n                    </ng-template>\\n                </ng-template>\\n            </p>\\n        </td>\\n        <ng-container *ngIf=\\\"hasGroupHeaderColumn\\\">\\n            <td *ngFor=\\\"let column of groupHeaderColumns; let index = index\\\"\\n                role=\\\"gridcell\\\"\\n                aria-selected=\\\"false\\\"\\n                kendoGridLogicalCell\\n                [logicalRowIndex]=\\\"logicalRowIndex\\\"\\n                [logicalColIndex]=\\\"index + 1\\\"\\n                [logicalSlaveCell]=\\\"false\\\"\\n                [groupItem]=\\\"item\\\"\\n                [colSpan]=\\\"1\\\"\\n            >\\n                <ng-container *ngIf=\\\"column.groupHeaderColumnTemplateRef\\\" [ngTemplateOutlet]=\\\"column.groupHeaderColumnTemplateRef\\\"\\n                    [ngTemplateOutletContext]=\\\"{\\n                        group: item.data,\\n                        aggregates: item.data?.aggregates,\\n                        value: item.data?.value,\\n                        field: item.data?.field,\\n                        index: item.index,\\n                        $implicit: item.data\\n                        }\\\">\\n                </ng-container>\\n            </td>\\n        </ng-container>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    GroupHeaderComponent.ctorParameters = function () { return [\n        { type: GroupsService },\n        { type: GroupInfoService }\n    ]; };\n    GroupHeaderComponent.propDecorators = {\n        rowIndex: [{ type: Input }],\n        logicalRowIndex: [{ type: Input }],\n        item: [{ type: Input }],\n        skipGroupDecoration: [{ type: Input }],\n        hasDetails: [{ type: Input }],\n        totalColumnsCount: [{ type: Input }],\n        hasGroupHeaderColumn: [{ type: Input }],\n        groupHeaderColumns: [{ type: Input }],\n        columns: [{ type: Input }],\n        groups: [{ type: Input }],\n        groupItemClass: [{ type: HostBinding, args: ['class.k-grouping-row',] }]\n    };\n    return GroupHeaderComponent;\n}());\n\n/**\n * @hidden\n */\nvar DropTargetDirective = /** @class */ (function () {\n    function DropTargetDirective(element, service) {\n        this.element = element;\n        this.service = service;\n        this.context = {};\n        this.enter = new EventEmitter();\n        this.leave = new EventEmitter();\n        this.drop = new EventEmitter();\n        this.subscriptions = new Subscription();\n    }\n    DropTargetDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        this.service.add(this);\n        var changes = this.service.changes.pipe(filter(function (_a) {\n            var target = _a.target;\n            return target === _this;\n        }));\n        this.subscriptions.add(changes.pipe(filter(function (_a) {\n            var type = _a.type;\n            return type === 'leave';\n        }))\n            .subscribe(function (e) {\n            _this.leave.next(_this.eventArgs(e));\n        }));\n        this.subscriptions.add(changes.pipe(filter(function (_a) {\n            var type = _a.type;\n            return type === 'enter';\n        }))\n            .subscribe(function (e) {\n            _this.enter.next(_this.eventArgs(e));\n        }));\n        this.subscriptions.add(changes.pipe(filter(function (_a) {\n            var type = _a.type;\n            return type === 'drop';\n        }))\n            .subscribe(function (e) {\n            _this.drop.next(_this.eventArgs(e));\n        }));\n    };\n    DropTargetDirective.prototype.ngOnDestroy = function () {\n        if (this.subscriptions) {\n            this.subscriptions.unsubscribe();\n        }\n    };\n    DropTargetDirective.prototype.eventArgs = function (e) {\n        return {\n            target: this,\n            mouseEvent: e.mouseEvent,\n            draggable: e.draggable\n        };\n    };\n    DropTargetDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDropTarget]'\n                },] },\n    ];\n    /** @nocollapse */\n    DropTargetDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: DragAndDropService }\n    ]; };\n    DropTargetDirective.propDecorators = {\n        context: [{ type: Input }],\n        enter: [{ type: Output }],\n        leave: [{ type: Output }],\n        drop: [{ type: Output }]\n    };\n    return DropTargetDirective;\n}());\n\nvar withoutField = function (_a) {\n    var field = _a.field;\n    return isNullOrEmptyString(field);\n};\nvar alreadyGrouped = function (_a) {\n    var groups = _a.groups, field = _a.field;\n    return groups.some(function (group) { return group.field === field; });\n};\nvar overSameTarget = function (_a) {\n    var target = _a.target, field = _a.field;\n    return target.field === field;\n};\nvar overLastTarget = function (_a) {\n    var target = _a.target;\n    return target.lastTarget;\n};\nvar isLastGroup = function (_a) {\n    var groups = _a.groups, field = _a.field;\n    return groups.map(function (group) { return group.field; }).indexOf(field) === groups.length - 1;\n};\nvar isNotGroupable = function (groupsService) { return function (_a) {\n    var field = _a.field;\n    return !groupsService.isGroupable(field);\n}; };\nvar columnRules = function (groupService) { return or(withoutField, alreadyGrouped, isNotGroupable(groupService)); };\nvar indicatorRules = or(overSameTarget, and(overLastTarget, isLastGroup));\n/**\n * @hidden\n */\nvar GroupPanelComponent = /** @class */ (function () {\n    function GroupPanelComponent(hint, cue, groupInfoService, localization, cd) {\n        this.hint = hint;\n        this.cue = cue;\n        this.groupInfoService = groupInfoService;\n        this.localization = localization;\n        this.cd = cd;\n        this.change = new EventEmitter();\n        this.groups = [];\n        this.dropTargets = new QueryList();\n        this.groupTitles = [];\n        this.subscription = new Subscription();\n    }\n    Object.defineProperty(GroupPanelComponent.prototype, \"groupHeaderClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GroupPanelComponent.prototype, \"text\", {\n        get: function () {\n            return this.emptyText ? this.emptyText : this.localization.get('groupPanelEmpty');\n        },\n        set: function (value) {\n            this.emptyText = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GroupPanelComponent.prototype.ngAfterViewInit = function () {\n        this.subscription.add(observe(this.dropTargets)\n            .subscribe(this.attachTargets.bind(this)));\n    };\n    GroupPanelComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscription.add(this.localization.changes.subscribe(function () { return _this.cd.markForCheck(); }));\n    };\n    GroupPanelComponent.prototype.ngDoCheck = function () {\n        var _this = this;\n        var currentTitles = this.groups.map(function (group) { return _this.groupInfoService.groupTitle(group); });\n        if (currentTitles.length !== this.groupTitles.length || currentTitles.some(function (current, idx) { return current !== _this.groupTitles[idx]; })) {\n            this.groupTitles = currentTitles;\n            this.cd.markForCheck();\n        }\n    };\n    GroupPanelComponent.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n        if (this.targetSubscription) {\n            this.targetSubscription.unsubscribe();\n        }\n    };\n    GroupPanelComponent.prototype.directionChange = function (group) {\n        var index = this.groups.findIndex(function (x) { return x.field === group.field; });\n        var groups = this.groups.slice(0, index).concat([group], this.groups.slice(index + 1));\n        this.change.emit(groups);\n    };\n    GroupPanelComponent.prototype.insert = function (field, index) {\n        var groups = this.groups.filter(function (x) { return x.field !== field; });\n        if (groups.length || this.groups.length === 0) {\n            this.change.emit(groups.slice(0, index).concat([{ field: field }], groups.slice(index)));\n        }\n    };\n    GroupPanelComponent.prototype.remove = function (group) {\n        this.change.emit(this.groups.filter(function (x) { return x.field !== group.field; }));\n    };\n    GroupPanelComponent.prototype.canDrop = function (draggable, target) {\n        var isIndicator = draggable.type === 'groupIndicator';\n        var rules = isIndicator\n            ? indicatorRules\n            : columnRules(this.groupInfoService);\n        return !rules({\n            field: draggable.field,\n            groups: this.groups,\n            target: target\n        });\n    };\n    GroupPanelComponent.prototype.attachTargets = function () {\n        var _this = this;\n        if (this.targetSubscription) {\n            this.targetSubscription.unsubscribe();\n        }\n        this.targetSubscription = new Subscription();\n        var enterStream = this.dropTargets\n            .reduce(function (acc, target) { return merge(acc, target.enter); }, from([]));\n        var leaveStream = this.dropTargets\n            .reduce(function (acc, target) { return merge(acc, target.leave); }, from([]));\n        var dropStream = this.dropTargets\n            .reduce(function (acc, target) { return merge(acc, target.drop); }, from([]));\n        this.targetSubscription.add(enterStream.pipe(tap(function (_) { return _this.hint.removeLock(); }), filter(function (_a) {\n            var draggable = _a.draggable, target = _a.target;\n            return _this.canDrop(draggable.context, target.context);\n        }), tap(this.enter.bind(this)), switchMapTo(dropStream.pipe(takeUntil(leaveStream.pipe(tap(this.leave.bind(this))))))).subscribe(this.drop.bind(this)));\n    };\n    GroupPanelComponent.prototype.enter = function (_a) {\n        var draggable = _a.draggable, target = _a.target;\n        this.hint.enable();\n        var before = target.context.lastTarget || isTargetBefore(draggable.element.nativeElement, target.element.nativeElement);\n        if (this.localization.rtl) {\n            before = !before;\n        }\n        this.cue.position(position(target.element.nativeElement, before));\n    };\n    GroupPanelComponent.prototype.leave = function () {\n        this.hint.disable();\n        this.cue.hide();\n    };\n    GroupPanelComponent.prototype.drop = function (_a) {\n        var target = _a.target, draggable = _a.draggable;\n        var field = draggable.context.field;\n        var index = this.dropTargets.toArray().indexOf(target);\n        this.insert(field, index);\n    };\n    GroupPanelComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    selector: 'kendo-grid-group-panel',\n                    template: \"\\n        <ng-template [ngIf]=\\\"groups.length === 0\\\">\\n            <div\\n                class=\\\"k-indicator-container\\\"\\n                [context]=\\\"{\\n                    lastTarget: true\\n                }\\\"\\n                kendoDropTarget>\\n                {{ text }}\\n            </div>\\n        </ng-template>\\n        <div *ngFor=\\\"let group of groups; let index = index;\\\"\\n            class=\\\"k-indicator-container\\\"\\n            [context]=\\\"{\\n                field: group.field\\n            }\\\"\\n            kendoDropTarget>\\n            <div\\n                kendoDraggableColumn\\n                [enableDrag]=\\\"true\\\"\\n                [context]=\\\"{\\n                    field: group.field,\\n                    type: 'groupIndicator',\\n                    hint:  groupTitles[index]\\n                }\\\"\\n                kendoGroupIndicator\\n                kendoDraggable\\n                [group]=\\\"group\\\"\\n                [groupTitle]=\\\"groupTitles[index]\\\"\\n                (directionChange)=\\\"directionChange($event)\\\"\\n                (remove)=\\\"remove($event)\\\">\\n            </div>\\n        </div>\\n        <div class=\\\"k-indicator-container\\\"\\n            *ngIf=\\\"groups.length !== 0\\\"\\n            [context]=\\\"{\\n                lastTarget: true\\n            }\\\"\\n            kendoDropTarget>&nbsp;</div>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    GroupPanelComponent.ctorParameters = function () { return [\n        { type: DragHintService },\n        { type: DropCueService },\n        { type: GroupInfoService },\n        { type: LocalizationService },\n        { type: ChangeDetectorRef }\n    ]; };\n    GroupPanelComponent.propDecorators = {\n        change: [{ type: Output }],\n        groupHeaderClass: [{ type: HostBinding, args: [\"class.k-grouping-header\",] }, { type: HostBinding, args: [\"class.k-grouping-header-flex\",] }],\n        text: [{ type: Input }],\n        groups: [{ type: Input }],\n        dropTargets: [{ type: ViewChildren, args: [DropTargetDirective,] }]\n    };\n    return GroupPanelComponent;\n}());\n\n/**\n * @hidden\n */\nvar GroupIndicatorComponent = /** @class */ (function () {\n    function GroupIndicatorComponent() {\n        this.directionChange = new EventEmitter();\n        this.remove = new EventEmitter();\n    }\n    Object.defineProperty(GroupIndicatorComponent.prototype, \"groupIndicatorClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GroupIndicatorComponent.prototype, \"dir\", {\n        get: function () {\n            return this.group.dir ? this.group.dir : \"asc\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GroupIndicatorComponent.prototype.toggleDirection = function () {\n        this.directionChange.emit({\n            dir: this.dir === \"asc\" ? \"desc\" : \"asc\",\n            field: this.group.field\n        });\n        return false;\n    };\n    GroupIndicatorComponent.prototype.removeDescriptor = function () {\n        this.remove.emit({\n            dir: this.group.dir,\n            field: this.group.field\n        });\n        return false;\n    };\n    GroupIndicatorComponent.decorators = [\n        { type: Component, args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    selector: '[kendoGroupIndicator]',\n                    template: \"\\n        <a href=\\\"#\\\" class=\\\"k-link\\\" tabindex=\\\"-1\\\" (click)=\\\"toggleDirection()\\\">\\n            <span class=\\\"k-icon\\\"\\n                [class.k-i-sort-asc-sm]=\\\"dir === 'asc'\\\"\\n                [class.k-i-sort-desc-sm]=\\\"dir === 'desc'\\\"></span>\\n            {{groupTitle}}</a>\\n        <a class=\\\"k-button k-button-icon k-bare\\\" tabindex=\\\"-1\\\" (click)=\\\"removeDescriptor()\\\">\\n            <span class=\\\"k-icon k-i-group-delete\\\"></span>\\n        </a>\\n    \"\n                },] },\n    ];\n    GroupIndicatorComponent.propDecorators = {\n        directionChange: [{ type: Output }],\n        remove: [{ type: Output }],\n        group: [{ type: Input }],\n        groupTitle: [{ type: Input }],\n        groupIndicatorClass: [{ type: HostBinding, args: [\"class.k-group-indicator\",] }]\n    };\n    return GroupIndicatorComponent;\n}());\n\n// TODO\n// tslint:disable:rxjs-no-unsafe-takeuntil\n/**\n * @hidden\n */\nvar preventOnDblClick = function (release) { return function (mouseDown) {\n    return of(mouseDown).pipe(delay(150), takeUntil(release));\n}; };\nvar hasClass = function (className) { return function (el) { return new RegExp(\"(^| )\" + className + \"( |$)\").test(el.className); }; };\nvar isDeleteButton = or(hasClass(\"k-i-group-delete\"), hasClass(\"k-button-icon\"));\nvar isSortIcon = or(hasClass(\"k-i-sort-asc-sm\"), hasClass(\"k-i-sort-desc-sm\"));\nvar skipButtons = and(not(isDeleteButton), not(isSortIcon), not(isFocusableWithTabKey), not(matchesNodeName(\"label\")));\nvar elementUnderCursor = function (_a) {\n    var clientX = _a.clientX, clientY = _a.clientY;\n    return document.elementFromPoint(clientX, clientY);\n};\nvar hideThenShow = function (element, cont) {\n    element.style.display = 'none';\n    var result = cont();\n    element.style.display = 'block';\n    return result;\n};\n/**\n * @hidden\n */\nvar DraggableColumnDirective = /** @class */ (function () {\n    function DraggableColumnDirective(draggable, element, zone, service, hint, cue, nav, renderer) {\n        this.draggable = draggable;\n        this.element = element;\n        this.zone = zone;\n        this.service = service;\n        this.hint = hint;\n        this.cue = cue;\n        this.nav = nav;\n        this.renderer = renderer;\n        this.context = {};\n        this.drag = new EventEmitter();\n        this.subscriptions = new Subscription();\n    }\n    Object.defineProperty(DraggableColumnDirective.prototype, \"enableDrag\", {\n        set: function (enabled) {\n            this.enabled = enabled;\n            this.updateTouchAction();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DraggableColumnDirective.prototype, \"hostClass\", {\n        get: function () {\n            return this.enabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DraggableColumnDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscriptions.add(this.zone.runOutsideAngular(function () {\n            return _this.draggable.kendoPress.pipe(filter(function (_) { return _this.enabled; }), filter(function (_a) {\n                var target = _a.originalEvent.target;\n                return target === _this.element.nativeElement || skipButtons(target);\n            }), tap(function (e) {\n                var originalEvent = e.originalEvent;\n                if (!e.isTouch) {\n                    originalEvent.preventDefault();\n                }\n                _this.nav.navigateTo(originalEvent.target);\n            }), switchMap(preventOnDblClick(_this.draggable.kendoRelease)), tap(function (down) {\n                _this.hint.create(down, _this.element.nativeElement, _this.context.hint);\n                _this.cue.create();\n            }), switchMap(function (down) {\n                return _this.draggable.kendoDrag.pipe(tap(function (e) {\n                    if (e.isTouch) {\n                        e.originalEvent.preventDefault();\n                    }\n                }), tap(_this.hint.attach()), tap(_this.cue.attach()), takeUntil(_this.draggable.kendoRelease), map(function (move) { return ({ move: move, down: down }); }));\n            }), tap(_this.performDrag.bind(_this)), switchMapTo(_this.draggable.kendoRelease)).subscribe(_this.drop.bind(_this));\n        }));\n    };\n    DraggableColumnDirective.prototype.ngOnDestroy = function () {\n        if (this.subscriptions) {\n            this.subscriptions.unsubscribe();\n        }\n    };\n    DraggableColumnDirective.prototype.drop = function (upEvent) {\n        this.hint.remove();\n        this.cue.remove();\n        this.service.notifyDrop(this, upEvent);\n    };\n    DraggableColumnDirective.prototype.performDrag = function (_a) {\n        var move = _a.move;\n        this.hint.move(move);\n        var cursorElement = this.elementUnderCursor(move);\n        if (cursorElement) {\n            this.service.notifyDrag(this, cursorElement, move);\n        }\n        this.drag.emit({\n            draggable: this,\n            mouseEvent: move\n        });\n    };\n    DraggableColumnDirective.prototype.elementUnderCursor = function (mouseEvent) {\n        this.hint.hide();\n        var target = elementUnderCursor(mouseEvent);\n        if (target && /k-grouping-dropclue/.test(target.className)) {\n            target = hideThenShow(target, elementUnderCursor.bind(this, mouseEvent));\n        }\n        this.hint.show();\n        return target;\n    };\n    DraggableColumnDirective.prototype.updateTouchAction = function () {\n        if (!this.element) {\n            return;\n        }\n        this.renderer.setStyle(this.element.nativeElement, 'touch-action', this.enabled ? 'none' : '');\n    };\n    DraggableColumnDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDraggableColumn]'\n                },] },\n    ];\n    /** @nocollapse */\n    DraggableColumnDirective.ctorParameters = function () { return [\n        { type: DraggableDirective, decorators: [{ type: Host }] },\n        { type: ElementRef },\n        { type: NgZone },\n        { type: DragAndDropService },\n        { type: DragHintService },\n        { type: DropCueService },\n        { type: NavigationService },\n        { type: Renderer2 }\n    ]; };\n    DraggableColumnDirective.propDecorators = {\n        context: [{ type: Input }],\n        enableDrag: [{ type: Input }],\n        drag: [{ type: Output }],\n        hostClass: [{ type: HostBinding, args: ['class.k-grid-draggable-header',] }]\n    };\n    return DraggableColumnDirective;\n}());\n\nvar exported = [\n    DraggableColumnDirective,\n    DropTargetDirective\n];\n/**\n * @hidden\n */\nvar DragAndDropModule = /** @class */ (function () {\n    function DragAndDropModule() {\n    }\n    DragAndDropModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [exported],\n                    exports: [exported]\n                },] },\n    ];\n    return DragAndDropModule;\n}());\n\nvar exportedModules$1 = [\n    GroupHeaderTemplateDirective,\n    GroupHeaderColumnTemplateDirective,\n    GroupFooterTemplateDirective,\n    GroupHeaderComponent,\n    GroupPanelComponent,\n    GroupIndicatorComponent\n];\n/**\n * @hidden\n */\nvar GroupModule = /** @class */ (function () {\n    function GroupModule() {\n    }\n    GroupModule.exports = function () {\n        return [\n            GroupHeaderTemplateDirective,\n            GroupHeaderColumnTemplateDirective,\n            GroupFooterTemplateDirective\n        ];\n    };\n    GroupModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [exportedModules$1],\n                    exports: [exportedModules$1],\n                    imports: [CommonModule, SharedModule, DragAndDropModule]\n                },] },\n    ];\n    return GroupModule;\n}());\n\n/**\n * @hidden\n */\nvar DEFAULTS = {\n    allowUnsort: true,\n    mode: 'single',\n    showIndexes: true,\n    initialDirection: 'asc'\n};\n/**\n * @hidden\n */\nvar normalize$1 = function () {\n    var settings = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        settings[_i] = arguments[_i];\n    }\n    return Object.assign.apply(Object, [{}, DEFAULTS].concat(settings));\n};\n\n/**\n * @hidden\n */\nvar hasFilter = function (settings, column) { return settings.filter !== false && column.field && column.filterable; };\n/**\n * @hidden\n */\nvar hasSort = function (settings, column) { return settings.sort !== false && column.field && column.sortable; };\n/**\n * @hidden\n */\nvar hasLock = function (settings, column) {\n    return settings.lock && column.lockable && !(column.parent && !column.parent.isSpanColumn);\n};\n/**\n * @hidden\n */\nvar hasColumnChooser = function (settings) { return settings.columnChooser !== false; };\n/**\n * @hidden\n */\nvar hasItems = function (settings, column) {\n    return hasColumnChooser(settings) || hasLock(settings, column) || hasSort(settings, column) || hasFilter(settings, column);\n};\n\nvar mergeObjects = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return Object.assign.apply(null, [{}].concat(args));\n};\nvar directions = function (initialDirection) { return initialDirection === \"asc\" ? [\"asc\", \"desc\"] : [\"desc\", \"asc\"]; };\n/**\n * @hidden\n */\nvar isRootLevel = function (_a) {\n    var parent = _a.parent;\n    return !isTruthy(parent);\n};\nvar ofColumnType = function (_a) {\n    var draggable = _a.draggable;\n    return ['column', 'columnGroup']\n        .indexOf(draggable.context.type) >= 0;\n};\nvar notSameElement = function (_a) {\n    var draggable = _a.draggable, target = _a.target;\n    return draggable.element.nativeElement !== target.element.nativeElement;\n};\nvar inSameParent = function (x, y) { return x.parent === y.parent ||\n    (isInSpanColumn(y) && inSameParent(x, y.parent)); };\nvar sameParent = function (_a) {\n    var draggable = _a.draggable, target = _a.target;\n    return inSameParent(draggable.context.column, target.context.column);\n};\nvar lastNonLocked = function (_a) {\n    var draggable = _a.draggable;\n    return !isTruthy(draggable.context.column.locked) &&\n        isRootLevel(draggable.context.column) &&\n        draggable.context.lastColumn;\n};\nvar notInSpanColumn = function (_a) {\n    var draggable = _a.draggable;\n    return !isInSpanColumn(draggable.context.column);\n};\nvar reorderable = function (_a) {\n    var draggable = _a.draggable;\n    return draggable.context.column.reorderable;\n};\nvar lockable = function (_a) {\n    var draggable = _a.draggable, target = _a.target;\n    return draggable.context.column.lockable !== false ||\n        draggable.context.column.isLocked === target.context.column.isLocked;\n};\nvar rules = and(ofColumnType, reorderable, notInSpanColumn, notSameElement, sameParent, not(lastNonLocked), lockable);\n/**\n * @hidden\n */\nvar HeaderComponent = /** @class */ (function () {\n    function HeaderComponent(popupService, hint, cue, reorderService, idService, sortService, localization, cd) {\n        this.popupService = popupService;\n        this.hint = hint;\n        this.cue = cue;\n        this.reorderService = reorderService;\n        this.idService = idService;\n        this.sortService = sortService;\n        this.localization = localization;\n        this.cd = cd;\n        this.columns = [];\n        this.groups = [];\n        this.sort = new Array();\n        this.sortable = false;\n        this.groupable = false;\n        this.lockedColumnsCount = 0;\n        this.resizable = false;\n        this.reorderable = false;\n        this.columnMenu = false;\n        this.totalColumnsCount = 0;\n        this.sortedFields = {};\n        this.dropTargets = new QueryList();\n        this.subscription = new Subscription();\n    }\n    Object.defineProperty(HeaderComponent.prototype, \"headerClass\", {\n        get: function () {\n            return !this.scrollable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HeaderComponent.prototype, \"sortableLabel\", {\n        get: function () {\n            return this.localization.get('sortable');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HeaderComponent.prototype, \"unlockedColumnsCount\", {\n        // Number of unlocked columns in the next table, if any\n        get: function () {\n            return this.totalColumnsCount - this.lockedColumnsCount - this.columns.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    HeaderComponent.prototype.sortColumn = function (column, event, link) {\n        var target = event ? event.target : null;\n        if (column.headerTemplateRef && target !== link) {\n            var hasFocusableParent = Boolean(closestInScope(target, isFocusable, link));\n            if (hasFocusableParent) {\n                return target.type === 'checkbox'; // prevent navigation only if the element is not checkbox\n            }\n        }\n        this.sortService.sort(this.toggleSort(column));\n        // Prevent navigation\n        return false;\n    };\n    HeaderComponent.prototype.onHeaderKeydown = function (column, args) {\n        if (!this.sortable || args.defaultPrevented || column.sortable === false) {\n            return;\n        }\n        if (args.keyCode === Keys.Enter) {\n            this.sortService.sort(this.toggleSort(column));\n        }\n    };\n    HeaderComponent.prototype.showSortNumbering = function (column) {\n        var showIndexes = normalize$1(this.sortable).showIndexes;\n        return showIndexes\n            && this.sort\n            && this.sort.filter(function (_a) {\n                var dir = _a.dir;\n                return isPresent(dir);\n            }).length > 1\n            && this.sortOrder(column.field) > 0;\n    };\n    HeaderComponent.prototype.sortOrder = function (field) {\n        return this.sort\n            .filter(function (_a) {\n            var dir = _a.dir;\n            return isPresent(dir);\n        })\n            .findIndex(function (x) { return x.field === field; })\n            + 1;\n    };\n    HeaderComponent.prototype.sortIcon = function (field) {\n        var state$$1 = this.sortDescriptor(field);\n        return {\n            'k-icon': isPresent(state$$1.dir),\n            'k-i-sort-desc-sm': state$$1.dir === \"desc\",\n            'k-i-sort-asc-sm': state$$1.dir === \"asc\"\n        };\n    };\n    HeaderComponent.prototype.sortState = function (column) {\n        if (!this.isSortable(column)) {\n            return;\n        }\n        var state$$1 = this.sortDescriptor(column.field);\n        if (state$$1.dir === 'asc') {\n            return 'ascending';\n        }\n        if (state$$1.dir === 'desc') {\n            return 'descending';\n        }\n    };\n    HeaderComponent.prototype.sortStatus = function (column) {\n        if (!this.sortedFields[column.field] || !this.isSortable(column)) {\n            return;\n        }\n        var msg = 'sortedDefault';\n        var state$$1 = this.sortDescriptor(column.field);\n        if (state$$1.dir === 'asc') {\n            msg = 'sortedAscending';\n        }\n        else if (state$$1.dir === 'desc') {\n            msg = 'sortedDescending';\n        }\n        return this.localization.get(msg);\n    };\n    HeaderComponent.prototype.toggleSort = function (column) {\n        var _a = normalize$1(this.sortable, column.sortable), allowUnsort = _a.allowUnsort, mode = _a.mode, initialDirection = _a.initialDirection;\n        var descriptor = this.toggleDirection(column.field, allowUnsort, initialDirection);\n        if (mode === 'single') {\n            return [descriptor];\n        }\n        return this.sort.filter(function (desc) { return desc.field !== column.field; }).concat([descriptor]);\n    };\n    HeaderComponent.prototype.ngAfterViewInit = function () {\n        this.subscription.add(observe(this.dropTargets)\n            .subscribe(this.attachTargets.bind(this)));\n    };\n    HeaderComponent.prototype.ngDoCheck = function () {\n        this._leafColumns = columnsToRender(this.columns || []).filter(function (x) { return !isColumnGroupComponent(x); });\n    };\n    HeaderComponent.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        var sortChange = changes.sort;\n        if (sortChange && !sortChange.isFirstChange()) {\n            sortChange.currentValue.forEach(function (change) {\n                _this.sortedFields[change.field] = true;\n            });\n        }\n    };\n    HeaderComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscription.add(this.localization.changes\n            .subscribe(function () { return _this.cd.markForCheck(); }));\n    };\n    HeaderComponent.prototype.ngOnDestroy = function () {\n        if (this.targetSubscription) {\n            this.targetSubscription.unsubscribe();\n        }\n        if (this.popupService) {\n            this.popupService.destroy();\n        }\n        this.subscription.unsubscribe();\n    };\n    HeaderComponent.prototype.selectAllCheckboxId = function () {\n        return this.idService.selectAllCheckboxId();\n    };\n    HeaderComponent.prototype.isFirstOnRow = function (column, index) {\n        var _this = this;\n        var isTailing = function (c) { return c &&\n            (_this.columnsForLevel(c.level).indexOf(c) > 0 || isTailing(c.parent)); };\n        return index === 0 && !this.groups.length && !this.detailTemplate && isTailing(column.parent);\n    };\n    HeaderComponent.prototype.logicalColumnIndex = function (column) {\n        var index = column.leafIndex;\n        if (isPresent(index)) {\n            return index + (isPresent(this.detailTemplate) ? 1 : 0);\n        }\n        return -1;\n    };\n    Object.defineProperty(HeaderComponent.prototype, \"showFilterMenu\", {\n        get: function () {\n            return !this.columnMenu && hasFilterMenu(this.filterable);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HeaderComponent.prototype, \"showFilterRow\", {\n        get: function () {\n            return hasFilterRow(this.filterable);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    HeaderComponent.prototype.showColumnMenu = function (column) {\n        return this.columnMenu && column.columnMenu &&\n            (this.columnMenuTemplate || column.columnMenuTemplates.length || hasItems(this.columnMenu, column));\n    };\n    HeaderComponent.prototype.isFilterable = function (column) {\n        return !isNullOrEmptyString(column.field) && column.filterable === true;\n    };\n    HeaderComponent.prototype.canDrop = function (draggable, target) {\n        return this.reorderable && rules({ draggable: draggable, target: target });\n    };\n    HeaderComponent.prototype.shouldActivate = function (column) {\n        var canReorder = this.reorderable && column.reorderable;\n        if (!canReorder && !isColumnComponent(column)) {\n            return false;\n        }\n        var groupable = this.groupable && isColumnComponent(column) && column.groupable !== false;\n        return groupable || canReorder;\n    };\n    HeaderComponent.prototype.isSortable = function (column) {\n        return !isNullOrEmptyString(column.field)\n            && isTruthy(this.sortable) && isTruthy(column.sortable);\n    };\n    HeaderComponent.prototype.isCheckboxColumn = function (column) {\n        return isCheckboxColumn(column) && !column.templateRef;\n    };\n    HeaderComponent.prototype.trackByIndex = function (index, _item) {\n        return index;\n    };\n    HeaderComponent.prototype.toggleDirection = function (field, allowUnsort, initialDirection) {\n        var descriptor = this.sortDescriptor(field);\n        var _a = directions(initialDirection), first = _a[0], second = _a[1];\n        var dir = first;\n        if (descriptor.dir === first) {\n            dir = second;\n        }\n        else if (descriptor.dir === second && allowUnsort) {\n            dir = undefined;\n        }\n        return { dir: dir, field: field };\n    };\n    HeaderComponent.prototype.columnsForLevel = function (level) {\n        var columns = this.columns ? this.columns.filter(function (column) { return column.level === level; }) : [];\n        return sortColumns(columnsToRender(columns));\n    };\n    HeaderComponent.prototype.isColumnGroupComponent = function (column) {\n        return isColumnGroupComponent(column);\n    };\n    Object.defineProperty(HeaderComponent.prototype, \"columnLevels\", {\n        get: function () {\n            return new Array((this.totalColumnLevels || 0) + 1);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    HeaderComponent.prototype.sortDescriptor = function (field) {\n        return this.sort.find(function (item) { return item.field === field; }) || { field: field };\n    };\n    Object.defineProperty(HeaderComponent.prototype, \"leafColumns\", {\n        get: function () {\n            return this._leafColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    HeaderComponent.prototype.attachTargets = function () {\n        var _this = this;\n        if (this.targetSubscription) {\n            this.targetSubscription.unsubscribe();\n        }\n        this.targetSubscription = new Subscription();\n        var enterStream = merge.apply(void 0, this.dropTargets.map(function (target) { return target.enter; }));\n        var leaveStream = merge.apply(void 0, this.dropTargets.map(function (target) { return target.leave; }));\n        var dropStream = merge.apply(void 0, this.dropTargets.map(function (target) { return target.drop; }));\n        this.targetSubscription.add(enterStream.pipe(tap(function (_a) {\n            var target = _a.target, draggable = _a.draggable;\n            if (draggable.context.type === 'groupIndicator') {\n                return;\n            }\n            var targetLocked = isTruthy(target.context.column.isLocked);\n            var draggableLocked = isTruthy(draggable.context.column.isLocked);\n            if (_this.lockedColumnsCount > 0 || targetLocked || draggableLocked) {\n                _this.hint.toggleLock(targetLocked);\n            }\n        }), filter(function (_a) {\n            var draggable = _a.draggable, target = _a.target;\n            return _this.canDrop(draggable, target);\n        }), switchMap(this.trackMove.bind(this, leaveStream, dropStream)), map(function (e) { return mergeObjects(e, { before: _this.calculateBefore(e), changeContainer: e.changeContainer }); }), map(this.normalizeTarget.bind(this)), tap(this.enter.bind(this)), switchMap(function (args) {\n            return dropStream.pipe(map(function () { return args; }), takeUntil(leaveStream.pipe(tap(_this.leave.bind(_this)))));\n        }))\n            .subscribe(this.drop.bind(this)));\n    };\n    HeaderComponent.prototype.normalizeTarget = function (e) {\n        var target = e.target;\n        var parent = target.context.column.parent;\n        if (parent && parent.isSpanColumn) {\n            var arr = this.dropTargets.toArray();\n            var firstSpan = arr.find(function (t) { return t.context.column.parent === parent; });\n            var index = arr.indexOf(firstSpan);\n            var adjust = e.before ? 0 : parent.childColumns.length - 1;\n            target = arr[index + adjust];\n        }\n        return mergeObjects(e, { target: target });\n    };\n    HeaderComponent.prototype.trackMove = function (leaveStream, dropStream, e) {\n        var column = e.target.context.column;\n        var levelColumns = this.columnsForLevel(column.level);\n        var index = levelColumns.indexOf(column);\n        var isFirst = (column.locked ? index === levelColumns.length - 1 : index === 0);\n        var changed = e.draggable.context.column.isLocked !== column.isLocked;\n        if (changed && isFirst) {\n            return e.draggable.drag\n                .pipe(takeUntil(leaveStream), takeUntil(dropStream), map(function (_a) {\n                var mouseEvent = _a.mouseEvent;\n                return mergeObjects({ changeContainer: true }, e, { mouseEvent: mouseEvent });\n            }));\n        }\n        return of(mergeObjects({ changeContainer: changed }, e));\n    };\n    HeaderComponent.prototype.calculateBefore = function (_a) {\n        var draggable = _a.draggable, target = _a.target, mouseEvent = _a.mouseEvent, _b = _a.changeContainer, changeContainer = _b === void 0 ? false : _b;\n        var targetElement = target.element.nativeElement;\n        var before = false;\n        if (changeContainer) {\n            var left = offset(targetElement).left;\n            var halfWidth = targetElement.offsetWidth / 2;\n            var middle = left + halfWidth;\n            before = middle > mouseEvent.pageX;\n            if (this.localization.rtl) {\n                before = !before;\n            }\n        }\n        else {\n            before = isTargetBefore(draggable.element.nativeElement, targetElement);\n        }\n        return before;\n    };\n    HeaderComponent.prototype.enter = function (_a) {\n        var target = _a.target, before = _a.before;\n        this.hint.enable();\n        if (this.localization.rtl) {\n            before = !before;\n        }\n        this.cue.position(position(target.element.nativeElement, before));\n    };\n    HeaderComponent.prototype.leave = function () {\n        this.hint.disable();\n        this.cue.hide();\n    };\n    HeaderComponent.prototype.drop = function (_a) {\n        var draggable = _a.draggable, target = _a.target, before = _a.before, changeContainer = _a.changeContainer;\n        this.reorderService.reorder({\n            before: before,\n            changeContainer: changeContainer,\n            source: draggable.context.column,\n            target: target.context.column\n        });\n    };\n    HeaderComponent.decorators = [\n        { type: Component, args: [{\n                    selector: '[kendoGridHeader]',\n                    styles: [\"\\n        .k-column-resizer {\\n            cursor: col-resize;\\n            display: block;\\n            height: 1000%;\\n            position: absolute;\\n            top: 0;\\n            width: .5em;\\n        }\\n    \"],\n                    template: \"\\n    <ng-template [ngIf]=\\\"true\\\">\\n        <tr *ngFor=\\\"let i of columnLevels; let levelIndex = index\\\"\\n            kendoGridLogicalRow\\n                [logicalRowIndex]=\\\"levelIndex\\\"\\n                [logicalSlaveRow]=\\\"lockedColumnsCount > 0\\\"\\n                [logicalCellsCount]=\\\"columns.length\\\"\\n                [logicalSlaveCellsCount]=\\\"unlockedColumnsCount\\\">\\n            <th\\n                class=\\\"k-group-cell k-header\\\"\\n                role=\\\"presentation\\\"\\n                *ngFor=\\\"let g of groups\\\">\\n            </th>\\n            <th class=\\\"k-hierarchy-cell k-header\\\"\\n                role=\\\"presentation\\\"\\n                *ngIf=\\\"detailTemplate?.templateRef\\\"\\n                kendoGridLogicalCell\\n                    [logicalRowIndex]=\\\"levelIndex\\\"\\n                    [logicalColIndex]=\\\"0\\\"\\n                    aria-selected=\\\"false\\\"\\n            >\\n            </th>\\n            <ng-template ngFor let-column [ngForOf]=\\\"columnsForLevel(levelIndex)\\\" [ngForTrackBy]=\\\"trackByIndex\\\" let-columnIndex=\\\"index\\\" let-last=\\\"last\\\">\\n                <th *ngIf=\\\"!isColumnGroupComponent(column)\\\"\\n                    kendoGridLogicalCell [logicalRowIndex]=\\\"levelIndex\\\"\\n                                         [logicalColIndex]=\\\"logicalColumnIndex(column)\\\"\\n                                         [colSpan]=\\\"column.colspan\\\"\\n                                         [rowSpan]=\\\"column.rowspan(totalColumnLevels)\\\"\\n                                         role=\\\"columnheader\\\"\\n                                         aria-selected=\\\"false\\\"\\n                                         [attr.aria-sort]=\\\"sortState(column)\\\"\\n                                         (keydown)=\\\"onHeaderKeydown(column, $event)\\\"\\n                    kendoDropTarget\\n                    kendoDraggable\\n                    kendoDraggableColumn\\n                    [enableDrag]=\\\"shouldActivate(column)\\\"\\n                    [context]=\\\"{\\n                        field: column.field,\\n                        type: 'column',\\n                        column: column,\\n                        hint: column.title || column.field,\\n                        lastColumn: last && columnIndex === 0\\n                    }\\\"\\n                    class=\\\"k-header\\\"\\n                    [class.k-filterable]=\\\"(showFilterMenu && isFilterable(column)) || showColumnMenu(column)\\\"\\n                    [class.k-first]=\\\"isFirstOnRow(column, columnIndex)\\\"\\n                    [ngClass]=\\\"column.headerClass\\\"\\n                    [ngStyle]=\\\"column.headerStyle\\\"\\n                    [attr.rowspan]=\\\"column.rowspan(totalColumnLevels)\\\"\\n                    [attr.colspan]=\\\"column.colspan\\\">\\n                    <kendo-grid-filter-menu\\n                        *ngIf=\\\"showFilterMenu && isFilterable(column)\\\"\\n                        [column]=\\\"column\\\"\\n                        [filter]=\\\"filter\\\">\\n                    </kendo-grid-filter-menu>\\n                    <kendo-grid-column-menu *ngIf=\\\"showColumnMenu(column)\\\"\\n                        [standalone]=\\\"false\\\"\\n                        [settings]=\\\"columnMenu\\\"\\n                        [column]=\\\"column\\\"\\n                        [columnMenuTemplate]=\\\"columnMenuTemplate\\\"\\n                        [sort]=\\\"sort\\\"\\n                        [filter]=\\\"filter\\\"\\n                        [sortable]=\\\"sortable\\\">\\n                    </kendo-grid-column-menu>\\n                    <ng-template [ngIf]=\\\"!isSortable(column)\\\">\\n                        <ng-template\\n                            [templateContext]=\\\"{\\n                                templateRef: column.headerTemplateRef,\\n                                columnIndex: column.leafIndex,\\n                                column: column,\\n                                $implicit: column\\n                            }\\\">\\n                        </ng-template>\\n                        <ng-template [ngIf]=\\\"!column.headerTemplateRef\\\">{{column.displayTitle}}</ng-template>\\n                    </ng-template>\\n                    <ng-template [ngIf]=\\\"isSortable(column)\\\">\\n                        <a #link href=\\\"#\\\" tabindex=\\\"-1\\\" class=\\\"k-link\\\" (click)=\\\"sortColumn(column, $event, link)\\\">\\n                            <ng-template\\n                                [templateContext]=\\\"{\\n                                    templateRef: column.headerTemplateRef,\\n                                    columnIndex: column.leafIndex,\\n                                    column: column,\\n                                    $implicit: column\\n                                }\\\">\\n                            </ng-template>\\n                            <ng-template [ngIf]=\\\"!column.headerTemplateRef\\\">{{column.displayTitle}}</ng-template>\\n                            <span [attr.aria-label]=\\\"sortableLabel\\\" [ngClass]=\\\"sortIcon(column.field)\\\"></span>\\n                            <span *ngIf=\\\"showSortNumbering(column)\\\" class=\\\"k-sort-order\\\">{{sortOrder(column.field)}}</span>\\n                        </a>\\n                        <span role=\\\"status\\\"\\n                              class=\\\"k-sort-status\\\"\\n                              style=\\\"position: absolute; left: -10000px;\\\"\\n                              [innerHtml]=\\\"sortStatus(column)\\\">\\n                        </span>\\n                    </ng-template>\\n                    <ng-template [ngIf]=\\\"isCheckboxColumn(column) && !column.headerTemplateRef && column.showSelectAll\\\">\\n                        <input\\n                            class=\\\"k-checkbox\\\"\\n                            [attr.id]=\\\"selectAllCheckboxId()\\\"\\n                            kendoGridSelectAllCheckbox\\n                            kendoGridFocusable>\\n                        <label class=\\\"k-checkbox-label\\\" [attr.for]=\\\"selectAllCheckboxId()\\\"></label>\\n                    </ng-template>\\n                    <span kendoGridColumnHandle\\n                        kendoDraggable\\n                        class=\\\"k-column-resizer\\\"\\n                        *ngIf=\\\"resizable\\\"\\n                        [column]=\\\"column\\\"\\n                        [columns]=\\\"columns\\\">\\n                    </span>\\n                </th>\\n                <th *ngIf=\\\"isColumnGroupComponent(column)\\\"\\n                    kendoGridLogicalCell [logicalRowIndex]=\\\"levelIndex\\\"\\n                                         [logicalColIndex]=\\\"logicalColumnIndex(column)\\\"\\n                                         [rowSpan]=\\\"column.rowspan(totalColumnLevels)\\\"\\n                                         [colSpan]=\\\"column.colspan\\\"\\n                    kendoDropTarget\\n                    kendoDraggable\\n                    kendoDraggableColumn\\n                    [enableDrag]=\\\"shouldActivate(column)\\\"\\n                    [context]=\\\"{\\n                        type: 'columnGroup',\\n                        column: column,\\n                        hint: column.title,\\n                        lastColumn: last && columnIndex === 0\\n                    }\\\"\\n                    class=\\\"k-header\\\"\\n                    [class.k-first]=\\\"isFirstOnRow(column, columnIndex)\\\"\\n                    [class.k-filterable]=\\\"showColumnMenu(column)\\\"\\n                    [ngClass]=\\\"column.headerClass\\\"\\n                    [ngStyle]=\\\"column.headerStyle\\\"\\n                    [attr.rowspan]=\\\"column.rowspan(totalColumnLevels)\\\"\\n                    [attr.colspan]=\\\"column.colspan\\\">\\n                        <kendo-grid-column-menu *ngIf=\\\"showColumnMenu(column)\\\"\\n                            [standalone]=\\\"false\\\"\\n                            [settings]=\\\"columnMenu\\\"\\n                            [column]=\\\"column\\\"\\n                            [columnMenuTemplate]=\\\"columnMenuTemplate\\\">\\n                        </kendo-grid-column-menu>\\n                        <ng-template\\n                            [templateContext]=\\\"{\\n                                templateRef: column.headerTemplateRef,\\n                                columnIndex: lockedColumnsCount + columnIndex,\\n                                column: column,\\n                                $implicit: column\\n                            }\\\">\\n                        </ng-template>\\n                        <ng-template [ngIf]=\\\"!column.headerTemplateRef\\\">{{column.displayTitle}}</ng-template>\\n                        <span kendoGridColumnHandle\\n                            kendoDraggable\\n                            class=\\\"k-column-resizer\\\"\\n                            *ngIf=\\\"resizable\\\"\\n                            [column]=\\\"column\\\"\\n                            [columns]=\\\"columns\\\">\\n                        </span>\\n                </th>\\n            </ng-template>\\n        </tr>\\n        <tr *ngIf=\\\"showFilterRow\\\"\\n            kendoGridFilterRow\\n                [columns]=\\\"leafColumns\\\"\\n                [filter]=\\\"filter\\\"\\n                [groups]=\\\"groups\\\"\\n                [detailTemplate]=\\\"detailTemplate\\\"\\n                [lockedColumnsCount]=\\\"lockedColumnsCount\\\"\\n            kendoGridLogicalRow\\n                [logicalRowIndex]=\\\"totalColumnLevels + 1\\\"\\n                [logicalSlaveRow]=\\\"lockedColumnsCount > 0\\\"\\n                [logicalCellsCount]=\\\"columns.length\\\"\\n                [logicalSlaveCellsCount]=\\\"unlockedColumnsCount\\\"\\n        ></tr>\\n    </ng-template>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    HeaderComponent.ctorParameters = function () { return [\n        { type: SinglePopupService },\n        { type: DragHintService },\n        { type: DropCueService },\n        { type: ColumnReorderService },\n        { type: IdService },\n        { type: SortService },\n        { type: LocalizationService },\n        { type: ChangeDetectorRef }\n    ]; };\n    HeaderComponent.propDecorators = {\n        totalColumnLevels: [{ type: Input }],\n        columns: [{ type: Input }],\n        groups: [{ type: Input }],\n        detailTemplate: [{ type: Input }],\n        scrollable: [{ type: Input }],\n        filterable: [{ type: Input }],\n        sort: [{ type: Input }],\n        filter: [{ type: Input }],\n        sortable: [{ type: Input }],\n        groupable: [{ type: Input }],\n        lockedColumnsCount: [{ type: Input }],\n        resizable: [{ type: Input }],\n        reorderable: [{ type: Input }],\n        columnMenu: [{ type: Input }],\n        columnMenuTemplate: [{ type: Input }],\n        totalColumnsCount: [{ type: Input }],\n        headerClass: [{ type: HostBinding, args: ['class.k-grid-header',] }],\n        dropTargets: [{ type: ViewChildren, args: [DropTargetDirective,] }]\n    };\n    return HeaderComponent;\n}());\n\n// TODO\n// tslint:disable:rxjs-no-unsafe-takeuntil\n/**\n * @hidden\n */\nvar fromPercentage = function (value, percent) {\n    var sign = percent < 0 ? -1 : 1;\n    return Math.ceil((Math.abs(percent) / 100) * value) * sign;\n};\n/**\n * @hidden\n */\nvar toPercentage = function (value, whole) { return (value / whole) * 100; };\n/**\n * @hidden\n */\nvar headerWidth = function (handle) { return handle.nativeElement.parentElement.offsetWidth; };\n/**\n * @hidden\n */\nvar allLeafColumns = function (columns) { return expandColumns(columns)\n    .filter(function (c) { return !c.isColumnGroup; }); };\n/**\n * @hidden\n */\nvar stopPropagation = function (_a) {\n    var event = _a.originalEvent;\n    event.stopPropagation();\n    event.preventDefault();\n};\n/**\n * @hidden\n */\nvar createMoveStream = function (service, draggable) { return function (mouseDown) {\n    return draggable.kendoDrag.pipe(takeUntil(draggable.kendoRelease.pipe(tap(function () { return service.end(); }))), map(function (_a) {\n        var pageX = _a.pageX;\n        return ({\n            originalX: mouseDown.pageX,\n            pageX: pageX\n        });\n    }));\n}; };\n/**\n * @hidden\n */\nvar preventOnDblClick$1 = function (release) { return function (mouseDown) {\n    return of(mouseDown).pipe(delay(150), takeUntil(release));\n}; };\n/**\n * @hidden\n */\nvar isInSpanColumn$1 = function (column) { return !!(column.parent && column.parent.isSpanColumn); };\n/**\n * @hidden\n *\n * Calculates the column index. If the column is stated in `SpanColumn`,\n * the index for all child columns equals the index of the first child.\n */\nvar indexOf = function (target, list) {\n    var index = 0;\n    var ignore = 0;\n    var skip = 0;\n    while (index < list.length) {\n        var current = list[index];\n        var isParentSpanColumn = isInSpanColumn$1(current);\n        if (current === target) {\n            break;\n        }\n        if ((ignore-- <= 0) && isParentSpanColumn) {\n            ignore = current.parent.childColumns.length - 1;\n            skip += ignore;\n        }\n        index++;\n    }\n    return index - skip;\n};\n/**\n * @hidden\n */\nvar ColumnHandleDirective = /** @class */ (function () {\n    function ColumnHandleDirective(draggable, element, service, zone, cdr, localization) {\n        this.draggable = draggable;\n        this.element = element;\n        this.service = service;\n        this.zone = zone;\n        this.cdr = cdr;\n        this.localization = localization;\n        this.columns = [];\n        this.subscriptions = new Subscription();\n        this.rtl = false;\n    }\n    Object.defineProperty(ColumnHandleDirective.prototype, \"visible\", {\n        get: function () {\n            return this.column.resizable ? 'block' : 'none';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnHandleDirective.prototype, \"leftStyle\", {\n        get: function () {\n            return isTruthy(this.rtl) ? 0 : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnHandleDirective.prototype, \"rightStyle\", {\n        get: function () {\n            return isTruthy(this.rtl) ? null : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColumnHandleDirective.prototype.autoFit = function () {\n        var _this = this;\n        var allLeafs = allLeafColumns(this.columns);\n        var currentLeafs = leafColumns([this.column]).filter(function (column) { return isTruthy(column.resizable); });\n        var columnInfo = currentLeafs.map(function (column) {\n            var isParentSpan = isInSpanColumn$1(column);\n            var isLastInSpan = isParentSpan ? column.parent.childColumns.last === column : false;\n            var index = indexOf(column, allLeafs);\n            return {\n                column: column,\n                headerIndex: _this.columnsForLevel(column.level).indexOf(column),\n                index: index,\n                isLastInSpan: isLastInSpan,\n                isParentSpan: isParentSpan,\n                level: column.level\n            };\n        });\n        currentLeafs.forEach(function (column) { return column.width = 0; });\n        this.service.measureColumns(columnInfo);\n    };\n    ColumnHandleDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        var service = this.service.changes.pipe(filter(function () { return _this.column.resizable; }), filter(function (e) { return isPresent(e.columns.find(function (column) { return column === _this.column; })); }));\n        this.subscriptions.add(service.pipe(filter(function (e) { return e.type === 'start'; }))\n            .subscribe(this.initState.bind(this)));\n        this.subscriptions.add(service.pipe(filter(function (e) { return e.type === 'resizeColumn'; }))\n            .subscribe(this.resize.bind(this)));\n        this.subscriptions.add(this.service.changes.pipe(filter(function (e) { return e.type === 'start'; }), filter(this.shouldUpdate.bind(this)), take(1) //on first resize only\n        ).subscribe(this.initColumnWidth.bind(this)));\n        this.subscriptions.add(this.zone.runOutsideAngular(function () {\n            return _this.draggable.kendoPress.pipe(tap(stopPropagation), tap(function () { return _this.service.start(_this.column); }), switchMap(preventOnDblClick$1(_this.draggable.kendoRelease)), switchMap(createMoveStream(_this.service, _this.draggable)))\n                .subscribe(function (_a) {\n                var pageX = _a.pageX, originalX = _a.originalX;\n                var delta = pageX - originalX;\n                var percent = toPercentage(delta, _this.column.resizeStartWidth || _this.column.width);\n                _this.service.resizeColumns(percent);\n            });\n        }));\n        this.subscriptions.add(service.pipe(filter(function (e) { return e.type === 'autoFitComplete'; }))\n            .subscribe(this.sizeToFit.bind(this)));\n        this.subscriptions.add(service.pipe(filter(function (e) { return e.type === 'triggerAutoFit'; }))\n            .subscribe(this.autoFit.bind(this)));\n        this.subscriptions.add(this.localization.changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            return _this.rtl = rtl;\n        }));\n    };\n    ColumnHandleDirective.prototype.ngOnDestroy = function () {\n        if (this.subscriptions) {\n            this.subscriptions.unsubscribe();\n        }\n    };\n    ColumnHandleDirective.prototype.shouldUpdate = function () {\n        return !allLeafColumns(this.columns)\n            .map(function (column) { return column.width; })\n            .some(isBlank);\n    };\n    ColumnHandleDirective.prototype.initColumnWidth = function () {\n        this.column.width = headerWidth(this.element);\n    };\n    ColumnHandleDirective.prototype.initState = function () {\n        this.column.resizeStartWidth = headerWidth(this.element);\n        this.service.resizedColumn({\n            column: this.column,\n            oldWidth: this.column.resizeStartWidth\n        });\n    };\n    ColumnHandleDirective.prototype.resize = function (_a) {\n        var deltaPercent = _a.deltaPercent;\n        var delta = fromPercentage(this.column.resizeStartWidth, deltaPercent);\n        if (isTruthy(this.rtl)) {\n            delta *= -1;\n        }\n        var newWidth = Math.max(this.column.resizeStartWidth + delta, this.column.minResizableWidth);\n        var tableDelta = newWidth > this.column.minResizableWidth ?\n            delta : this.column.minResizableWidth - this.column.resizeStartWidth;\n        this.updateWidth(this.column, newWidth);\n        this.service.resizeTable(this.column, tableDelta);\n    };\n    ColumnHandleDirective.prototype.sizeToFit = function (_a) {\n        var columns = _a.columns, widths = _a.widths;\n        var index = columns.indexOf(this.column);\n        var width = Math.max.apply(Math, widths.map(function (w) { return w[index]; })) + 1; //add 1px for IE\n        var tableDelta = width - this.column.resizeStartWidth;\n        this.updateWidth(this.column, width);\n        this.service.resizeTable(this.column, tableDelta);\n    };\n    ColumnHandleDirective.prototype.updateWidth = function (column, width) {\n        column.width = width;\n        this.cdr.markForCheck(); //force CD cycle\n    };\n    ColumnHandleDirective.prototype.columnsForLevel = function (level) {\n        return columnsToRender(this.columns ? this.columns.filter(function (column) { return column.level === level; }) : []);\n    };\n    ColumnHandleDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridColumnHandle]'\n                },] },\n    ];\n    /** @nocollapse */\n    ColumnHandleDirective.ctorParameters = function () { return [\n        { type: DraggableDirective, decorators: [{ type: Host }] },\n        { type: ElementRef },\n        { type: ColumnResizingService },\n        { type: NgZone },\n        { type: ChangeDetectorRef },\n        { type: LocalizationService }\n    ]; };\n    ColumnHandleDirective.propDecorators = {\n        columns: [{ type: Input }],\n        column: [{ type: Input }],\n        visible: [{ type: HostBinding, args: ['style.display',] }],\n        leftStyle: [{ type: HostBinding, args: ['style.left',] }],\n        rightStyle: [{ type: HostBinding, args: ['style.right',] }],\n        autoFit: [{ type: HostListener, args: ['dblclick',] }]\n    };\n    return ColumnHandleDirective;\n}());\n\n/**\n * Represents the select-all checkbox feature of the Grid ([see example]({% slug selection_grid %}#toc-select-all-feature)).\n */\nvar SelectAllCheckboxDirective = /** @class */ (function () {\n    function SelectAllCheckboxDirective(selectionService, el, renderer, ngZone) {\n        var _this = this;\n        this.selectionService = selectionService;\n        this.el = el;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        /**\n         * Fires when the user clicks the `kendoGridSelectAllCheckbox` select-all checkbox\n         * ([see example]({% slug selection_grid %}#toc-select-all-feature)).\n         */\n        this.selectAllChange = new EventEmitter();\n        this.type = \"checkbox\";\n        this.stateSet = false;\n        this.ngZone.runOutsideAngular(function () {\n            _this.destroyClick = _this.renderer.listen(_this.el.nativeElement, \"click\", _this.onClick.bind(_this));\n        });\n    }\n    SelectAllCheckboxDirective.prototype.ngAfterContentChecked = function () {\n        this.setState();\n    };\n    SelectAllCheckboxDirective.prototype.ngOnChanges = function () {\n        this.stateSet = true;\n    };\n    SelectAllCheckboxDirective.prototype.ngOnDestroy = function () {\n        if (this.destroyClick) {\n            this.destroyClick();\n        }\n    };\n    /**\n     * @hidden\n     */\n    SelectAllCheckboxDirective.prototype.onClick = function () {\n        var _this = this;\n        var isChecked = this.el.nativeElement.checked;\n        var options = this.selectionService.options;\n        this.selectAllChange.emit(isChecked ? \"checked\" : \"unchecked\");\n        if (options.enabled && options.mode === \"multiple\") {\n            this.ngZone.run(function () {\n                _this.selectionService.updateAll(isChecked);\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    SelectAllCheckboxDirective.prototype.setState = function () {\n        var state$$1 = this.stateSet ? this.stateToBool() : this.selectionService.selectAllState;\n        var elem = this.el.nativeElement;\n        this.renderer.setProperty(elem, \"indeterminate\", !isPresent(state$$1));\n        this.renderer.setProperty(elem, \"checked\", isPresent(state$$1) ? state$$1 : false);\n    };\n    /**\n     * @hidden\n     */\n    SelectAllCheckboxDirective.prototype.stateToBool = function () {\n        switch (this.state) {\n            case \"checked\":\n                return true;\n            case \"unchecked\":\n                return false;\n            default:\n                return undefined;\n        }\n    };\n    SelectAllCheckboxDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridSelectAllCheckbox]'\n                },] },\n    ];\n    /** @nocollapse */\n    SelectAllCheckboxDirective.ctorParameters = function () { return [\n        { type: SelectionService },\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: NgZone }\n    ]; };\n    SelectAllCheckboxDirective.propDecorators = {\n        state: [{ type: Input }],\n        selectAllChange: [{ type: Output }],\n        type: [{ type: HostBinding, args: ['attr.type',] }]\n    };\n    return SelectAllCheckboxDirective;\n}());\n\n/**\n * @hidden\n */\nvar FilterMenuComponent = /** @class */ (function () {\n    function FilterMenuComponent(filterService, popupService, localization) {\n        this.filterService = filterService;\n        this.popupService = popupService;\n        this.localization = localization;\n        /**\n         * @hidden\n         */\n        this.filterLabel = this.localization.get('filter');\n    }\n    Object.defineProperty(FilterMenuComponent.prototype, \"hasFilters\", {\n        get: function () {\n            return filtersByField(this.filter, (this.column || {}).field).length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FilterMenuComponent.prototype.toggle = function (anchor, template) {\n        this.popupRef = this.popupService.open(anchor, template, this.popupRef);\n        return false;\n    };\n    FilterMenuComponent.prototype.close = function () {\n        this.popupService.destroy();\n    };\n    FilterMenuComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-filter-menu',\n                    template: \"\\n        <a #anchor\\n            [ngClass]=\\\"{'k-grid-filter':true, 'k-state-active': hasFilters}\\\"\\n            (click)=\\\"toggle(anchor, template)\\\"\\n            href=\\\"#\\\"\\n            [attr.title]=\\\"filterLabel\\\">\\n            <span class=\\\"k-icon k-i-filter\\\"></span>\\n        </a>\\n        <ng-template #template>\\n            <kendo-grid-filter-menu-container\\n                [column]=\\\"column\\\"\\n                [filter]=\\\"filter\\\"\\n                (close)=\\\"close()\\\"\\n                >\\n            </kendo-grid-filter-menu-container>\\n        </ng-template>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    FilterMenuComponent.ctorParameters = function () { return [\n        { type: FilterService },\n        { type: SinglePopupService },\n        { type: LocalizationService }\n    ]; };\n    FilterMenuComponent.propDecorators = {\n        column: [{ type: Input }],\n        filter: [{ type: Input }]\n    };\n    return FilterMenuComponent;\n}());\n\nvar isNoValueOperator = function (operator) { return (operator === \"isnull\"\n    || operator === \"isnotnull\"\n    || operator === \"isempty\"\n    || operator === \"isnotempty\"); };\nvar validFilters = function (_a) {\n    var value = _a.value, operator = _a.operator;\n    return !isNullOrEmptyString(value) || isNoValueOperator(operator);\n};\nvar trimFilters = function (filter$$1) {\n    filter$$1.filters = filter$$1.filters.filter(validFilters);\n    return filter$$1;\n};\nvar findParent = function (filters, field, parent) {\n    return filters.reduce(function (acc, filter$$1) {\n        if (acc) {\n            return acc;\n        }\n        if (filter$$1.filters) {\n            return findParent(filter$$1.filters, field, filter$$1);\n        }\n        else if (filter$$1.field === field) {\n            return parent;\n        }\n        return acc;\n    }, undefined); // tslint:disable-line:align\n};\nvar parentLogicOfDefault = function (filter$$1, field, def) {\n    if (def === void 0) { def = \"and\"; }\n    var parent = findParent(((filter$$1 || {}).filters || []), field);\n    return isPresent(parent) ? parent.logic : def;\n};\n/**\n * @hidden\n */\nvar FilterMenuContainerComponent = /** @class */ (function () {\n    function FilterMenuContainerComponent(parentService, childService, localization, cd) {\n        this.parentService = parentService;\n        this.childService = childService;\n        this.localization = localization;\n        this.cd = cd;\n        this.close = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.actionsClass = 'k-action-buttons k-button-group';\n        this._templateContext = {};\n    }\n    Object.defineProperty(FilterMenuContainerComponent.prototype, \"filter\", {\n        get: function () {\n            return this._filter;\n        },\n        /**\n         * The current root filter.\n         * @type {CompositeFilterDescriptor}\n         */\n        set: function (value) {\n            this._filter = cloneFilters(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FilterMenuContainerComponent.prototype, \"childFilter\", {\n        get: function () {\n            if (!isPresent(this._childFilter)) {\n                this._childFilter = {\n                    filters: filtersByField(this.filter, (this.column || {}).field),\n                    logic: parentLogicOfDefault(this.filter, (this.column || {}).field)\n                };\n            }\n            return this._childFilter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FilterMenuContainerComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscription = this.childService.changes.subscribe(function (filter$$1) { return _this._childFilter = filter$$1; });\n        this.subscription.add(this.localization.changes.subscribe(function () { return _this.cd.markForCheck(); }));\n    };\n    FilterMenuContainerComponent.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    Object.defineProperty(FilterMenuContainerComponent.prototype, \"disabled\", {\n        get: function () {\n            return !this.childFilter.filters.some(validFilters);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FilterMenuContainerComponent.prototype, \"templateContext\", {\n        get: function () {\n            this._templateContext.column = this.column;\n            this._templateContext.filter = this.childFilter;\n            this._templateContext.filterService = this.childService;\n            // tslint:disable-next-line:no-string-literal\n            this._templateContext[\"$implicit\"] = this.childFilter;\n            return this._templateContext;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FilterMenuContainerComponent.prototype, \"hasTemplate\", {\n        get: function () {\n            return isPresent(this.column) && isPresent(this.column.filterMenuTemplateRef);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FilterMenuContainerComponent.prototype.submit = function () {\n        var filter$$1 = trimFilters(this.childFilter);\n        if (filter$$1.filters.length) {\n            var root = this.filter || {\n                filters: [],\n                logic: \"and\"\n            };\n            removeFilter(root, this.column.field);\n            root.filters.push(filter$$1);\n            this.parentService.filter(root);\n        }\n        this.close.emit();\n        return false;\n    };\n    FilterMenuContainerComponent.prototype.reset = function () {\n        var root = this.filter || {\n            filters: [],\n            logic: \"and\"\n        };\n        removeFilter(root, this.column.field);\n        this.parentService.filter(root);\n        this.close.emit();\n    };\n    Object.defineProperty(FilterMenuContainerComponent.prototype, \"clearText\", {\n        get: function () {\n            return this.localization.get(\"filterClearButton\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FilterMenuContainerComponent.prototype, \"filterText\", {\n        get: function () {\n            return this.localization.get(\"filterFilterButton\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FilterMenuContainerComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [FilterService],\n                    selector: 'kendo-grid-filter-menu-container',\n                    template: \"\\n        <form (submit)=\\\"submit()\\\" (reset)=\\\"reset()\\\"\\n            class=\\\"k-filter-menu k-group k-reset k-state-border-up\\\">\\n            <div class=\\\"k-filter-menu-container\\\">\\n                <ng-container [ngSwitch]=\\\"hasTemplate\\\">\\n                    <ng-container *ngSwitchCase=\\\"false\\\">\\n                        <ng-container\\n                            kendoFilterMenuHost\\n                            [filterService]=\\\"childService\\\"\\n                            [column]=\\\"column\\\"\\n                            [filter]=\\\"childFilter\\\">\\n                        </ng-container>\\n                    </ng-container>\\n                    <ng-container *ngSwitchCase=\\\"true\\\">\\n                        <ng-template\\n                            *ngIf=\\\"column.filterMenuTemplateRef\\\"\\n                            [ngTemplateOutlet]=\\\"column.filterMenuTemplateRef\\\"\\n                            [ngTemplateOutletContext]=\\\"templateContext\\\"\\n                            >\\n                        </ng-template>\\n                    </ng-container>\\n                </ng-container>\\n                <div [ngClass]=\\\"actionsClass\\\">\\n                    <button type=\\\"reset\\\" class=\\\"k-button\\\">{{clearText}}</button>\\n                    <button type=\\\"submit\\\" class=\\\"k-button k-primary\\\" [disabled]=\\\"disabled\\\">{{filterText}}</button>\\n                </div>\\n            </div>\\n        </form>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    FilterMenuContainerComponent.ctorParameters = function () { return [\n        { type: FilterService, decorators: [{ type: SkipSelf }] },\n        { type: FilterService },\n        { type: LocalizationService },\n        { type: ChangeDetectorRef }\n    ]; };\n    FilterMenuContainerComponent.propDecorators = {\n        close: [{ type: Output }],\n        column: [{ type: Input }],\n        filter: [{ type: Input }],\n        actionsClass: [{ type: Input }]\n    };\n    return FilterMenuContainerComponent;\n}());\n\n/**\n * @hidden\n */\nvar FilterMenuInputWrapperComponent = /** @class */ (function (_super) {\n    __extends(FilterMenuInputWrapperComponent, _super);\n    function FilterMenuInputWrapperComponent() {\n        return _super.call(this, null) || this;\n    }\n    Object.defineProperty(FilterMenuInputWrapperComponent.prototype, \"hostClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FilterMenuInputWrapperComponent.prototype.operatorChange = function (dataItem) {\n        this.currentOperator = dataItem;\n    };\n    FilterMenuInputWrapperComponent.prototype.filterChange = function (filter$$1) {\n        this.applyFilter(filter$$1);\n    };\n    Object.defineProperty(FilterMenuInputWrapperComponent.prototype, \"currentFilter\", {\n        /**\n         * The current filter for the associated column field.\n         * @readonly\n         * @type {FilterDescriptor}\n         */\n        get: function () {\n            return this._currentFilter;\n        },\n        /**\n         * The current filter for the associated column field.\n         * @readonly\n         * @type {FilterDescriptor}\n         */\n        set: function (value) {\n            this._currentFilter = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FilterMenuInputWrapperComponent.prototype.updateFilter = function (filter$$1) {\n        Object.assign(this.currentFilter, filter$$1);\n        return this.filter;\n    };\n    FilterMenuInputWrapperComponent.prototype.onChange = function (value) {\n        this.filterChange(this.updateFilter({\n            field: this.column.field,\n            operator: this.currentOperator,\n            value: value\n        }));\n    };\n    FilterMenuInputWrapperComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-filter-menu-input-wrapper',\n                    template: \"\\n        <kendo-dropdownlist\\n            [data]=\\\"operators\\\"\\n            (valueChange)=\\\"operatorChange($event)\\\"\\n            [value]=\\\"currentOperator\\\"\\n            [valuePrimitive]=\\\"true\\\"\\n            textField=\\\"text\\\"\\n            valueField=\\\"value\\\">\\n        </kendo-dropdownlist>\\n        <ng-content></ng-content>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    FilterMenuInputWrapperComponent.ctorParameters = function () { return []; };\n    FilterMenuInputWrapperComponent.propDecorators = {\n        filterService: [{ type: Input }],\n        currentFilter: [{ type: Input }]\n    };\n    return FilterMenuInputWrapperComponent;\n}(FilterInputWrapperComponent));\n\n/**\n * @hidden\n */\nvar StringFilterMenuInputComponent = /** @class */ (function () {\n    function StringFilterMenuInputComponent() {\n        this.operators = [];\n    }\n    StringFilterMenuInputComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-string-filter-menu-input',\n                    template: \"\\n        <kendo-grid-filter-menu-input-wrapper\\n            [column]=\\\"column\\\"\\n            [filter]=\\\"filter\\\"\\n            [operators]=\\\"operators\\\"\\n            [defaultOperator]=\\\"operator\\\"\\n            [currentFilter]=\\\"currentFilter\\\"\\n            [filterService]=\\\"filterService\\\"\\n            >\\n            <input class=\\\"k-textbox\\\" kendoFilterInput [filterDelay]=\\\"0\\\" [ngModel]=\\\"currentFilter?.value\\\" />\\n        </kendo-grid-filter-menu-input-wrapper>\\n    \"\n                },] },\n    ];\n    StringFilterMenuInputComponent.propDecorators = {\n        operators: [{ type: Input }],\n        column: [{ type: Input }],\n        filter: [{ type: Input }],\n        operator: [{ type: Input }],\n        currentFilter: [{ type: Input }],\n        filterService: [{ type: Input }]\n    };\n    return StringFilterMenuInputComponent;\n}());\n\n/**\n * Represents a string-filter menu component.\n * ([see example]({% slug builtinfiltertemplate_grid %}#toc-configuration-components-for-filter-templates)).\n */\nvar StringFilterMenuComponent = /** @class */ (function (_super) {\n    __extends(StringFilterMenuComponent, _super);\n    function StringFilterMenuComponent(localization) {\n        var _this = _super.call(this, null, localization) || this;\n        _this.logicOperators = logicOperators(_this.localization);\n        /**\n         * The current menu filter.\n         * @type {CompositeFilterDescriptor}\n         */\n        _this.filter = { filters: [], logic: \"and\" };\n        /**\n         * Determines if the inputs of second criteria will displayed.\n         */\n        _this.extra = true;\n        return _this;\n    }\n    Object.defineProperty(StringFilterMenuComponent.prototype, \"hostClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StringFilterMenuComponent.prototype, \"firstFilter\", {\n        get: function () {\n            return setFilter(0, this.filter, (this.column || {}).field, this.operator);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StringFilterMenuComponent.prototype, \"secondFilter\", {\n        get: function () {\n            return setFilter(1, this.filter, (this.column || {}).field, this.operator);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StringFilterMenuComponent.prototype.logicChange = function (value) {\n        this.filter.logic = value;\n    };\n    StringFilterMenuComponent.prototype.localizationChange = function () {\n        this.logicOperators = logicOperators(this.localization);\n        _super.prototype.localizationChange.call(this);\n    };\n    StringFilterMenuComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-string-filter-menu',\n                    template: \"\\n        <kendo-grid-string-filter-menu-input\\n            [currentFilter]=\\\"firstFilter\\\"\\n            [operators]=\\\"operators\\\"\\n            [filterService]=\\\"filterService\\\"\\n            [column]=\\\"column\\\"\\n            [filter]=\\\"filter\\\">\\n        </kendo-grid-string-filter-menu-input>\\n        <kendo-dropdownlist\\n            *ngIf=\\\"extra\\\"\\n            class=\\\"k-filter-and\\\"\\n            [data]=\\\"logicOperators\\\"\\n            [valuePrimitive]=\\\"true\\\" (valueChange)=\\\"logicChange($event)\\\"\\n            [value]=\\\"filter?.logic\\\"\\n            textField=\\\"text\\\"\\n            valueField=\\\"value\\\">\\n        </kendo-dropdownlist>\\n        <kendo-grid-string-filter-menu-input\\n            *ngIf=\\\"extra\\\"\\n            [operators]=\\\"operators\\\"\\n            [currentFilter]=\\\"secondFilter\\\"\\n            [filterService]=\\\"filterService\\\"\\n            [column]=\\\"column\\\"\\n            [filter]=\\\"filter\\\">\\n        </kendo-grid-string-filter-menu-input>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    StringFilterMenuComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    StringFilterMenuComponent.propDecorators = {\n        hostClasses: [{ type: HostBinding, args: ['class.k-filtercell',] }],\n        column: [{ type: Input }],\n        filter: [{ type: Input }],\n        extra: [{ type: Input }],\n        filterService: [{ type: Input }]\n    };\n    return StringFilterMenuComponent;\n}(StringFilterComponent));\n\n/**\n * Represents a numeric-filter menu component.\n *\n * @example\n *  ```html-no-run\n *      <kendo-grid-column field=\"UnitPrice\" title=\"Unit Price\">\n *          <ng-template kendoGridFilterMenuTemplate let-filter let-column=\"column\" let-filterService=\"filterService\">\n *          <kendo-grid-numeric-filter-menu\n *              [column]=\"column\"\n *              [filter]=\"filter\"\n *              [filterService]=\"filterService\"\n *              >\n *          </kendo-grid-numeric-filter-menu>\n *          </ng-template>\n *      </kendo-grid-column>\n *   ```\n */\nvar NumericFilterMenuComponent = /** @class */ (function (_super) {\n    __extends(NumericFilterMenuComponent, _super);\n    function NumericFilterMenuComponent(localization) {\n        var _this = _super.call(this, null, localization) || this;\n        _this.logicOperators = logicOperators(_this.localization);\n        /**\n         * The current menu filter.\n         * @type {CompositeFilterDescriptor}\n         */\n        _this.filter = { filters: [], logic: \"and\" };\n        /**\n         * Determines if the inputs of second criteria will displayed.\n         */\n        _this.extra = true;\n        return _this;\n    }\n    Object.defineProperty(NumericFilterMenuComponent.prototype, \"hostClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericFilterMenuComponent.prototype, \"firstFilter\", {\n        get: function () {\n            return setFilter(0, this.filter, (this.column || {}).field, this.operator);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericFilterMenuComponent.prototype, \"secondFilter\", {\n        get: function () {\n            return setFilter(1, this.filter, (this.column || {}).field, this.operator);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NumericFilterMenuComponent.prototype.logicChange = function (value) {\n        this.filter.logic = value;\n    };\n    NumericFilterMenuComponent.prototype.localizationChange = function () {\n        this.logicOperators = logicOperators(this.localization);\n        _super.prototype.localizationChange.call(this);\n    };\n    NumericFilterMenuComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-numeric-filter-menu',\n                    template: \"\\n        <kendo-grid-numeric-filter-menu-input\\n            [currentFilter]=\\\"firstFilter\\\"\\n            [operators]=\\\"operators\\\"\\n            [filterService]=\\\"filterService\\\"\\n            [column]=\\\"column\\\"\\n            [filter]=\\\"filter\\\"\\n            [format]=\\\"format\\\"\\n            [decimals]=\\\"decimals\\\"\\n            [spinners]=\\\"spinners\\\"\\n            [min]=\\\"min\\\"\\n            [max]=\\\"max\\\"\\n            [step]=\\\"step\\\"\\n            >\\n        </kendo-grid-numeric-filter-menu-input>\\n        <kendo-dropdownlist\\n            *ngIf=\\\"extra\\\"\\n            class=\\\"k-filter-and\\\"\\n            [data]=\\\"logicOperators\\\"\\n            [valuePrimitive]=\\\"true\\\"\\n            (valueChange)=\\\"logicChange($event)\\\"\\n            [value]=\\\"filter?.logic\\\"\\n            textField=\\\"text\\\"\\n            valueField=\\\"value\\\">\\n        </kendo-dropdownlist>\\n        <kendo-grid-numeric-filter-menu-input\\n            *ngIf=\\\"extra\\\"\\n            [operators]=\\\"operators\\\"\\n            [currentFilter]=\\\"secondFilter\\\"\\n            [filterService]=\\\"filterService\\\"\\n            [column]=\\\"column\\\"\\n            [filter]=\\\"filter\\\"\\n            [format]=\\\"format\\\"\\n            [decimals]=\\\"decimals\\\"\\n            [spinners]=\\\"spinners\\\"\\n            [min]=\\\"min\\\"\\n            [max]=\\\"max\\\"\\n            [step]=\\\"step\\\"\\n            >\\n        </kendo-grid-numeric-filter-menu-input>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    NumericFilterMenuComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    NumericFilterMenuComponent.propDecorators = {\n        hostClasses: [{ type: HostBinding, args: ['class.k-filtercell',] }],\n        column: [{ type: Input }],\n        filter: [{ type: Input }],\n        extra: [{ type: Input }],\n        filterService: [{ type: Input }]\n    };\n    return NumericFilterMenuComponent;\n}(NumericFilterComponent));\n\n/**\n * @hidden\n */\nvar NumericFilterMenuInputComponent = /** @class */ (function () {\n    function NumericFilterMenuInputComponent() {\n        this.operators = [];\n        /**\n         * Specifies the value which is used to increment or decrement the component value.\n         * @type {numeric}\n         */\n        this.step = 1;\n        /**\n         * Specifies whether the **Up** and **Down** spin buttons will be rendered.\n         * @type {boolean}\n         */\n        this.spinners = true;\n    }\n    NumericFilterMenuInputComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-numeric-filter-menu-input',\n                    template: \"\\n        <kendo-grid-filter-menu-input-wrapper\\n            [column]=\\\"column\\\"\\n            [filter]=\\\"filter\\\"\\n            [operators]=\\\"operators\\\"\\n            [defaultOperator]=\\\"operator\\\"\\n            [currentFilter]=\\\"currentFilter\\\"\\n            [filterService]=\\\"filterService\\\"\\n            >\\n            <kendo-numerictextbox\\n                kendoFilterInput\\n                [filterDelay]=\\\"0\\\"\\n                [autoCorrect]=\\\"true\\\"\\n                [value]=\\\"currentFilter?.value\\\"\\n                [format]=\\\"format\\\"\\n                [decimals]=\\\"decimals\\\"\\n                [spinners]=\\\"spinners\\\"\\n                [min]=\\\"min\\\"\\n                [max]=\\\"max\\\"\\n                [step]=\\\"step\\\">\\n            </kendo-numerictextbox>\\n        </kendo-grid-filter-menu-input-wrapper>\\n    \"\n                },] },\n    ];\n    NumericFilterMenuInputComponent.propDecorators = {\n        operators: [{ type: Input }],\n        column: [{ type: Input }],\n        filter: [{ type: Input }],\n        operator: [{ type: Input }],\n        currentFilter: [{ type: Input }],\n        filterService: [{ type: Input }],\n        step: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        spinners: [{ type: Input }],\n        decimals: [{ type: Input }],\n        format: [{ type: Input }]\n    };\n    return NumericFilterMenuInputComponent;\n}());\n\n/**\n * Represents a date-filter menu component.\n *\n * @example\n *  ```html-no-run\n *      <kendo-grid-column field=\"OrderDate\" title=\"Order Date\">\n *          <ng-template kendoGridFilterMenuTemplate let-filter let-column=\"column\" let-filterService=\"filterService\">\n *            <kendo-grid-date-filter-menu\n *                [column]=\"column\"\n *                [filter]=\"filter\"\n *                [filterService]=\"filterService\"\n *                >\n *            </kendo-grid-date-filter-menu>\n *          </ng-template>\n *      </kendo-grid-column>\n *   ```\n */\nvar DateFilterMenuComponent = /** @class */ (function (_super) {\n    __extends(DateFilterMenuComponent, _super);\n    function DateFilterMenuComponent(localization) {\n        var _this = _super.call(this, null, localization) || this;\n        _this.logicOperators = logicOperators(_this.localization);\n        /**\n         * The current menu filter.\n         * @type {CompositeFilterDescriptor}\n         */\n        _this.filter = { filters: [], logic: \"and\" };\n        /**\n         * Determines if the inputs of second criteria will be displayed.\n         */\n        _this.extra = true;\n        return _this;\n    }\n    Object.defineProperty(DateFilterMenuComponent.prototype, \"hostClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateFilterMenuComponent.prototype, \"firstFilter\", {\n        get: function () {\n            return setFilter(0, this.filter, (this.column || {}).field, this.operator);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateFilterMenuComponent.prototype, \"secondFilter\", {\n        get: function () {\n            return setFilter(1, this.filter, (this.column || {}).field, this.operator);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DateFilterMenuComponent.prototype.logicChange = function (value) {\n        this.filter.logic = value;\n    };\n    DateFilterMenuComponent.prototype.localizationChange = function () {\n        this.logicOperators = logicOperators(this.localization);\n        _super.prototype.localizationChange.call(this);\n    };\n    DateFilterMenuComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-date-filter-menu',\n                    template: \"\\n        <kendo-grid-date-filter-menu-input\\n            [currentFilter]=\\\"firstFilter\\\"\\n            [operators]=\\\"operators\\\"\\n            [filterService]=\\\"filterService\\\"\\n            [column]=\\\"column\\\"\\n            [filter]=\\\"filter\\\"\\n            [activeView]=\\\"activeView\\\"\\n            [bottomView]=\\\"bottomView\\\"\\n            [topView]=\\\"topView\\\"\\n            [format]=\\\"format\\\"\\n            [formatPlaceholder]=\\\"formatPlaceholder\\\"\\n            [placeholder]=\\\"placeholder\\\"\\n            [min]=\\\"min\\\"\\n            [max]=\\\"max\\\"\\n            [weekNumber]=\\\"weekNumber\\\"\\n            >\\n        </kendo-grid-date-filter-menu-input>\\n        <kendo-dropdownlist\\n            *ngIf=\\\"extra\\\"\\n            class=\\\"k-filter-and\\\"\\n            [data]=\\\"logicOperators\\\"\\n            [valuePrimitive]=\\\"true\\\"\\n            (valueChange)=\\\"logicChange($event)\\\"\\n            [value]=\\\"filter?.logic\\\"\\n            textField=\\\"text\\\"\\n            valueField=\\\"value\\\">\\n        </kendo-dropdownlist>\\n        <kendo-grid-date-filter-menu-input\\n            *ngIf=\\\"extra\\\"\\n            [operators]=\\\"operators\\\"\\n            [currentFilter]=\\\"secondFilter\\\"\\n            [filterService]=\\\"filterService\\\"\\n            [column]=\\\"column\\\"\\n            [filter]=\\\"filter\\\"\\n            [activeView]=\\\"activeView\\\"\\n            [bottomView]=\\\"bottomView\\\"\\n            [topView]=\\\"topView\\\"\\n            [format]=\\\"format\\\"\\n            [formatPlaceholder]=\\\"formatPlaceholder\\\"\\n            [placeholder]=\\\"placeholder\\\"\\n            [min]=\\\"min\\\"\\n            [max]=\\\"max\\\"\\n            [weekNumber]=\\\"weekNumber\\\"\\n            >\\n        </kendo-grid-date-filter-menu-input>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    DateFilterMenuComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    DateFilterMenuComponent.propDecorators = {\n        hostClasses: [{ type: HostBinding, args: ['class.k-filtercell',] }],\n        column: [{ type: Input }],\n        filter: [{ type: Input }],\n        extra: [{ type: Input }],\n        filterService: [{ type: Input }]\n    };\n    return DateFilterMenuComponent;\n}(DateFilterComponent));\n\n/**\n * Represents a Boolean-filter menu component.\n *\n * @example\n *  ```html-no-run\n *      <kendo-grid-column field=\"Discontinued\" title=\"Discontinued\">\n *          <ng-template kendoGridFilterMenuTemplate let-filter let-column=\"column\" let-filterService=\"filterService\">\n *            <kendo-grid-boolean-filter-menu\n *                [column]=\"column\"\n *                [filter]=\"filter\"\n *                [filterService]=\"filterService\"\n *                >\n *            </kendo-grid-boolean-filter-menu>\n *          </ng-template>\n *      </kendo-grid-column>\n *   ```\n */\nvar BooleanFilterMenuComponent = /** @class */ (function (_super) {\n    __extends(BooleanFilterMenuComponent, _super);\n    function BooleanFilterMenuComponent(localization) {\n        var _this = _super.call(this, null, localization) || this;\n        /**\n         * The current menu filter.\n         * @type {CompositeFilterDescriptor}\n         */\n        _this.filter = { filters: [], logic: \"and\" };\n        _this.idPrefix = guid();\n        return _this;\n    }\n    Object.defineProperty(BooleanFilterMenuComponent.prototype, \"hostClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    BooleanFilterMenuComponent.prototype.radioId = function (value) {\n        return this.idPrefix + \"_\" + value;\n    };\n    /**\n     * @hidden\n     */\n    BooleanFilterMenuComponent.prototype.onChange = function (value) {\n        this.applyFilter(this.updateFilter({\n            field: this.column.field,\n            operator: \"eq\",\n            value: value\n        }));\n    };\n    /**\n     * @hidden\n     */\n    BooleanFilterMenuComponent.prototype.isSelected = function (radioValue) {\n        return this.filtersByField(this.column.field).some(function (_a) {\n            var value = _a.value;\n            return value === radioValue;\n        });\n    };\n    BooleanFilterMenuComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-boolean-filter-menu',\n                    template: \"\\n        <ul class=\\\"k-radio-list k-reset\\\">\\n            <li *ngFor=\\\"let item of items\\\">\\n                <input type=\\\"radio\\\"\\n                    [name]=\\\"idPrefix\\\"\\n                    class=\\\"k-radio\\\"\\n                    [checked]=\\\"isSelected(item.value)\\\"\\n                    [attr.id]=\\\"radioId(item.value)\\\"\\n                    (change)=\\\"onChange(item.value)\\\"\\n                />\\n                <label class=\\\"k-radio-label\\\" [attr.for]=\\\"radioId(item.value)\\\">{{item.text}}</label>\\n            </li>\\n        </ul>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    BooleanFilterMenuComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    BooleanFilterMenuComponent.propDecorators = {\n        hostClasses: [{ type: HostBinding, args: ['class.k-filtercell',] }],\n        filter: [{ type: Input }],\n        filterService: [{ type: Input }]\n    };\n    return BooleanFilterMenuComponent;\n}(BooleanFilterComponent));\n\n/**\n * @hidden\n *\n * > List the following components as `entryComponents` in the GridModule.\n */\nvar filterMenuComponentFactory = function (type) { return ({\n    \"boolean\": BooleanFilterMenuComponent,\n    \"date\": DateFilterMenuComponent,\n    \"numeric\": NumericFilterMenuComponent,\n    \"text\": StringFilterMenuComponent\n}[type]); };\n\n/**\n * @hidden\n */\nvar FilterMenuHostDirective = /** @class */ (function (_super) {\n    __extends(FilterMenuHostDirective, _super);\n    function FilterMenuHostDirective(host, resolver) {\n        return _super.call(this, host, resolver) || this;\n    }\n    FilterMenuHostDirective.prototype.componentType = function () {\n        if (isPresent(this.column) && !isNullOrEmptyString(this.column.filter)) {\n            return filterMenuComponentFactory(this.column.filter);\n        }\n        return StringFilterMenuComponent;\n    };\n    FilterMenuHostDirective.prototype.initComponent = function (ctx) {\n        _super.prototype.initComponent.call(this, ctx);\n        this.component.instance.filterService = this.filterService;\n    };\n    FilterMenuHostDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoFilterMenuHost]'\n                },] },\n    ];\n    /** @nocollapse */\n    FilterMenuHostDirective.ctorParameters = function () { return [\n        { type: ViewContainerRef },\n        { type: ComponentFactoryResolver }\n    ]; };\n    FilterMenuHostDirective.propDecorators = {\n        filterService: [{ type: Input }]\n    };\n    return FilterMenuHostDirective;\n}(FilterHostDirective));\n\n/**\n * @hidden\n */\nvar DateFilterMenuInputComponent = /** @class */ (function () {\n    function DateFilterMenuInputComponent(popupService) {\n        this.popupService = popupService;\n        this.operators = [];\n    }\n    DateFilterMenuInputComponent.prototype.open = function (picker) {\n        this.subscription = this.popupService.onClose\n            .pipe(filter(function () { return picker.isActive; }))\n            .subscribe(function (e) { return e.preventDefault(); });\n    };\n    DateFilterMenuInputComponent.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    DateFilterMenuInputComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-date-filter-menu-input',\n                    template: \"\\n        <kendo-grid-filter-menu-input-wrapper\\n            [column]=\\\"column\\\"\\n            [filter]=\\\"filter\\\"\\n            [operators]=\\\"operators\\\"\\n            [defaultOperator]=\\\"operator\\\"\\n            [currentFilter]=\\\"currentFilter\\\"\\n            [filterService]=\\\"filterService\\\"\\n            >\\n            <kendo-datepicker\\n                #picker\\n                kendoFilterInput\\n                [filterDelay]=\\\"0\\\"\\n                (open)=\\\"open(picker)\\\"\\n                [value]=\\\"currentFilter?.value\\\"\\n                [placeholder]=\\\"placeholder\\\"\\n                [formatPlaceholder]=\\\"formatPlaceholder\\\"\\n                [format]=\\\"format\\\"\\n                [min]=\\\"min\\\"\\n                [max]=\\\"max\\\"\\n                [activeView]=\\\"activeView\\\"\\n                [bottomView]=\\\"bottomView\\\"\\n                [topView]=\\\"topView\\\"\\n                [weekNumber]=\\\"weekNumber\\\"\\n                >\\n            </kendo-datepicker>\\n        </kendo-grid-filter-menu-input-wrapper>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    DateFilterMenuInputComponent.ctorParameters = function () { return [\n        { type: SinglePopupService }\n    ]; };\n    DateFilterMenuInputComponent.propDecorators = {\n        operators: [{ type: Input }],\n        column: [{ type: Input }],\n        filter: [{ type: Input }],\n        operator: [{ type: Input }],\n        currentFilter: [{ type: Input }],\n        filterService: [{ type: Input }],\n        format: [{ type: Input }],\n        formatPlaceholder: [{ type: Input }],\n        placeholder: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        activeView: [{ type: Input }],\n        bottomView: [{ type: Input }],\n        topView: [{ type: Input }],\n        weekNumber: [{ type: Input }]\n    };\n    return DateFilterMenuInputComponent;\n}());\n\nvar INTERNAL_COMPONENTS$2 = [\n    FilterMenuComponent,\n    FilterMenuContainerComponent,\n    FilterMenuInputWrapperComponent,\n    StringFilterMenuInputComponent,\n    StringFilterMenuComponent,\n    FilterMenuTemplateDirective,\n    NumericFilterMenuComponent,\n    NumericFilterMenuInputComponent,\n    DateFilterMenuInputComponent,\n    DateFilterMenuComponent,\n    FilterMenuHostDirective,\n    BooleanFilterMenuComponent\n];\nvar ENTRY_COMPONENTS$1 = [\n    StringFilterMenuComponent,\n    NumericFilterMenuComponent,\n    DateFilterMenuComponent,\n    BooleanFilterMenuComponent\n];\n/**\n * @hidden\n */\nvar FilterMenuModule = /** @class */ (function () {\n    function FilterMenuModule() {\n    }\n    FilterMenuModule.exports = function () {\n        return [\n            StringFilterMenuComponent,\n            FilterMenuTemplateDirective,\n            NumericFilterMenuComponent,\n            DateFilterMenuComponent,\n            BooleanFilterMenuComponent,\n            SharedFilterModule.exports()\n        ];\n    };\n    FilterMenuModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [INTERNAL_COMPONENTS$2],\n                    entryComponents: ENTRY_COMPONENTS$1,\n                    exports: [INTERNAL_COMPONENTS$2, SharedFilterModule],\n                    imports: [SharedFilterModule]\n                },] },\n    ];\n    return FilterMenuModule;\n}());\n\n/**\n * @hidden\n */\nvar ColumnListComponent = /** @class */ (function () {\n    function ColumnListComponent(element, ngZone, renderer) {\n        this.element = element;\n        this.ngZone = ngZone;\n        this.renderer = renderer;\n        this.reset = new EventEmitter();\n        this.apply = new EventEmitter();\n        this.columnChange = new EventEmitter();\n        this.autoSync = true;\n        this.allowHideAll = false;\n        this.actionsClass = 'k-action-buttons';\n        this.unlockedCount = 0;\n    }\n    Object.defineProperty(ColumnListComponent.prototype, \"className\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnListComponent.prototype, \"columns\", {\n        get: function () {\n            return this._columns;\n        },\n        set: function (value) {\n            this._columns = value.filter(function (column) { return column.includeInChooser !== false; });\n            this.allColumns = value;\n            this.updateColumnState();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColumnListComponent.prototype.isDisabled = function (column) {\n        return !(this.allowHideAll || this.hasFiltered || column.hidden || this.columns.find(function (current) { return current !== column && !current.hidden; })) ||\n            (this.hasVisibleLocked && !this.hasUnlockedFiltered && this.unlockedCount === 1 && !column.locked && !column.hidden);\n    };\n    ColumnListComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        if (!this.element) {\n            return;\n        }\n        this.ngZone.runOutsideAngular(function () {\n            _this.domSubscriptions = _this.renderer.listen(_this.element.nativeElement, 'click', function (e) {\n                if (hasClasses(e.target, 'k-checkbox')) {\n                    if (_this.autoSync) {\n                        var index = parseInt(e.target.getAttribute('data-index'), 10);\n                        var column_1 = _this.columns[index];\n                        var hidden_1 = !e.target.checked;\n                        if (Boolean(column_1.hidden) !== hidden_1) {\n                            _this.ngZone.run(function () {\n                                column_1.hidden = hidden_1;\n                                _this.columnChange.emit([column_1]);\n                            });\n                        }\n                    }\n                    else {\n                        _this.updateDisabled();\n                    }\n                }\n            });\n        });\n    };\n    ColumnListComponent.prototype.ngOnDestroy = function () {\n        if (this.domSubscriptions) {\n            this.domSubscriptions();\n        }\n    };\n    ColumnListComponent.prototype.cancelChanges = function () {\n        var _this = this;\n        this.forEachCheckBox(function (element, index) {\n            element.checked = !_this.columns[index].hidden;\n        });\n        this.updateDisabled();\n        this.reset.emit();\n    };\n    ColumnListComponent.prototype.applyChanges = function () {\n        var _this = this;\n        var changed = [];\n        this.forEachCheckBox(function (element, index) {\n            var column = _this.columns[index];\n            var hidden = !element.checked;\n            if (Boolean(column.hidden) !== hidden) {\n                column.hidden = hidden;\n                changed.push(column);\n            }\n        });\n        this.updateDisabled();\n        this.apply.emit(changed);\n    };\n    ColumnListComponent.prototype.forEachCheckBox = function (callback) {\n        var checkboxes = this.element.nativeElement.getElementsByClassName('k-checkbox');\n        var length = checkboxes.length;\n        for (var idx = 0; idx < length; idx++) {\n            callback(checkboxes[idx], idx);\n        }\n    };\n    ColumnListComponent.prototype.updateDisabled = function () {\n        if (this.allowHideAll && !this.hasLocked) {\n            return;\n        }\n        var checkedItems = [];\n        this.forEachCheckBox(function (checkbox, index) {\n            if (checkbox.checked) {\n                checkedItems.push({ checkbox: checkbox, index: index });\n            }\n            checkbox.disabled = false;\n        });\n        if (!this.allowHideAll && checkedItems.length === 1 && !this.hasFiltered) {\n            checkedItems[0].checkbox.disabled = true;\n        }\n        else if (this.hasLocked && !this.hasUnlockedFiltered) {\n            var columns_1 = this.columns;\n            var checkedUnlocked = checkedItems.filter(function (item) { return !columns_1[item.index].locked; });\n            if (checkedUnlocked.length === 1) {\n                checkedUnlocked[0].checkbox.disabled = true;\n            }\n        }\n    };\n    ColumnListComponent.prototype.updateColumnState = function () {\n        this.hasLocked = this.allColumns.filter(function (column) { return column.locked && (!column.hidden || column.includeInChooser !== false); }).length > 0;\n        this.hasVisibleLocked = this.allColumns.filter(function (column) { return column.locked && !column.hidden; }).length > 0;\n        this.unlockedCount = this.columns.filter(function (column) { return !column.locked && !column.hidden; }).length;\n        var filteredColumns = this.allColumns.filter(function (column) { return column.includeInChooser === false && !column.hidden; });\n        if (filteredColumns.length) {\n            this.hasFiltered = filteredColumns.length > 0;\n            this.hasUnlockedFiltered = filteredColumns.filter(function (column) { return !column.locked; }).length > 0;\n        }\n        else {\n            this.hasFiltered = false;\n            this.hasUnlockedFiltered = false;\n        }\n    };\n    ColumnListComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-columnlist',\n                    template: \"\\n        <div class=\\\"k-column-list\\\">\\n            <label *ngFor=\\\"let column of columns; let index = index;\\\" class='k-column-list-item'>\\n                <input class=\\\"k-checkbox\\\" type=\\\"checkbox\\\" [attr.data-index]=\\\"index\\\" [checked]=\\\"!column.hidden\\\" [disabled]=\\\"isDisabled(column)\\\" /><span class=\\\"k-checkbox-label\\\">{{ column.displayTitle }}</span>\\n            </label>\\n        </div>\\n        <div [ngClass]=\\\"actionsClass\\\" *ngIf=\\\"!autoSync\\\">\\n            <button type=\\\"button\\\" class=\\\"k-button\\\" (click)=\\\"cancelChanges()\\\">{{ resetText }}</button>\\n            <button type=\\\"button\\\" class=\\\"k-button k-primary\\\" (click)=\\\"applyChanges()\\\">{{ applyText }}</button>\\n        </div>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    ColumnListComponent.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: NgZone },\n        { type: Renderer2 }\n    ]; };\n    ColumnListComponent.propDecorators = {\n        className: [{ type: HostBinding, args: [\"class.k-column-list-wrapper\",] }],\n        reset: [{ type: Output }],\n        apply: [{ type: Output }],\n        columnChange: [{ type: Output }],\n        columns: [{ type: Input }],\n        autoSync: [{ type: Input }],\n        allowHideAll: [{ type: Input }],\n        applyText: [{ type: Input }],\n        resetText: [{ type: Input }],\n        actionsClass: [{ type: Input }]\n    };\n    return ColumnListComponent;\n}());\n\n/**\n * Represents the component for selecting columns in the Grid. To enable the user to show or hide columns,\n * add the component inside a [`ToolbarTemplate`]({% slug api_grid_toolbartemplatedirective %}) directive.\n *\n * @example\n * {% meta height:300 %}\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *       <kendo-grid [data]=\"data\">\n *          <ng-template kendoGridToolbarTemplate>\n *             <kendo-grid-column-chooser></kendo-grid-column-chooser>\n *          </ng-template>\n *          <kendo-grid-column field=\"Field1\"></kendo-grid-column>\n *          <kendo-grid-column field=\"Field2\" [hidden]=\"true\"></kendo-grid-column>\n *       </kendo-grid>\n *     `\n * })\n *\n * class AppComponent {\n *   public data: any[] = [{ Field1: 'Foo', Field2: 'Bar' }];\n * }\n *\n * ```\n * {% endmeta %}\n */\nvar ColumnChooserComponent = /** @class */ (function () {\n    function ColumnChooserComponent(localization, columnInfoService, popupService, ngZone, renderer, changeDetector) {\n        this.localization = localization;\n        this.columnInfoService = columnInfoService;\n        this.popupService = popupService;\n        this.ngZone = ngZone;\n        this.renderer = renderer;\n        this.changeDetector = changeDetector;\n        /**\n         * Specifies if the changes in the visibility of the column will be immediately applied.\n         */\n        this.autoSync = false;\n        /**\n         * Specifies if all columns can be hidden.\n         */\n        this.allowHideAll = true;\n    }\n    Object.defineProperty(ColumnChooserComponent.prototype, \"columns\", {\n        get: function () {\n            return this.columnInfoService.leafNamedColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColumnChooserComponent.prototype.ngOnDestroy = function () {\n        this.close();\n    };\n    /**\n     * @hidden\n     */\n    ColumnChooserComponent.prototype.toggle = function (anchor, template) {\n        var _this = this;\n        if (!this.popupRef) {\n            var direction = this.localization.rtl ? 'right' : 'left';\n            this.popupRef = this.popupService.open({\n                anchor: anchor,\n                content: template,\n                positionMode: 'absolute',\n                anchorAlign: { vertical: 'bottom', horizontal: direction },\n                popupAlign: { vertical: 'top', horizontal: direction }\n            });\n            this.renderer.setAttribute(this.popupRef.popupElement, 'dir', this.localization.rtl ? 'rtl' : 'ltr');\n            this.ngZone.runOutsideAngular(function () {\n                return _this.closeClick = _this.renderer.listen(\"document\", \"click\", function (_a) {\n                    var target = _a.target;\n                    if (!closest(target, function (node) { return node === _this.popupRef.popupElement || node === anchor; })) {\n                        _this.close();\n                    }\n                });\n            });\n        }\n        else {\n            this.close();\n        }\n    };\n    /**\n     * @hidden\n     */\n    ColumnChooserComponent.prototype.onApply = function (changed) {\n        this.close();\n        if (changed.length) {\n            this.changeDetector.markForCheck();\n            this.columnInfoService.changeVisibility(changed);\n        }\n    };\n    /**\n     * @hidden\n     */\n    ColumnChooserComponent.prototype.onChange = function (changed) {\n        this.changeDetector.markForCheck();\n        this.columnInfoService.changeVisibility(changed);\n    };\n    ColumnChooserComponent.prototype.close = function () {\n        if (this.popupRef) {\n            this.popupRef.close();\n            this.popupRef = null;\n        }\n        this.detachClose();\n    };\n    ColumnChooserComponent.prototype.detachClose = function () {\n        if (this.closeClick) {\n            this.closeClick();\n            this.closeClick = null;\n        }\n    };\n    ColumnChooserComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-column-chooser',\n                    template: \"\\n        <button #anchor\\n            type=\\\"button\\\"\\n            (click)=\\\"toggle(anchor, template)\\\"\\n            class=\\\"k-button k-bare k-button-icon\\\"\\n            [attr.title]=\\\"localization.get('columns')\\\">\\n            <span class=\\\"k-icon k-i-columns\\\"></span>\\n        </button>\\n        <ng-template #template>\\n            <span class='k-column-chooser-title'>{{ localization.get('columns') }}</span>\\n            <kendo-grid-columnlist\\n                [columns]=\\\"columns\\\"\\n                [applyText]=\\\"localization.get('columnsApply')\\\"\\n                [resetText]=\\\"localization.get('columnsReset')\\\"\\n                [autoSync]=\\\"autoSync\\\"\\n                [allowHideAll]=\\\"allowHideAll\\\"\\n                (apply)=\\\"onApply($event)\\\"\\n                (columnChange)=\\\"onChange($event)\\\">\\n            </kendo-grid-columnlist>\\n        </ng-template>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    ColumnChooserComponent.ctorParameters = function () { return [\n        { type: LocalizationService },\n        { type: ColumnInfoService },\n        { type: PopupService },\n        { type: NgZone },\n        { type: Renderer2 },\n        { type: ChangeDetectorRef }\n    ]; };\n    ColumnChooserComponent.propDecorators = {\n        autoSync: [{ type: Input }],\n        allowHideAll: [{ type: Input }]\n    };\n    return ColumnChooserComponent;\n}());\n\n/**\n * Represents the service that is passed to the\n * [`ColumnMenuTemplate`]({% slug api_grid_columnmenutemplatedirective %}) directive.\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *       <kendo-grid [data]=\"data\" [columnMenu]=\"true\">\n *          <ng-template kendoGridColumnMenuTemplate let-service=\"service\">\n *              <span class=\"k-icon k-i-close\" (click)=\"service.close()\"\n *                  style=\"position: absolute; right: 5px; top: 5px;cursor: pointer;\"></span>\n *              <kendo-grid-columnmenu-sort [service]=\"service\">\n *              </kendo-grid-columnmenu-sort>\n *          </ng-template>\n *          <kendo-grid-column field=\"Field1\"></kendo-grid-column>\n *          <kendo-grid-column field=\"Field2\"></kendo-grid-column>\n *       </kendo-grid>\n *     `\n * })\n *\n * class AppComponent {\n *   public data: any[] = [{ Field1: 'Foo', Field2: 'Bar' }];\n * }\n *\n * ```\n */\nvar ColumnMenuService = /** @class */ (function () {\n    function ColumnMenuService() {\n        /**\n         * @hidden\n         */\n        this.closeMenu = new EventEmitter();\n    }\n    /**\n     * Closes the column menu.\n     */\n    ColumnMenuService.prototype.close = function () {\n        this.closeMenu.emit();\n    };\n    ColumnMenuService.decorators = [\n        { type: Injectable },\n    ];\n    return ColumnMenuService;\n}());\n\n/**\n * @hidden\n */\nvar ColumnMenuItemBase = /** @class */ (function () {\n    function ColumnMenuItemBase() {\n        this.hostClass = true;\n    }\n    ColumnMenuItemBase.prototype.ngOnInit = function () {\n        if (isDevMode() && !this.service) {\n            throw new Error('The service input of the predefined column menu components is mandatory.');\n        }\n    };\n    /**\n     * @hidden\n     */\n    ColumnMenuItemBase.prototype.close = function () {\n        this.service.close();\n    };\n    ColumnMenuItemBase.propDecorators = {\n        service: [{ type: Input }],\n        hostClass: [{ type: HostBinding, args: ['class.k-columnmenu-item-wrapper',] }]\n    };\n    return ColumnMenuItemBase;\n}());\n\n/* tslint:disable:max-line-length */\n/**\n * Represents the component for selecting columns in the Grid that can be placed\n * inside a [`ColumnMenuTemplate`]({% slug api_grid_columnmenutemplatedirective %}) directive.\n *\n * > You have to set the [ColumnMenuService]({% slug api_grid_columnmenuservice %}) that is passed by\n * > the template to the service input of the `kendo-grid-columnmenu-chooser` component.\n *\n * @example\n * {% meta height:300 %}\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *       <kendo-grid [data]=\"data\" [columnMenu]=\"true\">\n *          <ng-template kendoGridColumnMenuTemplate let-service=\"service\">\n *              <kendo-grid-columnmenu-chooser [service]=\"service\">\n *              </kendo-grid-columnmenu-chooser>\n *          </ng-template>\n *          <kendo-grid-column field=\"Field1\"></kendo-grid-column>\n *          <kendo-grid-column field=\"Field2\" [hidden]=\"true\"></kendo-grid-column>\n *       </kendo-grid>\n *     `\n * })\n *\n * class AppComponent {\n *   public data: any[] = [{ Field1: 'Foo', Field2: 'Bar' }];\n * }\n *\n * ```\n * {% endmeta %}\n */\nvar ColumnMenuChooserComponent = /** @class */ (function (_super) {\n    __extends(ColumnMenuChooserComponent, _super);\n    function ColumnMenuChooserComponent(localization, columnInfoService, changeDetector) {\n        var _this = _super.call(this) || this;\n        _this.localization = localization;\n        _this.columnInfoService = columnInfoService;\n        _this.changeDetector = changeDetector;\n        /**\n         * Fires when the content is expanded.\n         */\n        _this.expand = new EventEmitter();\n        /**\n         * Fires when the content is collapsed.\n         */\n        _this.collapse = new EventEmitter();\n        /**\n         * Specifies if the content is expanded.\n         */\n        _this.expanded = false;\n        /**\n         * @hidden\n         */\n        _this.actionsClass = 'k-columnmenu-actions';\n        return _this;\n    }\n    Object.defineProperty(ColumnMenuChooserComponent.prototype, \"columns\", {\n        get: function () {\n            return this.columnInfoService.leafNamedColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    ColumnMenuChooserComponent.prototype.onApply = function (changed) {\n        this.close();\n        if (changed.length) {\n            this.changeDetector.markForCheck();\n            this.columnInfoService.changeVisibility(changed);\n        }\n    };\n    ColumnMenuChooserComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-columnmenu-chooser',\n                    template: \"\\n        <kendo-grid-columnmenu-item [text]=\\\"localization.get('columns')\\\"\\n            icon=\\\"columns\\\" [expanded]=\\\"expanded\\\" (collapse)=\\\"collapse.emit()\\\" (expand)=\\\"expand.emit()\\\">\\n            <ng-template kendoGridColumnMenuItemContentTemplate>\\n                <kendo-grid-columnlist\\n                    [applyText]=\\\"localization.get('columnsApply')\\\"\\n                    [resetText]=\\\"localization.get('columnsReset')\\\"\\n                    [columns]=\\\"columns\\\"\\n                    [autoSync]=\\\"false\\\"\\n                    [allowHideAll]=\\\"false\\\"\\n                    [actionsClass]=\\\"actionsClass\\\"\\n                    (apply)=\\\"onApply($event)\\\">\\n                </kendo-grid-columnlist>\\n            </ng-template>\\n        </kendo-grid-columnmenu-item>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    ColumnMenuChooserComponent.ctorParameters = function () { return [\n        { type: LocalizationService },\n        { type: ColumnInfoService },\n        { type: ChangeDetectorRef }\n    ]; };\n    ColumnMenuChooserComponent.propDecorators = {\n        expand: [{ type: Output }],\n        collapse: [{ type: Output }],\n        expanded: [{ type: Input }]\n    };\n    return ColumnMenuChooserComponent;\n}(ColumnMenuItemBase));\n\n/* tslint:disable:max-line-length */\n/**\n * Represents the component for editing column filters in the Grid that can be placed\n * inside a [`ColumnMenuTemplate`]({% slug api_grid_columnmenutemplatedirective %}) directive.\n *\n * > You have to set the [ColumnMenuService]({% slug api_grid_columnmenuservice %}) that is passed by\n * > the template to the service input of the `kendo-grid-columnmenu-filter` component.\n *\n * @example\n * {% meta height:400 %}\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *       <kendo-grid [kendoGridBinding]=\"data\" [columnMenu]=\"true\">\n *          <ng-template kendoGridColumnMenuTemplate let-service=\"service\">\n *              <kendo-grid-columnmenu-filter [service]=\"service\">\n *              </kendo-grid-columnmenu-filter>\n *          </ng-template>\n *          <kendo-grid-column field=\"Field1\"></kendo-grid-column>\n *          <kendo-grid-column field=\"Field2\"></kendo-grid-column>\n *       </kendo-grid>\n *     `\n * })\n *\n * class AppComponent {\n *   public data: any[] = [{ Field1: 'Foo', Field2: 'Bar' }];\n * }\n *\n * ```\n * {% endmeta %}\n */\nvar ColumnMenuFilterComponent = /** @class */ (function (_super) {\n    __extends(ColumnMenuFilterComponent, _super);\n    function ColumnMenuFilterComponent(localization) {\n        var _this = _super.call(this) || this;\n        _this.localization = localization;\n        /**\n         * Fires when the content is expanded.\n         */\n        _this.expand = new EventEmitter();\n        /**\n         * Fires when the content is collapsed.\n         */\n        _this.collapse = new EventEmitter();\n        /**\n         * Specifies if the content is expanded.\n         */\n        _this.expanded = false;\n        /**\n         * @hidden\n         */\n        _this.actionsClass = 'k-columnmenu-actions';\n        return _this;\n    }\n    ColumnMenuFilterComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-columnmenu-filter',\n                    template: \"\\n        <kendo-grid-columnmenu-item [text]=\\\"localization.get('filter')\\\" icon=\\\"filter\\\"\\n            [expanded]=\\\"expanded\\\" (collapse)=\\\"collapse.emit()\\\" (expand)=\\\"expand.emit()\\\">\\n            <ng-template kendoGridColumnMenuItemContentTemplate>\\n                    <kendo-grid-filter-menu-container\\n                        [column]=\\\"service.column\\\"\\n                        [filter]=\\\"service.filter\\\"\\n                        [actionsClass]=\\\"actionsClass\\\"\\n                        (close)=\\\"close()\\\">\\n                    </kendo-grid-filter-menu-container>\\n                </ng-template>\\n        </kendo-grid-columnmenu-item>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    ColumnMenuFilterComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    ColumnMenuFilterComponent.propDecorators = {\n        expand: [{ type: Output }],\n        collapse: [{ type: Output }],\n        expanded: [{ type: Input }]\n    };\n    return ColumnMenuFilterComponent;\n}(ColumnMenuItemBase));\n\n/* tslint:disable:max-line-length */\n/**\n * Represents the content template of the\n * [`kendo-grid-columnmenu-item`]({% slug api_grid_columnmenuitemcomponent %}) component.\n * Provides an option for specifying the content of a column item.\n * To define the content template, nest an `<ng-template>` tag with the\n * `kendoGridColumnMenuItemContentTemplate` directive inside a `<kendo-grid-columnmenu-item>`.\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *       <kendo-grid [data]=\"data\" [columnMenu]=\"true\">\n *          <ng-template kendoGridColumnMenuTemplate>\n *              <kendo-grid-columnmenu-item text=\"Item Text\" [expanded]=\"true\">\n *                  <ng-template kendoGridColumnMenuItemContentTemplate>\n *                      Item Content\n *                  </ng-template>\n *              </kendo-grid-columnmenu-item>\n *          </ng-template>\n *          <kendo-grid-column field=\"Field1\"></kendo-grid-column>\n *          <kendo-grid-column field=\"Field2\"></kendo-grid-column>\n *       </kendo-grid>\n *     `\n * })\n *\n * class AppComponent {\n *   public data: any[] = [{ Field1: 'Foo', Field2: 'Bar' }];\n * }\n *\n * ```\n */\nvar ColumnMenuItemContentTemplateDirective = /** @class */ (function () {\n    function ColumnMenuItemContentTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    ColumnMenuItemContentTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridColumnMenuItemContentTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    ColumnMenuItemContentTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return ColumnMenuItemContentTemplateDirective;\n}());\n\n/**\n * Represents an item that can be placed inside a\n * [`ColumnMenuTemplate`]({% slug api_grid_columnmenutemplatedirective %}) directive.\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *       <kendo-grid [data]=\"data\" [columnMenu]=\"true\" [resizable]=\"true\" #grid>\n *          <ng-template kendoGridColumnMenuTemplate let-service=\"service\" let-column=\"column\">\n *              <kendo-grid-columnmenu-item icon=\"arrows-resizing\" text=\"Fit column\"\n *                  (itemClick)=\"grid.autoFitColumn(column); service.close()\">\n *              </kendo-grid-columnmenu-item>\n *          </ng-template>\n *          <kendo-grid-column field=\"Field1\"></kendo-grid-column>\n *          <kendo-grid-column field=\"Field2\"></kendo-grid-column>\n *       </kendo-grid>\n *     `\n * })\n *\n * class AppComponent {\n *   public data: any[] = [{ Field1: 'Foo', Field2: 'Bar' }];\n * }\n *\n * ```\n */\nvar ColumnMenuItemComponent = /** @class */ (function () {\n    function ColumnMenuItemComponent() {\n        /**\n         * Fires when the item is clicked.\n         */\n        this.itemClick = new EventEmitter();\n        /**\n         * Fires when the content is expanded.\n         */\n        this.expand = new EventEmitter();\n        /**\n         * Fires when the content is collapsed.\n         */\n        this.collapse = new EventEmitter();\n        this.contentState = 'collapsed';\n    }\n    Object.defineProperty(ColumnMenuItemComponent.prototype, \"iconClass\", {\n        get: function () {\n            return \"k-i-\" + this.icon;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColumnMenuItemComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.expanded) {\n            this.updateContentState();\n        }\n    };\n    /**\n     * @hidden\n     */\n    ColumnMenuItemComponent.prototype.onClick = function (e) {\n        this.itemClick.emit(e);\n        if (this.contentTemplate) {\n            this.expanded = !this.expanded;\n            this.updateContentState();\n            if (this.expanded) {\n                this.expand.emit();\n            }\n            else {\n                this.collapse.emit();\n            }\n        }\n    };\n    ColumnMenuItemComponent.prototype.updateContentState = function () {\n        this.contentState = this.expanded ? 'expanded' : 'collapsed';\n    };\n    ColumnMenuItemComponent.decorators = [\n        { type: Component, args: [{\n                    animations: [\n                        trigger('state', [\n                            state('collapsed', style({ display: 'none' })),\n                            state('expanded', style({ display: 'block' })),\n                            transition('collapsed => expanded', [\n                                style({\n                                    height: '0px',\n                                    display: 'block'\n                                }),\n                                animate('100ms ease-in', style({\n                                    height: '*'\n                                }))\n                            ]),\n                            transition('expanded => collapsed', [\n                                style({\n                                    height: '*'\n                                }),\n                                animate('100ms ease-in', style({\n                                    height: '0px'\n                                }))\n                            ])\n                        ])\n                    ],\n                    selector: 'kendo-grid-columnmenu-item',\n                    template: \"\\n        <div class=\\\"k-columnmenu-item\\\" (click)=\\\"onClick($event)\\\" [class.k-state-selected]=\\\"selected\\\" [class.k-state-disabled]=\\\"disabled\\\">\\n           <span *ngIf=\\\"icon\\\" class=\\\"k-icon\\\" [ngClass]=\\\"iconClass\\\">\\n           </span>\\n           {{ text }}\\n        </div>\\n        <div *ngIf=\\\"contentTemplate\\\" [@state]=\\\"contentState\\\" style=\\\"overflow:hidden;\\\" class=\\\"k-columnmenu-item-content\\\">\\n            <ng-container [ngTemplateOutlet]=\\\"contentTemplate.templateRef\\\">\\n            </ng-container>\\n        <div>\\n    \"\n                },] },\n    ];\n    ColumnMenuItemComponent.propDecorators = {\n        itemClick: [{ type: Output }],\n        expand: [{ type: Output }],\n        collapse: [{ type: Output }],\n        icon: [{ type: Input }],\n        text: [{ type: Input }],\n        selected: [{ type: Input }],\n        disabled: [{ type: Input }],\n        expanded: [{ type: Input }],\n        contentTemplate: [{ type: ContentChild, args: [ColumnMenuItemContentTemplateDirective,] }]\n    };\n    return ColumnMenuItemComponent;\n}());\n\n/* tslint:disable:max-line-length */\n/**\n * Represents a column-menu item for sorting Grid columns that can be placed inside a\n * [`ColumnMenuTemplate`]({% slug api_grid_columnmenutemplatedirective %}) directive.\n * Allows the user to sort the column.\n *\n * > You have to set the [ColumnMenuService]({% slug api_grid_columnmenuservice %}) that is passed by\n * > the template to the service input of the `kendo-grid-columnmenu-sort` component.\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *       <kendo-grid [kendoGridBinding]=\"data\" [sortable]=\"true\" [columnMenu]=\"true\">\n *          <ng-template kendoGridColumnMenuTemplate let-service=\"service\">\n *              <kendo-grid-columnmenu-sort [service]=\"service\">\n *              </kendo-grid-columnmenu-sort>\n *          </ng-template>\n *          <kendo-grid-column field=\"Field1\" [width]=\"100\"></kendo-grid-column>\n *          <kendo-grid-column field=\"Field2\" [width]=\"100\"></kendo-grid-column>\n *       </kendo-grid>\n *     `\n * })\n *\n * class AppComponent {\n *   public data: any[] = [{ Field1: 'Foo', Field2: 'Bar' }, { Field1: 'Foo1', Field2: 'Bar1' }];\n * }\n *\n * ```\n */\nvar ColumnMenuSortComponent = /** @class */ (function (_super) {\n    __extends(ColumnMenuSortComponent, _super);\n    function ColumnMenuSortComponent(localization, sortService) {\n        var _this = _super.call(this) || this;\n        _this.localization = localization;\n        _this.sortService = sortService;\n        return _this;\n    }\n    Object.defineProperty(ColumnMenuSortComponent.prototype, \"sortedAsc\", {\n        get: function () {\n            var descriptor = this.descriptor;\n            return descriptor && (!descriptor.dir || descriptor.dir === 'asc');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnMenuSortComponent.prototype, \"sortedDesc\", {\n        get: function () {\n            var descriptor = this.descriptor;\n            return descriptor && descriptor.dir === 'desc';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    ColumnMenuSortComponent.prototype.toggleSort = function (dir) {\n        var field = this.service.column.field;\n        var _a = normalize$1(this.service.sortable), mode = _a.mode, allowUnsort = _a.allowUnsort;\n        var descriptor = this.descriptor;\n        var sort = mode === 'multiple' ? this.service.sort.filter(function (s) { return s.field !== field; }) : [];\n        if (descriptor && descriptor.dir === dir) {\n            if (!allowUnsort) {\n                return;\n            }\n        }\n        else {\n            sort.push({ field: field, dir: dir });\n        }\n        this.sortService.sort(sort);\n        this.close();\n    };\n    Object.defineProperty(ColumnMenuSortComponent.prototype, \"descriptor\", {\n        get: function () {\n            var _this = this;\n            return [].concat(this.service.sort || []).find(function (s) { return s.field === _this.service.column.field; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColumnMenuSortComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-columnmenu-sort',\n                    template: \"\\n        <kendo-grid-columnmenu-item [text]=\\\"localization.get('sortAscending')\\\"\\n            icon=\\\"sort-asc-sm\\\" (itemClick)=\\\"toggleSort('asc')\\\" [selected]=\\\"sortedAsc\\\">\\n        </kendo-grid-columnmenu-item>\\n        <kendo-grid-columnmenu-item [text]=\\\"localization.get('sortDescending')\\\"\\n            icon=\\\"sort-desc-sm\\\" (itemClick)=\\\"toggleSort('desc')\\\" [selected]=\\\"sortedDesc\\\">\\n        </kendo-grid-columnmenu-item>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    ColumnMenuSortComponent.ctorParameters = function () { return [\n        { type: LocalizationService },\n        { type: SortService }\n    ]; };\n    return ColumnMenuSortComponent;\n}(ColumnMenuItemBase));\n\nvar POPUP_CLASS = 'k-grid-columnmenu-popup';\n/**\n * Represents the [column menu]({% slug columnmenu_grid %}) component.\n */\nvar ColumnMenuComponent = /** @class */ (function () {\n    function ColumnMenuComponent(popupService, localization, service) {\n        this.popupService = popupService;\n        this.localization = localization;\n        this.service = service;\n        /**\n         * @hidden\n         */\n        this.standalone = true;\n        /**\n         * The settings for the Column Menu.\n         */\n        this.settings = {};\n        /**\n         * @hidden\n         */\n        this.sortable = true;\n        /**\n         * @hidden\n         */\n        this.expandedFilter = false;\n        /**\n         * @hidden\n         */\n        this.expandedColumns = false;\n        this.closeSubscription = service.closeMenu.subscribe(this.close.bind(this));\n    }\n    Object.defineProperty(ColumnMenuComponent.prototype, \"isActive\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var _this = this;\n            return (this.hasFilter && filtersByField(this.filter, this.column.field).length > 0) ||\n                (!this.sortable && this.hasSort && this.sort.find(function (descriptor) { return descriptor.field === _this.column.field; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnMenuComponent.prototype, \"hasFilter\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return hasFilter(this.settings, this.column);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnMenuComponent.prototype, \"hasSort\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return hasSort(this.settings, this.column);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnMenuComponent.prototype, \"hasColumnChooser\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return hasColumnChooser(this.settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnMenuComponent.prototype, \"hasLock\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return hasLock(this.settings, this.column);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColumnMenuComponent.prototype.ngOnChanges = function () {\n        this.service.column = this.column;\n        this.service.sort = this.sort;\n        this.service.filter = this.filter;\n        this.service.sortable = this.sortable;\n    };\n    ColumnMenuComponent.prototype.ngOnDestroy = function () {\n        this.close();\n        this.closeSubscription.unsubscribe();\n    };\n    /**\n     * @hidden\n     */\n    ColumnMenuComponent.prototype.toggle = function (e, anchor, template) {\n        e.preventDefault();\n        this.expandedFilter = !this.hasColumnChooser;\n        this.expandedColumns = !this.hasFilter;\n        this.popupRef = this.popupService.open(anchor, template, this.popupRef, POPUP_CLASS);\n    };\n    /**\n     * @hidden\n     */\n    ColumnMenuComponent.prototype.close = function () {\n        this.popupService.destroy();\n        this.popupRef = null;\n    };\n    /**\n     * @hidden\n     */\n    ColumnMenuComponent.prototype.onColumnsExpand = function () {\n        this.expandedColumns = true;\n        this.expandedFilter = false;\n    };\n    /**\n     * @hidden\n     */\n    ColumnMenuComponent.prototype.onFilterExpand = function () {\n        this.expandedFilter = true;\n        this.expandedColumns = false;\n    };\n    ColumnMenuComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [ColumnMenuService],\n                    selector: 'kendo-grid-column-menu',\n                    template: \"\\n        <a #anchor\\n            class=\\\"k-grid-column-menu k-grid-filter\\\"\\n            [ngClass]=\\\"{ 'k-state-active': isActive }\\\"\\n            (click)=\\\"toggle($event, anchor, template)\\\"\\n            href=\\\"#\\\"\\n            tabindex=\\\"-1\\\"\\n            [attr.title]=\\\"localization.get('columnMenu')\\\">\\n            <span class=\\\"k-icon k-i-more-vertical\\\"></span>\\n        </a>\\n        <ng-template #template>\\n            <ng-container [ngTemplateOutlet]=\\\"column.columnMenuTemplateRef || columnMenuTemplate || defaultTemplate\\\"\\n                          [ngTemplateOutletContext]=\\\"{ service: service, column: column }\\\">\\n            </ng-container>\\n        </ng-template>\\n        <ng-template #defaultTemplate>\\n            <kendo-grid-columnmenu-sort *ngIf=\\\"hasSort\\\" [service]=\\\"service\\\">\\n            </kendo-grid-columnmenu-sort>\\n            <kendo-grid-columnmenu-lock *ngIf=\\\"hasLock\\\" [service]=\\\"service\\\">\\n            </kendo-grid-columnmenu-lock>\\n            <kendo-grid-columnmenu-chooser *ngIf=\\\"hasColumnChooser\\\" [service]=\\\"service\\\"\\n                [expanded]=\\\"expandedColumns\\\" (expand)=\\\"onColumnsExpand()\\\">\\n            </kendo-grid-columnmenu-chooser>\\n            <kendo-grid-columnmenu-filter *ngIf=\\\"hasFilter\\\" [service]=\\\"service\\\"\\n                [expanded]=\\\"expandedFilter\\\" (expand)=\\\"onFilterExpand()\\\">\\n            </kendo-grid-columnmenu-filter>\\n        </ng-template>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    ColumnMenuComponent.ctorParameters = function () { return [\n        { type: SinglePopupService },\n        { type: LocalizationService },\n        { type: ColumnMenuService }\n    ]; };\n    ColumnMenuComponent.propDecorators = {\n        standalone: [{ type: HostBinding, args: ['class.k-grid-column-menu-standalone',] }, { type: Input }],\n        column: [{ type: Input }],\n        settings: [{ type: Input }],\n        sort: [{ type: Input }],\n        filter: [{ type: Input }],\n        sortable: [{ type: Input }],\n        columnMenuTemplate: [{ type: Input }]\n    };\n    return ColumnMenuComponent;\n}());\n\n/* tslint:disable:max-line-length */\n/**\n * Represents a column-menu item that can be placed inside a\n * [`ColumnMenuTemplate`]({% slug api_grid_columnmenutemplatedirective %}) directive.\n * Allows the user to lock or unlock the columns.\n *\n * > You have to set the [ColumnMenuService]({% slug api_grid_columnmenuservice %}) that is passed by\n * > the template to the service input of the `kendo-grid-columnmenu-lock` component.\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *       <kendo-grid [data]=\"data\" [columnMenu]=\"true\">\n *          <ng-template kendoGridColumnMenuTemplate let-service=\"service\">\n *              <kendo-grid-columnmenu-lock [service]=\"service\">\n *              </kendo-grid-columnmenu-lock>\n *          </ng-template>\n *          <kendo-grid-column field=\"Field1\" [width]=\"100\"></kendo-grid-column>\n *          <kendo-grid-column field=\"Field2\" [width]=\"100\"></kendo-grid-column>\n *       </kendo-grid>\n *     `\n * })\n *\n * class AppComponent {\n *   public data: any[] = [{ Field1: 'Foo', Field2: 'Bar' }];\n * }\n *\n * ```\n */\nvar ColumnMenuLockComponent = /** @class */ (function (_super) {\n    __extends(ColumnMenuLockComponent, _super);\n    function ColumnMenuLockComponent(localization, columnInfoService, changeDetector) {\n        var _this = _super.call(this) || this;\n        _this.localization = localization;\n        _this.columnInfoService = columnInfoService;\n        _this.changeDetector = changeDetector;\n        return _this;\n    }\n    Object.defineProperty(ColumnMenuLockComponent.prototype, \"text\", {\n        get: function () {\n            return this.localization.get(this.locked ? 'unlock' : 'lock');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnMenuLockComponent.prototype, \"icon\", {\n        get: function () {\n            return this.locked ? 'unlock' : 'lock';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnMenuLockComponent.prototype, \"disabled\", {\n        get: function () {\n            return !this.locked && this.columnInfoService.unlockedRootCount < 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    ColumnMenuLockComponent.prototype.toggleColumn = function () {\n        this.toggleHierarchy(!this.locked);\n        this.close();\n        this.changeDetector.markForCheck();\n    };\n    ColumnMenuLockComponent.prototype.toggleHierarchy = function (locked) {\n        var root = this.service.column;\n        while (root.parent) {\n            root = root.parent;\n        }\n        var columns = [root];\n        var allChanged = [];\n        while (columns.length) {\n            var column = columns.shift();\n            column.locked = locked;\n            allChanged.push(column);\n            if (column.hasChildren) {\n                columns.push.apply(columns, column.childrenArray);\n            }\n        }\n        this.columnInfoService.changeLocked(allChanged);\n    };\n    Object.defineProperty(ColumnMenuLockComponent.prototype, \"locked\", {\n        get: function () {\n            return this.service.column.locked;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColumnMenuLockComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-columnmenu-lock',\n                    template: \"\\n       <kendo-grid-columnmenu-item [text]=\\\"text\\\" [icon]=\\\"icon\\\" (itemClick)=\\\"toggleColumn()\\\" [disabled]=\\\"disabled\\\">\\n       </kendo-grid-columnmenu-item>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    ColumnMenuLockComponent.ctorParameters = function () { return [\n        { type: LocalizationService },\n        { type: ColumnInfoService },\n        { type: ChangeDetectorRef }\n    ]; };\n    return ColumnMenuLockComponent;\n}(ColumnMenuItemBase));\n\nvar COMPONENTS$1 = [\n    ColumnListComponent,\n    ColumnChooserComponent,\n    ColumnMenuChooserComponent,\n    ColumnMenuFilterComponent,\n    ColumnMenuItemComponent,\n    ColumnMenuItemContentTemplateDirective,\n    ColumnMenuSortComponent,\n    ColumnMenuComponent,\n    ColumnMenuLockComponent,\n    ColumnMenuTemplateDirective\n];\n/**\n * @hidden\n */\nvar ColumnMenuModule = /** @class */ (function () {\n    function ColumnMenuModule() {\n    }\n    ColumnMenuModule.exports = function () {\n        return [\n            ColumnChooserComponent,\n            ColumnMenuFilterComponent,\n            ColumnMenuItemComponent,\n            ColumnMenuItemContentTemplateDirective,\n            ColumnMenuSortComponent,\n            ColumnMenuLockComponent,\n            ColumnMenuChooserComponent,\n            ColumnMenuTemplateDirective,\n            ColumnMenuComponent\n        ];\n    };\n    ColumnMenuModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [COMPONENTS$1],\n                    imports: [CommonModule, FilterMenuModule],\n                    exports: [COMPONENTS$1]\n                },] },\n    ];\n    return ColumnMenuModule;\n}());\n\nvar exportedModules$2 = [\n    HeaderComponent,\n    HeaderTemplateDirective,\n    ColumnHandleDirective,\n    SelectAllCheckboxDirective\n];\nvar importedModules$2 = [\n    CommonModule,\n    GroupModule,\n    RowFilterModule,\n    FilterMenuModule,\n    SharedModule,\n    DragAndDropModule,\n    ColumnMenuModule\n];\n/**\n * @hidden\n */\nvar HeaderModule = /** @class */ (function () {\n    function HeaderModule() {\n    }\n    HeaderModule.exports = function () {\n        return [\n            HeaderTemplateDirective,\n            SelectAllCheckboxDirective\n        ];\n    };\n    HeaderModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [exportedModules$2],\n                    exports: [exportedModules$2],\n                    imports: importedModules$2.slice()\n                },] },\n    ];\n    return HeaderModule;\n}());\n\n/**\n * Represents the command columns of the Grid. You have to define the content of the\n * column inside an `<ng-template>` tag. The template context is set to the current\n * data item. For more information and examples on using the passed fields\n * and the command directives, refer to the article on\n * [editing the Grid in Angular Reactive Forms]({% slug editing_reactive_forms_grid %}).\n *\n * The following additional fields are passed:\n * - `columnIndex`&mdash;The current column index.\n * - `rowIndex`&mdash;The current data row index. If inside a new item row, `rowIndex`is `-1`.\n * - `dataItem`&mdash;The current data item.\n * - `column`&mdash;The current column instance.\n * - `isNew`&mdash;The state of the current item.\n *\n * Usually, the template contains CRUD command directives such as:\n * - [`EditCommandDirective`]({% slug api_grid_editcommanddirective %})\n * - [`RemoveCommandDirective`]({% slug api_grid_removecommanddirective %})\n * - [`CancelCommandDirective`]({% slug api_grid_cancelcommanddirective %})\n * - [`SaveCommandDirective`]({% slug api_grid_savecommanddirective %})\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *    selector: 'my-app',\n *    template: `\n *        <kendo-grid [data]=\"gridData\">\n *          <kendo-grid-column field=\"ProductID\" title=\"Product ID\" width=\"120\">\n *          </kendo-grid-column>\n *          <kendo-grid-column field=\"ProductName\" title=\"Product Name\">\n *          </kendo-grid-column>\n *          <kendo-grid-column field=\"UnitPrice\" title=\"Unit Price\" width=\"230\">\n *          </kendo-grid-column>\n *          <kendo-grid-command-column title=\"command\" width=\"220\">\n *               <ng-template kendoGridCellTemplate>\n *                   <button kendoGridEditCommand class=\"k-primary\">Edit</button>\n *                   <button kendoGridRemoveCommand>Remove</button>\n *               </ng-template>\n *           </kendo-grid-command-column>\n *        </kendo-grid>\n *    `\n * })\n *\n * class AppComponent {\n *    public gridData: any[];\n *\n *    constructor() {\n *        this.gridData = products;\n *    }\n * }\n *\n * const products = [{\n *    \"ProductID\": 1,\n *    \"ProductName\": \"Chai\",\n *    \"UnitPrice\": 18.0000,\n *    \"Discontinued\": true\n *  }, {\n *    \"ProductID\": 2,\n *    \"ProductName\": \"Chang\",\n *    \"UnitPrice\": 19.0000,\n *    \"Discontinued\": false\n *  }\n * ];\n *\n * ```\n */\nvar CommandColumnComponent = /** @class */ (function (_super) {\n    __extends(CommandColumnComponent, _super);\n    function CommandColumnComponent(parent) {\n        var _this = _super.call(this, parent) || this;\n        _this.parent = parent;\n        return _this;\n    }\n    Object.defineProperty(CommandColumnComponent.prototype, \"templateRef\", {\n        get: function () {\n            return this.template ? this.template.templateRef : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CommandColumnComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: ColumnBase$1,\n                            useExisting: forwardRef(function () { return CommandColumnComponent; })\n                        }\n                    ],\n                    selector: 'kendo-grid-command-column',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    CommandColumnComponent.ctorParameters = function () { return [\n        { type: ColumnBase$1, decorators: [{ type: SkipSelf }, { type: Host }, { type: Optional }] }\n    ]; };\n    CommandColumnComponent.propDecorators = {\n        template: [{ type: ContentChild, args: [CellTemplateDirective,] }]\n    };\n    return CommandColumnComponent;\n}(ColumnBase$1));\n\n/**\n * Represents the checkbox for selecting columns in the Grid. If the column is\n * defined as empty, it renders a default checkbox for row selection.\n * You can also define the content of the column inside an `<ng-template>` tag.\n * The input requires you to include the `SelectionCheckbox` option.\n *\n * The template context is set to the current data item and the following additional fields are passed:\n * - `columnIndex`&mdash;The current column index.\n * - `rowIndex`&mdash;The current data row index. If inside a new item row, it will be `-1`.\n * - `dataItem`&mdash;The current data item.\n * - `column`&mdash;The current column instance.\n * - `isNew`&mdash;The state of the current item.\n *\n * For more examples, refer to:\n * - [Selecting or deselecting all items on a page]({% slug selection_grid %}#toc-select-all-feature)\n * - [Persisting the selection]({% slug selection_grid %}#toc-in-combination-with-the-select-all-feature)\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *    selector: 'my-app',\n *    template: `\n *        <kendo-grid [data]=\"gridData\" [selectable]=\"{enabled: true, checkboxOnly: true}\">\n *          <kendo-grid-column field=\"ProductID\" title=\"Product ID\" width=\"120\">\n *          </kendo-grid-column>\n *          <kendo-grid-column field=\"ProductName\" title=\"Product Name\">\n *          </kendo-grid-column>\n *          <kendo-grid-checkbox-column title=\"Default checkbox\">\n *          </kendo-grid-checkbox-column>\n *          <kendo-grid-checkbox-column title=\"Custom checkbox\">\n *            <ng-template kendoGridCellTemplate let-idx=\"rowIndex\">\n *              Select row <input [kendoGridSelectionCheckbox]=\"idx\" />\n *            </ng-template>\n *          </kendo-grid-checkbox-column>\n *        </kendo-grid>\n *    `\n * })\n *\n * class AppComponent {\n *    public gridData: any[];\n *\n *    constructor() {\n *        this.gridData = products;\n *    }\n * }\n *\n * const products = [{\n *    \"ProductID\": 1,\n *    \"ProductName\": \"Chai\",\n *    \"UnitPrice\": 18.0000,\n *    \"Discontinued\": true\n *  }, {\n *    \"ProductID\": 2,\n *    \"ProductName\": \"Chang\",\n *    \"UnitPrice\": 19.0000,\n *    \"Discontinued\": false\n *  }\n * ];\n *\n * ```\n */\nvar CheckboxColumnComponent = /** @class */ (function (_super) {\n    __extends(CheckboxColumnComponent, _super);\n    function CheckboxColumnComponent(parent) {\n        var _this = _super.call(this, parent) || this;\n        _this.parent = parent;\n        /*\n         * @hidden\n         */\n        _this.isCheckboxColumn = true;\n        return _this;\n    }\n    Object.defineProperty(CheckboxColumnComponent.prototype, \"templateRef\", {\n        get: function () {\n            return this.template ? this.template.templateRef : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CheckboxColumnComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: ColumnBase$1,\n                            useExisting: forwardRef(function () { return CheckboxColumnComponent; })\n                        }\n                    ],\n                    selector: 'kendo-grid-checkbox-column',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    CheckboxColumnComponent.ctorParameters = function () { return [\n        { type: ColumnBase$1, decorators: [{ type: SkipSelf }, { type: Host }, { type: Optional }] }\n    ]; };\n    CheckboxColumnComponent.propDecorators = {\n        showSelectAll: [{ type: Input }],\n        template: [{ type: ContentChild, args: [CellTemplateDirective,] }]\n    };\n    return CheckboxColumnComponent;\n}(ColumnBase$1));\n\n/* tslint:disable:no-input-rename */\n/**\n * Represents the row-selection checkbox of the Grid. The directive expects the\n * index of the current row as an input parameter. Inside the\n * [`CheckboxColumnComponent`]({% slug api_grid_checkboxcolumncomponent %}), apply the\n * directive to an `input` element. When the user clicks the checkbox that is associated\n * with the directive, a [`selectionChange`]({% slug api_grid_gridcomponent %}#toc-selectionChange)\n * event is triggered.\n *\n * @example\n * ```html-no-run\n * <kendo-grid>\n *   <kendo-grid-checkbox-column title=\"Custom checkbox\">\n *     <ng-template kendoGridCellTemplate let-idx=\"rowIndex\">\n *       <input [kendoGridSelectionCheckbox]=\"idx\" />\n *     </ng-template>\n *   </kendo-grid-checkbox-column>\n * </kendo-grid>\n * ```\n */\nvar SelectionCheckboxDirective = /** @class */ (function () {\n    function SelectionCheckboxDirective(selectionService, el, renderer, ngZone) {\n        var _this = this;\n        this.selectionService = selectionService;\n        this.el = el;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.type = \"checkbox\";\n        this.ngZone.runOutsideAngular(function () {\n            _this.destroyClick = _this.renderer.listen(_this.el.nativeElement, \"click\", _this.onClick.bind(_this));\n            _this.destroyKeyDown = _this.renderer.listen(_this.el.nativeElement, \"keydown\", _this.onKeyDown.bind(_this));\n        });\n    }\n    SelectionCheckboxDirective.prototype.ngAfterContentChecked = function () {\n        this.setCheckedState();\n    };\n    SelectionCheckboxDirective.prototype.ngOnDestroy = function () {\n        if (this.destroyClick) {\n            this.destroyClick();\n        }\n        if (this.destroyKeyDown) {\n            this.destroyKeyDown();\n        }\n    };\n    SelectionCheckboxDirective.prototype.onClick = function () {\n        var _this = this;\n        if (this.selectionService.options.enabled) {\n            this.ngZone.run(function () {\n                var ev = _this.selectionService.toggleByIndex(_this.itemIndex);\n                ev.ctrlKey = true;\n                ev.shiftKey = false;\n                _this.selectionService.changes.emit(ev);\n            });\n        }\n    };\n    SelectionCheckboxDirective.prototype.onKeyDown = function (e) {\n        if (e.keyCode === Keys.Enter) {\n            this.onClick();\n        }\n    };\n    /*\n     * @hidden\n     */\n    SelectionCheckboxDirective.prototype.setCheckedState = function () {\n        this.renderer.setProperty(this.el.nativeElement, \"checked\", this.selectionService.isSelected(this.itemIndex));\n    };\n    SelectionCheckboxDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridSelectionCheckbox]'\n                },] },\n    ];\n    /** @nocollapse */\n    SelectionCheckboxDirective.ctorParameters = function () { return [\n        { type: SelectionService },\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: NgZone }\n    ]; };\n    SelectionCheckboxDirective.propDecorators = {\n        itemIndex: [{ type: Input, args: [\"kendoGridSelectionCheckbox\",] }],\n        type: [{ type: HostBinding, args: ['attr.type',] }]\n    };\n    return SelectionCheckboxDirective;\n}());\n\nvar columnCellIndex = function (cell, cells) {\n    var cellIndex = 0;\n    for (var idx = 0; idx < cells.length; idx++) {\n        if (cells[idx] === cell) {\n            return cellIndex;\n        }\n        if (!hasClasses(cells[idx], 'k-hierarchy-cell k-group-cell')) {\n            cellIndex++;\n        }\n    }\n};\n/**\n * @hidden\n */\nvar TableBodyComponent = /** @class */ (function () {\n    function TableBodyComponent(detailsService, groupsService, changeNotification, editService, localization, ngZone, renderer, element, domEvents, selectionService, columnInfoService, navigationService) {\n        var _this = this;\n        this.detailsService = detailsService;\n        this.groupsService = groupsService;\n        this.changeNotification = changeNotification;\n        this.editService = editService;\n        this.localization = localization;\n        this.ngZone = ngZone;\n        this.renderer = renderer;\n        this.element = element;\n        this.domEvents = domEvents;\n        this.selectionService = selectionService;\n        this.columnInfoService = columnInfoService;\n        this.navigationService = navigationService;\n        this.columns = [];\n        this.groups = [];\n        this.skip = 0;\n        this.noRecordsText = this.localization.get('noRecords');\n        this.isLocked = false;\n        this.skipGroupDecoration = false;\n        this.showGroupFooters = false;\n        this.lockedColumnsCount = 0;\n        this.totalColumnsCount = 0;\n        this.trackBy = defaultTrackBy;\n        this.rowClass = function () { return null; };\n        this.cellKeydownSubscription = this.navigationService.cellKeydown.subscribe(function (args) { return _this.cellKeydownHandler(args); });\n        this.trackByWrapper = this.trackByWrapper.bind(this);\n        this.trackByColumns = this.trackByColumns.bind(this);\n    }\n    Object.defineProperty(TableBodyComponent.prototype, \"newDataItem\", {\n        get: function () {\n            return this.editService.newDataItem;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TableBodyComponent.prototype, \"unlockedColumnsCount\", {\n        // Number of unlocked columns in the next table, if any\n        get: function () {\n            return this.totalColumnsCount - this.lockedColumnsCount - (this.allColumns || this.columns).length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TableBodyComponent.prototype.toggleRow = function (index, dataItem) {\n        this.detailsService.toggleRow(index, dataItem);\n        return false;\n    };\n    TableBodyComponent.prototype.isExpanded = function (index) {\n        return this.detailsService.isExpanded(index);\n    };\n    TableBodyComponent.prototype.detailButtonStyles = function (index) {\n        return this.isExpanded(index) ? 'k-minus' : 'k-plus';\n    };\n    TableBodyComponent.prototype.detailButtonTitle = function (index) {\n        var messageKey = this.isExpanded(index) ? 'detailCollapse' : 'detailExpand';\n        return this.localization.get(messageKey);\n    };\n    TableBodyComponent.prototype.isGroup = function (item) {\n        return item.type === 'group';\n    };\n    TableBodyComponent.prototype.isDataItem = function (item) {\n        return !this.isGroup(item) && !this.isFooter(item);\n    };\n    TableBodyComponent.prototype.isFooter = function (item) {\n        return item.type === 'footer';\n    };\n    TableBodyComponent.prototype.isInExpandedGroup = function (item) {\n        return this.groupsService.isInExpandedGroup(item.groupIndex, false);\n    };\n    TableBodyComponent.prototype.isParentGroupExpanded = function (item) {\n        return this.groupsService.isInExpandedGroup(item.index || item.groupIndex);\n    };\n    TableBodyComponent.prototype.isOdd = function (item) {\n        return item.index % 2 !== 0;\n    };\n    TableBodyComponent.prototype.isSelectable = function () {\n        return this.selectable && this.selectable.enabled !== false;\n    };\n    TableBodyComponent.prototype.isRowSelected = function (item) {\n        return this.selectionService.isSelected(item.index);\n    };\n    TableBodyComponent.prototype.trackByWrapper = function (index, item) {\n        if (item.type === 'data') {\n            item.isEditing = this.editService.hasEdited(item.index);\n        }\n        return this.trackBy(index, item);\n    };\n    TableBodyComponent.prototype.trackByColumns = function (index, item) {\n        return this.virtualColumns ? index : item;\n    };\n    TableBodyComponent.prototype.ngDoCheck = function () {\n        if (this.hasGroupHeaderColumn) {\n            this.groupHeaderColumns = columnsToRender(this.skipGroupDecoration ? this.columns : this.columns.toArray().slice(1));\n        }\n        else {\n            this.groupHeaderColumns = [];\n        }\n        if (this.isLocked) {\n            this.groupHeaderSlaveCellsCount =\n                this.hasGroupHeaderColumn ? this.columnsContainer.nonLockedColumnsToRender.length : 1;\n        }\n        else {\n            this.groupHeaderSlaveCellsCount = 0;\n        }\n    };\n    TableBodyComponent.prototype.ngOnChanges = function (changes) {\n        if (isChanged(\"columns\", changes, false)) {\n            this.changeNotification.notify();\n        }\n    };\n    TableBodyComponent.prototype.logicalRowIndex = function (rowIndex) {\n        var pos = this.skip + rowIndex;\n        if (this.hasDetailTemplate) {\n            pos *= 2;\n        }\n        var absoluteRowIndex = 1 + pos;\n        var addRowOffset = this.editService.hasNewItem ? 1 : 0;\n        var filterRowOffset = hasFilterRow(this.filterable) ? 1 : 0;\n        var headerRowCount = this.columnInfoService.totalLevels + filterRowOffset + addRowOffset;\n        return absoluteRowIndex + headerRowCount;\n    };\n    TableBodyComponent.prototype.addRowLogicalIndex = function () {\n        return this.columnInfoService.totalLevels + 1;\n    };\n    TableBodyComponent.prototype.logicalColIndex = function (column) {\n        if (!isPresent(column.leafIndex)) {\n            return -1;\n        }\n        return column.leafIndex + (this.hasDetailTemplate ? 1 : 0);\n    };\n    TableBodyComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.ngZone.runOutsideAngular(function () {\n            var clickHandler = _this.clickHandler.bind(_this);\n            var mousedownSubscription = _this.renderer.listen(_this.element.nativeElement, 'mousedown', clickHandler);\n            var clickSubscription = _this.renderer.listen(_this.element.nativeElement, 'click', clickHandler);\n            var contextmenuSubscription = _this.renderer.listen(_this.element.nativeElement, 'contextmenu', clickHandler);\n            _this.clickSubscription = function () {\n                mousedownSubscription();\n                clickSubscription();\n                contextmenuSubscription();\n            };\n        });\n        var originalNoRecordText = this.localization.get('noRecords');\n        this.localization.changes.subscribe(function () {\n            if (_this.noRecordsText === originalNoRecordText) {\n                _this.noRecordsText = _this.localization.get('noRecords');\n                originalNoRecordText = _this.noRecordsText;\n            }\n        });\n    };\n    TableBodyComponent.prototype.ngOnDestroy = function () {\n        if (this.clickSubscription) {\n            this.clickSubscription();\n        }\n        this.cellKeydownSubscription.unsubscribe();\n        clearTimeout(this.clickTimeout);\n    };\n    TableBodyComponent.prototype.isEditingCell = function (index, column) {\n        return this.editService.isEditing() && this.editService.isEditedColumn(index, column);\n    };\n    TableBodyComponent.prototype.isEditingRow = function (index) {\n        return this.editService.isEditing() && this.editService.hasEdited(index);\n    };\n    Object.defineProperty(TableBodyComponent.prototype, \"hasGroupHeaderColumn\", {\n        get: function () {\n            return this.columnsContainer.hasGroupHeaderColumn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TableBodyComponent.prototype, \"columnsContainer\", {\n        get: function () {\n            return this.columnInfoService.columnsContainer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TableBodyComponent.prototype, \"columnsSpan\", {\n        get: function () {\n            return columnsSpan(this.columns);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TableBodyComponent.prototype, \"allColumnsSpan\", {\n        get: function () {\n            return columnsSpan(this.allColumns || this.columns);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TableBodyComponent.prototype, \"colSpan\", {\n        get: function () {\n            return this.columnsSpan + this.groups.length + (this.hasDetailTemplate ? 1 : 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TableBodyComponent.prototype, \"footerColumns\", {\n        get: function () {\n            return this.isLocked ? this.columnsContainer.lockedColumnsToRender : this.columnsContainer.nonLockedColumnsToRender;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TableBodyComponent.prototype.showGroupHeader = function (item) {\n        return !item.data.skipHeader;\n    };\n    Object.defineProperty(TableBodyComponent.prototype, \"hasDetailTemplate\", {\n        get: function () {\n            return isPresent(this.detailTemplate);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TableBodyComponent.prototype.clickHandler = function (eventArg) {\n        var _this = this;\n        var element = this.element.nativeElement;\n        var target = eventArg.target;\n        var cell, row, body, gridElement;\n        var currentTarget = target;\n        do {\n            cell = closest(currentTarget, matchesNodeName('td'));\n            row = closest(cell, matchesNodeName('tr'));\n            body = closest(row, matchesNodeName('tbody'));\n            currentTarget = body;\n            gridElement = closestInScope(currentTarget, matchesClasses('k-grid'), element);\n        } while (body && body !== element && !gridElement);\n        if (cell && !hasClasses(cell, NON_DATA_CELL_CLASSES) &&\n            !hasClasses(row, NON_DATA_ROW_CLASSES) &&\n            body === element && !gridElement) {\n            this.editService.preventCellClose();\n            var focusable = target !== cell && isFocusableWithTabKey(target, false);\n            if (!focusable && !matchesNodeName('label')(target) && !hasClasses(target, IGNORE_TARGET_CLASSSES) &&\n                !closestInScope(target, matchesClasses(IGNORE_CONTAINER_CLASSES), cell)) {\n                var args_1 = this.cellClickArgs(cell, row, eventArg);\n                if (eventArg.type === 'mousedown') {\n                    this.domEvents.cellMousedown.emit(args_1);\n                }\n                else {\n                    if (args_1.isEditedColumn || !this.editService.closeCell(eventArg)) {\n                        if (eventArg.type === 'click') {\n                            this.clickTimeout = setTimeout(function () {\n                                _this.emitCellClick(args_1);\n                            }, 0);\n                        }\n                        else {\n                            this.emitCellClick(args_1);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    TableBodyComponent.prototype.emitCellClick = function (args) {\n        this.domEvents.cellClick.emit(Object.assign(args, {\n            isEdited: args.isEditedRow || args.isEditedColumn\n        }));\n    };\n    TableBodyComponent.prototype.cellKeydownHandler = function (args) {\n        if (args.keyCode === Keys.Enter) {\n            this.clickHandler(args);\n        }\n    };\n    TableBodyComponent.prototype.cellClickArgs = function (cell, row, eventArg) {\n        var index = columnCellIndex(cell, row.cells);\n        var column = this.columns.toArray()[index];\n        var columnIndex = this.lockedColumnsCount + index;\n        var rowIndex = row.getAttribute('data-kendo-grid-item-index');\n        rowIndex = rowIndex ? parseInt(rowIndex, 10) : -1;\n        var dataItem = rowIndex === -1 ? this.editService.newDataItem : this.data.at(rowIndex - this.skip);\n        var isEditedColumn = this.editService.isEditedColumn(rowIndex, column);\n        var isEditedRow = this.editService.isEdited(rowIndex);\n        var type = eventArg.type === 'keydown' ? 'click' : eventArg.type;\n        return {\n            column: column,\n            columnIndex: columnIndex,\n            dataItem: dataItem,\n            isEditedColumn: isEditedColumn,\n            isEditedRow: isEditedRow,\n            originalEvent: eventArg,\n            rowIndex: rowIndex,\n            type: type\n        };\n    };\n    TableBodyComponent.decorators = [\n        { type: Component, args: [{\n                    selector: '[kendoGridTableBody]',\n                    template: \"\\n    <ng-template [ngIf]=\\\"editService.hasNewItem\\\">\\n        <tr class=\\\"k-grid-add-row k-grid-edit-row\\\"\\n            kendoGridLogicalRow\\n                [logicalRowIndex]=\\\"addRowLogicalIndex()\\\"\\n                [logicalSlaveRow]=\\\"lockedColumnsCount > 0\\\"\\n                [logicalCellsCount]=\\\"columns.length\\\"\\n                [logicalSlaveCellsCount]=\\\"unlockedColumnsCount\\\">\\n            <ng-template [ngIf]=\\\"!skipGroupDecoration\\\">\\n                <td class=\\\"k-group-cell\\\" *ngFor=\\\"let g of groups\\\" role=\\\"presentation\\\"></td>\\n            </ng-template>\\n            <td class=\\\"k-hierarchy-cell\\\"\\n                *ngIf=\\\"detailTemplate?.templateRef\\\"\\n                kendoGridLogicalCell\\n                    [logicalRowIndex]=\\\"addRowLogicalIndex()\\\"\\n                    [logicalColIndex]=\\\"0\\\"\\n                    aria-selected=\\\"false\\\"\\n                >\\n            </td>\\n            <td *ngFor=\\\"let column of columns; let columnIndex = index; trackBy: trackByColumns;\\\"\\n                kendoGridCell\\n                    [rowIndex]=\\\"-1\\\"\\n                    [columnIndex]=\\\"lockedColumnsCount + columnIndex\\\"\\n                    [isNew]=\\\"true\\\"\\n                    [column]=\\\"column\\\"\\n                    [dataItem]=\\\"newDataItem\\\"\\n                [ngClass]=\\\"column.cssClass\\\"\\n                [ngStyle]=\\\"column.style\\\"\\n                [attr.colspan]=\\\"column.colspan\\\"\\n                kendoGridLogicalCell\\n                    [logicalRowIndex]=\\\"addRowLogicalIndex()\\\"\\n                    [logicalColIndex]=\\\"logicalColIndex(column)\\\"\\n                    [colSpan]=\\\"column.colspan\\\"\\n                role=\\\"gridcell\\\">\\n            </td>\\n        </tr>\\n    </ng-template>\\n    <tr *ngIf=\\\"data?.length === 0 || data == null\\\" class=\\\"k-grid-norecords\\\">\\n        <td [attr.colspan]=\\\"colSpan\\\">\\n            <ng-template\\n                [ngIf]=\\\"noRecordsTemplate?.templateRef\\\"\\n                [templateContext]=\\\"{\\n                    templateRef: noRecordsTemplate?.templateRef\\n                 }\\\">\\n            </ng-template>\\n            <ng-container *ngIf=\\\"!noRecordsTemplate?.templateRef\\\">\\n                {{noRecordsText}}\\n            </ng-container>\\n        </td>\\n    </tr>\\n    <ng-template ngFor\\n        [ngForOf]=\\\"data\\\"\\n        [ngForTrackBy]=\\\"trackByWrapper\\\"\\n        let-item\\n        let-rowIndex=\\\"index\\\">\\n        <tr *ngIf=\\\"isGroup(item) && isParentGroupExpanded(item) && showGroupHeader(item)\\\"\\n            kendoGridGroupHeader\\n                [columns]=\\\"columns\\\"\\n                [groups]=\\\"groups\\\"\\n                [item]=\\\"item\\\"\\n                [hasDetails]=\\\"detailTemplate?.templateRef\\\"\\n                [skipGroupDecoration]=\\\"skipGroupDecoration\\\"\\n                [hasGroupHeaderColumn]=\\\"hasGroupHeaderColumn\\\"\\n                [groupHeaderColumns]=\\\"groupHeaderColumns\\\"\\n                [rowIndex]=\\\"rowIndex + 1\\\"\\n                [totalColumnsCount]=\\\"totalColumnsCount\\\"\\n            kendoGridLogicalRow\\n                [logicalRowIndex]=\\\"logicalRowIndex(rowIndex)\\\"\\n                [logicalSlaveRow]=\\\"lockedColumnsCount > 0\\\"\\n                [logicalCellsCount]=\\\"columns.length\\\"\\n                [logicalSlaveCellsCount]=\\\"groupHeaderSlaveCellsCount\\\">\\n        </tr>\\n        <tr\\n            *ngIf=\\\"isDataItem(item) && isInExpandedGroup(item)\\\"\\n            kendoGridLogicalRow\\n                [dataRowIndex]=\\\"item.index\\\"\\n                [dataItem]=\\\"item.data\\\"\\n                [logicalRowIndex]=\\\"logicalRowIndex(rowIndex)\\\"\\n                [logicalSlaveRow]=\\\"lockedColumnsCount > 0\\\"\\n                [logicalCellsCount]=\\\"columns.length\\\"\\n                [logicalSlaveCellsCount]=\\\"unlockedColumnsCount\\\"\\n            [ngClass]=\\\"rowClass({ dataItem: item.data, index: item.index })\\\"\\n            [class.k-alt]=\\\"isOdd(item)\\\"\\n            [class.k-master-row]=\\\"detailTemplate?.templateRef\\\"\\n            [class.k-grid-edit-row]=\\\"isEditingRow(item.index)\\\"\\n            [attr.data-kendo-grid-item-index]=\\\"item.index\\\"\\n            [class.k-state-selected]=\\\"isSelectable() && isRowSelected(item)\\\">\\n            <ng-template [ngIf]=\\\"!skipGroupDecoration\\\">\\n                <td class=\\\"k-group-cell\\\" *ngFor=\\\"let g of groups\\\" role=\\\"presentation\\\"></td>\\n            </ng-template>\\n            <td class=\\\"k-hierarchy-cell\\\"\\n                *ngIf=\\\"detailTemplate?.templateRef\\\"\\n                kendoGridLogicalCell\\n                    [logicalRowIndex]=\\\"logicalRowIndex(rowIndex)\\\"\\n                    [logicalColIndex]=\\\"0\\\"\\n                    [dataRowIndex]=\\\"item.index\\\"\\n                    [dataItem]=\\\"item.data\\\"\\n                    [detailExpandCell]=\\\"true\\\"\\n                    aria-selected=\\\"false\\\"\\n                >\\n                <a class=\\\"k-icon\\\"\\n                    *ngIf=\\\"detailTemplate.showIf(item.data, item.index)\\\"\\n                    [ngClass]=\\\"detailButtonStyles(item.index)\\\"\\n                    [attr.title]=\\\"detailButtonTitle(item.index)\\\"\\n                    href=\\\"#\\\" tabindex=\\\"-1\\\" (click)=\\\"toggleRow(item.index, item.data)\\\"></a>\\n            </td>\\n            <td\\n                kendoGridCell\\n                    [rowIndex]=\\\"item.index\\\"\\n                    [columnIndex]=\\\"lockedColumnsCount + columnIndex\\\"\\n                    [column]=\\\"column\\\"\\n                    [dataItem]=\\\"item.data\\\"\\n                kendoGridLogicalCell\\n                    [logicalRowIndex]=\\\"logicalRowIndex(rowIndex)\\\"\\n                    [logicalColIndex]=\\\"logicalColIndex(column)\\\"\\n                    [dataRowIndex]=\\\"item.index\\\"\\n                    [dataItem]=\\\"item.data\\\"\\n                    [colIndex]=\\\"columnIndex\\\"\\n                    [colSpan]=\\\"column.colspan\\\"\\n                    role=\\\"gridcell\\\" aria-selected=\\\"false\\\"\\n                [ngClass]=\\\"column.cssClass\\\"\\n                [class.k-grid-edit-cell]=\\\"isEditingCell(item.index, column)\\\"\\n                [ngStyle]=\\\"column.style\\\"\\n                [attr.colspan]=\\\"column.colspan\\\"\\n                *ngFor=\\\"let column of columns; let columnIndex = index; trackBy: trackByColumns;\\\">\\n            </td>\\n        </tr>\\n        <tr *ngIf=\\\"isDataItem(item) && isInExpandedGroup(item) && detailTemplate?.templateRef &&\\n            detailTemplate.showIf(item.data, item.index) && isExpanded(item.index)\\\"\\n            class=\\\"k-detail-row\\\"\\n            [class.k-alt]=\\\"isOdd(item)\\\"\\n            kendoGridLogicalRow\\n                [dataRowIndex]=\\\"item.index\\\"\\n                [dataItem]=\\\"item.data\\\"\\n                [logicalRowIndex]=\\\"logicalRowIndex(rowIndex) + 1\\\"\\n                [logicalSlaveRow]=\\\"false\\\"\\n                [logicalCellsCount]=\\\"1\\\"\\n            >\\n            <td class=\\\"k-group-cell\\\" *ngFor=\\\"let g of groups\\\"></td>\\n            <td class=\\\"k-hierarchy-cell\\\"></td>\\n            <td class=\\\"k-detail-cell\\\"\\n                [attr.colspan]=\\\"columnsSpan\\\"\\n                kendoGridLogicalCell\\n                    [logicalRowIndex]=\\\"logicalRowIndex(rowIndex) + 1\\\"\\n                    [logicalColIndex]=\\\"0\\\"\\n                    [dataRowIndex]=\\\"item.index\\\"\\n                    [dataItem]=\\\"item.data\\\"\\n                    [colIndex]=\\\"0\\\"\\n                    [colSpan]=\\\"allColumnsSpan + 1\\\"\\n                    role=\\\"gridcell\\\" aria-selected=\\\"false\\\"\\n                >\\n                <ng-template\\n                    [templateContext]=\\\"{\\n                        templateRef: detailTemplate?.templateRef,\\n                        dataItem: item.data,\\n                        rowIndex: item.index,\\n                        $implicit: item.data\\n                        }\\\">\\n                </ng-template>\\n            </td>\\n        </tr>\\n        <tr *ngIf=\\\"isFooter(item) && (isInExpandedGroup(item) || (showGroupFooters && isParentGroupExpanded(item)))\\n            && !item.data.hideFooter\\\"\\n            class=\\\"k-group-footer\\\"\\n            kendoGridLogicalRow\\n                [logicalRowIndex]=\\\"logicalRowIndex(rowIndex)\\\"\\n                [logicalSlaveRow]=\\\"lockedColumnsCount > 0\\\"\\n                [logicalCellsCount]=\\\"columns.length\\\"\\n                [logicalSlaveCellsCount]=\\\"unlockedColumnsCount\\\">\\n            <ng-template [ngIf]=\\\"!skipGroupDecoration\\\">\\n                <td class=\\\"k-group-cell\\\" *ngFor=\\\"let g of groups\\\"></td>\\n            </ng-template>\\n            <td class=\\\"k-hierarchy-cell\\\"\\n                *ngIf=\\\"detailTemplate?.templateRef\\\"\\n                kendoGridLogicalCell\\n                    [logicalRowIndex]=\\\"logicalRowIndex(rowIndex)\\\"\\n                    [logicalColIndex]=\\\"0\\\"\\n                    aria-selected=\\\"false\\\"\\n                >\\n            </td>\\n            <td kendoGridLogicalCell\\n                    [logicalRowIndex]=\\\"logicalRowIndex(rowIndex)\\\"\\n                    [logicalColIndex]=\\\"logicalColIndex(column)\\\"\\n                [attr.data-skip]=\\\"skipGroupDecoration\\\"\\n                *ngFor=\\\"let column of footerColumns; let columnIndex = index; trackBy: trackByColumns;\\\">\\n                <ng-template\\n                    [templateContext]=\\\"{\\n                        templateRef: column.groupFooterTemplateRef,\\n                        group: item.data,\\n                        field: column.field,\\n                        column: column,\\n                        aggregates: item.data?.aggregates,\\n                        $implicit: item.data?.aggregates\\n                    }\\\">\\n                </ng-template>\\n           </td>\\n        </tr>\\n    </ng-template>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    TableBodyComponent.ctorParameters = function () { return [\n        { type: DetailsService },\n        { type: GroupsService },\n        { type: ChangeNotificationService },\n        { type: EditService },\n        { type: LocalizationService },\n        { type: NgZone },\n        { type: Renderer2 },\n        { type: ElementRef },\n        { type: DomEventsService },\n        { type: SelectionService },\n        { type: ColumnInfoService },\n        { type: NavigationService }\n    ]; };\n    TableBodyComponent.propDecorators = {\n        columns: [{ type: Input }],\n        allColumns: [{ type: Input }],\n        groups: [{ type: Input }],\n        detailTemplate: [{ type: Input }],\n        noRecordsTemplate: [{ type: Input }],\n        data: [{ type: Input }],\n        skip: [{ type: Input }],\n        selectable: [{ type: Input }],\n        filterable: [{ type: Input }],\n        noRecordsText: [{ type: Input }],\n        isLocked: [{ type: Input }],\n        skipGroupDecoration: [{ type: Input }],\n        showGroupFooters: [{ type: Input }],\n        lockedColumnsCount: [{ type: Input }],\n        totalColumnsCount: [{ type: Input }],\n        virtualColumns: [{ type: Input }],\n        trackBy: [{ type: Input }],\n        rowClass: [{ type: Input }]\n    };\n    return TableBodyComponent;\n}());\n\n/**\n * @hidden\n */\nvar CellComponent = /** @class */ (function () {\n    function CellComponent(editService, idService, cellContext) {\n        this.editService = editService;\n        this.idService = idService;\n        this.cellContext = cellContext;\n        this.isNew = false;\n        this._templateContext = {};\n        this._editTemplateContext = {};\n    }\n    Object.defineProperty(CellComponent.prototype, \"commandCellClass\", {\n        get: function () {\n            return this.isCommand(this.column);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"rowIndex\", {\n        get: function () {\n            return this._rowIndex;\n        },\n        set: function (index) {\n            this._rowIndex = index;\n            this.updateCellContext();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"isEdited\", {\n        get: function () {\n            if (!(this.editService.isEditing() || this.isNew) || !this.isColumnEditable) {\n                return false;\n            }\n            var editContext = this.editService.columnContext(this.rowIndex, this.column);\n            return this.isFieldEditable(editContext, this.column);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"formGroup\", {\n        get: function () {\n            return this.editService.context(this.rowIndex).group;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"templateContext\", {\n        get: function () {\n            return this._templateContext;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"editTemplateContext\", {\n        get: function () {\n            this._editTemplateContext.$implicit = this.formGroup;\n            this._editTemplateContext.isNew = this.isNew;\n            this._editTemplateContext.column = this.column;\n            this._editTemplateContext.dataItem = this.dataItem;\n            this._editTemplateContext.formGroup = this.formGroup;\n            this._editTemplateContext.rowIndex = this.rowIndex;\n            return this._editTemplateContext;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"format\", {\n        get: function () {\n            if (isColumnComponent(this.column) && !isNullOrEmptyString(this.column.format)) {\n                return extractFormat(this.column.format);\n            }\n            return undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"isBoundColumn\", {\n        get: function () {\n            return this.column.field && !this.column.templateRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"isCheckboxColumn\", {\n        get: function () {\n            return isCheckboxColumn(this.column) && !this.column.templateRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"selectionCheckboxId\", {\n        get: function () {\n            return this.idService.selectionCheckboxId(this.rowIndex);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"isSpanColumn\", {\n        get: function () {\n            return isSpanColumn(this.column) && !this.column.templateRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"childColumns\", {\n        get: function () {\n            return columnsToRender([this.column]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"isColumnEditable\", {\n        get: function () {\n            if (!this.column || this.isCommand(this.column)) {\n                return false;\n            }\n            return this.column.editable !== false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CellComponent.prototype.ngDoCheck = function () {\n        this.updateCellContext();\n    };\n    CellComponent.prototype.ngOnChanges = function (_changes) {\n        this.updateTemplateContext();\n    };\n    CellComponent.prototype.isCommand = function (column) {\n        return column instanceof CommandColumnComponent;\n    };\n    CellComponent.prototype.isFieldEditable = function (editContext, column) {\n        if (!isPresent(editContext)) {\n            return false;\n        }\n        if (isPresent(column.editTemplate)) {\n            return true;\n        }\n        return isPresent(editContext.group) && isPresent(editContext.group.get(column.field));\n    };\n    CellComponent.prototype.updateCellContext = function () {\n        if (this.cellContext) {\n            this.cellContext.rowIndex = this._rowIndex;\n        }\n    };\n    CellComponent.prototype.updateTemplateContext = function () {\n        if (!this.column.templateRef) {\n            return;\n        }\n        var context = this._templateContext;\n        context.isNew = this.isNew;\n        context.column = this.column;\n        context.dataItem = this.dataItem;\n        context.rowIndex = this.rowIndex;\n        context.columnIndex = this.columnIndex;\n        context.$implicit = this.dataItem;\n    };\n    CellComponent.decorators = [\n        { type: Component, args: [{\n                    selector: '[kendoGridCell]',\n                    template: \"\\n        <ng-container [ngSwitch]=\\\"isEdited\\\">\\n            <ng-container *ngSwitchCase=\\\"false\\\">\\n                <ng-template [ngIf]=\\\"column.templateRef\\\"\\n                    [ngTemplateOutlet]=\\\"column.templateRef\\\"\\n                    [ngTemplateOutletContext]=\\\"templateContext\\\">\\n                </ng-template>\\n                <ng-template [ngIf]=\\\"isSpanColumn\\\">\\n                    <ng-template ngFor let-childColumn [ngForOf]=\\\"childColumns\\\">\\n                        {{ dataItem | valueOf: childColumn.field: childColumn.format}}\\n                    </ng-template>\\n                </ng-template>\\n                <ng-template [ngIf]=\\\"isBoundColumn\\\">{{ dataItem | valueOf: column.field: column.format}}</ng-template>\\n                <ng-template [ngIf]=\\\"isCheckboxColumn && !isNew\\\">\\n                    <input class=\\\"k-checkbox\\\" [kendoGridSelectionCheckbox]=\\\"rowIndex\\\" [attr.id]=\\\"selectionCheckboxId\\\"><label class=\\\"k-checkbox-label\\\" [attr.for]=\\\"selectionCheckboxId\\\"></label>\\n                </ng-template>\\n            </ng-container>\\n            <ng-container *ngSwitchCase=\\\"true\\\">\\n                <ng-template\\n                    *ngIf=\\\"column.editTemplateRef\\\"\\n                    [ngTemplateOutlet]=\\\"column.editTemplateRef\\\"\\n                    [ngTemplateOutletContext]=\\\"editTemplateContext\\\">\\n                </ng-template>\\n                <ng-container [ngSwitch]=\\\"column.editor\\\" *ngIf=\\\"!column.editTemplateRef\\\">\\n                    <kendo-numerictextbox\\n                        *ngSwitchCase=\\\"'numeric'\\\"\\n                        [format]=\\\"format\\\"\\n                        [formControl]=\\\"formGroup.get(column.field)\\\"\\n                        kendoGridFocusable\\n                    ></kendo-numerictextbox>\\n\\n                    <kendo-datepicker\\n                        *ngSwitchCase=\\\"'date'\\\"\\n                        [format]=\\\"format\\\"\\n                        [formControl]=\\\"formGroup.get(column.field)\\\"\\n                        kendoGridFocusable\\n                    ></kendo-datepicker>\\n\\n                    <input\\n                        *ngSwitchCase=\\\"'boolean'\\\"\\n                        type=\\\"checkbox\\\"\\n                        [formControl]=\\\"formGroup.get(column.field)\\\"\\n                        kendoGridFocusable\\n                    />\\n\\n                    <input\\n                        *ngSwitchDefault\\n                        type=\\\"text\\\"\\n                        class=\\\"k-textbox\\\"\\n                        [formControl]=\\\"formGroup.get(column.field)\\\"\\n                        kendoGridFocusable\\n                    />\\n                </ng-container>\\n            </ng-container>\\n        </ng-container>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    CellComponent.ctorParameters = function () { return [\n        { type: EditService },\n        { type: IdService },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CELL_CONTEXT,] }] }\n    ]; };\n    CellComponent.propDecorators = {\n        commandCellClass: [{ type: HostBinding, args: ['class.k-command-cell',] }],\n        column: [{ type: Input }],\n        columnIndex: [{ type: Input }],\n        isNew: [{ type: Input }],\n        rowIndex: [{ type: Input }],\n        dataItem: [{ type: Input }]\n    };\n    return CellComponent;\n}());\n\n/**\n * Represents the `edit` command of the Grid. You can apply this directive to any `button`\n * element inside a [`CommandColumnComponent`]({% slug api_grid_commandcolumncomponent %}).\n * When an associated button with the directive is clicked, the\n * [`edit`]({% slug api_grid_gridcomponent %}#toc-edit) event\n * is triggered ([see example]({% slug editing_grid %})).\n *\n * > When the row is in the edit mode, the button with `kendoGridEditCommand` is automatically hidden.\n *\n * @example\n * ```html-no-run\n * <kendo-grid>\n *   <kendo-grid-command-column title=\"command\">\n *     <ng-template kendoGridCellTemplate>\n *       <button kendoGridEditCommand class=\"k-primary\">Edit</button>\n *     </ng-template>\n *   </kendo-grid-command-column>\n * </kendo-grid>\n * ```\n *\n */\nvar EditCommandDirective = /** @class */ (function (_super) {\n    __extends(EditCommandDirective, _super);\n    function EditCommandDirective(editService, cellContext, element, renderer, localization, ngZone) {\n        var _this = _super.call(this, element, renderer, null, localization, ngZone) || this;\n        _this.editService = editService;\n        _this.cellContext = cellContext;\n        /**\n         * @hidden\n         */\n        _this.commandClass = true;\n        return _this;\n    }\n    Object.defineProperty(EditCommandDirective.prototype, \"visible\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.isEdited ? 'none' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    EditCommandDirective.prototype.onClick = function (e) {\n        e.preventDefault();\n        this.editService.beginEdit(this.rowIndex);\n    };\n    EditCommandDirective.prototype.ngDoCheck = function () {\n        if (this.cellContext) {\n            this.rowIndex = this.cellContext.rowIndex;\n            this.isEdited = this.editService.isEdited(this.rowIndex);\n        }\n    };\n    EditCommandDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridEditCommand]'\n                },] },\n    ];\n    /** @nocollapse */\n    EditCommandDirective.ctorParameters = function () { return [\n        { type: EditService },\n        { type: undefined, decorators: [{ type: Inject, args: [CELL_CONTEXT,] }] },\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: LocalizationService },\n        { type: NgZone }\n    ]; };\n    EditCommandDirective.propDecorators = {\n        visible: [{ type: HostBinding, args: ['style.display',] }],\n        commandClass: [{ type: HostBinding, args: ['class.k-grid-edit-command',] }],\n        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]\n    };\n    return EditCommandDirective;\n}(Button));\n\n/**\n * Represents the `cancel` command of the Grid. You can apply this directive to any `button`\n * element inside a [`CommandColumnComponent`]({% slug api_grid_commandcolumncomponent %}).\n * When an associated button with the directive is clicked, the\n * [`cancel`]({% slug api_grid_gridcomponent %}#toc-cancel) event\n * is triggered ([see example]({% slug editing_grid %})).\n *\n * > When the row is not in the edit mode, the button with the `kendoGridCancelCommand` is automatically hidden.\n *\n * @example\n * ```html-no-run\n * <kendo-grid>\n *   <kendo-grid-command-column title=\"command\">\n *     <ng-template kendoGridCellTemplate>\n *       <button kendoGridCancelCommand>Cancel changes</button>\n *     </ng-template>\n *   </kendo-grid-command-column>\n * </kendo-grid>\n * ```\n *\n * You can control the content of the button based on the state of the row.\n *\n * @example\n * ```html-no-run\n * <kendo-grid>\n *   <kendo-grid-command-column title=\"command\">\n *     <ng-template kendoGridCellTemplate let-isNew=\"isNew\">\n *       <button kendoGridCancelCommand>{{isNew ? 'Discard' : 'Cancel changes'}}</button>\n *     </ng-template>\n *   </kendo-grid-command-column>\n * </kendo-grid>\n * ```\n */\nvar CancelCommandDirective = /** @class */ (function (_super) {\n    __extends(CancelCommandDirective, _super);\n    function CancelCommandDirective(editService, cellContext, element, renderer, localization, ngZone) {\n        var _this = _super.call(this, element, renderer, null, localization, ngZone) || this;\n        _this.editService = editService;\n        _this.cellContext = cellContext;\n        /**\n         * @hidden\n         */\n        _this.commandClass = true;\n        return _this;\n    }\n    Object.defineProperty(CancelCommandDirective.prototype, \"visible\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return !this.isEdited ? 'none' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    CancelCommandDirective.prototype.onClick = function (e) {\n        e.preventDefault();\n        if (this.isEdited) {\n            this.editService.endEdit(this.rowIndex);\n        }\n    };\n    CancelCommandDirective.prototype.ngDoCheck = function () {\n        if (this.cellContext) {\n            this.rowIndex = this.cellContext.rowIndex;\n            this.isEdited = this.editService.isEdited(this.rowIndex);\n        }\n    };\n    CancelCommandDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridCancelCommand]'\n                },] },\n    ];\n    /** @nocollapse */\n    CancelCommandDirective.ctorParameters = function () { return [\n        { type: EditService },\n        { type: undefined, decorators: [{ type: Inject, args: [CELL_CONTEXT,] }] },\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: LocalizationService },\n        { type: NgZone }\n    ]; };\n    CancelCommandDirective.propDecorators = {\n        visible: [{ type: HostBinding, args: ['style.display',] }],\n        commandClass: [{ type: HostBinding, args: ['class.k-grid-cancel-command',] }],\n        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]\n    };\n    return CancelCommandDirective;\n}(Button));\n\n/**\n * Represents the `save` command of the Grid. You can apply this directive to any `button`\n * element inside a [`CommandColumnComponent`]({% slug api_grid_commandcolumncomponent %}).\n * When an associated button with the directive is clicked, the\n * [`save`]({% slug api_grid_gridcomponent %}#toc-save) event\n * is triggered ([see example]({% slug editing_grid %})).\n *\n * > When the row is not in the edit mode, the button with `kendoGridSaveCommand` is automatically hidden.\n *\n * @example\n * ```html-no-run\n * <kendo-grid>\n *   <kendo-grid-command-column title=\"command\">\n *     <ng-template kendoGridCellTemplate>\n *       <button kendoGridSaveCommand>Save changes</button>\n *     </ng-template>\n *   </kendo-grid-command-column>\n * </kendo-grid>\n * ```\n *\n * You can control the content of the button based on the state of the row.\n *\n * @example\n * ```html-no-run\n * <kendo-grid>\n *   <kendo-grid-command-column title=\"command\">\n *     <ng-template kendoGridCellTemplate let-isNew=\"isNew\">\n *       <button kendoGridSaveCommand>{{isNew ? 'Add' : 'Update'}}</button>\n *     </ng-template>\n *   </kendo-grid-command-column>\n * </kendo-grid>\n * ```\n */\nvar SaveCommandDirective = /** @class */ (function (_super) {\n    __extends(SaveCommandDirective, _super);\n    function SaveCommandDirective(editService, cellContext, element, renderer, localization, ngZone) {\n        var _this = _super.call(this, element, renderer, null, localization, ngZone) || this;\n        _this.editService = editService;\n        _this.cellContext = cellContext;\n        /**\n         * @hidden\n         */\n        _this.commandClass = true;\n        return _this;\n    }\n    Object.defineProperty(SaveCommandDirective.prototype, \"visible\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return !this.isEdited ? 'none' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    SaveCommandDirective.prototype.onClick = function (e) {\n        e.preventDefault();\n        if (this.isEdited) {\n            this.editService.save(this.rowIndex);\n        }\n    };\n    SaveCommandDirective.prototype.ngDoCheck = function () {\n        if (this.cellContext) {\n            this.rowIndex = this.cellContext.rowIndex;\n            this.isEdited = this.editService.isEdited(this.rowIndex);\n        }\n    };\n    SaveCommandDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridSaveCommand]'\n                },] },\n    ];\n    /** @nocollapse */\n    SaveCommandDirective.ctorParameters = function () { return [\n        { type: EditService },\n        { type: undefined, decorators: [{ type: Inject, args: [CELL_CONTEXT,] }] },\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: LocalizationService },\n        { type: NgZone }\n    ]; };\n    SaveCommandDirective.propDecorators = {\n        visible: [{ type: HostBinding, args: ['style.display',] }],\n        commandClass: [{ type: HostBinding, args: ['class.k-grid-save-command',] }],\n        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]\n    };\n    return SaveCommandDirective;\n}(Button));\n\n/**\n * Represents the `remove` command of the Grid. You can apply this directive to any `button` element\n * inside a [`CommandColumnComponent`]({% slug api_grid_commandcolumncomponent %}).\n * When an associated button with the directive is clicked, the\n * [`remove` event]({% slug api_grid_gridcomponent %}#toc-remove)\n * is triggered ([see example]({% slug editing_reactive_forms_grid %})).\n *\n * > When the row is in the edit mode, the button with the `kendoGridRemoveCommand` is automatically hidden.\n *\n * @example\n * ```html-no-run\n * <kendo-grid>\n *   <kendo-grid-command-column title=\"command\">\n *     <ng-template kendoGridCellTemplate>\n *       <button kendoGridRemoveCommand>Remove row</button>\n *     </ng-template>\n *   </kendo-grid-command-column>\n * </kendo-grid>\n * ```\n */\nvar RemoveCommandDirective = /** @class */ (function (_super) {\n    __extends(RemoveCommandDirective, _super);\n    function RemoveCommandDirective(editService, cellContext, element, renderer, localization, ngZone) {\n        var _this = _super.call(this, element, renderer, null, localization, ngZone) || this;\n        _this.editService = editService;\n        _this.cellContext = cellContext;\n        /**\n         * @hidden\n         */\n        _this.commandClass = true;\n        return _this;\n    }\n    Object.defineProperty(RemoveCommandDirective.prototype, \"visible\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.isEdited ? 'none' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    RemoveCommandDirective.prototype.onClick = function (e) {\n        e.preventDefault();\n        this.editService.remove(this.rowIndex);\n    };\n    RemoveCommandDirective.prototype.ngDoCheck = function () {\n        if (this.cellContext) {\n            this.rowIndex = this.cellContext.rowIndex;\n            this.isEdited = this.editService.isEdited(this.rowIndex);\n        }\n    };\n    RemoveCommandDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridRemoveCommand]'\n                },] },\n    ];\n    /** @nocollapse */\n    RemoveCommandDirective.ctorParameters = function () { return [\n        { type: EditService },\n        { type: undefined, decorators: [{ type: Inject, args: [CELL_CONTEXT,] }] },\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: LocalizationService },\n        { type: NgZone }\n    ]; };\n    RemoveCommandDirective.propDecorators = {\n        visible: [{ type: HostBinding, args: ['style.display',] }],\n        commandClass: [{ type: HostBinding, args: ['class.k-grid-remove-command',] }],\n        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]\n    };\n    return RemoveCommandDirective;\n}(Button));\n\n/**\n * Represents the command for adding a new item to the Grid. You can apply this directive to any\n * `button` element inside a [`ToolbarTemplate`]({% slug api_grid_commandcolumncomponent %}).\n * When an associated button with the directive is clicked, the\n * [`add`]({% slug api_grid_gridcomponent %}#toc-add) event is triggered\n * ([see example]({% slug editing_grid %})).\n *\n * @example\n * ```html-no-run\n * <kendo-grid>\n *    <ng-template kendoGridToolbarTemplate>\n *       <button kendoGridAddCommand>Add new</button>\n *    </ng-template>\n * </kendo-grid>\n * ```\n */\nvar AddCommandDirective = /** @class */ (function (_super) {\n    __extends(AddCommandDirective, _super);\n    function AddCommandDirective(editService, element, renderer, localization, ngZone) {\n        var _this = _super.call(this, element, renderer, null, localization, ngZone) || this;\n        _this.editService = editService;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    AddCommandDirective.prototype.onClick = function (e) {\n        e.preventDefault();\n        this.editService.beginAdd();\n    };\n    Object.defineProperty(AddCommandDirective.prototype, \"commandClass\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AddCommandDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridAddCommand]'\n                },] },\n    ];\n    /** @nocollapse */\n    AddCommandDirective.ctorParameters = function () { return [\n        { type: EditService },\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: LocalizationService },\n        { type: NgZone }\n    ]; };\n    AddCommandDirective.propDecorators = {\n        onClick: [{ type: HostListener, args: ['click', ['$event'],] }],\n        commandClass: [{ type: HostBinding, args: ['class.k-grid-add-command',] }]\n    };\n    return AddCommandDirective;\n}(Button));\n\nvar exported$1 = [\n    CommandColumnComponent,\n    CheckboxColumnComponent,\n    SelectionCheckboxDirective,\n    CellTemplateDirective,\n    EditTemplateDirective,\n    TableBodyComponent,\n    NoRecordsTemplateDirective,\n    CellComponent,\n    EditCommandDirective,\n    CancelCommandDirective,\n    SaveCommandDirective,\n    RemoveCommandDirective,\n    AddCommandDirective\n];\nvar importedModules$3 = [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    SharedModule,\n    GroupModule,\n    NumericTextBoxModule,\n    DatePickerModule\n];\n/**\n * @hidden\n */\nvar BodyModule = /** @class */ (function () {\n    function BodyModule() {\n    }\n    BodyModule.exports = function () {\n        return [\n            CommandColumnComponent,\n            CheckboxColumnComponent,\n            SelectionCheckboxDirective,\n            CellTemplateDirective,\n            NoRecordsTemplateDirective,\n            EditTemplateDirective,\n            EditCommandDirective,\n            CancelCommandDirective,\n            SaveCommandDirective,\n            RemoveCommandDirective,\n            AddCommandDirective\n        ];\n    };\n    BodyModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [exported$1],\n                    exports: [exported$1],\n                    imports: importedModules$3.slice()\n                },] },\n    ];\n    return BodyModule;\n}());\n\n/**\n * @hidden\n */\nvar FooterComponent = /** @class */ (function () {\n    function FooterComponent() {\n        this.columns = [];\n        this.groups = [];\n        this.lockedColumnsCount = 0;\n    }\n    Object.defineProperty(FooterComponent.prototype, \"footerClass\", {\n        get: function () {\n            return !this.scrollable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FooterComponent.prototype, \"columnsToRender\", {\n        get: function () {\n            return columnsToRender(this.columns || []);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FooterComponent.decorators = [\n        { type: Component, args: [{\n                    selector: '[kendoGridFooter]',\n                    template: \"\\n    <ng-template [ngIf]=\\\"true\\\">\\n        <tr [class.k-footer-template]=\\\"true\\\">\\n            <td\\n                [class.k-group-cell]=\\\"true\\\"\\n                *ngFor=\\\"let g of groups\\\">\\n            </td>\\n            <td\\n                [class.k-hierarchy-cell]=\\\"true\\\"\\n                *ngIf=\\\"detailTemplate?.templateRef\\\">\\n            </td>\\n            <td\\n                [ngClass]=\\\"column.footerClass\\\"\\n                [ngStyle]=\\\"column.footerStyle\\\"\\n                *ngFor=\\\"let column of columnsToRender; let columnIndex = index\\\">\\n                <ng-template\\n                    [templateContext]=\\\"{\\n                        templateRef: column.footerTemplateRef,\\n                        columnIndex: lockedColumnsCount + columnIndex,\\n                        column: column,\\n                        $implicit: column\\n                    }\\\">\\n                </ng-template>\\n            </td>\\n        </tr>\\n    </ng-template>\\n    \"\n                },] },\n    ];\n    FooterComponent.propDecorators = {\n        columns: [{ type: Input }],\n        groups: [{ type: Input }],\n        detailTemplate: [{ type: Input }],\n        scrollable: [{ type: Input }],\n        lockedColumnsCount: [{ type: Input }],\n        footerClass: [{ type: HostBinding, args: ['class.k-grid-footer',] }]\n    };\n    return FooterComponent;\n}());\n\nvar exportedModules$3 = [\n    FooterComponent\n];\nvar importedModules$4 = [\n    CommonModule,\n    SharedModule\n];\n/**\n * @hidden\n */\nvar FooterModule = /** @class */ (function () {\n    function FooterModule() {\n    }\n    FooterModule.exports = function () {\n        return [];\n    };\n    FooterModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [exportedModules$3],\n                    exports: [exportedModules$3],\n                    imports: importedModules$4.slice()\n                },] },\n    ];\n    return FooterModule;\n}());\n\n/**\n * @hidden\n */\nvar ToolbarComponent = /** @class */ (function () {\n    function ToolbarComponent(grid) {\n        this.grid = grid;\n        this.context = {};\n    }\n    Object.defineProperty(ToolbarComponent.prototype, \"classNames\", {\n        get: function () {\n            return 'k-header k-grid-toolbar';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ToolbarComponent.prototype, \"position\", {\n        set: function (value) {\n            this.context.position = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ToolbarComponent.prototype, \"toolbarTemplateRef\", {\n        get: function () {\n            return this.grid.toolbarTemplate ? this.grid.toolbarTemplate.templateRef : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ToolbarComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-toolbar',\n                    template: \"\\n        <ng-template\\n            *ngIf=\\\"toolbarTemplateRef\\\"\\n            [ngTemplateOutlet]=\\\"toolbarTemplateRef\\\"\\n            [ngTemplateOutletContext]=\\\"context\\\"\\n            >\\n        </ng-template>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    ToolbarComponent.ctorParameters = function () { return [\n        { type: GridComponent }\n    ]; };\n    ToolbarComponent.propDecorators = {\n        classNames: [{ type: HostBinding, args: ['class',] }],\n        position: [{ type: Input }]\n    };\n    return ToolbarComponent;\n}());\n\n/**\n * @hidden\n */\nvar LocalEditService = /** @class */ (function () {\n    function LocalEditService(grid, localDataChangesService) {\n        this.grid = grid;\n        this.localDataChangesService = localDataChangesService;\n    }\n    LocalEditService.prototype.create = function (item) {\n        if (this.hasLocalData && this.grid.skip) {\n            this.localDataChangesService.data.splice(this.grid.skip, 0, item);\n        }\n        else {\n            this.data.unshift(item);\n        }\n        this.dataChanged();\n    };\n    LocalEditService.prototype.update = function (_item) { }; // tslint:disable-line:no-empty\n    LocalEditService.prototype.remove = function (item) {\n        var data = this.data;\n        for (var idx = 0; idx < data.length; idx++) {\n            if (item === data[idx]) {\n                data.splice(idx, 1);\n                this.dataChanged({ action: 'remove', item: item });\n                break;\n            }\n        }\n    };\n    LocalEditService.prototype.assignValues = function (target, source) {\n        Object.assign(target, source);\n    };\n    LocalEditService.prototype.dataChanged = function (args) {\n        if (args === void 0) { args = {}; }\n        if (this.hasLocalData) {\n            this.localDataChangesService.changes.emit(args);\n        }\n    };\n    Object.defineProperty(LocalEditService.prototype, \"hasLocalData\", {\n        get: function () {\n            return Array.isArray(this.localDataChangesService.data);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LocalEditService.prototype, \"data\", {\n        get: function () {\n            if (this.hasLocalData) {\n                return this.localDataChangesService.data;\n            }\n            var data = this.grid.data;\n            if (Array.isArray(data)) {\n                return data;\n            }\n            if (isDevMode()) {\n                throw new Error('The default edit service of the editing directives works only when binding to plain array.' +\n                    'Please provide an editService.');\n            }\n            return [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return LocalEditService;\n}());\n\n/**\n * @hidden\n */\nvar EditingDirectiveBase = /** @class */ (function () {\n    function EditingDirectiveBase(grid, localDataChangesService) {\n        this.grid = grid;\n        this.localDataChangesService = localDataChangesService;\n        this.defaultEditService = this.createDefaultService();\n    }\n    Object.defineProperty(EditingDirectiveBase.prototype, \"editService\", {\n        get: function () {\n            return this.userEditService || this.defaultEditService;\n        },\n        // Consider adding support for the dependency injection of the service to allow for specifying a generic service without code.\n        // The Input should still be kept.\n        /**\n         * The edit service that will handle the operations.\n         */\n        set: function (value) {\n            this.userEditService = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    EditingDirectiveBase.prototype.ngOnInit = function () {\n        this.subscriptions = this.grid.add.subscribe(this.addHandler.bind(this));\n        this.subscriptions.add(this.grid.remove.subscribe(this.removeHandler.bind(this)));\n        this.subscriptions.add(this.grid.cancel.subscribe(this.cancelHandler.bind(this)));\n        this.subscriptions.add(this.grid.save.subscribe(this.saveHandler.bind(this)));\n        this.subscriptions.add(this.grid.dataStateChange.subscribe(this.onStateChange.bind(this)));\n    };\n    /**\n     * @hidden\n     */\n    EditingDirectiveBase.prototype.ngOnDestroy = function () {\n        this.subscriptions.unsubscribe();\n    };\n    EditingDirectiveBase.prototype.createDefaultService = function () {\n        return new LocalEditService(this.grid, this.localDataChangesService);\n    };\n    EditingDirectiveBase.prototype.addHandler = function () {\n        this.grid.addRow(this.createModel({ isNew: true }));\n    };\n    EditingDirectiveBase.prototype.saveHandler = function (args) {\n        var item = this.saveModel(args);\n        if (item) {\n            if (args.isNew) {\n                this.editService.create(item);\n            }\n            else {\n                this.editService.update(item);\n            }\n        }\n        this.grid.closeRow(args.rowIndex);\n    };\n    EditingDirectiveBase.prototype.cancelHandler = function (_a) {\n        var rowIndex = _a.rowIndex;\n        this.closeEditor(rowIndex);\n    };\n    EditingDirectiveBase.prototype.removeHandler = function (_a) {\n        var _this = this;\n        var dataItem = _a.dataItem;\n        var removeItem = function (shouldRemove) {\n            if (shouldRemove) {\n                _this.editService.remove(dataItem);\n            }\n        };\n        if (this.removeConfirmation) {\n            var result = this.removeConfirmation(dataItem);\n            if (result instanceof Promise) {\n                result.then(removeItem);\n            }\n            else if (result instanceof Observable) {\n                result.pipe(take(1)).subscribe(removeItem);\n            }\n            else {\n                removeItem(result);\n            }\n        }\n        else {\n            removeItem(true);\n        }\n    };\n    EditingDirectiveBase.prototype.onStateChange = function () {\n        this.closeEditor();\n    };\n    EditingDirectiveBase.prototype.closeEditor = function (rowIndex) {\n        this.grid.closeRow(rowIndex);\n    };\n    EditingDirectiveBase.propDecorators = {\n        editService: [{ type: Input }],\n        removeConfirmation: [{ type: Input }]\n    };\n    return EditingDirectiveBase;\n}());\n\n/**\n * @hidden\n */\nvar LocalRowEditService = /** @class */ (function (_super) {\n    __extends(LocalRowEditService, _super);\n    function LocalRowEditService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    LocalRowEditService.prototype.update = function (_item) {\n        this.dataChanged();\n    };\n    return LocalRowEditService;\n}(LocalEditService));\n\n/**\n * @hidden\n */\nvar RowEditingDirectiveBase = /** @class */ (function (_super) {\n    __extends(RowEditingDirectiveBase, _super);\n    function RowEditingDirectiveBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @hidden\n     */\n    RowEditingDirectiveBase.prototype.ngOnInit = function () {\n        _super.prototype.ngOnInit.call(this);\n        this.subscriptions\n            .add(this.grid.edit.subscribe(this.editHandler.bind(this)));\n    };\n    RowEditingDirectiveBase.prototype.createDefaultService = function () {\n        return new LocalRowEditService(this.grid, this.localDataChangesService);\n    };\n    RowEditingDirectiveBase.prototype.addHandler = function () {\n        this.closeEditor();\n        _super.prototype.addHandler.call(this);\n    };\n    RowEditingDirectiveBase.prototype.editHandler = function (args) {\n        this.closeEditor();\n        this.rowIndex = args.rowIndex;\n        this.grid.editRow(args.rowIndex, this.createModel(args));\n    };\n    RowEditingDirectiveBase.prototype.saveHandler = function (args) {\n        _super.prototype.saveHandler.call(this, args);\n        this.clean();\n    };\n    RowEditingDirectiveBase.prototype.closeEditor = function (rowIndex) {\n        if (rowIndex === void 0) { rowIndex = this.rowIndex; }\n        _super.prototype.closeEditor.call(this, rowIndex);\n        this.clean();\n    };\n    RowEditingDirectiveBase.prototype.clean = function () {\n        delete this.rowIndex;\n    };\n    return RowEditingDirectiveBase;\n}(EditingDirectiveBase));\n\n/**\n * A directive which encapsulates the editing operations of the Grid when using\n * the Template-Driven Angular Forms ([see example]({% slug editing_directives_grid %}#toc-the-template-directive)).\n */\nvar TemplateEditingDirective = /** @class */ (function (_super) {\n    __extends(TemplateEditingDirective, _super);\n    function TemplateEditingDirective(grid, localDataChangesService) {\n        var _this = _super.call(this, grid, localDataChangesService) || this;\n        _this.grid = grid;\n        _this.localDataChangesService = localDataChangesService;\n        return _this;\n    }\n    TemplateEditingDirective.prototype.editHandler = function (args) {\n        _super.prototype.editHandler.call(this, args);\n        this.dataItem = args.dataItem;\n        this.originalValues = {};\n        this.editService.assignValues(this.originalValues, this.dataItem);\n    };\n    TemplateEditingDirective.prototype.closeEditor = function (rowIndex) {\n        if (this.dataItem) {\n            this.editService.assignValues(this.dataItem, this.originalValues);\n        }\n        _super.prototype.closeEditor.call(this, rowIndex);\n    };\n    TemplateEditingDirective.prototype.createModel = function (args) {\n        if (args.isNew) {\n            return this.createNewItem();\n        }\n    };\n    TemplateEditingDirective.prototype.saveModel = function (args) {\n        return args.dataItem;\n    };\n    TemplateEditingDirective.prototype.clean = function () {\n        _super.prototype.clean.call(this);\n        delete this.dataItem;\n    };\n    TemplateEditingDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridTemplateEditing]'\n                },] },\n    ];\n    /** @nocollapse */\n    TemplateEditingDirective.ctorParameters = function () { return [\n        { type: GridComponent },\n        { type: LocalDataChangesService }\n    ]; };\n    TemplateEditingDirective.propDecorators = {\n        createNewItem: [{ type: Input, args: ['kendoGridTemplateEditing',] }]\n    };\n    return TemplateEditingDirective;\n}(RowEditingDirectiveBase));\n\n/**\n * @hidden\n */\nvar markAllAsTouched = function (control) {\n    control.markAsTouched();\n    if (control.hasOwnProperty('controls')) {\n        var controls = control.controls;\n        for (var inner in controls) {\n            if (controls.hasOwnProperty(inner)) {\n                markAllAsTouched(controls[inner]);\n            }\n        }\n    }\n};\n\n/**\n * A directive which encapsulates the editing operations of the Grid when using the\n * Reactive Forms ([see example]({% slug editing_directives_grid %}#toc-the-reactive-directive)).\n */\nvar ReactiveEditingDirective = /** @class */ (function (_super) {\n    __extends(ReactiveEditingDirective, _super);\n    function ReactiveEditingDirective(grid, localDataChangesService) {\n        var _this = _super.call(this, grid, localDataChangesService) || this;\n        _this.grid = grid;\n        _this.localDataChangesService = localDataChangesService;\n        return _this;\n    }\n    ReactiveEditingDirective.prototype.createModel = function (args) {\n        return this.createFormGroup(args);\n    };\n    ReactiveEditingDirective.prototype.saveModel = function (_a) {\n        var dataItem = _a.dataItem, formGroup = _a.formGroup, isNew = _a.isNew;\n        if (!formGroup.dirty && !isNew) {\n            return;\n        }\n        if (formGroup.valid) {\n            this.editService.assignValues(dataItem, formGroup.value);\n            return dataItem;\n        }\n        markAllAsTouched(formGroup);\n    };\n    ReactiveEditingDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridReactiveEditing]'\n                },] },\n    ];\n    /** @nocollapse */\n    ReactiveEditingDirective.ctorParameters = function () { return [\n        { type: GridComponent },\n        { type: LocalDataChangesService }\n    ]; };\n    ReactiveEditingDirective.propDecorators = {\n        createFormGroup: [{ type: Input, args: ['kendoGridReactiveEditing',] }]\n    };\n    return ReactiveEditingDirective;\n}(RowEditingDirectiveBase));\n\n/**\n * A directive which encapsulates the editing operations of the Grid when using the in-cell\n * editing with Reactive Forms ([see example]({% slug editing_directives_grid %}#toc-the-incell-directive)).\n */\nvar InCellEditingDirective = /** @class */ (function (_super) {\n    __extends(InCellEditingDirective, _super);\n    function InCellEditingDirective(grid, localDataChangesService) {\n        var _this = _super.call(this, grid, localDataChangesService) || this;\n        _this.grid = grid;\n        _this.localDataChangesService = localDataChangesService;\n        return _this;\n    }\n    // Need mixin\n    InCellEditingDirective.prototype.createModel = function (args) {\n        return this.createFormGroup(args);\n    };\n    InCellEditingDirective.prototype.saveModel = function (_a) {\n        var dataItem = _a.dataItem, formGroup = _a.formGroup, isNew = _a.isNew;\n        if (!formGroup.dirty && !isNew) {\n            return;\n        }\n        if (formGroup.valid) {\n            this.editService.assignValues(dataItem, formGroup.value);\n            return dataItem;\n        }\n        markAllAsTouched(formGroup);\n    };\n    /**\n     * @hidden\n     */\n    InCellEditingDirective.prototype.ngOnInit = function () {\n        _super.prototype.ngOnInit.call(this);\n        this.subscriptions.add(this.grid.cellClick.subscribe(this.cellClickHandler.bind(this)));\n        this.subscriptions.add(this.grid.cellClose.subscribe(this.cellCloseHandler.bind(this)));\n    };\n    InCellEditingDirective.prototype.removeHandler = function (args) {\n        _super.prototype.removeHandler.call(this, args);\n        this.grid.cancelCell();\n    };\n    InCellEditingDirective.prototype.cellClickHandler = function (args) {\n        if (!args.isEdited && args.type !== 'contextmenu') {\n            this.grid.editCell(args.rowIndex, args.columnIndex, this.createFormGroup(args));\n        }\n    };\n    InCellEditingDirective.prototype.cellCloseHandler = function (args) {\n        var formGroup = args.formGroup, dataItem = args.dataItem;\n        if (!formGroup.valid) {\n            args.preventDefault();\n        }\n        else if (formGroup.dirty) {\n            this.editService.assignValues(dataItem, formGroup.value);\n            this.editService.update(dataItem);\n        }\n    };\n    InCellEditingDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridInCellEditing]'\n                },] },\n    ];\n    /** @nocollapse */\n    InCellEditingDirective.ctorParameters = function () { return [\n        { type: GridComponent },\n        { type: LocalDataChangesService }\n    ]; };\n    InCellEditingDirective.propDecorators = {\n        createFormGroup: [{ type: Input, args: ['kendoGridInCellEditing',] }]\n    };\n    return InCellEditingDirective;\n}(EditingDirectiveBase));\n\nvar hasGroups = function (items) { return items && items.length && items[0].field && items[0].items; };\nvar processGroups = function (data, state$$1) { return process(data, state$$1).data; };\nvar removeParentDescriptors = function (parents, owner) { return function (g) { return g.field !== owner.field && !parents.some(function (y) { return y.field === g.field; }); }; };\nvar findGroup = function (groupIndex, groups) {\n    var parents = [];\n    return {\n        group: groupIndex.split(\"_\").reduce(function (acc, x) {\n            var idx = parseInt(x, 10);\n            if (acc.items) {\n                parents.push(acc);\n                return acc.items[idx];\n            }\n            return isArray(acc) ? acc[idx] : acc;\n        }, groups),\n        parents: parents\n    };\n};\nvar findChildren = function (data, parents) {\n    var filters = parents.map(function (p) { return ({ field: p.field, operator: \"eq\", value: p.value }); });\n    return filterBy(data, {\n        filters: filters,\n        logic: \"and\"\n    });\n};\n/**\n * @hidden\n */\nvar count = function (groups, includeFooters) {\n    if (includeFooters === void 0) { includeFooters = false; }\n    return (groups.reduce(function (acc, group) {\n        if (!group.skipHeader) {\n            acc++;\n        }\n        if (group.items) {\n            var children = count(group.items, includeFooters);\n            if (includeFooters && children && !group.hideFooter) {\n                acc++;\n            }\n            acc += children;\n        }\n        return acc;\n    }, 0) // tslint:disable-line:align\n    );\n};\n/**\n * @hidden\n */\nvar slice = function (groups, skip, take$$1, includeFooters) {\n    if (includeFooters === void 0) { includeFooters = false; }\n    if (!isPresent(take$$1)) {\n        return groups;\n    }\n    var result = [];\n    for (var idx = 0, length_1 = groups.length; idx < length_1; idx++) {\n        if (take$$1 <= 0) {\n            break;\n        }\n        var group = groups[idx];\n        var groupItems = group.items;\n        var itemCount = count(groupItems, includeFooters);\n        if (includeFooters && groupItems.length) {\n            itemCount++;\n        }\n        var skipHeader = skip > 0;\n        if (skip) {\n            skip--;\n            if (itemCount && skip >= itemCount) {\n                skip -= itemCount;\n                continue;\n            }\n        }\n        if (!skipHeader || itemCount) {\n            var items = [];\n            var hideFooter = true;\n            if (!skipHeader) {\n                take$$1--;\n            }\n            if (take$$1) {\n                if (hasGroups(groupItems)) {\n                    var children = slice(groupItems, skip, take$$1, includeFooters);\n                    items.push.apply(items, children);\n                    take$$1 -= count(children, includeFooters);\n                }\n                else {\n                    items.push.apply(items, groupItems.slice(skip, Math.min(skip + take$$1, groupItems.length)));\n                    take$$1 -= items.length;\n                }\n                if (take$$1 && includeFooters) {\n                    hideFooter = false;\n                    take$$1--;\n                }\n                skip = 0;\n            }\n            result.push({\n                aggregates: group.aggregates,\n                field: group.field,\n                hideFooter: hideFooter,\n                items: items,\n                offset: idx,\n                skipHeader: skipHeader,\n                value: group.value\n            });\n        }\n    }\n    return result;\n};\nvar skippedHeaders = function (groupItem) {\n    var total = 0;\n    while (groupItem) {\n        if (groupItem.skipHeader) {\n            total++;\n        }\n        groupItem = groupItem.items && groupItem.items[0] || null;\n    }\n    return total;\n};\n/**\n * A directive which encapsulates the in-memory handling of grouping with virtual scrolling.\n */\nvar GroupBindingDirective = /** @class */ (function (_super) {\n    __extends(GroupBindingDirective, _super);\n    function GroupBindingDirective(grid, changeDetector, localDataChangesService) {\n        return _super.call(this, grid, changeDetector, localDataChangesService) || this;\n    }\n    Object.defineProperty(GroupBindingDirective.prototype, \"kendoGridGroupBinding\", {\n        /**\n         * The array of data which will be used to populate the Grid.\n         */\n        set: function (value) {\n            this.groups = null;\n            this.grid.resetGroupsState();\n            this.data = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GroupBindingDirective.prototype, \"data\", {\n        /**\n         * @hidden\n         */\n        set: function (value) {\n            this.originalData = value || [];\n            this.dataChanged = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GroupBindingDirective.prototype, \"sort\", {\n        /**\n         * Defines the descriptors by which the data will be sorted.\n         */\n        set: function (value) {\n            var clear = this.state.sort !== value;\n            this.grid.sort = this.state.sort = value;\n            if (clear) {\n                this.groups = null;\n                this.grid.resetGroupsState();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GroupBindingDirective.prototype, \"filter\", {\n        /**\n         * Defines the descriptor by which the data will be filtered.\n         */\n        set: function (value) {\n            var clear = diffFilters(this.state.filter, value);\n            if (clear) {\n                this.state.filter = value;\n                this.grid.filter = cloneFilters(value);\n                this.groups = null;\n                this.grid.resetGroupsState();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GroupBindingDirective.prototype, \"group\", {\n        /**\n         * Defines the descriptors by which the data will be grouped.\n         */\n        set: function (value) {\n            var clear = this.state.group !== value;\n            this.grid.group = this.state.group = value;\n            if (clear) {\n                this.groups = null;\n                this.grid.resetGroupsState();\n                this.skip = 0;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    GroupBindingDirective.prototype.ngOnInit = function () {\n        _super.prototype.ngOnInit.call(this);\n        this.grid.groupExpand.subscribe(this.groupExpand.bind(this));\n        this.grid.groupCollapse.subscribe(this.groupCollapse.bind(this));\n    };\n    GroupBindingDirective.prototype.groupExpand = function (_a) {\n        var groupIndex = _a.groupIndex;\n        this.grid.expandGroupChildren(groupIndex);\n        var _b = findGroup(groupIndex, this.groups), group = _b.group, parents = _b.parents;\n        if (!group.items.length) {\n            var descriptors = this.state.group.filter(removeParentDescriptors(parents, group));\n            var children = findChildren(this.originalData, parents.concat(group));\n            group.items = processGroups(children, {\n                filter: this.state.filter,\n                group: descriptors,\n                sort: this.state.sort\n            });\n        }\n        this.grid.data = this.dataResult(this.state.skip, this.state.take);\n    };\n    GroupBindingDirective.prototype.groupCollapse = function (_a) {\n        var groupIndex = _a.groupIndex;\n        var group = findGroup(groupIndex, this.groups).group;\n        if (group) {\n            group.items = [];\n        }\n        this.grid.data = this.dataResult(this.state.skip, this.state.take);\n    };\n    GroupBindingDirective.prototype.process = function (state$$1) {\n        if (state$$1.group && state$$1.group.length) {\n            var groups = this.processGroups(state$$1);\n            this.grid.skip -= skippedHeaders(groups.data[0]);\n            return groups;\n        }\n        else {\n            this.groups = null;\n        }\n        return _super.prototype.process.call(this, state$$1);\n    };\n    GroupBindingDirective.prototype.processGroups = function (state$$1) {\n        if (!this.groups || !this.groups.length) {\n            this.groups = processGroups(this.originalData, {\n                filter: state$$1.filter,\n                group: state$$1.group,\n                sort: state$$1.sort\n            });\n        }\n        return this.dataResult(state$$1.skip, state$$1.take);\n    };\n    GroupBindingDirective.prototype.dataResult = function (skip, take$$1) {\n        var includeFooters = this.grid.showGroupFooters;\n        return {\n            data: slice(this.groups, skip, take$$1, includeFooters),\n            total: count(this.groups, includeFooters)\n        };\n    };\n    GroupBindingDirective.prototype.applyState = function (_a) {\n        var skip = _a.skip, take$$1 = _a.take, sort = _a.sort, group = _a.group, filter$$1 = _a.filter;\n        this.skip = skip;\n        this.state.take = take$$1;\n        // this.pageSize = take; // do need to update take as the process with slice correctly\n        this.sort = sort;\n        this.group = group;\n        this.filter = filter$$1;\n    };\n    GroupBindingDirective.decorators = [\n        { type: Directive, args: [{ selector: '[kendoGridGroupBinding]' },] },\n    ];\n    /** @nocollapse */\n    GroupBindingDirective.ctorParameters = function () { return [\n        { type: GridComponent },\n        { type: ChangeDetectorRef },\n        { type: LocalDataChangesService }\n    ]; };\n    GroupBindingDirective.propDecorators = {\n        kendoGridGroupBinding: [{ type: Input, args: [\"kendoGridGroupBinding\",] }],\n        sort: [{ type: Input }],\n        filter: [{ type: Input }],\n        group: [{ type: Input }]\n    };\n    return GroupBindingDirective;\n}(DataBindingDirective));\n\nvar exportedModules$4 = [\n    GridComponent,\n    ToolbarTemplateDirective,\n    ToolbarComponent,\n    DataBindingDirective,\n    SelectionDirective,\n    CustomMessagesComponent,\n    GroupBindingDirective,\n    TemplateEditingDirective,\n    ReactiveEditingDirective,\n    InCellEditingDirective\n].concat(GroupModule.exports(), SharedModule.exports(), BodyModule.exports(), HeaderModule.exports(), FooterModule.exports(), PagerModule.exports(), RowFilterModule.exports(), FilterMenuModule.exports(), ColumnMenuModule.exports());\nvar declarations = [\n    GridComponent,\n    ListComponent,\n    ToolbarComponent,\n    LocalizedMessagesDirective,\n    CustomMessagesComponent,\n    DataBindingDirective,\n    ToolbarTemplateDirective,\n    SelectionDirective,\n    TemplateEditingDirective,\n    ReactiveEditingDirective,\n    InCellEditingDirective,\n    GroupBindingDirective\n];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Grid component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Grid module\n * import { GridModule } from '@progress/kendo-angular-grid';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, GridModule], // import Grid module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nvar GridModule = /** @class */ (function () {\n    function GridModule() {\n    }\n    GridModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [declarations],\n                    exports: [exportedModules$4],\n                    imports: [\n                        CommonModule,\n                        GroupModule,\n                        SharedModule,\n                        BodyModule,\n                        HeaderModule,\n                        FooterModule,\n                        PagerModule,\n                        RowFilterModule,\n                        FilterMenuModule,\n                        ResizeSensorModule,\n                        ColumnMenuModule\n                    ]\n                },] },\n    ];\n    return GridModule;\n}());\n\nvar PDFMarginComponent$1 = /** @class */ (function (_super) {\n    __extends(PDFMarginComponent$$1, _super);\n    function PDFMarginComponent$$1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PDFMarginComponent$$1.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-pdf-margin',\n                    template: ''\n                },] },\n    ];\n    return PDFMarginComponent$$1;\n}(PDFMarginComponent));\n\n/**\n * Represents the PDF page template of the Grid that helps to customize the PDF pages. To define a page template,\n * nest an `<ng-template>` tag with the `kendoGridPDFTemplate` directive inside `<kendo-grid-pdf>`.\n *\n * The template context provides the following fields:\n * - `pageNumber`&mdash;Defines PDF page number.\n * - `totalPages`&mdash;Defines the total number of PDF pages.\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *         <kendo-grid [data]=\"gridData\">\n *             <ng-template kendoGridToolbarTemplate>\n *                 <button kendoGridPDFCommand icon=\"file-pdf\">Export to PDF</button>\n *             </ng-template>\n *             <kendo-grid-column field=\"ProductName\">\n *             </kendo-grid-column>\n *              <kendo-grid-column field=\"UnitPrice\">\n *             </kendo-grid-column>\n *             <kendo-grid-pdf fileName=\"Products.pdf\" paperSize=\"A4\" [margin]=\"{ top: '1cm', left: '1cm', right: '1cm', bottom: '1cm' }\">\n *                 <ng-template kendoGridPDFTemplate let-pageNum=\"pageNum\" let-totalPages=\"totalPages\">\n *                     <div style=\"position: absolute;top: 5px; left: 5px;\">\n *                         Page {{ pageNum }} of {{ totalPages }}\n *                     </div>\n *                 </ng-template>\n *             </kendo-grid-pdf>\n *         </kendo-grid>\n *     `\n * })\n *\n * class AppComponent {\n *     public gridData = [{\n *         \"ProductID\": 1,\n *         \"ProductName\": \"Chai\",\n *         \"UnitPrice\": 18.0000\n *       }, {\n *         \"ProductID\": 2,\n *         \"ProductName\": \"Chang\",\n *         \"UnitPrice\": 19.0000\n *       }\n *     ];\n * }\n *\n * ```\n */\nvar PDFTemplateDirective$1 = /** @class */ (function (_super) {\n    __extends(PDFTemplateDirective$$1, _super);\n    function PDFTemplateDirective$$1(templateRef) {\n        return _super.call(this, templateRef) || this;\n    }\n    PDFTemplateDirective$$1.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridPDFTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    PDFTemplateDirective$$1.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return PDFTemplateDirective$$1;\n}(PDFTemplateDirective));\n\n/**\n * @hidden\n */\nvar HEADER_CLASS = 'k-grid-header';\n/**\n * @hidden\n */\nvar FOOTER_CLASS = 'k-grid-footer';\nvar GRID_LIST = 'KENDO-GRID-LIST';\nvar TABLE = 'TABLE';\nvar matchesList = matchesNodeName(GRID_LIST);\nvar matchesTable = matchesNodeName(TABLE);\nvar suffix = function (locked) { return locked ? 'locked' : 'wrap'; };\n/**\n * @hidden\n */\nvar GridQuery = /** @class */ (function () {\n    function GridQuery(element) {\n        this.element = element;\n        this.list = findElement(element, matchesList);\n    }\n    GridQuery.prototype.content = function (locked) {\n        return findElement(this.list, matchesClasses(\"k-grid-content\" + (locked ? '-locked' : '')));\n    };\n    GridQuery.prototype.header = function (locked) {\n        this.headerWrap = this.headerWrap || findElement(this.element, matchesClasses(HEADER_CLASS));\n        return findElement(this.headerWrap, matchesClasses(HEADER_CLASS + \"-\" + suffix(locked)));\n    };\n    GridQuery.prototype.footer = function (locked) {\n        this.footerWrap = this.footerWrap || findElement(this.element, matchesClasses(FOOTER_CLASS));\n        return findElement(this.footerWrap, matchesClasses(FOOTER_CLASS + \"-\" + suffix(locked)));\n    };\n    GridQuery.prototype.table = function () {\n        return findElement(this.element, matchesTable);\n    };\n    return GridQuery;\n}());\n\nvar FIRST_CLASS = 'k-first';\nvar INPUTS = ['input', 'select', 'textarea', 'option'];\n/** @hidden */\nvar cloneNode = function (node) {\n    var clone = node.cloneNode(false);\n    if (node._kendoExportVisual) {\n        clone._kendoExportVisual = node._kendoExportVisual;\n    }\n    if (INPUTS.indexOf(String(node.nodeName).toLowerCase()) >= 0) {\n        clone.removeAttribute(\"id\");\n        clone.removeAttribute(\"name\");\n        clone.value = node.value;\n        clone.checked = node.checked;\n        clone.selected = node.selected;\n    }\n    var child = node.firstChild;\n    while (child) {\n        clone.appendChild(cloneNode(child));\n        child = child.nextSibling;\n    }\n    return clone;\n};\nvar appendNodes = function (element, nodes) {\n    var length = nodes.length;\n    for (var idx = 0; idx < length; idx++) {\n        element.appendChild(cloneNode(nodes[idx]));\n    }\n};\nvar wrapTable = function (table) {\n    var wrapper = document.createElement('div');\n    wrapper.className = 'k-widget k-grid';\n    wrapper.appendChild(table);\n    return wrapper;\n};\nvar createTableElement = function (sources) {\n    var sourceCount = sources.length;\n    var element = cloneNode(sources[0]);\n    var rowsCount = element.rows.length;\n    if (sourceCount > 1) {\n        for (var rowIdx = 0; rowIdx < rowsCount; rowIdx++) {\n            for (var sourceIdx = 1; sourceIdx < sourceCount; sourceIdx++) {\n                appendNodes(element.rows[rowIdx], sources[sourceIdx].rows[rowIdx].cells);\n            }\n        }\n    }\n    return element;\n};\nvar setFirstCellClass = function (header, headers) {\n    if (headers.length > 1 && header.rows.length > 1) {\n        for (var idx = 1; idx < header.rows.length; idx++) {\n            var firstCellIndex = headers[0].rows[idx].cells.length;\n            var cell = header.rows[idx].cells[firstCellIndex];\n            if (String(cell.className).indexOf(FIRST_CLASS) === -1) {\n                cell.className += \" \" + FIRST_CLASS;\n            }\n        }\n    }\n};\nvar createTable = function (colGroups, headers, bodies, footers) {\n    var table = document.createElement('table');\n    var colGroup = colGroups[0].cloneNode(true);\n    for (var idx = 1; idx < colGroups.length; idx++) {\n        appendNodes(colGroup, colGroups[idx].querySelectorAll('col'));\n    }\n    var header = createTableElement(headers);\n    var body = createTableElement(bodies);\n    header.className = HEADER_CLASS;\n    setFirstCellClass(header, headers);\n    table.appendChild(colGroup);\n    table.appendChild(header);\n    table.appendChild(body);\n    if (footers.length) {\n        var footer = createTableElement(footers);\n        footer.className = FOOTER_CLASS;\n        table.appendChild(footer);\n    }\n    return wrapTable(table);\n};\n/**\n * @hidden\n */\nvar exportElement = function (wrapper) {\n    var query = new GridQuery(wrapper);\n    var content = query.content();\n    var result;\n    if (content) {\n        var colGroups = [content.querySelector('colgroup')];\n        var headers = [query.header().querySelector('thead')];\n        var bodies = [content.querySelector('tbody')];\n        var footer = query.footer();\n        var footers = [];\n        if (footer) {\n            footers.push(footer.querySelector('tfoot'));\n        }\n        var lockedContent = query.content(true);\n        if (lockedContent) {\n            colGroups.unshift(lockedContent.querySelector('colgroup'));\n            headers.unshift(query.header(true).querySelector('thead'));\n            bodies.unshift(lockedContent.querySelector('tbody'));\n            if (footer) {\n                footers.unshift(query.footer(true).querySelector('tfoot'));\n            }\n        }\n        result = createTable(colGroups, headers, bodies, footers);\n    }\n    else {\n        result = wrapTable(query.table().cloneNode(true));\n    }\n    return result;\n};\n\nvar createElement = function (tagName, className) {\n    var element = document.createElement(tagName);\n    if (className) {\n        element.className = className;\n    }\n    return element;\n};\nvar createDiv = function (className) {\n    return createElement('div', className);\n};\n/**\n * Configures the settings for the export of Grid in PDF ([see example]({% slug pdfexport_grid %})).\n */\nvar PDFComponent = /** @class */ (function (_super) {\n    __extends(PDFComponent, _super);\n    function PDFComponent(pdfService, suspendService, ngZone, element) {\n        var _this = _super.call(this, element) || this;\n        _this.pdfService = pdfService;\n        _this.suspendService = suspendService;\n        _this.ngZone = ngZone;\n        _this.columns = new QueryList();\n        _this.saveSubscription = pdfService.savePDF.subscribe(_this.savePDF.bind(_this));\n        _this.drawSubscription = pdfService.drawPDF.subscribe(_this.drawPDF.bind(_this));\n        _this.reset = _this.reset.bind(_this);\n        _this.draw = _this.draw.bind(_this);\n        return _this;\n    }\n    PDFComponent.prototype.ngOnDestroy = function () {\n        this.saveSubscription.unsubscribe();\n        this.drawSubscription.unsubscribe();\n        this.reset();\n    };\n    PDFComponent.prototype.savePDF = function (component) {\n        this.createPDF(component, this.draw);\n    };\n    PDFComponent.prototype.drawPDF = function (_a) {\n        var _this = this;\n        var component = _a.component, promise = _a.promise;\n        this.createPDF(component, function () {\n            _this.createExportGroup(promise);\n        });\n    };\n    PDFComponent.prototype.createPDF = function (component, callback) {\n        var pageSize = component.pageSize;\n        var total = component.view.total;\n        var columns = this.columns.toArray();\n        if (columns.length) {\n            this.originalColumns = component.columns.toArray();\n        }\n        this.component = component;\n        this.suspendService.scroll = true;\n        this.pdfService.exporting = true;\n        this.initProgress();\n        this.renderAllPages = this.allPages && pageSize < total;\n        if (this.renderAllPages) {\n            this.skip = component.skip;\n            this.pageSize = pageSize;\n            this.changePage(0, total, callback, columns);\n        }\n        else if (columns.length || component.virtualColumns) {\n            this.changeColumns(columns, callback);\n        }\n        else {\n            callback();\n        }\n    };\n    PDFComponent.prototype.initProgress = function () {\n        var wrapperElement = this.component.wrapper.nativeElement;\n        var progress = this.progress = createDiv('k-loading-pdf-mask');\n        var overlay = cloneNode(wrapperElement);\n        progress.appendChild(overlay);\n        progress.appendChild(createDiv('k-loading-color'));\n        progress.appendChild(createElement('span', 'k-i-loading k-icon'));\n        this.originalHeight = wrapperElement.style.height;\n        this.originalOverflow = wrapperElement.style.overflow;\n        wrapperElement.style.height = wrapperElement.offsetHeight + 'px';\n        wrapperElement.style.overflow = 'hidden';\n        wrapperElement.appendChild(progress);\n        this.applyScroll(overlay);\n    };\n    PDFComponent.prototype.applyScroll = function (overlay) {\n        var query = new GridQuery(this.component.wrapper.nativeElement);\n        var content = query.content();\n        if (content) {\n            var overlayQuery = new GridQuery(overlay);\n            var overlayContent = overlayQuery.content();\n            overlayContent.scrollTop = content.scrollTop;\n            overlayContent.scrollLeft = content.scrollLeft;\n            overlayQuery.header().scrollLeft = query.header().scrollLeft;\n            var footer = query.footer();\n            if (footer) {\n                overlayQuery.footer().scrollLeft = footer.scrollLeft;\n            }\n            var lockedContent = query.content(true);\n            if (lockedContent) {\n                var overlayLockedContent = overlayQuery.content(true);\n                overlayLockedContent.scrollTop = lockedContent.scrollTop;\n                overlayLockedContent.scrollLeft = lockedContent.scrollLeft;\n            }\n        }\n    };\n    PDFComponent.prototype.draw = function () {\n        var _this = this;\n        this.createExportElement(function (element) {\n            _this.save(element, _this.fileName);\n        });\n    };\n    PDFComponent.prototype.createExportGroup = function (promise) {\n        var _this = this;\n        this.createExportElement(function (element) {\n            _this.exportElement(element).then(function (group) { return promise.resolve(group); });\n        });\n    };\n    PDFComponent.prototype.createExportElement = function (callback) {\n        var _this = this;\n        this.ngZone.runOutsideAngular(function () {\n            var container = _this.container = createDiv('k-grid-pdf-export-element');\n            var element = exportElement(_this.component.wrapper.nativeElement);\n            container.appendChild(element);\n            document.body.appendChild(container);\n            callback(element);\n        });\n    };\n    PDFComponent.prototype.drawOptions = function () {\n        var options = _super.prototype.drawOptions.call(this);\n        options._destructive = true;\n        return options;\n    };\n    PDFComponent.prototype.cleanup = function () {\n        _super.prototype.cleanup.call(this);\n        this.pdfService.exporting = false;\n        if (this.component) {\n            var originalColumns = this.originalColumns;\n            delete this.originalColumns;\n            if (this.renderAllPages) {\n                this.changePage(this.skip, this.pageSize, this.reset, originalColumns);\n            }\n            else if (originalColumns || this.component.virtualColumns) {\n                this.changeColumns(originalColumns, this.reset);\n            }\n            else {\n                this.reset();\n            }\n        }\n        else {\n            this.reset();\n        }\n        this.removeContainer();\n    };\n    PDFComponent.prototype.removeContainer = function () {\n        if (this.container) {\n            document.body.removeChild(this.container);\n            delete this.container;\n        }\n    };\n    PDFComponent.prototype.changePage = function (skip, _take, callback, columns) {\n        var _this = this;\n        this.ngZone.run(function () {\n            _this.pdfService.dataChanged.pipe(take(1)).subscribe(function () {\n                if ((columns && columns.length) || _this.component.virtualColumns) {\n                    _this.changeColumns(columns, callback);\n                }\n                else {\n                    _this.onStable(callback);\n                }\n            });\n            _this.component.notifyPageChange('pdf', { skip: skip, take: _take });\n        });\n    };\n    PDFComponent.prototype.changeColumns = function (columns, callback) {\n        var _this = this;\n        this.ngZone.run(function () {\n            _this.onStable(callback);\n            if (columns && columns.length) {\n                _this.component.columns.reset(columns);\n            }\n        });\n    };\n    PDFComponent.prototype.reset = function () {\n        this.suspendService.scroll = false;\n        this.renderAllPages = false;\n        if (!this.component) {\n            return;\n        }\n        var wrapperElement = this.component.wrapper.nativeElement;\n        wrapperElement.removeChild(this.progress);\n        wrapperElement.style.height = this.originalHeight;\n        wrapperElement.style.overflow = this.originalOverflow;\n        delete this.progress;\n        delete this.component;\n    };\n    PDFComponent.prototype.onStable = function (callback) {\n        var _this = this;\n        // not sure if it is an actual scenario. occurs in the tests.\n        // onStable is triggered in the same pass without the change detection.\n        // thus, the callback is called before the changes are applied without the timeout.\n        setTimeout(function () {\n            _this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(callback);\n        }, 0); // tslint:disable-line: align\n    };\n    PDFComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-pdf',\n                    template: ''\n                },] },\n    ];\n    /** @nocollapse */\n    PDFComponent.ctorParameters = function () { return [\n        { type: PDFService },\n        { type: SuspendService },\n        { type: NgZone },\n        { type: ElementRef }\n    ]; };\n    PDFComponent.propDecorators = {\n        allPages: [{ type: Input }],\n        columns: [{ type: ContentChildren, args: [ColumnBase$1,] }],\n        marginComponent: [{ type: ContentChild, args: [PDFMarginComponent$1,] }],\n        pageTemplateDirective: [{ type: ContentChild, args: [PDFTemplateDirective$1,] }]\n    };\n    return PDFComponent;\n}(PDFExportComponent));\n\n/**\n * Represents the `export-to-PDF` command of the Grid.\n * You can apply this directive to any `button` element inside a\n * [`ToolbarTemplate`]({% slug api_grid_commandcolumncomponent %}).\n * When the user clicks a button that is associated with the directive, the\n * [`pdfExport`]({% slug api_grid_gridcomponent %}#toc-pdfexport) event\n * fires ([see example]({% slug pdfexport_grid %})).\n *\n * @example\n * ```html-no-run\n * <kendo-grid>\n *      <ng-template kendoGridToolbarTemplate>\n *          <button kendoGridPDFCommand>Export to PDF</button>\n *      </ng-template>\n *      <kendo-grid-pdf fileName=\"Grid.pdf\">\n *      </kendo-grid-pdf>\n * </kendo-grid>\n * ```\n */\nvar PDFCommandDirective = /** @class */ (function (_super) {\n    __extends(PDFCommandDirective, _super);\n    function PDFCommandDirective(pdfService, element, renderer, localization, ngZone) {\n        var _this = _super.call(this, element, renderer, null, localization, ngZone) || this;\n        _this.pdfService = pdfService;\n        _this.ngZone = ngZone;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    PDFCommandDirective.prototype.onClick = function (e) {\n        e.preventDefault();\n        this.pdfService.exportClick.emit();\n    };\n    Object.defineProperty(PDFCommandDirective.prototype, \"pdfClass\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PDFCommandDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridPDFCommand]'\n                },] },\n    ];\n    /** @nocollapse */\n    PDFCommandDirective.ctorParameters = function () { return [\n        { type: PDFService },\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: LocalizationService },\n        { type: NgZone }\n    ]; };\n    PDFCommandDirective.propDecorators = {\n        onClick: [{ type: HostListener, args: ['click', ['$event'],] }],\n        pdfClass: [{ type: HostBinding, args: ['class.k-grid-pdf',] }]\n    };\n    return PDFCommandDirective;\n}(Button));\n\nvar exportedModules$5 = [\n    PDFComponent,\n    PDFMarginComponent$1,\n    PDFCommandDirective,\n    PDFTemplateDirective$1\n];\nvar declarations$1 = [\n    PDFComponent,\n    PDFMarginComponent$1,\n    PDFCommandDirective,\n    PDFTemplateDirective$1\n];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Grid PDF component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Grid and PDF modules\n * import { GridModule, PDFModule } from '@progress/kendo-angular-grid';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, GridModule, PDFModule], // import Grid and PDF modules\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nvar PDFModule = /** @class */ (function () {\n    function PDFModule() {\n    }\n    PDFModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [declarations$1],\n                    exports: [exportedModules$5]\n                },] },\n    ];\n    return PDFModule;\n}());\n\n/**\n * Arguments for the `excelExport` event.\n */\nvar ExcelExportEvent = /** @class */ (function (_super) {\n    __extends(ExcelExportEvent, _super);\n    function ExcelExportEvent(workbook) {\n        var _this = _super.call(this) || this;\n        _this.workbook = workbook;\n        return _this;\n    }\n    return ExcelExportEvent;\n}(PreventableEvent));\n\n/* tslint:disable object-literal-sort-keys */\nvar fetchComponentData = function (component) {\n    return {\n        data: component.view.map(function (item) { return item; }),\n        group: component.group\n    };\n};\nvar toExcelColumn = function (column) {\n    return {\n        title: column.title,\n        field: column.field,\n        locked: Boolean(column.locked),\n        width: column.width,\n        level: column.level,\n        hidden: !column.isVisible,\n        groupHeaderTemplate: column.groupHeaderTemplate,\n        groupHeaderColumnTemplate: column.groupHeaderColumnTemplate,\n        groupFooterTemplate: column.groupFooterTemplate,\n        footerTemplate: column.footerTemplate\n    };\n};\nvar toExcelColumns = function (columns) {\n    var result = [];\n    sortColumns(columns)\n        .forEach(function (column) {\n        if (column.isSpanColumn) {\n            result.push.apply(result, toExcelColumns(column.childrenArray));\n        }\n        else {\n            var excelColumn = toExcelColumn(column);\n            if (column.isColumnGroup) {\n                excelColumn.children = [excelColumn].concat(toExcelColumns(column.childrenArray));\n            }\n            result.push(excelColumn);\n        }\n    });\n    return result;\n};\nvar componentColumns = function (component) {\n    var columns = toExcelColumns(component.columns.toArray());\n    return orderBy(columns, [{ field: 'locked', dir: 'desc' }]);\n};\n/**\n * Configures the settings for the export of Grid in Excel ([see example]({% slug excelexport_grid %})).\n */\nvar ExcelComponent = /** @class */ (function () {\n    function ExcelComponent(excelService, localization, zone) {\n        this.localization = localization;\n        this.zone = zone;\n        /**\n         * Specifies the file name of the exported Excel file.\n         * @default \"Export.xlsx\"\n         */\n        this.fileName = 'Export.xlsx';\n        /**\n         * @hidden\n         */\n        this.columns = new QueryList();\n        this.saveSubscription = excelService.saveToExcel.subscribe(this.save.bind(this));\n    }\n    ExcelComponent.prototype.ngOnDestroy = function () {\n        this.saveSubscription.unsubscribe();\n        if (this.dataSubscription) {\n            this.dataSubscription.unsubscribe();\n        }\n    };\n    ExcelComponent.prototype.save = function (component) {\n        var _this = this;\n        var data = (this.fetchData || fetchComponentData)(component);\n        var exportData = function (result) {\n            delete _this.dataSubscription;\n            _this.exportData(component, result);\n        };\n        if (data instanceof Promise) {\n            data.then(exportData);\n        }\n        else if (data instanceof Observable) {\n            this.dataSubscription = data.pipe(take(1)).subscribe(exportData);\n        }\n        else {\n            exportData(data);\n        }\n    };\n    ExcelComponent.prototype.exportData = function (component, result) {\n        var _this = this;\n        var options = workbookOptions({\n            columns: this.columns.length ? this.columns : componentColumns(component),\n            data: result.data,\n            group: result.group,\n            filterable: this.filterable,\n            creator: this.creator,\n            date: this.date,\n            paddingCellOptions: this.paddingCellOptions,\n            headerPaddingCellOptions: this.headerPaddingCellOptions,\n            rtl: this.localization.rtl,\n            collapsible: this.collapsible\n        });\n        var args = new ExcelExportEvent(options);\n        component.excelExport.emit(args);\n        if (!args.isDefaultPrevented()) {\n            this.zone.runOutsideAngular(function () { return _this.saveFile(options); });\n        }\n    };\n    ExcelComponent.prototype.saveFile = function (options) {\n        var _this = this;\n        toDataURL(options).then(function (dataURL) {\n            saveAs(dataURL, _this.fileName, {\n                forceProxy: _this.forceProxy,\n                proxyURL: _this.proxyURL\n            });\n        });\n    };\n    ExcelComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-grid-excel',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    ExcelComponent.ctorParameters = function () { return [\n        { type: ExcelService },\n        { type: LocalizationService },\n        { type: NgZone }\n    ]; };\n    ExcelComponent.propDecorators = {\n        fileName: [{ type: Input }],\n        filterable: [{ type: Input }],\n        creator: [{ type: Input }],\n        date: [{ type: Input }],\n        forceProxy: [{ type: Input }],\n        proxyURL: [{ type: Input }],\n        fetchData: [{ type: Input }],\n        paddingCellOptions: [{ type: Input }],\n        headerPaddingCellOptions: [{ type: Input }],\n        collapsible: [{ type: Input }],\n        columns: [{ type: ContentChildren, args: [ColumnBase, { descendants: true },] }]\n    };\n    return ExcelComponent;\n}());\n\n/**\n * Represents the `export-to-Excel` command of the Grid. You can apply this\n * directive to any `button` element inside a\n * [`ToolbarTemplate`]({% slug api_grid_commandcolumncomponent %}).\n * When the user clicks a button associated with the directive, the\n * [`excelExport`]({% slug api_grid_gridcomponent %}#toc-excelexport) event\n * fires ([see example]({% slug excelexport_grid %})).\n *\n * @example\n * ```html-no-run\n * <kendo-grid>\n *      <ng-template kendoGridToolbarTemplate>\n *          <button kendoGridExcelCommand>Export to PDF</button>\n *      </ng-template>\n *      <kendo-grid-excel fileName=\"Grid.xlsx\">\n *      </kendo-grid-excel>\n * </kendo-grid>\n * ```\n */\nvar ExcelCommandDirective = /** @class */ (function (_super) {\n    __extends(ExcelCommandDirective, _super);\n    function ExcelCommandDirective(excelService, element, renderer, localization, ngZone) {\n        var _this = _super.call(this, element, renderer, null, localization, ngZone) || this;\n        _this.excelService = excelService;\n        _this.ngZone = ngZone;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    ExcelCommandDirective.prototype.onClick = function (e) {\n        e.preventDefault();\n        this.excelService.exportClick.emit();\n    };\n    Object.defineProperty(ExcelCommandDirective.prototype, \"excelClass\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ExcelCommandDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoGridExcelCommand]'\n                },] },\n    ];\n    /** @nocollapse */\n    ExcelCommandDirective.ctorParameters = function () { return [\n        { type: ExcelService },\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: LocalizationService },\n        { type: NgZone }\n    ]; };\n    ExcelCommandDirective.propDecorators = {\n        onClick: [{ type: HostListener, args: ['click', ['$event'],] }],\n        excelClass: [{ type: HostBinding, args: ['class.k-grid-excel',] }]\n    };\n    return ExcelCommandDirective;\n}(Button));\n\nvar declarations$2 = [ExcelComponent, ExcelCommandDirective];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Excel component of the Grid.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Grid and Excel modules\n * import { GridModule, ExcelModule } from '@progress/kendo-angular-grid';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, GridModule, ExcelModule], // import Grid and Excel modules\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nvar ExcelModule = /** @class */ (function () {\n    function ExcelModule() {\n    }\n    ExcelModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [declarations$2],\n                    exports: [declarations$2, ExcelExportModule]\n                },] },\n    ];\n    return ExcelModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ColumnChooserComponent, ColumnListComponent, ColumnMenuChooserComponent, ColumnMenuFilterComponent, ColumnMenuItemBase, ColumnMenuItemContentTemplateDirective, ColumnMenuItemComponent, ColumnMenuLockComponent, ColumnMenuSortComponent, ColumnMenuTemplateDirective, ColumnMenuModule, ColumnMenuService, ColumnHandleDirective, ColumnResizingService, TableDirective, ColumnInfoService, DomEventsService, ExpandStateService, IdService, PreventableEvent, SortService, ChangeNotificationService, ColumnReorderService, DragAndDropModule, DragAndDropService, DragHintService, DraggableColumnDirective, DropCueService, DropTargetDirective, EditingDirectiveBase, RowEditingDirectiveBase, AddCommandDirective, CancelCommandDirective, EditCommandDirective, EditService as EditService$1, LocalDataChangesService, RemoveCommandDirective, SaveCommandDirective, ExcelCommandDirective, BooleanFilterComponent, BooleanFilterCellComponent, FilterCellHostDirective, FilterCellOperatorsComponent, FilterCellWrapperComponent, DateFilterComponent, FilterHostDirective, FilterInputWrapperComponent, FilterInputDirective, FilterRowComponent, DateFilterMenuInputComponent, FilterMenuContainerComponent, FilterMenuHostDirective, FilterMenuInputWrapperComponent, FilterMenuComponent, NumericFilterMenuInputComponent, StringFilterMenuInputComponent, NumericFilterComponent, FilterOperatorBase, SharedFilterModule, StringFilterComponent, GroupHeaderComponent, GroupIndicatorComponent, GroupInfoService, GroupPanelComponent, GroupsService, BrowserSupportService, ResizeService, ResponsiveService, LocalizedMessagesDirective, Messages, FocusGroup, FocusRoot, LogicalCellDirective, LogicalRowDirective, NavigationService, PagerContextService, PagerElementComponent, PDFCommandDirective, PDFTemplateDirective$1 as PDFTemplateDirective, CellComponent, CELL_CONTEXT, EMPTY_CELL_CONTEXT, FieldAccessorPipe, DetailsService, DEFAULT_SCROLLER_FACTORY, SCROLLER_FACTORY_TOKEN, ScrollRequestService, ScrollSyncService, ScrollerService, SelectAllCheckboxDirective, SelectionCheckboxDirective, Selection, SelectionService, GridModule, SharedModule, GridComponent, ColumnBase$1 as ColumnBase, ColumnComponent, CommandColumnComponent, SpanColumnComponent, ColumnGroupComponent, CheckboxColumnComponent, ToolbarComponent, ToolbarTemplateDirective, CellTemplateDirective, HeaderTemplateDirective, FooterTemplateDirective, PagerTemplateDirective, DetailTemplateDirective, DetailExpandEvent, DetailCollapseEvent, GroupHeaderTemplateDirective, GroupHeaderColumnTemplateDirective, GroupFooterTemplateDirective, ResizableContainerDirective, TemplateContextDirective, NoRecordsTemplateDirective, DataBindingDirective, SelectionDirective, FilterService, FilterCellTemplateDirective, FilterCellComponent, StringFilterCellComponent, DateFilterCellComponent, BaseFilterCellComponent, FilterMenuTemplateDirective, NumericFilterMenuComponent, StringFilterMenuComponent, DateFilterMenuComponent, BooleanFilterMenuComponent, BeforeEqFilterOperatorComponent, BeforeFilterOperatorComponent, AfterEqFilterOperatorComponent, AfterFilterOperatorComponent, ContainsFilterOperatorComponent, DoesNotContainFilterOperatorComponent, EndsWithFilterOperatorComponent, EqualFilterOperatorComponent, IsEmptyFilterOperatorComponent, IsNotEmptyFilterOperatorComponent, IsNotNullFilterOperatorComponent, IsNullFilterOperatorComponent, NotEqualFilterOperatorComponent, StartsWithFilterOperatorComponent, NumericFilterCellComponent, AutoCompleteFilterCellComponent, GreaterFilterOperatorComponent, GreaterOrEqualToFilterOperatorComponent, LessOrEqualToFilterOperatorComponent, LessFilterOperatorComponent, PagerPrevButtonsComponent, PagerNextButtonsComponent, PagerNumericButtonsComponent, PagerInputComponent, PagerInfoComponent, PagerPageSizesComponent, RowFilterModule, FilterMenuModule, BodyModule, GroupModule, HeaderModule, FooterModule, PagerModule, TemplateEditingDirective, ReactiveEditingDirective, InCellEditingDirective, EditTemplateDirective, ColGroupComponent, HeaderComponent, ListComponent, FooterComponent, TableBodyComponent, PagerComponent, CustomMessagesComponent, LoadingComponent, PDFModule, PDFComponent, PDFMarginComponent$1 as PDFMarginComponent, PDFService, ExcelModule, ExcelComponent, ExcelService, CellCloseEvent, SuspendService, GroupBindingDirective, slice, count, Skip, ColumnReorderEvent, FocusableDirective, ColumnVisibilityChangeEvent, ColumnMenuComponent, SinglePopupService, PopupCloseEvent };\n"],"names":[],"mappingsqFK,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA2DJ,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;KA2BJ,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;KAoBJ,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAuDJ,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAwDJ,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA2DJ,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAgDJ,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoPH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAwID,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;KAWJ,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAkLF,AAYD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAsQC,AAYD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA+NC,AAYD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA0FC,AAKD;;;;;;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAsEC,AAGD;;;;;;;;;;2GAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAmVJ;;;;;gDAGC;;;;;;;;;;KAUD;;;;;gDAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkSA,AAGA;;;;;;;;;;6GAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8NA,AAGA;;;;;;;;;uEAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwEH,AAGA;;;;;;;gDAEyD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8BzD,AAGA;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+NH;;;;;;;;;;;;;;;;;;;MAmBA,AAGA;;;;;;;;;uEAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAuEJ,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAiED,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6BA;;;;;gDAGA;;;;;;;;;;;;;;;;;;;;;KAqBD;;;;;gDAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6BA;;;;;gDAGA;;;;;;;;;;;;;;;;;;;;;MAqBA;;;;;gDAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAsFC,AAKD;;;;;;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6EA,AAGA;;;;;;;;;uEAIG;;;;;;;;;;;;;;;;;;;;;MAqBH;;;;;gDAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwRA;;;;;gDAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmHA,AAGA;;;;;;;;;;;;;qMAQG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyHH;;;;;gDAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+EA,AAGA;;;;;;;;;6EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkCH;;;;;gDAGA;;;;;;;;;;;;;MAaA;;;;;gDAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiDA;;;;;gDAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwKA,AAKA;;;;;;;;;;;;;;;;;;;;;2FAMG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAqcH;;;;;gukBA,AAGA;;;;;;;;;;;;;;;;;;;;;kCAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8CH,AAGA;;;;;;;gDAEoD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmEpD;;;;;gDAGA;;;;;;;;;;;;;;;;AAao/DA,AAoDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAgmwBA,AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAmDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgKA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6BA,AAKA;;;;;;;;;;;;;2GAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mEAgEH;;;;;;;;;;;;;KAaD,AAWC;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;;;;;;OAqBF,AAYD;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;KAcJ,AAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAgHC,AAMD;;;;;;;;;;;;;;;;;;;;;oBAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0JA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAqCD,AAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmEA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwCA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAuCD,AAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6EA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAsDC,AAMD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8BA,AAMA;;;;;;;;;;;;;;;;;;;;;;;iJAMG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoIH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAgCD,AAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQA;;;;;;;;;;;;;;;;;;;;;MAqBA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;oBAKA;;;;;;;;;;;;;;;;;;OAkBC,AAMD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+DA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6BA,AAKA;;;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoEA,AAGA;;;;;;;;;mEAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsIH,AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoEA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6BA,AAMA;;;;;;;;;;;;;6EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuHH,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAOA;;;;;;;;;;;;;;;KAeD,AAYC;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;KAeJ,AAYC;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;KAeJ,AAYC;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;KAeJ,AAYC;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;KAeJ,AAYC;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;KAeJ,AAYC;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;KAeJ,AAYC;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;KAeJ,AAYC;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;KAeJ,AAYC;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;KAeJ,AAYC;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;KAeJ,AAYC;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;KAeJ,AAYC;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;KAeJ,AAYC;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;KAeJ,AAYC;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;;;;;;;;;MAwBH,AAYA;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;;;;;;;;;MAwBH,AAYA;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;;;;;;;;;MAwBH,AAYA;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;;;;;;;;;MAwBH,AAYA;;;;;;;;;;;;;;;;;;;;;;;;oFAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+CH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6BA,AAKA;;;;;;;;;;;;;4HAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyCH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8GA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgCA,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uJAMG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgCH,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uJAMG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0EH,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA2EA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgEA,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8LA,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoCA;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+DA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyDA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmJA,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuCA,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsHA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAiBA;;;;;;;;;;;;;KAaD;;;;;;;;;;;;gDAMC;;;;;;;;;;;;;;;;;;;;;;;;MAwBA;;;;;;;;;;;;;;;;;;;;;;;gDAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6bA,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA+BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiNA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuEA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8BA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAsJC,AAOD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0DA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMA;;;;;;;;;;KAUD,AAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsDA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmEA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;;;;;;;;KAoBD,AAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmEA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmEA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiCA,AAKA;;;;;;;;;;;;;;;;;;oBAQA;;;;;;;;;;;;;;;;;;;;;MAqBA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0IA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoHA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6CA;;;;;gDAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8EA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA2DD,AAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAyCD,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8EH,AA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAsFC,AAMD;;;;;;;;;;;;;;;;;;;;;;;;;2GAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8HH,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAiGC,AAMD;;;;;;;;;;;;;;;;;;;;;qJAMG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkCH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8BA;;;;;;;;;;;;;;;;;;;;;;;gDAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAmFC,AAYD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAmFC,AAYD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAqEA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiTA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAmCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiKA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA2DA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyEA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyEA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0DA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2CC,AAKD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAOA;;;;;;;;;;;;;;;;;;;;;;;;;;OA0BC,AAMD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQA;;;;;;;;;;;;;;;;;;;MAmBA;;;;;;;;;;;;gDAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAgCC,AAMD;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iGAyDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuCA,AAKA;;;;;;;;;;;;;;;;;;;oBAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4CA,AAKA;;;;;;;;;;;;;;;;;;;oBAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyDA,AAKA;;;;;;;;;;;;;;;;;;;oBAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyQA,AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA+DD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAmBC;;;;;;;;KAQD;;;;;;;;;;0BAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAwDD,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgWH,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA+CC,AAKD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAiDD;;;;;;;;;;;;;;;;gDAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgIA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA+CC,AAKD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAsCD;;;;;;;;;;;;;gDAMC;;;;;;;;;"}