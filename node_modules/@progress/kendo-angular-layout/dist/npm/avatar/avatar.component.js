/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
/**
 * Displays images, icons or initials representing people or other entities.
 */
var AvatarComponent = /** @class */ (function () {
    function AvatarComponent() {
        this.hostClass = true;
        /**
         * Sets the shape for the avatar.
         *
         * Possible values are:
         * * (Default) `square`
         * * `circle`
         * * `rounded`
         *
         */
        this.shape = 'square';
        /**
         * Sets the width of the avatar.
         */
        this.width = '32px';
        /**
         * Sets the height of the avatar.
         */
        this.height = '32px';
    }
    Object.defineProperty(AvatarComponent.prototype, "circleClass", {
        /**
         * @hidden
         */
        get: function () {
            return this.shape === 'circle';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AvatarComponent.prototype, "roundedClass", {
        /**
         * @hidden
         */
        get: function () {
            return this.shape === 'rounded';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AvatarComponent.prototype, "squareClass", {
        /**
         * @hidden
         */
        get: function () {
            return this.shape === 'square';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AvatarComponent.prototype, "avatarWidth", {
        /**
         * @hidden
         */
        get: function () {
            return this.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AvatarComponent.prototype, "avatarHeight", {
        /**
         * @hidden
         */
        get: function () {
            return this.height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AvatarComponent.prototype, "initialsAvatar", {
        /**
         * @hidden
         */
        get: function () {
            return Boolean(this.initials);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AvatarComponent.prototype, "imageAvatar", {
        /**
         * @hidden
         */
        get: function () {
            return Boolean(this.imageSrc);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AvatarComponent.prototype, "iconAvatar", {
        /**
         * @hidden
         */
        get: function () {
            return Boolean(this.icon || this.iconClass);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AvatarComponent.prototype, "imageUrl", {
        /**
         * @hidden
         */
        get: function () {
            return "url(" + this.imageSrc + ")";
        },
        enumerable: true,
        configurable: true
    });
    AvatarComponent.prototype.ngOnInit = function () {
        this.verifyProperties();
    };
    /**
     * @hidden
     */
    AvatarComponent.prototype.iconClasses = function () {
        if (this.icon) {
            return "k-icon k-i-" + this.icon;
        }
        if (this.iconClass) {
            return "" + this.iconClass;
        }
    };
    Object.defineProperty(AvatarComponent.prototype, "customAvatar", {
        /**
         * @hidden
         */
        get: function () {
            return !(this.imageSrc || this.initials || this.icon || this.iconClass);
        },
        enumerable: true,
        configurable: true
    });
    AvatarComponent.prototype.verifyProperties = function () {
        if (!core_1.isDevMode()) {
            return;
        }
        var inputs = [this.icon || this.iconClass, this.imageSrc, this.initials];
        var inputsLength = inputs.filter(function (value) { return value; }).length;
        if (inputsLength > 1) {
            throw new Error("\n                Invalid property configuration given.\n                The kendo-avatar component can accept only one of:\n                icon, imageSrc or initials properties.\n            ");
        }
    };
    AvatarComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'kendo-avatar',
                    template: "\n        <ng-content *ngIf=\"customAvatar\"></ng-content>\n\n        <ng-container *ngIf=\"imageSrc\">\n            <div [style.width]=\"width\" [style.height]=\"height\" [ngStyle]=\"cssStyle\" [style.backgroundImage]=\"imageUrl\"></div>\n        </ng-container>\n\n        <ng-container *ngIf=\"initials\">\n            <span [ngStyle]=\"cssStyle\">{{ initials.substring(0, 2) }}</span>\n        </ng-container>\n\n        <ng-container *ngIf=\"icon || iconClass\">\n            <span [ngStyle]=\"cssStyle\" [ngClass]=\"iconClasses()\"></span>\n        </ng-container>\n    "
                },] },
    ];
    AvatarComponent.propDecorators = {
        hostClass: [{ type: core_1.HostBinding, args: ['class.k-avatar',] }],
        shape: [{ type: core_1.Input }],
        circleClass: [{ type: core_1.HostBinding, args: ['class.k-avatar-circle',] }],
        roundedClass: [{ type: core_1.HostBinding, args: ['class.k-avatar-rounded',] }],
        squareClass: [{ type: core_1.HostBinding, args: ['class.k-avatar-square',] }],
        iconClass: [{ type: core_1.Input }],
        width: [{ type: core_1.Input }],
        avatarWidth: [{ type: core_1.HostBinding, args: ['style.width',] }],
        height: [{ type: core_1.Input }],
        avatarHeight: [{ type: core_1.HostBinding, args: ['style.height',] }],
        initialsAvatar: [{ type: core_1.HostBinding, args: ['class.k-avatar-initials',] }],
        imageAvatar: [{ type: core_1.HostBinding, args: ['class.k-avatar-image',] }],
        iconAvatar: [{ type: core_1.HostBinding, args: ['class.k-avatar-icon',] }],
        cssStyle: [{ type: core_1.Input }],
        initials: [{ type: core_1.Input }],
        icon: [{ type: core_1.Input }],
        imageSrc: [{ type: core_1.Input }]
    };
    return AvatarComponent;
}());
exports.AvatarComponent = AvatarComponent;
