/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, HostBinding, Input, isDevMode } from '@angular/core';
/**
 * Displays images, icons or initials representing people or other entities.
 */
export class AvatarComponent {
    constructor() {
        this.hostClass = true;
        /**
         * Sets the shape for the avatar.
         *
         * Possible values are:
         * * (Default) `square`
         * * `circle`
         * * `rounded`
         *
         */
        this.shape = 'square';
        /**
         * Sets the width of the avatar.
         */
        this.width = '32px';
        /**
         * Sets the height of the avatar.
         */
        this.height = '32px';
    }
    /**
     * @hidden
     */
    get circleClass() {
        return this.shape === 'circle';
    }
    /**
     * @hidden
     */
    get roundedClass() {
        return this.shape === 'rounded';
    }
    /**
     * @hidden
     */
    get squareClass() {
        return this.shape === 'square';
    }
    /**
     * @hidden
     */
    get avatarWidth() {
        return this.width;
    }
    /**
     * @hidden
     */
    get avatarHeight() {
        return this.height;
    }
    /**
     * @hidden
     */
    get initialsAvatar() {
        return Boolean(this.initials);
    }
    /**
     * @hidden
     */
    get imageAvatar() {
        return Boolean(this.imageSrc);
    }
    /**
     * @hidden
     */
    get iconAvatar() {
        return Boolean(this.icon || this.iconClass);
    }
    /**
     * @hidden
     */
    get imageUrl() {
        return `url(${this.imageSrc})`;
    }
    ngOnInit() {
        this.verifyProperties();
    }
    /**
     * @hidden
     */
    iconClasses() {
        if (this.icon) {
            return `k-icon k-i-${this.icon}`;
        }
        if (this.iconClass) {
            return `${this.iconClass}`;
        }
    }
    /**
     * @hidden
     */
    get customAvatar() {
        return !(this.imageSrc || this.initials || this.icon || this.iconClass);
    }
    verifyProperties() {
        if (!isDevMode()) {
            return;
        }
        const inputs = [this.icon || this.iconClass, this.imageSrc, this.initials];
        const inputsLength = inputs.filter((value) => value).length;
        if (inputsLength > 1) {
            throw new Error(`
                Invalid property configuration given.
                The kendo-avatar component can accept only one of:
                icon, imageSrc or initials properties.
            `);
        }
    }
}
AvatarComponent.decorators = [
    { type: Component, args: [{
                selector: 'kendo-avatar',
                template: `
        <ng-content *ngIf="customAvatar"></ng-content>

        <ng-container *ngIf="imageSrc">
            <div [style.width]="width" [style.height]="height" [ngStyle]="cssStyle" [style.backgroundImage]="imageUrl"></div>
        </ng-container>

        <ng-container *ngIf="initials">
            <span [ngStyle]="cssStyle">{{ initials.substring(0, 2) }}</span>
        </ng-container>

        <ng-container *ngIf="icon || iconClass">
            <span [ngStyle]="cssStyle" [ngClass]="iconClasses()"></span>
        </ng-container>
    `
            },] },
];
AvatarComponent.propDecorators = {
    hostClass: [{ type: HostBinding, args: ['class.k-avatar',] }],
    shape: [{ type: Input }],
    circleClass: [{ type: HostBinding, args: ['class.k-avatar-circle',] }],
    roundedClass: [{ type: HostBinding, args: ['class.k-avatar-rounded',] }],
    squareClass: [{ type: HostBinding, args: ['class.k-avatar-square',] }],
    iconClass: [{ type: Input }],
    width: [{ type: Input }],
    avatarWidth: [{ type: HostBinding, args: ['style.width',] }],
    height: [{ type: Input }],
    avatarHeight: [{ type: HostBinding, args: ['style.height',] }],
    initialsAvatar: [{ type: HostBinding, args: ['class.k-avatar-initials',] }],
    imageAvatar: [{ type: HostBinding, args: ['class.k-avatar-image',] }],
    iconAvatar: [{ type: HostBinding, args: ['class.k-avatar-icon',] }],
    cssStyle: [{ type: Input }],
    initials: [{ type: Input }],
    icon: [{ type: Input }],
    imageSrc: [{ type: Input }]
};
