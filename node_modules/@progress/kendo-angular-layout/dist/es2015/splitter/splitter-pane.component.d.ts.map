{"version":3,"file":"splitter-pane.component.d.ts","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-layout/dist/es2015/splitter/splitter-pane.component.d.ts"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ChangeDetectorRef, ElementRef, EventEmitter, Renderer2, AfterViewChecked } from '@angular/core';\nimport { Orientation } from '../common/orientation';\n/**\n * Represents the pane component of the Splitter.\n */\nexport declare class SplitterPaneComponent implements AfterViewChecked {\n    private element;\n    private renderer;\n    private cdr;\n    /**\n     * @hidden\n     */\n    order: number;\n    /**\n     * Sets the initial size of the pane.\n     * Has to be between the `min` and `max` properties.\n     */\n    size: string;\n    /**\n     * Sets the minimum possible size of the pane.\n     */\n    min: string;\n    /**\n     * Sets the maximum possible size of the pane.\n     */\n    max: string;\n    /**\n     * Specifies if the user is allowed to resize the pane and provide space for other panes.\n     */\n    resizable: boolean;\n    /**\n     * Specifies if the user is allowed to hide the pane and provide space for other panes.\n     */\n    collapsible: boolean;\n    /**\n     * Specifies if overflowing content is scrollable or hidden.\n     */\n    scrollable: boolean;\n    /**\n     * Specifies if the pane is initially collapsed.\n     */\n    collapsed: boolean;\n    /**\n     * @hidden\n     */\n    orientation: Orientation;\n    /**\n     * @hidden\n     */\n    containsSplitter: boolean;\n    /**\n     * @hidden\n     */\n    overlayContent: boolean;\n    /**\n     * Fires each time the user resizes the Splitter pane.\n     * The event data contains the new pane size.\n     * Allows a two-way binding of the pane `size` property.\n     */\n    sizeChange: EventEmitter<string>;\n    /**\n     * Fires each time the `collapsed` property changes.\n     * The event data contains the new property state.\n     * Allows a two-way binding of the `collapsed` pane property.\n     */\n    collapsedChange: EventEmitter<boolean>;\n    readonly isHidden: boolean;\n    readonly styleDisplayFlex: boolean;\n    hostClass: boolean;\n    readonly staticPaneClass: boolean;\n    readonly scrollablePaneClass: boolean;\n    readonly fixedSize: boolean;\n    /**\n     * @hidden\n     */\n    forceExpand: boolean;\n    private _size;\n    private _order;\n    constructor(element: ElementRef, renderer: Renderer2, cdr: ChangeDetectorRef);\n    ngAfterViewChecked(): void;\n    /**\n     * @hidden\n     */\n    readonly computedSize: number;\n    /**\n     * @hidden\n     */\n    toggleOverlay(show: boolean): void;\n    /**\n     * @hidden\n     */\n    detectChanges(): void;\n    /**\n     * @hidden\n     */\n    private setOrderStyles;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;"}