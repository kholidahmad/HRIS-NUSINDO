{"version":3,"file":"drawer.component.d.ts","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-layout/dist/es2015/drawer/drawer.component.d.ts"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ElementRef, EventEmitter, OnDestroy } from '@angular/core';\nimport { DrawerMode, DrawerPosition, DrawerAnimation } from './types';\nimport { DrawerTemplateDirective, DrawerItemTemplateDirective, DrawerHeaderTemplateDirective, DrawerFooterTemplateDirective } from './template-directives';\nimport { DrawerSelectEvent } from './events/select-event';\nimport { AnimationBuilder } from '@angular/animations';\nimport { DrawerService } from './drawer.service';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\n/**\n * Represents the [Kendo UI Drawer component for Angular]({% slug overview_drawer %}).\n *\n * @example\n * ```ts-preview\n * _@Component({\n *    selector: 'my-app',\n *    template: `\n *        <kendo-drawer [items]=\"items\">\n *        </kendo-drawer>\n *    `\n * })\n * class AppComponent {\n *    public items: any[] = [{ text: 'Inbox', icon: 'k-i-inbox' }];\n * }\n * ```\n */\nexport declare class DrawerComponent implements OnDestroy {\n    private element;\n    private builder;\n    private localizationService;\n    private drawerService;\n    hostClasses: boolean;\n    readonly startPositionClass: boolean;\n    readonly endPositionClass: boolean;\n    readonly overlayTransofrmStyles: string;\n    readonly flexStyles: number;\n    /**\n     * Specifies the mode in which the Drawer will be displayed.\n     *\n     * The possible values are:\n     * * (Default) `overlay`\n     * * `push`\n     */\n    mode: DrawerMode;\n    /**\n     * Specifies the position of the Drawer\n     * ([see example]({% slug positioning_drawer %})).\n     *\n     * The possible values are:\n     * * (Default) `start`\n     * * `end`\n     */\n    position: DrawerPosition;\n    /**\n     * Enables the mini (compact) view of the Drawer which is displayed when the component is collapsed\n     * ([see example]({% slug expandmodespositions_drawer %}#toc-mini-view)).\n     */\n    mini: boolean;\n    /**\n     * Specifies the state of the Drawer.\n     */\n    expanded: boolean;\n    /**\n     * Defines the width of the Drawer when it is expanded.\n     * Defaults to `240`.\n     */\n    width: number;\n    /**\n     * Defines the width of the Drawer when the mini view is enabled\n     * and the component is collapsed. Defaults to `60`.\n     */\n    miniWidth: number;\n    /**\n     * Specifies if the Drawer will be automatically collapsed when an item\n     * or the overlay is clicked. Defaults to `true`.\n     */\n    autoCollapse: boolean;\n    /**\n     * The collection of items that will be rendered in the Drawer.\n     */\n    items: any[];\n    /**\n     * @hidden\n     */\n    direction: string;\n    /**\n     * Specifies the animation settings of the Drawer.\n     * ([see example]({% slug interaction_drawer %}#toc-toggling-between-states)).\n     *\n     * The possible values are:\n     * * Boolean\n     *    * (Default) `true`\n     *    * `false`\n     * * `DrawerAnimation`\n     *    * (Default) `type?: 'slide'`\n     *    * `duration`&mdash;Accepts a number in milliseconds. Defaults to `300ms`.\n     */\n    animation?: boolean | DrawerAnimation;\n    /**\n     * Fires when the Drawer is expanded and its animation is complete.\n     */\n    expand: EventEmitter<any>;\n    /**\n     * Fires when the Drawer is collapsed and its animation is complete.\n     */\n    collapse: EventEmitter<any>;\n    /**\n     * Fires when a Drawer item is selected. This event is preventable.\n     */\n    select: EventEmitter<DrawerSelectEvent>;\n    /**\n     * Fires when the `expanded` property of the component was updated.\n     * Used to provide a two-way binding for the `expanded` property.\n     */\n    expandedChange: EventEmitter<boolean>;\n    /**\n     * @hidden\n     */\n    drawerTemplate: DrawerTemplateDirective;\n    /**\n     * @hidden\n     */\n    footerTemplate: DrawerFooterTemplateDirective;\n    /**\n     * @hidden\n     */\n    headerTemplate: DrawerHeaderTemplateDirective;\n    /**\n     * @hidden\n     */\n    itemTemplate: DrawerItemTemplateDirective;\n    private animationEnd;\n    private dynamicRTLSubscription;\n    private rtl;\n    private _items;\n    constructor(element: ElementRef, builder: AnimationBuilder, localizationService: LocalizationService, drawerService: DrawerService);\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    readonly minimized: boolean;\n    /**\n     * @hidden\n     */\n    readonly drawerWidth: number;\n    /**\n     * Toggles the visibility of the Drawer.\n     *\n     * @param expanded? - Boolean. Specifies if the Drawer will be expanded or collapsed.\n     */\n    toggle(expanded?: boolean): void;\n    private onAnimationEnd;\n    private setExpanded;\n    private animate;\n    private createPlayer;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiIA;"}