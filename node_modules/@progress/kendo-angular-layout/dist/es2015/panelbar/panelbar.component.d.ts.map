{"version":3,"file":"panelbar.component.d.ts","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-layout/dist/es2015/panelbar/panelbar.component.d.ts"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { AfterViewChecked, ElementRef, EventEmitter, OnChanges, QueryList, SimpleChange, TemplateRef, OnInit, OnDestroy } from '@angular/core';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { PanelBarExpandMode } from './panelbar-expand-mode';\nimport { PanelBarItemComponent } from './panelbar-item.component';\nimport { PanelBarItemModel } from './panelbar-item-model';\nimport { PanelBarService } from \"./panelbar.service\";\nimport { PanelBarItemTemplateDirective } from \"./panelbar-item-template.directive\";\n/**\n * Represents the [Kendo UI PanelBar component for Angular]({% slug overview_panelbar %}).\n */\nexport declare class PanelBarComponent implements AfterViewChecked, OnChanges, OnInit, OnDestroy {\n    private localization;\n    /**\n     * Sets the expand mode of the PanelBar through the `PanelBarExpandMode` enum ([see example]({% slug expandmodes_panelbar %})).\n     *\n     * The available modes are:\n     * - `\"single\"`&mdash;Expands only one item at a time. Expanding an item collapses the item that was previously expanded.\n     * - `\"multiple\"`&mdash;The default mode of the PanelBar.\n     * Expands more than one item at a time. Items can also be toggled.\n     * - `\"full\"`&mdash;Expands only one item at a time.\n     * The expanded area occupies the entire height of the PanelBar. Requires you to set the `height` property.\n     */\n    expandMode: PanelBarExpandMode;\n    /**\n     * Allows the PanelBar to modify the selected state of the items.\n     */\n    selectable: boolean;\n    /**\n     * Sets the animate state of the PanelBar ([see example]({% slug animations_panelbar %})).\n     */\n    animate: boolean;\n    /**\n     * Sets the height of the component when the `\"full\"` expand mode is used.\n     * This option is ignored in the `\"multiple\"` and `\"single\"` expand modes.\n     */\n    height: any;\n    /**\n     * When set to `true`, the PanelBar renders the content of all items and they are persisted in the DOM\n     * ([see example]({% slug templates_panelbar %}#toc-collections)).\n     * By default, this option is set to `false`.\n     */\n    keepItemContent: boolean;\n    /**\n     * Sets the items of the PanelBar as an array of `PanelBarItemModel` instances\n     * ([see example]({% slug items_panelbar %})).\n     */\n    items: Array<PanelBarItemModel>;\n    /**\n     * Fires each time the user interacts with a PanelBar item\n     * ([see example]({% slug routing_panelbar %}#toc-getting-the-selected-item)).\n     * The event data contains all items that are modified.\n     */\n    stateChange: EventEmitter<any>;\n    tabIndex: number;\n    role: string;\n    activeDescendant: string;\n    readonly hostHeight: string;\n    readonly overflow: string;\n    readonly dir: string;\n    template: PanelBarItemTemplateDirective;\n    contentItems: QueryList<PanelBarItemComponent>;\n    contentChildItems: QueryList<PanelBarItemComponent>;\n    viewChildItems: QueryList<PanelBarItemComponent>;\n    private localizationChangeSubscription;\n    private allItems;\n    private childrenItems;\n    private isViewInit;\n    private focused;\n    private _items;\n    private _keepItemContent;\n    private elementRef;\n    private eventService;\n    private keyBindings;\n    constructor(elementRef: ElementRef, eventService: PanelBarService, localization: LocalizationService);\n    /**\n     * @hidden\n     */\n    invertKeys(original: any, inverted: any): any;\n    readonly computedKeys: Object;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    ngAfterViewChecked(): void;\n    ngOnChanges(changes: {\n        [propertyName: string]: SimpleChange;\n    }): void;\n    readonly templateRef: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    onComponentClick(event: any): void;\n    /**\n     * @hidden\n     */\n    onComponentFocus(): void;\n    /**\n     * @hidden\n     */\n    onComponentBlur(): void;\n    /**\n     * @hidden\n     */\n    onComponentKeyDown(event: any): void;\n    private readonly viewItems;\n    private validateConfiguration;\n    private updateChildrenHeight;\n    private onItemAction;\n    readonly hostClasses: boolean;\n    private isVisible;\n    private getVisibleParent;\n    private focusItem;\n    private moveFocus;\n    private focusLastItem;\n    private focusFirstItem;\n    private focusNextItem;\n    private focusPreviousItem;\n    private expandItem;\n    private collapseItem;\n    private selectFocusedItem;\n    private visibleItems;\n    private flatVisibleItems;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;"}