{"version":3,"file":"panelbar-item.component.d.ts","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-layout/dist/es2015/panelbar/panelbar-item.component.d.ts"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { TemplateRef, QueryList, AfterContentChecked, AfterViewChecked, OnDestroy, ElementRef } from '@angular/core';\nimport { PanelBarService } from \"./panelbar.service\";\nimport { PanelBarContentDirective } from \"./panelbar-content.directive\";\nimport { PanelBarItemTitleDirective } from \"./panelbar-item-title.directive\";\nimport { PanelBarItemModel } from './panelbar-item-model';\nimport { Subscription } from 'rxjs';\n/**\n * Represents the items of the PanelBar.\n */\nexport declare class PanelBarItemComponent implements AfterContentChecked, AfterViewChecked, OnDestroy {\n    parent: PanelBarItemComponent;\n    private eventService;\n    private element;\n    /**\n     * Sets the title of the PanelBar item ([see example]({% slug items_panelbar %}#toc-titles)).\n     */\n    title: string;\n    /**\n     * Allows the component to set the `\"id\"` property to each item.\n     * Used to set the `id` attributes of the nested elements and to enable the WAI-ARIA support.\n     */\n    id: string;\n    /**\n     * Defines the icon that will be rendered next to the title ([see example]({% slug items_panelbar %}#toc-title-icons)).\n     */\n    icon: string;\n    /**\n     * Defines  the icon that will be rendered next to the title by using a custom CSS class\n     * ([see example]({% slug items_panelbar %}#toc-title-icons)).\n     */\n    iconClass: string;\n    /**\n     * Defines the location of the image that will be displayed next to the title\n     * ([see example]({% slug items_panelbar %}#toc-title-images)).\n     */\n    imageUrl: string;\n    /**\n     * When set to `true`, disables a PanelBar item ([see example]({% slug items_panelbar %}#toc-disabled-state)).\n     */\n    disabled: boolean;\n    /**\n     * When set to `true`, expands the PanelBar item ([see example]({% slug items_panelbar %}#toc-expanded-state)).\n     */\n    expanded: boolean;\n    /**\n     * Sets the selected state of a PanelBar item ([see example]({% slug items_panelbar %}#toc-selected-state)).\n     */\n    selected: boolean;\n    /**\n     * Sets the content of the PanelBar item.\n     * By design, it is used when the\n     * [`items`]({% slug api_layout_panelbarcomponent %}#toc-items)\n     * property of the PanelBar is set.\n     */\n    content: any;\n    /**\n     * @hidden\n     */\n    items: Array<PanelBarItemModel>;\n    /**\n     * @hidden\n     */\n    template: TemplateRef<any>;\n    header: ElementRef;\n    contentWrapper: ElementRef;\n    contentHeight: string;\n    contentOverflow: string;\n    keepContent: boolean;\n    childrenItems: Array<PanelBarItemComponent>;\n    hasChildItems: boolean;\n    hasItems: boolean;\n    hasContent: boolean;\n    state: string;\n    readonly animate: boolean;\n    role: string;\n    titleAttribute: string;\n    readonly kItemClass: boolean;\n    readonly kStateDefaultClass: boolean;\n    readonly kStateDisabledClass: boolean;\n    readonly kStateExpandedClass: boolean;\n    readonly itemId: string;\n    readonly ariaExpanded: boolean;\n    readonly ariaSelected: boolean;\n    readonly ariaDisabled: boolean;\n    /**\n     * @hidden\n     */\n    readonly titleTemplate: TemplateRef<any>;\n    viewChildItems: QueryList<PanelBarItemComponent>;\n    contentItems: QueryList<PanelBarItemComponent>;\n    contentTemplate: QueryList<PanelBarContentDirective>;\n    titleTemplates: QueryList<PanelBarItemTitleDirective>;\n    focused: boolean;\n    wrapperFocused: boolean;\n    protected subscriptions: Subscription;\n    private _expanded;\n    constructor(parent: PanelBarItemComponent, eventService: PanelBarService, element: ElementRef);\n    /**\n     * @hidden\n     */\n    headerHeight(): number;\n    /**\n     * @hidden\n     */\n    ngAfterContentChecked(): void;\n    /**\n     * @hidden\n     */\n    ngAfterViewChecked(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    onItemAction(): void;\n    /**\n     * @hidden\n     */\n    onItemClick(e: any): void;\n    /**\n     * @hidden\n     */\n    readonly iconClasses: any;\n    /**\n     * @hidden\n     */\n    serialize(): PanelBarItemModel;\n    /**\n     * @hidden\n     */\n    subTreeViewItems(): Array<PanelBarItemComponent>;\n    /**\n     * @hidden\n     */\n    validateConfiguration(): void;\n    /**\n     * @hidden\n     */\n    toggleAnimationState(value: boolean): void;\n    /**\n     * @hidden\n     */\n    toggleExpandedChildAnimations(value: boolean): void;\n    private onWrapperFocusChange;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyIA;"}