{"version":3,"file":"index.js","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-layout/dist/fesm5/index.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { Injectable, Directive, TemplateRef, Optional, isDevMode, Component, SkipSelf, Host, ElementRef, Input, ViewChild, HostBinding, ViewChildren, ContentChildren, Output, ContentChild, HostListener, EventEmitter, Renderer2, ChangeDetectorRef, NgZone, Inject, QueryList, NgModule, ViewEncapsulation } from '@angular/core';\nimport { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\nimport { Keys, hasObservers, DraggableDirective, DraggableModule } from '@progress/kendo-angular-common';\nimport { trigger, state, style, transition, animate, AUTO_STYLE, AnimationBuilder } from '@angular/animations';\nimport { Subject, BehaviorSubject, Subscription, of } from 'rxjs';\nimport { __extends, __assign } from 'tslib';\nimport { take, tap, filter, switchMap, delay, takeUntil, map } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Represents the expand modes of the PanelBar.\n * By default, the expand mode is set to `multiple`.\n */\nvar PanelBarExpandMode;\n(function (PanelBarExpandMode) {\n    /**\n     * Allows you to expand only one item at a time.\n     * When you expand an item, the item that was previously expanded is coll.\n     */\n    PanelBarExpandMode[PanelBarExpandMode[\"Single\"] = 0] = \"Single\";\n    /**\n     * Allows you to expand only one item at a time and requires you to set the `height` property.\n     * The expanded area occupies the entire height of the PanelBar.\n     */\n    PanelBarExpandMode[PanelBarExpandMode[\"Full\"] = 1] = \"Full\";\n    /**\n     * The default mode of the PanelBar.\n     * Allows you to expand more than one item at a time. Items can also be toggled.\n     */\n    PanelBarExpandMode[PanelBarExpandMode[\"Multiple\"] = 2] = \"Multiple\";\n    /**\n     * By default, the expand mode is set to `multiple`.\n     */\n    PanelBarExpandMode[PanelBarExpandMode[\"Default\"] = 2] = \"Default\";\n})(PanelBarExpandMode || (PanelBarExpandMode = {}));\n\n/**\n * @hidden\n */\nvar nextPanelbarId = 0;\n/**\n * @hidden\n */\nvar PanelBarService = /** @class */ (function () {\n    function PanelBarService() {\n        this.parentSource = new Subject();\n        this.keepContentSource = new BehaviorSubject(false);\n        this.childSource = new Subject();\n        this.parent$ = this.parentSource.asObservable();\n        this.children$ = this.childSource.asObservable();\n        this.keepContent$ = this.keepContentSource.asObservable();\n        this.pbId = nextPanelbarId++;\n    }\n    PanelBarService.prototype.onKeepContent = function (keepContent) {\n        this.keepContentSource.next(keepContent);\n    };\n    PanelBarService.prototype.onSelect = function (event) {\n        this.childSource.next(event);\n    };\n    PanelBarService.prototype.onFocus = function () {\n        this.parentSource.next(true);\n    };\n    PanelBarService.prototype.onBlur = function () {\n        this.parentSource.next(false);\n    };\n    PanelBarService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    PanelBarService.ctorParameters = function () { return []; };\n    return PanelBarService;\n}());\n\n/**\n * Represents the content template of the declaratively initialized PanelBar items.\n * The content can be expanded or collapsed through the item.\n */\nvar PanelBarContentDirective = /** @class */ (function () {\n    function PanelBarContentDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    PanelBarContentDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: \"[kendoPanelBarContent]\"\n                },] },\n    ];\n    /** @nocollapse */\n    PanelBarContentDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return PanelBarContentDirective;\n}());\n\n/**\n * Represents the template directive of the PanelBar which helps to customize the item title\n * ([more information and example]({% slug templates_panelbar %}#toc-customizing-the-appearance-of-the-title)).\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *        <kendo-panelbar>\n *            <kendo-panelbar-item [title]=\"'Paris'\" [expanded]=\"true\">\n *                <ng-template kendoPanelBarItemTitle>\n *                    Additional Content\n *                </ng-template>\n *            </kendo-panelbar-item>\n *        </kendo-panelbar>\n *     `\n * })\n *\n * class AppComponent {}\n *\n * ```\n */\nvar PanelBarItemTitleDirective = /** @class */ (function () {\n    function PanelBarItemTitleDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    PanelBarItemTitleDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoPanelBarItemTitle]'\n                },] },\n    ];\n    /** @nocollapse */\n    PanelBarItemTitleDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return PanelBarItemTitleDirective;\n}());\n\n/**\n * @hidden\n */\nvar ITEM_INDEX = 'data-kendo-drawer-index';\n\n/**\n * @hidden\n */\nvar isPresent = function (value) { return value !== null && value !== undefined; };\n\nvar focusableRegex = /^(?:a|input|select|option|textarea|button|object)$/i;\n/**\n * @hidden\n */\nvar isFocusable = function (element) {\n    if (element.tagName) {\n        var tagName = element.tagName.toLowerCase();\n        var tabIndex = element.getAttribute('tabIndex');\n        var skipTab = tabIndex === '-1';\n        var focusable = tabIndex !== null && !skipTab;\n        if (focusableRegex.test(tagName)) {\n            focusable = !element.disabled && !skipTab;\n        }\n        return focusable;\n    }\n    return false;\n};\n/**\n * @hidden\n */\nvar closestInScope = function (target, predicate, scope) {\n    while (target && target !== scope && !predicate(target)) {\n        target = target.parentNode;\n    }\n    if (target !== scope) {\n        return target;\n    }\n};\n/**\n * @hidden\n */\nvar itemIndex = function (item) { return +item.getAttribute(ITEM_INDEX); };\n/**\n *\n * @hidden\n */\nvar hasItemIndex = function (item) { return isPresent(item.getAttribute(ITEM_INDEX)); };\n/**\n * @hidden\n */\nvar closestItem = function (target, scope) { return closestInScope(target, hasItemIndex, scope); };\n\n/**\n * @hidden\n */\nvar nextId = 0;\n/**\n * Represents the items of the PanelBar.\n */\nvar PanelBarItemComponent = /** @class */ (function () {\n    function PanelBarItemComponent(parent, eventService, element) {\n        var _this = this;\n        this.parent = parent;\n        this.eventService = eventService;\n        this.element = element;\n        /**\n         * Sets the title of the PanelBar item ([see example]({% slug items_panelbar %}#toc-titles)).\n         */\n        this.title = 'Untitled';\n        /**\n         * Allows the component to set the `\"id\"` property to each item.\n         * Used to set the `id` attributes of the nested elements and to enable the WAI-ARIA support.\n         */\n        this.id = \"default-\" + nextId++;\n        /**\n         * Defines the icon that will be rendered next to the title ([see example]({% slug items_panelbar %}#toc-title-icons)).\n         */\n        this.icon = '';\n        /**\n         * Defines  the icon that will be rendered next to the title by using a custom CSS class\n         * ([see example]({% slug items_panelbar %}#toc-title-icons)).\n         */\n        this.iconClass = '';\n        /**\n         * Defines the location of the image that will be displayed next to the title\n         * ([see example]({% slug items_panelbar %}#toc-title-images)).\n         */\n        this.imageUrl = '';\n        /**\n         * When set to `true`, disables a PanelBar item ([see example]({% slug items_panelbar %}#toc-disabled-state)).\n         */\n        this.disabled = false;\n        /**\n         * Sets the selected state of a PanelBar item ([see example]({% slug items_panelbar %}#toc-selected-state)).\n         */\n        this.selected = false;\n        this.keepContent = false;\n        this.hasChildItems = false;\n        this.hasItems = false;\n        this.hasContent = false;\n        this.state = \"inactive\";\n        this.role = \"treeitem\";\n        this.titleAttribute = null; // tslint:disable-line\n        this.focused = false;\n        this.wrapperFocused = false;\n        this.subscriptions = new Subscription(function () { });\n        this._expanded = false;\n        this.subscriptions.add(eventService.parent$.subscribe(function (focused) { return _this.onWrapperFocusChange(focused); }));\n        this.subscriptions.add(eventService.keepContent$.subscribe(function (keepContent) { return _this.keepContent = keepContent; }));\n        this.wrapperFocused = parent ? parent.focused : false;\n    }\n    Object.defineProperty(PanelBarItemComponent.prototype, \"expanded\", {\n        get: function () {\n            return this._expanded;\n        },\n        /**\n         * When set to `true`, expands the PanelBar item ([see example]({% slug items_panelbar %}#toc-expanded-state)).\n         */\n        set: function (value) {\n            var activeState = this.animate ? \"active\" : \"activeWithoutAnimation\";\n            this.state = value ? activeState : \"inactive\";\n            if (!this.keepContent) {\n                this.toggleExpandedChildAnimations(value);\n            }\n            this._expanded = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PanelBarItemComponent.prototype, \"animate\", {\n        get: function () {\n            return this.eventService.animate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PanelBarItemComponent.prototype, \"kItemClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PanelBarItemComponent.prototype, \"kStateDefaultClass\", {\n        get: function () {\n            return !this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PanelBarItemComponent.prototype, \"kStateDisabledClass\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PanelBarItemComponent.prototype, \"kStateExpandedClass\", {\n        get: function () {\n            return !this.disabled && this.expanded && (this.hasChildItems || this.hasContent);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PanelBarItemComponent.prototype, \"itemId\", {\n        get: function () {\n            return 'k-panelbar-' + this.eventService.pbId + '-item-' + this.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PanelBarItemComponent.prototype, \"ariaExpanded\", {\n        get: function () {\n            return (this.hasChildItems || this.hasContent) ? !this.disabled && this.expanded : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PanelBarItemComponent.prototype, \"ariaSelected\", {\n        get: function () {\n            return !this.disabled && this.selected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PanelBarItemComponent.prototype, \"ariaDisabled\", {\n        get: function () {\n            return this.disabled ? true : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PanelBarItemComponent.prototype, \"titleTemplate\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.titleTemplates.length > 0 ? this.titleTemplates.toArray()[0].templateRef : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    PanelBarItemComponent.prototype.headerHeight = function () {\n        return this.element.nativeElement.offsetHeight - (this.contentWrapper ? this.contentWrapper.nativeElement.offsetHeight : 0);\n    };\n    /**\n     * @hidden\n     */\n    PanelBarItemComponent.prototype.ngAfterContentChecked = function () {\n        this.hasItems = this.items && this.items.filter(function (item) { return !item.hidden; }).length > 0;\n        this.hasChildItems = this.contentItems.length > 1 || this.hasItems;\n        this.hasContent = (this.contentTemplate !== undefined && this.contentTemplate.length > 0) ||\n            this.content !== undefined;\n        this.validateConfiguration();\n    };\n    /**\n     * @hidden\n     */\n    PanelBarItemComponent.prototype.ngAfterViewChecked = function () {\n        var _this = this;\n        if (this.items) {\n            this.childrenItems = this.viewChildItems.toArray();\n        }\n        else {\n            this.childrenItems = this.contentItems.filter(function (item) { return item !== _this; });\n        }\n    };\n    /**\n     * @hidden\n     */\n    PanelBarItemComponent.prototype.ngOnDestroy = function () {\n        this.subscriptions.unsubscribe();\n    };\n    /**\n     * @hidden\n     */\n    PanelBarItemComponent.prototype.onItemAction = function () {\n        if (!this.disabled) {\n            this.eventService.onSelect(this);\n        }\n    };\n    /**\n     * @hidden\n     */\n    PanelBarItemComponent.prototype.onItemClick = function (e) {\n        if (!isFocusable(e.target)) {\n            this.onItemAction();\n        }\n    };\n    Object.defineProperty(PanelBarItemComponent.prototype, \"iconClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var _a;\n            var icon = this.icon ? 'k-i-' + this.icon : null;\n            return _a = {},\n                _a[icon || this.iconClass] = true,\n                _a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    PanelBarItemComponent.prototype.serialize = function () {\n        return {\n            content: this.content,\n            disabled: this.disabled,\n            expanded: this.expanded,\n            focused: this.focused,\n            icon: this.icon,\n            iconClass: this.iconClass,\n            id: this.id,\n            imageUrl: this.imageUrl,\n            selected: this.selected,\n            title: this.title\n        };\n    };\n    /**\n     * @hidden\n     */\n    PanelBarItemComponent.prototype.subTreeViewItems = function () {\n        var subTree = [];\n        this.viewChildItems.forEach(function (item) {\n            subTree = subTree.concat(item.subTreeViewItems());\n            subTree.push(item);\n        });\n        return subTree;\n    };\n    /**\n     * @hidden\n     */\n    PanelBarItemComponent.prototype.validateConfiguration = function () {\n        if (isDevMode()) {\n            if (this.content && (this.contentTemplate !== undefined && this.contentTemplate.length > 0)) {\n                throw new Error(\"Invalid configuration: mixed template components and component property.\");\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    PanelBarItemComponent.prototype.toggleAnimationState = function (value) {\n        if (!this.animate) {\n            return;\n        }\n        this.state = value ? 'active' : 'activeWithoutAnimation';\n    };\n    /**\n     * @hidden\n     */\n    PanelBarItemComponent.prototype.toggleExpandedChildAnimations = function (value) {\n        if (this.childrenItems) {\n            this.childrenItems.forEach(function (child) {\n                if (child.expanded) {\n                    child.toggleAnimationState(value);\n                    child.toggleExpandedChildAnimations(value);\n                }\n            });\n        }\n    };\n    PanelBarItemComponent.prototype.onWrapperFocusChange = function (focused) {\n        this.wrapperFocused = focused;\n    };\n    PanelBarItemComponent.decorators = [\n        { type: Component, args: [{\n                    animations: [\n                        trigger('toggle', [\n                            state('inactive', style({ display: 'none' })),\n                            transition('* => active', [\n                                style({ overflow: 'hidden', display: 'block', height: 0 }),\n                                animate(200, style({ height: AUTO_STYLE }))\n                            ]),\n                            transition('active => *', [\n                                style({ overflow: 'hidden', height: '*' }),\n                                animate(200, style({ height: 0, display: 'none' }))\n                            ])\n                        ])\n                    ],\n                    exportAs: 'kendoPanelbarItem',\n                    selector: \"kendo-panelbar-item\",\n                    template: \"<span\\n                #header\\n                [class.k-link]=\\\"true\\\"\\n                [class.k-header]=\\\"!parent\\\"\\n                [class.k-state-selected]=\\\"!disabled && selected\\\"\\n                [class.k-state-focused]=\\\"!disabled && focused && wrapperFocused\\\"\\n                (click)=\\\"onItemClick($event)\\\">\\n            <span\\n                *ngIf=\\\"icon || iconClass\\\"\\n                class=\\\"k-icon\\\"\\n                [ngClass]=\\\"iconClasses\\\">\\n            </span>\\n            <img\\n                *ngIf=\\\"imageUrl\\\"\\n                class=\\\"k-image\\\"\\n                [src]=\\\"imageUrl\\\"\\n                alt=\\\"\\\">\\n            {{title}}\\n            <ng-template [ngTemplateOutlet]=\\\"titleTemplate\\\"></ng-template>\\n            <span *ngIf=\\\"hasChildItems || hasContent\\\"\\n                [class.k-icon]=\\\"true\\\"\\n                [class.k-i-arrow-n]=\\\"expanded\\\"\\n                [class.k-panelbar-collapse]=\\\"expanded\\\"\\n                [class.k-i-arrow-s]=\\\"!expanded\\\"\\n                [class.k-panelbar-expand]=\\\"!expanded\\\">\\n            </span>\\n        </span>\\n        <div #contentWrapper\\n            *ngIf=\\\"keepContent || (!disabled && expanded && (hasChildItems || hasContent))\\\"\\n            [@toggle]=\\\"state\\\"\\n            [attr.role]=\\\"'group'\\\"\\n            [attr.aria-hidden]=\\\"!disabled && !expanded\\\">\\n            <div\\n                *ngIf=\\\"hasChildItems && !items?.length\\\"\\n                [style.overflow]=\\\"contentOverflow\\\"\\n                [style.height]=\\\"contentHeight\\\"\\n                class=\\\"k-panel k-group\\\">\\n                    <ng-content select=\\\"kendo-panelbar-item\\\"></ng-content>\\n            </div>\\n            <div\\n                *ngIf=\\\"hasContent && !content\\\"\\n                [style.overflow]=\\\"contentOverflow\\\"\\n                [style.height]=\\\"contentHeight\\\"\\n                class=\\\"k-content\\\">\\n                <ng-template\\n                    [ngTemplateOutlet]=\\\"contentTemplate.first.templateRef\\\"\\n                    [ngTemplateOutletContext]=\\\"{\\n                        $implicit: {\\n                            title: title,\\n                            id: id,\\n                            icon: icon,\\n                            imageUrl: imageUrl,\\n                            disabled: disabled,\\n                            content: content\\n                        }\\n                    }\\\">\\n                </ng-template>\\n            </div>\\n            <div *ngIf=\\\"hasItems\\\"\\n                [style.overflow]=\\\"contentOverflow\\\"\\n                [style.height]=\\\"contentHeight\\\"\\n                class=\\\"k-panel k-group\\\">\\n                <ng-container *ngFor=\\\"let item of items\\\">\\n                    <kendo-panelbar-item *ngIf=\\\"!item.hidden\\\"\\n                        [title]=\\\"item.title\\\"\\n                        [id]=\\\"item.id\\\"\\n                        [icon]=\\\"item.icon\\\"\\n                        [iconClass]=\\\"item.iconClass\\\"\\n                        [imageUrl]=\\\"item.imageUrl\\\"\\n                        [selected]=\\\"!!item.selected\\\"\\n                        [expanded]=\\\"!!item.expanded\\\"\\n                        [disabled]=\\\"!!item.disabled\\\"\\n                        [template]=\\\"template\\\"\\n                        [items]=\\\"item.children\\\"\\n                        [content]=\\\"item.content\\\">\\n                    </kendo-panelbar-item>\\n                </ng-container>\\n            </div>\\n            <div\\n                *ngIf=\\\"content\\\"\\n                [style.overflow]=\\\"contentOverflow\\\"\\n                [style.height]=\\\"contentHeight\\\"\\n                class=\\\"k-content\\\">\\n                <ng-template\\n                    [ngTemplateOutlet]=\\\"template\\\"\\n                    [ngTemplateOutletContext]=\\\"{\\n                        $implicit: {\\n                            title: title,\\n                            id: id,\\n                            icon: icon,\\n                            imageUrl: imageUrl,\\n                            disabled: disabled,\\n                            content: content\\n                        }\\n                    }\\\">\\n                </ng-template>\\n                <ng-template [ngIf]=\\\"!template\\\">{{content}}</ng-template>\\n            </div>\\n        </div>\"\n                },] },\n    ];\n    /** @nocollapse */\n    PanelBarItemComponent.ctorParameters = function () { return [\n        { type: PanelBarItemComponent, decorators: [{ type: SkipSelf }, { type: Host }, { type: Optional }] },\n        { type: PanelBarService },\n        { type: ElementRef }\n    ]; };\n    PanelBarItemComponent.propDecorators = {\n        title: [{ type: Input }],\n        id: [{ type: Input }],\n        icon: [{ type: Input }],\n        iconClass: [{ type: Input }],\n        imageUrl: [{ type: Input }],\n        disabled: [{ type: Input }],\n        expanded: [{ type: Input }],\n        selected: [{ type: Input }],\n        content: [{ type: Input }],\n        items: [{ type: Input }],\n        template: [{ type: Input }],\n        header: [{ type: ViewChild, args: ['header', {},] }],\n        contentWrapper: [{ type: ViewChild, args: ['contentWrapper', {},] }],\n        role: [{ type: HostBinding, args: ['attr.role',] }],\n        titleAttribute: [{ type: HostBinding, args: ['attr.title',] }],\n        kItemClass: [{ type: HostBinding, args: ['class.k-item',] }],\n        kStateDefaultClass: [{ type: HostBinding, args: ['class.k-state-default',] }],\n        kStateDisabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }],\n        kStateExpandedClass: [{ type: HostBinding, args: ['class.k-state-expanded',] }],\n        itemId: [{ type: HostBinding, args: ['id',] }],\n        ariaExpanded: [{ type: HostBinding, args: ['attr.aria-expanded',] }],\n        ariaSelected: [{ type: HostBinding, args: ['attr.aria-selected',] }],\n        ariaDisabled: [{ type: HostBinding, args: ['attr.aria-disabled',] }],\n        viewChildItems: [{ type: ViewChildren, args: [PanelBarItemComponent,] }],\n        contentItems: [{ type: ContentChildren, args: [PanelBarItemComponent,] }],\n        contentTemplate: [{ type: ContentChildren, args: [PanelBarContentDirective, { descendants: false },] }],\n        titleTemplates: [{ type: ContentChildren, args: [PanelBarItemTitleDirective, { descendants: false },] }]\n    };\n    return PanelBarItemComponent;\n}());\n\n/**\n * Represents the template directive of the PanelBar which helps to customize the item content.\n */\nvar PanelBarItemTemplateDirective = /** @class */ (function () {\n    function PanelBarItemTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    PanelBarItemTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoPanelBarItemTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    PanelBarItemTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return PanelBarItemTemplateDirective;\n}());\n\nvar nextId$1 = 0;\nvar parsePanelBarItems = function (data) {\n    return data.map(function (item) {\n        if (!item.id) {\n            item.id = \"default-\" + nextId$1++;\n        }\n        if (item.children) {\n            item.children = parsePanelBarItems(item.children);\n        }\n        return item;\n    });\n};\nvar util = {\n    parsePanelBarItems: parsePanelBarItems\n};\n\n/**\n * Represents the [Kendo UI PanelBar component for Angular]({% slug overview_panelbar %}).\n */\nvar PanelBarComponent = /** @class */ (function () {\n    function PanelBarComponent(elementRef, eventService, localization) {\n        var _this = this;\n        this.localization = localization;\n        /**\n         * Sets the expand mode of the PanelBar through the `PanelBarExpandMode` enum ([see example]({% slug expandmodes_panelbar %})).\n         *\n         * The available modes are:\n         * - `\"single\"`&mdash;Expands only one item at a time. Expanding an item collapses the item that was previously expanded.\n         * - `\"multiple\"`&mdash;The default mode of the PanelBar.\n         * Expands more than one item at a time. Items can also be toggled.\n         * - `\"full\"`&mdash;Expands only one item at a time.\n         * The expanded area occupies the entire height of the PanelBar. Requires you to set the `height` property.\n         */\n        this.expandMode = PanelBarExpandMode.Default;\n        /**\n         * Allows the PanelBar to modify the selected state of the items.\n         */\n        this.selectable = true;\n        /**\n         * Sets the animate state of the PanelBar ([see example]({% slug animations_panelbar %})).\n         */\n        this.animate = true;\n        /**\n         * Sets the height of the component when the `\"full\"` expand mode is used.\n         * This option is ignored in the `\"multiple\"` and `\"single\"` expand modes.\n         */\n        this.height = \"400px\";\n        /**\n         * Fires each time the user interacts with a PanelBar item\n         * ([see example]({% slug routing_panelbar %}#toc-getting-the-selected-item)).\n         * The event data contains all items that are modified.\n         */\n        this.stateChange = new EventEmitter();\n        this.tabIndex = 0;\n        this.role = \"tree\";\n        this.activeDescendant = \"\";\n        this.isViewInit = true;\n        this.focused = false;\n        this._keepItemContent = false;\n        this.updateChildrenHeight = function () {\n            var childrenHeight = 0;\n            var panelbarHeight = _this.elementRef.nativeElement.offsetHeight;\n            var contentOverflow = _this.expandMode === PanelBarExpandMode.Full ? 'auto' : 'visible';\n            _this.childrenItems.forEach(function (item) {\n                childrenHeight += item.headerHeight();\n            });\n            _this.childrenItems.forEach(function (item) {\n                item.contentHeight = PanelBarExpandMode.Full === _this.expandMode ? (panelbarHeight - childrenHeight) + \"px\" : 'auto';\n                item.contentOverflow = contentOverflow;\n            });\n        };\n        this.keyBindings = this.computedKeys;\n        this.elementRef = elementRef;\n        this.eventService = eventService;\n        this.eventService.children$.subscribe(function (event) { return _this.onItemAction(event); });\n    }\n    Object.defineProperty(PanelBarComponent.prototype, \"keepItemContent\", {\n        /**\n         * When set to `true`, the PanelBar renders the content of all items and they are persisted in the DOM\n         * ([see example]({% slug templates_panelbar %}#toc-collections)).\n         * By default, this option is set to `false`.\n         */\n        get: function () {\n            return this._keepItemContent;\n        },\n        set: function (keepItemContent) {\n            this._keepItemContent = keepItemContent;\n            this.eventService.onKeepContent(keepItemContent);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PanelBarComponent.prototype, \"items\", {\n        get: function () {\n            return this._items;\n        },\n        /**\n         * Sets the items of the PanelBar as an array of `PanelBarItemModel` instances\n         * ([see example]({% slug items_panelbar %})).\n         */\n        set: function (data) {\n            if (data) {\n                this._items = util.parsePanelBarItems(data);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PanelBarComponent.prototype, \"hostHeight\", {\n        get: function () {\n            return this.expandMode === PanelBarExpandMode.Full ? this.height : 'auto';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PanelBarComponent.prototype, \"overflow\", {\n        get: function () {\n            return this.expandMode === PanelBarExpandMode.Full ? \"hidden\" : \"visible\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PanelBarComponent.prototype, \"dir\", {\n        get: function () {\n            return this.localization.rtl ? 'rtl' : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    PanelBarComponent.prototype.invertKeys = function (original, inverted) {\n        return this.localization.rtl ? inverted : original;\n    };\n    Object.defineProperty(PanelBarComponent.prototype, \"computedKeys\", {\n        get: function () {\n            var _this = this;\n            var _a;\n            return _a = {},\n                _a[Keys.Space] = function () { return _this.selectFocusedItem(); },\n                _a[Keys.Enter] = function () { return _this.selectFocusedItem(); },\n                _a[Keys.ArrowUp] = function () { return _this.focusPreviousItem(); },\n                _a[this.invertKeys(Keys.ArrowLeft, Keys.ArrowRight)] = function () { return _this.collapseItem(); },\n                _a[Keys.ArrowDown] = function () { return _this.focusNextItem(); },\n                _a[this.invertKeys(Keys.ArrowRight, Keys.ArrowLeft)] = function () { return _this.expandItem(); },\n                _a[Keys.End] = function () { return _this.focusLastItem(); },\n                _a[Keys.Home] = function () { return _this.focusFirstItem(); },\n                _a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PanelBarComponent.prototype.ngOnDestroy = function () {\n        if (this.localizationChangeSubscription) {\n            this.localizationChangeSubscription.unsubscribe();\n        }\n    };\n    PanelBarComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.localizationChangeSubscription = this.localization\n            .changes.subscribe(function () {\n            return _this.keyBindings = _this.computedKeys;\n        });\n        this.eventService.animate = this.animate;\n    };\n    PanelBarComponent.prototype.ngAfterViewChecked = function () {\n        var _this = this;\n        if (this.items) {\n            this.childrenItems = this.viewChildItems.toArray();\n            this.allItems = this.viewItems;\n        }\n        else {\n            this.childrenItems = this.contentChildItems.toArray();\n            this.allItems = this.contentItems.toArray();\n        }\n        if (this.isViewInit && this.childrenItems.length) {\n            this.isViewInit = false;\n            setTimeout(function () { return _this.updateChildrenHeight(); });\n        }\n        this.validateConfiguration();\n    };\n    PanelBarComponent.prototype.ngOnChanges = function (changes) {\n        if (changes['height'] || changes['expandMode'] || changes[\"items\"]) { // tslint:disable-line\n            if (this.childrenItems) {\n                setTimeout(this.updateChildrenHeight);\n            }\n        }\n        if (changes.animate) {\n            this.eventService.animate = this.animate;\n        }\n    };\n    Object.defineProperty(PanelBarComponent.prototype, \"templateRef\", {\n        get: function () {\n            return this.template ? this.template.templateRef : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    PanelBarComponent.prototype.onComponentClick = function (event) {\n        var itemClicked = this.visibleItems().some(function (item) {\n            return item.header.nativeElement.contains(event.target);\n        });\n        if (!this.focused && itemClicked) {\n            this.elementRef.nativeElement.focus();\n        }\n    };\n    /**\n     * @hidden\n     */\n    PanelBarComponent.prototype.onComponentFocus = function () {\n        this.eventService.onFocus();\n        this.focused = true;\n        if (this.allItems.length > 0) {\n            var visibleItems = this.visibleItems();\n            var focusedItems = visibleItems.filter(function (item) { return item.focused; });\n            if (!focusedItems.length && visibleItems.length > 0) {\n                visibleItems[0].focused = true;\n                this.activeDescendant = visibleItems[0].itemId;\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    PanelBarComponent.prototype.onComponentBlur = function () {\n        this.eventService.onBlur();\n        this.focused = false;\n        this.activeDescendant = \"\";\n    };\n    /**\n     * @hidden\n     */\n    PanelBarComponent.prototype.onComponentKeyDown = function (event) {\n        if (event.target === this.elementRef.nativeElement) {\n            if (event.keyCode === Keys.Space || event.keyCode === Keys.ArrowUp || event.keyCode === Keys.ArrowDown ||\n                event.keyCode === Keys.ArrowLeft || event.keyCode === Keys.ArrowRight || event.keyCode === Keys.Home ||\n                event.keyCode === Keys.End || event.keyCode === Keys.PageUp || event.keyCode === Keys.PageDown) {\n                event.preventDefault();\n            }\n            var handler = this.keyBindings[event.keyCode];\n            //TODO: check if next item is disabled and skip operation?\n            if (handler) {\n                handler();\n            }\n        }\n    };\n    Object.defineProperty(PanelBarComponent.prototype, \"viewItems\", {\n        get: function () {\n            var treeItems = [];\n            this.viewChildItems.toArray().forEach(function (item) {\n                treeItems.push(item);\n                treeItems = treeItems.concat(item.subTreeViewItems());\n            });\n            return treeItems;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PanelBarComponent.prototype.validateConfiguration = function () {\n        if (isDevMode()) {\n            if (this.items && (this.contentItems && this.contentItems.length > 0)) {\n                throw new Error(\"Invalid configuration: mixed template components and items property.\");\n            }\n        }\n    };\n    PanelBarComponent.prototype.onItemAction = function (item) {\n        var _this = this;\n        if (!item) {\n            return;\n        }\n        var modifiedItems = new Array();\n        this.allItems\n            .forEach(function (currentItem) {\n            var selectedState = currentItem === item;\n            var focusedState = selectedState;\n            selectedState = _this.selectable ? selectedState : currentItem.selected;\n            if (currentItem.selected !== selectedState || currentItem.focused !== focusedState) {\n                currentItem.selected = selectedState;\n                currentItem.focused = focusedState;\n                _this.activeDescendant = focusedState ? currentItem.itemId : \"\";\n                modifiedItems.push(currentItem);\n            }\n        });\n        if (this.expandMode === PanelBarExpandMode.Multiple) {\n            if (item.hasChildItems || item.hasContent) {\n                item.expanded = !item.expanded;\n            }\n            if (modifiedItems.indexOf(item) < 0) {\n                modifiedItems.push(item);\n            }\n        }\n        else {\n            var siblings = item.parent ? item.parent.childrenItems : this.childrenItems;\n            if (item.hasChildItems || item.hasContent) {\n                siblings\n                    .forEach(function (currentItem) {\n                    var expandedState = currentItem === item;\n                    if (currentItem.expanded !== expandedState) {\n                        currentItem.expanded = expandedState;\n                        if (modifiedItems.indexOf(currentItem) < 0) {\n                            modifiedItems.push(currentItem);\n                        }\n                    }\n                });\n            }\n        }\n        if (modifiedItems.length > 0) {\n            this.stateChange.emit(modifiedItems.map(function (currentItem) { return currentItem.serialize(); }));\n        }\n    };\n    Object.defineProperty(PanelBarComponent.prototype, \"hostClasses\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PanelBarComponent.prototype.isVisible = function (item) {\n        var visibleItems = this.visibleItems();\n        return visibleItems.some(function (i) { return i === item; });\n    };\n    PanelBarComponent.prototype.getVisibleParent = function (item) {\n        var visibleItems = this.visibleItems();\n        if (!item.parent) {\n            return item;\n        }\n        return visibleItems.some(function (i) { return i === item.parent; }) ? item.parent : this.getVisibleParent(item.parent);\n    };\n    PanelBarComponent.prototype.focusItem = function (action) {\n        var visibleItems = this.visibleItems();\n        var currentIndex = visibleItems.findIndex(function (item) { return item.focused; });\n        var currentItem = visibleItems[currentIndex];\n        var nextItem;\n        if (currentIndex === -1) {\n            var focusedItem = this.allItems.find(function (item) { return item.focused; });\n            focusedItem.focused = false;\n            currentItem = this.getVisibleParent(focusedItem);\n            currentIndex = visibleItems.findIndex(function (item) { return item === currentItem; });\n        }\n        switch (action) {\n            case \"lastItem\":\n                nextItem = visibleItems[visibleItems.length - 1];\n                break;\n            case \"firstItem\":\n                nextItem = visibleItems[0];\n                break;\n            case \"nextItem\":\n                nextItem = visibleItems[currentIndex < visibleItems.length - 1 ? currentIndex + 1 : 0];\n                break;\n            case \"previousItem\":\n                nextItem = visibleItems[currentIndex > 0 ? currentIndex - 1 : visibleItems.length - 1];\n                break;\n            default:\n        }\n        if (currentItem && nextItem && currentItem !== nextItem) {\n            this.moveFocus(currentItem, nextItem);\n        }\n    };\n    PanelBarComponent.prototype.moveFocus = function (from, to) {\n        from.focused = false;\n        to.focused = true;\n        this.activeDescendant = to.itemId;\n        var modifiedItems = new Array(from.serialize(), to.serialize());\n        this.stateChange.emit(modifiedItems);\n    };\n    PanelBarComponent.prototype.focusLastItem = function () {\n        this.focusItem(\"lastItem\");\n    };\n    PanelBarComponent.prototype.focusFirstItem = function () {\n        this.focusItem(\"firstItem\");\n    };\n    PanelBarComponent.prototype.focusNextItem = function () {\n        this.focusItem(\"nextItem\");\n    };\n    PanelBarComponent.prototype.focusPreviousItem = function () {\n        this.focusItem(\"previousItem\");\n    };\n    PanelBarComponent.prototype.expandItem = function () {\n        var currentItem = this.allItems.filter(function (item) { return item.focused; })[0];\n        if (!this.isVisible(currentItem)) {\n            currentItem.focused = false;\n            currentItem = this.getVisibleParent(currentItem);\n        }\n        if (currentItem.hasChildItems || currentItem.hasContent) {\n            if (!currentItem.expanded) {\n                this.onItemAction(currentItem);\n            }\n            else if (currentItem.hasChildItems) {\n                var firstChildIndex = currentItem.childrenItems.findIndex(function (item) { return !item.disabled; });\n                if (firstChildIndex > -1) {\n                    this.moveFocus(currentItem, currentItem.childrenItems[firstChildIndex]);\n                }\n            }\n        }\n    };\n    PanelBarComponent.prototype.collapseItem = function () {\n        var currentItem = this.allItems.filter(function (item) { return item.focused; })[0];\n        if (currentItem.expanded) {\n            this.onItemAction(currentItem);\n        }\n        else if (currentItem.parent) {\n            this.moveFocus(currentItem, currentItem.parent);\n        }\n    };\n    PanelBarComponent.prototype.selectFocusedItem = function () {\n        var focusedItem = this.allItems.filter(function (item) { return item.focused; })[0];\n        if (!this.isVisible(focusedItem)) {\n            focusedItem.focused = false;\n            focusedItem = this.getVisibleParent(focusedItem);\n        }\n        if (focusedItem) {\n            focusedItem.onItemAction();\n        }\n    };\n    PanelBarComponent.prototype.visibleItems = function () {\n        return this.flatVisibleItems(this.childrenItems);\n    };\n    PanelBarComponent.prototype.flatVisibleItems = function (listOfItems, flattedItems) {\n        var _this = this;\n        if (listOfItems === void 0) { listOfItems = new Array(); }\n        if (flattedItems === void 0) { flattedItems = new Array(); }\n        listOfItems.forEach(function (item) {\n            if (!item.disabled) {\n                flattedItems.push(item);\n                if (item.expanded && item.hasChildItems) {\n                    _this.flatVisibleItems(item.childrenItems, flattedItems);\n                }\n            }\n        });\n        return flattedItems;\n    };\n    PanelBarComponent.decorators = [\n        { type: Component, args: [{\n                    exportAs: 'kendoPanelbar',\n                    providers: [\n                        PanelBarService,\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.panelbar'\n                        }\n                    ],\n                    selector: 'kendo-panelbar',\n                    template: \"\\n        <ng-content *ngIf=\\\"contentChildItems && !items\\\" select=\\\"kendo-panelbar-item\\\"></ng-content>\\n        <ng-template [ngIf]=\\\"items?.length\\\">\\n            <ng-container *ngFor=\\\"let item of items\\\">\\n                <kendo-panelbar-item *ngIf=\\\"!item.hidden\\\"\\n                     [title]=\\\"item.title\\\"\\n                     [id]=\\\"item.id\\\"\\n                     [icon]=\\\"item.icon\\\"\\n                     [iconClass]=\\\"item.iconClass\\\"\\n                     [imageUrl]=\\\"item.imageUrl\\\"\\n                     [selected]=\\\"!!item.selected\\\"\\n                     [expanded]=\\\"!!item.expanded\\\"\\n                     [disabled]=\\\"!!item.disabled\\\"\\n                     [template]=\\\"templateRef\\\"\\n                     [items]=\\\"item.children\\\"\\n                     [content]=\\\"item.content\\\"\\n                >\\n                </kendo-panelbar-item>\\n            </ng-container>\\n        </ng-template>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    PanelBarComponent.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: PanelBarService },\n        { type: LocalizationService }\n    ]; };\n    PanelBarComponent.propDecorators = {\n        expandMode: [{ type: Input }],\n        selectable: [{ type: Input }],\n        animate: [{ type: Input }],\n        height: [{ type: Input }],\n        keepItemContent: [{ type: Input }],\n        items: [{ type: Input }],\n        stateChange: [{ type: Output }],\n        tabIndex: [{ type: HostBinding, args: ['attr.tabIndex',] }],\n        role: [{ type: HostBinding, args: ['attr.role',] }],\n        activeDescendant: [{ type: HostBinding, args: ['attr.aria-activedescendant',] }],\n        hostHeight: [{ type: HostBinding, args: ['style.height',] }],\n        overflow: [{ type: HostBinding, args: ['style.overflow',] }],\n        dir: [{ type: HostBinding, args: ['attr.dir',] }],\n        template: [{ type: ContentChild, args: [PanelBarItemTemplateDirective,] }],\n        contentItems: [{ type: ContentChildren, args: [PanelBarItemComponent, { descendants: true },] }],\n        contentChildItems: [{ type: ContentChildren, args: [PanelBarItemComponent,] }],\n        viewChildItems: [{ type: ViewChildren, args: [PanelBarItemComponent,] }],\n        onComponentClick: [{ type: HostListener, args: ['click', ['$event'],] }],\n        onComponentFocus: [{ type: HostListener, args: ['focus',] }],\n        onComponentBlur: [{ type: HostListener, args: ['blur',] }],\n        onComponentKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }],\n        hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-panelbar',] }]\n    };\n    return PanelBarComponent;\n}());\n\n/**\n * Represents the pane component of the Splitter.\n */\nvar SplitterPaneComponent = /** @class */ (function () {\n    function SplitterPaneComponent(element, renderer, cdr) {\n        this.element = element;\n        this.renderer = renderer;\n        this.cdr = cdr;\n        /**\n         * Specifies if the user is allowed to resize the pane and provide space for other panes.\n         */\n        this.resizable = true;\n        /**\n         * Specifies if the user is allowed to hide the pane and provide space for other panes.\n         */\n        this.collapsible = false;\n        /**\n         * Specifies if overflowing content is scrollable or hidden.\n         */\n        this.scrollable = true;\n        /**\n         * Specifies if the pane is initially collapsed.\n         */\n        this.collapsed = false;\n        /**\n         * @hidden\n         */\n        this.orientation = 'horizontal';\n        /**\n         * @hidden\n         */\n        this.containsSplitter = false;\n        /**\n         * @hidden\n         */\n        this.overlayContent = false;\n        /**\n         * Fires each time the user resizes the Splitter pane.\n         * The event data contains the new pane size.\n         * Allows a two-way binding of the pane `size` property.\n         */\n        this.sizeChange = new EventEmitter();\n        /**\n         * Fires each time the `collapsed` property changes.\n         * The event data contains the new property state.\n         * Allows a two-way binding of the `collapsed` pane property.\n         */\n        this.collapsedChange = new EventEmitter();\n        this.hostClass = true;\n        /**\n         * @hidden\n         */\n        this.forceExpand = false;\n    }\n    Object.defineProperty(SplitterPaneComponent.prototype, \"order\", {\n        get: function () {\n            return this._order;\n        },\n        /**\n         * @hidden\n         */\n        set: function (paneOrder) {\n            this._order = paneOrder;\n            this.setOrderStyles();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitterPaneComponent.prototype, \"size\", {\n        get: function () {\n            return this._size;\n        },\n        /**\n         * Sets the initial size of the pane.\n         * Has to be between the `min` and `max` properties.\n         */\n        set: function (newSize) {\n            this._size = newSize;\n            var element = this.element.nativeElement;\n            this.renderer.setStyle(element, '-ms-flex-preferred-size', newSize);\n            this.renderer.setStyle(element, 'flex-basis', newSize);\n            if (this.staticPaneClass) {\n                this.renderer.addClass(element, 'k-pane-static');\n            }\n            else {\n                this.renderer.removeClass(element, 'k-pane-static');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitterPaneComponent.prototype, \"isHidden\", {\n        get: function () {\n            return this.collapsed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitterPaneComponent.prototype, \"styleDisplayFlex\", {\n        get: function () {\n            return this.containsSplitter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitterPaneComponent.prototype, \"staticPaneClass\", {\n        get: function () {\n            if (this.forceExpand) {\n                return false;\n            }\n            return !this.resizable && !this.collapsible || this.fixedSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitterPaneComponent.prototype, \"scrollablePaneClass\", {\n        get: function () {\n            return this.scrollable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitterPaneComponent.prototype, \"fixedSize\", {\n        get: function () {\n            return this.size && this.size.length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SplitterPaneComponent.prototype.ngAfterViewChecked = function () {\n        var element = this.element.nativeElement;\n        if (this.isHidden) {\n            this.renderer.addClass(element, 'k-state-hidden');\n            this.renderer.addClass(element, 'hidden');\n        }\n        else {\n            this.renderer.removeClass(element, 'k-state-hidden');\n            this.renderer.removeClass(element, 'hidden');\n        }\n    };\n    Object.defineProperty(SplitterPaneComponent.prototype, \"computedSize\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            if (this.orientation === 'vertical') {\n                return this.element.nativeElement.offsetHeight;\n            }\n            else {\n                return this.element.nativeElement.offsetWidth;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    SplitterPaneComponent.prototype.toggleOverlay = function (show) {\n        this.overlayContent = show;\n        this.cdr.detectChanges();\n    };\n    /**\n     * @hidden\n     */\n    SplitterPaneComponent.prototype.detectChanges = function () {\n        this.cdr.detectChanges();\n    };\n    /**\n     * @hidden\n     */\n    SplitterPaneComponent.prototype.setOrderStyles = function () {\n        var element = this.element.nativeElement;\n        this.renderer.setStyle(element, '-ms-flex-order', this.order);\n        this.renderer.setStyle(element, 'order', this.order);\n    };\n    SplitterPaneComponent.decorators = [\n        { type: Component, args: [{\n                    exportAs: 'kendoSplitterPane',\n                    selector: 'kendo-splitter-pane',\n                    template: \"\\n        <ng-container *ngIf=\\\"!collapsed\\\"><ng-content></ng-content></ng-container>\\n        <div *ngIf=\\\"overlayContent\\\" class=\\\"k-splitter-overlay k-overlay\\\"></div>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    SplitterPaneComponent.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: ChangeDetectorRef }\n    ]; };\n    SplitterPaneComponent.propDecorators = {\n        order: [{ type: Input }],\n        size: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        resizable: [{ type: Input }],\n        collapsible: [{ type: Input }],\n        scrollable: [{ type: Input }],\n        collapsed: [{ type: Input }],\n        orientation: [{ type: Input }],\n        containsSplitter: [{ type: Input }],\n        overlayContent: [{ type: Input }],\n        sizeChange: [{ type: Output }],\n        collapsedChange: [{ type: Output }],\n        styleDisplayFlex: [{ type: HostBinding, args: ['class.k-pane-flex',] }],\n        hostClass: [{ type: HostBinding, args: ['class.k-pane',] }],\n        staticPaneClass: [{ type: HostBinding, args: ['class.k-pane-static',] }],\n        scrollablePaneClass: [{ type: HostBinding, args: ['class.k-scrollable',] }]\n    };\n    return SplitterPaneComponent;\n}());\n\nvar SIZING_DOC_LINK = 'https://www.telerik.com/kendo-angular-ui/components/layout/splitter/panes/#toc-size';\n/**\n * @hidden\n */\nvar SplitterService = /** @class */ (function () {\n    function SplitterService(zone) {\n        this.zone = zone;\n        this.layoutChange = new EventEmitter();\n        this.containerSize = function () { };\n    }\n    SplitterService.prototype.tryToggle = function (paneIndex) {\n        var pane = this.pane(paneIndex);\n        if (pane.collapsible) {\n            pane.collapsed = !pane.collapsed;\n            pane.collapsedChange.emit(pane.collapsed);\n            this.emit(this.layoutChange, {});\n            if (pane.collapsed) {\n                pane.detectChanges();\n            }\n        }\n        var notCollapsed = this.panes.filter(function (p) { return !p.collapsed; });\n        var allHaveFixedSize = notCollapsed.every(function (p) { return p.fixedSize; });\n        notCollapsed[notCollapsed.length - 1].forceExpand = allHaveFixedSize ? true : false;\n        return pane.collapsible;\n    };\n    SplitterService.prototype.toggleContentOverlay = function (index, show) {\n        this.pane(index).toggleOverlay(show);\n        this.pane(index + 1).toggleOverlay(show);\n    };\n    SplitterService.prototype.dragState = function (splitbarIndex) {\n        var _this = this;\n        var prev = this.pane(splitbarIndex);\n        var next = this.pane(splitbarIndex + 1);\n        var total = prev.computedSize + next.computedSize;\n        var px = function (s) { return _this.toPixels(s); };\n        return {\n            prev: {\n                index: splitbarIndex,\n                initialSize: prev.computedSize,\n                min: px(prev.min) || total - px(next.max) || 0,\n                max: px(prev.max) || total - px(next.min) || total\n            },\n            next: {\n                index: splitbarIndex + 1,\n                initialSize: next.computedSize,\n                min: px(next.min) || total - px(prev.max) || 0,\n                max: px(next.max) || total - px(prev.min) || total\n            }\n        };\n    };\n    SplitterService.prototype.setSize = function (state$$1, delta) {\n        var _this = this;\n        var clamp = function (min, max, v) { return Math.min(max, Math.max(min, v)); };\n        var resize = function (paneState, change) {\n            var pane = _this.pane(paneState.index);\n            var splitterSize = _this.containerSize();\n            var newSize = clamp(paneState.min, paneState.max, paneState.initialSize + change);\n            var size = \"\";\n            if (_this.isPercent(pane.size)) {\n                size = (100 * newSize / splitterSize) + \"%\";\n            }\n            else {\n                size = newSize + \"px\";\n            }\n            pane.size = size;\n            _this.emit(pane.sizeChange, size);\n        };\n        var prev = this.pane(state$$1.prev.index);\n        var next = this.pane(state$$1.next.index);\n        // determine which pane to resize\n        if (prev.fixedSize && next.fixedSize) {\n            // resizing both panes\n            resize(state$$1.prev, delta);\n            resize(state$$1.next, -delta);\n        }\n        else if (next.collapsible || next.fixedSize) {\n            // resizing next\n            resize(state$$1.next, -delta);\n        }\n        else {\n            // resizing prev\n            resize(state$$1.prev, delta);\n        }\n        this.emit(this.layoutChange, {});\n    };\n    SplitterService.prototype.isDraggable = function (splitBarIndex) {\n        var prev = this.pane(splitBarIndex);\n        var next = this.pane(splitBarIndex + 1);\n        var betweenResizablePanes = prev.resizable && next.resizable;\n        var nearCollapsedPane = prev.collapsed || next.collapsed;\n        return betweenResizablePanes && !nearCollapsedPane;\n    };\n    SplitterService.prototype.isStatic = function (splitBarIndex) {\n        var prev = this.pane(splitBarIndex);\n        var next = this.pane(splitBarIndex + 1);\n        var betweenResizablePanes = prev.resizable && next.resizable;\n        var nearCollapsiblePane = prev.collapsible || next.collapsible;\n        return !betweenResizablePanes && !nearCollapsiblePane;\n    };\n    SplitterService.prototype.pane = function (index) {\n        if (!this.panes) {\n            throw new Error(\"Panes not initialized\");\n        }\n        if (index < 0 || index >= this.panes.length) {\n            throw new Error(\"Index out of range\");\n        }\n        return this.panes[index];\n    };\n    SplitterService.prototype.configure = function (_a) {\n        var panes = _a.panes, orientation = _a.orientation, containerSize = _a.containerSize;\n        this.panes = panes;\n        this.panes.forEach(function (pane, index) {\n            pane.order = index * 2;\n            pane.orientation = orientation;\n        });\n        if (isDevMode()) {\n            var allFixed = panes.length && !panes.some(function (pane) { return !pane.fixedSize; });\n            if (allFixed) {\n                throw new Error(\"\\n                    The Splitter should have at least one pane without a set size.\\n                    See \" + SIZING_DOC_LINK + \" for more information.\\n                \");\n            }\n        }\n        this.containerSize = containerSize;\n    };\n    SplitterService.prototype.isPercent = function (size) {\n        return /%$/.test(size);\n    };\n    SplitterService.prototype.toPixels = function (size) {\n        var result = parseFloat(size);\n        if (this.isPercent(size)) {\n            result = (this.containerSize() * result / 100);\n        }\n        return result;\n    };\n    SplitterService.prototype.emit = function (emitter, args) {\n        if (emitter.observers.length) {\n            this.zone.run(function () { return emitter.emit(args); });\n        }\n    };\n    SplitterService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    SplitterService.ctorParameters = function () { return [\n        { type: NgZone }\n    ]; };\n    return SplitterService;\n}());\n\n/**\n * Represents the [Kendo UI Splitter component for Angular]({% slug overview_splitter %}).\n *\n * ```ts-preview\n *\n *  @Component({\n *    selector: 'my-app',\n *    template: `\n *        <kendo-splitter style=\"height: 280px;\">\n *\n *          <kendo-splitter-pane [collapsible]=\"true\" size=\"30%\">\n *            <h3>Inner splitter / left pane</h3>\n *            <p>Resizable and collapsible.</p>\n *          </kendo-splitter-pane>\n *\n *          <kendo-splitter-pane>\n *            <h3>Inner splitter / center pane</h3>\n *            <p>Resizable only.</p>\n *          </kendo-splitter-pane>\n *\n *          <kendo-splitter-pane [collapsible]=\"true\" size=\"30%\">\n *            <h3>Inner splitter / right pane</h3>\n *            <p>Resizable and collapsible.</p>\n *          </kendo-splitter-pane>\n *\n *        </kendo-splitter>\n *      `,\n *    styles: [ `\n *        h3 { font-size: 1.2em; }\n *        h3, p { margin: 10px; padding: 0; }\n *    ` ]\n *  })\n *  class AppComponent {}\n * ```\n */\nvar SplitterComponent = /** @class */ (function () {\n    function SplitterComponent(element, splitterService, localization, enclosingPane) {\n        this.element = element;\n        this.splitterService = splitterService;\n        this.localization = localization;\n        /**\n         * Specifies the orientation of the panes within the Splitter.\n         * Panes in a horizontal Splitter are placed horizontally.\n         * Panes in a vertical Splitter are placed vertically.\n         */\n        this.orientation = 'horizontal';\n        this.ariaRole = 'splitter';\n        if (enclosingPane) {\n            enclosingPane.containsSplitter = true;\n        }\n        // the handler only runs in NgZone if there are bound handlers\n        // this line merges both streams\n        this.layoutChange = this.splitterService.layoutChange;\n        this.configure = this.configure.bind(this);\n    }\n    Object.defineProperty(SplitterComponent.prototype, \"hostClasses\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitterComponent.prototype, \"horizontalHostClasses\", {\n        get: function () {\n            return this.orientation === 'horizontal';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitterComponent.prototype, \"verticalHostClasses\", {\n        get: function () {\n            return this.orientation === 'vertical';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitterComponent.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SplitterComponent.prototype.ngAfterContentInit = function () {\n        this.reconfigure();\n    };\n    SplitterComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.orientation && !changes.orientation.isFirstChange()) {\n            this.reconfigure();\n        }\n    };\n    SplitterComponent.prototype.ngOnDestroy = function () {\n        this.unsubscribeChanges();\n    };\n    SplitterComponent.prototype.reconfigure = function () {\n        this.unsubscribeChanges();\n        this.configure();\n        this.paneChangesSubscription = this.panes.changes.subscribe(this.configure);\n    };\n    SplitterComponent.prototype.unsubscribeChanges = function () {\n        if (this.paneChangesSubscription) {\n            this.paneChangesSubscription.unsubscribe();\n            this.paneChangesSubscription = null;\n        }\n    };\n    SplitterComponent.prototype.configure = function () {\n        var _this = this;\n        this.splitterService.configure({\n            panes: this.panes.toArray(),\n            orientation: this.orientation,\n            containerSize: function () {\n                if (_this.orientation === 'vertical') {\n                    return _this.element.nativeElement.clientHeight;\n                }\n                else {\n                    return _this.element.nativeElement.clientWidth;\n                }\n            }\n        });\n    };\n    Object.defineProperty(SplitterComponent.prototype, \"direction\", {\n        get: function () {\n            return this.localization.rtl ? 'rtl' : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SplitterComponent.decorators = [\n        { type: Component, args: [{\n                    exportAs: 'kendoSplitter',\n                    selector: 'kendo-splitter',\n                    providers: [\n                        SplitterService,\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.spliter'\n                        }\n                    ],\n                    template: \"\\n      <ng-content select=\\\"kendo-splitter-pane\\\"></ng-content>\\n      <ng-container *ngFor=\\\"\\n        let pane of panes;\\n        let index = index;\\n        let last = last;\\n      \\\">\\n        <kendo-splitter-bar\\n          kendoDraggable\\n          *ngIf=\\\"!last\\\"\\n          [index]=\\\"index\\\"\\n          [orientation]=\\\"orientation\\\">\\n        </kendo-splitter-bar>\\n      </ng-container>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    SplitterComponent.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: SplitterService },\n        { type: LocalizationService },\n        { type: SplitterPaneComponent, decorators: [{ type: Optional }, { type: Host }, { type: Inject, args: [SplitterPaneComponent,] }] }\n    ]; };\n    SplitterComponent.propDecorators = {\n        orientation: [{ type: Input }],\n        layoutChange: [{ type: Output }],\n        hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-splitter',] }, { type: HostBinding, args: ['class.k-splitter-flex',] }],\n        horizontalHostClasses: [{ type: HostBinding, args: ['class.k-splitter-horizontal',] }],\n        verticalHostClasses: [{ type: HostBinding, args: ['class.k-splitter-vertical',] }],\n        dir: [{ type: HostBinding, args: ['attr.dir',] }],\n        ariaRole: [{ type: HostBinding, args: ['attr.role',] }],\n        panes: [{ type: ContentChildren, args: [SplitterPaneComponent,] }]\n    };\n    return SplitterComponent;\n}());\n\n/**\n * Represents the content template of the Kendo UI TabStrip.\n * To define the template, nest a `<ng-template>` tag with the `kendoTabContent` inside the component tag.\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *         <kendo-tabstrip [ngStyle]=\"{'width': '400px'}\" [animate]=\"true\">\n *           <kendo-tabstrip-tab [title]=\"'Paris'\" [selected]=\"true\">\n *             <ng-template kendoTabContent>\n *               <h3>Content 1</h3>\n *             </ng-template>\n *           </kendo-tabstrip-tab>\n *\n *           <kendo-tabstrip-tab [title]=\"'Sofia'\">\n *             <ng-template kendoTabContent>\n *               <h3>Content 2</h3>\n *             </ng-template>\n *           </kendo-tabstrip-tab>\n *         </kendo-tabstrip>\n *     `\n * })\n *\n * class AppComponent {}\n *\n * ```\n */\nvar TabContentDirective = /** @class */ (function () {\n    function TabContentDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    TabContentDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoTabContent]'\n                },] },\n    ];\n    /** @nocollapse */\n    TabContentDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return TabContentDirective;\n}());\n\n/**\n * Represents the title template of the Kendo UI TabStrip.\n * To define the template, nest a `<ng-template>` tag with the `kendoTabTitle` directive inside the component tag.\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *         <kendo-tabstrip [ngStyle]=\"{'width': '400px'}\" [animate]=\"true\">\n *           <kendo-tabstrip-tab [title]=\"'Paris'\" [selected]=\"true\">\n *             <ng-template kendoTabTitle>\n *               Title\n *             </ng-template>\n *             <ng-template kendoTabContent>\n *               <h3>Content 1</h3>\n *             </ng-template>\n *           </kendo-tabstrip-tab>\n *\n *           <kendo-tabstrip-tab [title]=\"'Sofia'\">\n *             <ng-template kendoTabContent>\n *               <h3>Content 2</h3>\n *             </ng-template>\n *           </kendo-tabstrip-tab>\n *         </kendo-tabstrip>\n *     `\n * })\n *\n * class AppComponent {}\n *\n * ```\n */\nvar TabTitleDirective = /** @class */ (function () {\n    function TabTitleDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    TabTitleDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoTabTitle]'\n                },] },\n    ];\n    /** @nocollapse */\n    TabTitleDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return TabTitleDirective;\n}());\n\n/**\n * Represents the tab component of the TabStrip.\n */\nvar TabStripTabComponent = /** @class */ (function () {\n    function TabStripTabComponent() {\n        this.active = false;\n        this._tabContent = new QueryList();\n    }\n    Object.defineProperty(TabStripTabComponent.prototype, \"tabContent\", {\n        get: function () {\n            return this._tabContent.first;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TabStripTabComponent.prototype.ngAfterContentInit = function () {\n        this.active = this.selected;\n    };\n    TabStripTabComponent.prototype.ngOnChanges = function (changes) {\n        if (changes['selected'] && !changes['selected'].isFirstChange()) { // tslint:disable-line\n            this.active = this.selected;\n        }\n    };\n    TabStripTabComponent.decorators = [\n        { type: Component, args: [{\n                    exportAs: 'kendoTabStripTab',\n                    selector: 'kendo-tabstrip-tab',\n                    template: \"\"\n                },] },\n    ];\n    TabStripTabComponent.propDecorators = {\n        title: [{ type: Input }],\n        disabled: [{ type: Input }],\n        cssClass: [{ type: Input }],\n        selected: [{ type: Input }],\n        _tabContent: [{ type: ContentChildren, args: [TabContentDirective,] }],\n        tabTitle: [{ type: ContentChild, args: [TabTitleDirective,] }]\n    };\n    return TabStripTabComponent;\n}());\n\n/**\n * @hidden\n */\nvar PreventableEvent = /** @class */ (function () {\n    /**\n     * @hidden\n     */\n    function PreventableEvent(args) {\n        this.prevented = false;\n        Object.assign(this, args);\n    }\n    /**\n     * Prevents the default action for a specified event.\n     * In this way, the source component suppresses\n     * the built-in behavior that follows the event.\n     */\n    PreventableEvent.prototype.preventDefault = function () {\n        this.prevented = true;\n    };\n    /**\n     * Returns `true` if the event was prevented\n     * by any of its subscribers.\n     *\n     * @returns `true` if the default action was prevented.\n     * Otherwise, returns `false`.\n     */\n    PreventableEvent.prototype.isDefaultPrevented = function () {\n        return this.prevented;\n    };\n    return PreventableEvent;\n}());\n\n/**\n * Arguments for the `select` event of the TabStrip.\n * The `select` event fires when a tab is selected (clicked).\n */\nvar SelectEvent = /** @class */ (function (_super) {\n    __extends(SelectEvent, _super);\n    /**\n     * Constructs the event arguments for the `select` event.\n     * @param index - The index of the selected tab.\n     * @param title - The title of the selected tab.\n     */\n    function SelectEvent(index, title) {\n        var _this = _super.call(this) || this;\n        _this.index = index;\n        _this.title = title;\n        return _this;\n    }\n    return SelectEvent;\n}(PreventableEvent));\n\n/**\n * Represents the [Kendo UI TabStrip component for Angular]({% slug overview_tabstrip %}).\n */\nvar TabStripComponent = /** @class */ (function () {\n    function TabStripComponent(localization, renderer, wrapper) {\n        this.localization = localization;\n        this.renderer = renderer;\n        this.wrapper = wrapper;\n        /**\n         * Enables the tab animation.\n         */\n        this.animate = true;\n        /**\n         * Sets the position of the tabs. Defaults to `top`.\n         */\n        this.tabPosition = 'top';\n        /**\n         * When set to `true`, the component renders all tabs and they are persisted in the DOM.\n         * By default, `keepTabContent` is `false`.\n         */\n        this.keepTabContent = false;\n        /**\n         * Fires each time the user selects a tab ([see example]({% slug overview_tabstrip %}#toc-basic-usage)).\n         * The event data contains the index of the selected tab and its title.\n         */\n        this.tabSelect = new EventEmitter();\n        this.hostClasses = true;\n        /**\n         * @hidden\n         */\n        this._animate = false;\n        this.keyBindings = this.computedKeys;\n    }\n    Object.defineProperty(TabStripComponent.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        /**\n         * Sets the height of the TabStrip.\n         */\n        set: function (value) {\n            this._height = value;\n            this.renderer.setStyle(this.wrapper.nativeElement, 'height', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TabStripComponent.prototype, \"tabsAtTop\", {\n        get: function () {\n            return this.tabPosition === 'top';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TabStripComponent.prototype, \"tabsAtRight\", {\n        get: function () {\n            return this.tabPosition === 'right';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TabStripComponent.prototype, \"tabsAtBottom\", {\n        get: function () {\n            return this.tabPosition === 'bottom';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TabStripComponent.prototype, \"tabsAtLeft\", {\n        get: function () {\n            return this.tabPosition === 'left';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TabStripComponent.prototype, \"dir\", {\n        get: function () {\n            return this.localization.rtl ? 'rtl' : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    TabStripComponent.prototype.contentClass = function (active) {\n        var visible = !this.keepTabContent || active;\n        return visible ? 'k-content k-state-active' : 'k-content';\n    };\n    Object.defineProperty(TabStripComponent.prototype, \"computedKeys\", {\n        get: function () {\n            var _this = this;\n            var _a;\n            return _a = {},\n                _a[this.invertKeys(Keys.ArrowLeft, Keys.ArrowRight)] = function (selectedIndex) { return _this.prevNavigatableIndex(selectedIndex); },\n                _a[this.invertKeys(Keys.ArrowRight, Keys.ArrowLeft)] = function (selectedIndex) { return _this.nextNavigatableIndex(selectedIndex); },\n                _a[this.invertKeys(Keys.ArrowDown, Keys.ArrowUp)] = function (selectedIndex) { return _this.nextNavigatableIndex(selectedIndex); },\n                _a[this.invertKeys(Keys.ArrowUp, Keys.ArrowDown)] = function (selectedIndex) { return _this.prevNavigatableIndex(selectedIndex); },\n                _a[Keys.Home] = function () { return _this.firstNavigatableIndex(); },\n                _a[Keys.End] = function () { return _this.lastNavigatableIndex(); },\n                _a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TabStripComponent.prototype, \"tabsAlignment\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return {\n                start: 'flex-start',\n                end: 'flex-end',\n                center: 'center',\n                justify: 'space-between'\n            }[this.tabAlignment];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    TabStripComponent.prototype.invertKeys = function (original, inverted) {\n        return this.localization.rtl ? inverted : original;\n    };\n    /**\n     * @hidden\n     */\n    TabStripComponent.prototype.onKeyDown = function (event) {\n        if (event.currentTarget !== this.tablist.nativeElement) {\n            return;\n        }\n        var isHorizontal = this.tabPosition === 'top' || this.tabPosition === 'bottom';\n        var isArrowUp = event.keyCode === Keys.ArrowUp;\n        var isArrowDown = event.keyCode === Keys.ArrowDown;\n        var isArrowLeft = event.keyCode === Keys.ArrowLeft;\n        var isArrowRight = event.keyCode === Keys.ArrowRight;\n        if (isHorizontal && (isArrowUp || isArrowDown)) {\n            return;\n        }\n        if (!isHorizontal && (isArrowLeft || isArrowRight)) {\n            return;\n        }\n        if (event.keyCode === Keys.Space || isArrowUp || isArrowDown || isArrowLeft || isArrowRight || event.keyCode === Keys.Home ||\n            event.keyCode === Keys.End || event.keyCode === Keys.PageUp || event.keyCode === Keys.PageDown) {\n            event.preventDefault();\n        }\n        var selectedIndex = this.tabs.toArray().findIndex(function (tab) { return tab.active && !tab.disabled; });\n        if (selectedIndex === -1) {\n            this.selectTab(this.firstNavigatableIndex());\n        }\n        else {\n            var getTabIndex = this.keyBindings[event.keyCode];\n            if (getTabIndex) {\n                var nextIndex = getTabIndex(selectedIndex);\n                if (selectedIndex !== nextIndex) {\n                    this.selectTab(getTabIndex(selectedIndex));\n                }\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    TabStripComponent.prototype.tabPanelId = function (id) {\n        return 'k-tabstrip-tabpanel-' + id;\n    };\n    /**\n     * @hidden\n     */\n    TabStripComponent.prototype.tabId = function (id) {\n        return 'k-tabstrip-tab-' + id;\n    };\n    /**\n     * Allows the user to select a tab programmatically.\n     * @param {number} index - The index of the tab that will be selected.\n     */\n    TabStripComponent.prototype.selectTab = function (index) {\n        var tab = this.tabs.toArray()[index];\n        if (!tab || Boolean(tab.disabled)) {\n            return;\n        }\n        this.tabHeadingContainers.toArray()[index].nativeElement.focus();\n        this.emitEvent(tab, index);\n    };\n    /**\n     * @hidden\n     */\n    TabStripComponent.prototype.onTabClick = function (originalEvent, tabIndex) {\n        if (isFocusable(originalEvent.target)) {\n            return;\n        }\n        this.selectTab(tabIndex);\n    };\n    TabStripComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.localizationChangeSubscription = this.localization\n            .changes.subscribe(function () {\n            return _this.keyBindings = _this.computedKeys;\n        });\n    };\n    TabStripComponent.prototype.ngOnDestroy = function () {\n        if (this.localizationChangeSubscription) {\n            this.localizationChangeSubscription.unsubscribe();\n        }\n    };\n    TabStripComponent.prototype.firstNavigatableIndex = function () {\n        var tabs = this.tabs.toArray();\n        for (var i = 0; i < tabs.length; i++) {\n            if (!tabs[i].disabled) {\n                return i;\n            }\n        }\n    };\n    TabStripComponent.prototype.lastNavigatableIndex = function () {\n        var tabs = this.tabs.toArray();\n        for (var i = tabs.length - 1; i > 0; i--) {\n            if (!tabs[i].disabled) {\n                return i;\n            }\n        }\n    };\n    TabStripComponent.prototype.prevNavigatableIndex = function (selectedIndex) {\n        if (selectedIndex - 1 < 0) {\n            return this.lastNavigatableIndex();\n        }\n        var tabs = this.tabs.toArray();\n        for (var i = selectedIndex - 1; i > -1; i--) {\n            if (!tabs[i].disabled) {\n                return i;\n            }\n            if (i === 0) {\n                return this.lastNavigatableIndex();\n            }\n        }\n        return selectedIndex;\n    };\n    TabStripComponent.prototype.nextNavigatableIndex = function (selectedIndex) {\n        if (selectedIndex + 1 >= this.tabs.length) {\n            return this.firstNavigatableIndex();\n        }\n        var tabs = this.tabs.toArray();\n        for (var i = selectedIndex + 1; i < tabs.length; i++) {\n            if (!tabs[i].disabled) {\n                return i;\n            }\n            if (i + 1 === tabs.length) {\n                return this.firstNavigatableIndex();\n            }\n        }\n    };\n    TabStripComponent.prototype.emitEvent = function (tab, selectedIndex) {\n        var selectArgs = new SelectEvent(selectedIndex, tab.title);\n        this.tabSelect.emit(selectArgs);\n        if (!selectArgs.isDefaultPrevented() && !tab.active) {\n            this._animate = this.animate;\n            this.deactivateAll();\n            tab.active = true;\n        }\n    };\n    TabStripComponent.prototype.deactivateAll = function () {\n        this.tabs.forEach(function (tab) {\n            tab.active = false;\n        });\n    };\n    TabStripComponent.decorators = [\n        { type: Component, args: [{\n                    animations: [\n                        trigger('state', [\n                            state('active', style({ opacity: 1 })),\n                            transition('* => active', [\n                                style({ opacity: 0 }),\n                                animate('400ms ease-in')\n                            ])\n                        ])\n                    ],\n                    providers: [\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.tabstrip'\n                        }\n                    ],\n                    exportAs: 'kendoTabStrip',\n                    selector: 'kendo-tabstrip',\n                    template: \"\\n        <ng-container *ngIf=\\\"!tabsAtBottom\\\">\\n            <ng-container *ngTemplateOutlet=\\\"heading\\\">\\n            </ng-container>\\n            <ng-container *ngTemplateOutlet=\\\"content\\\">\\n            </ng-container>\\n        </ng-container>\\n\\n        <ng-container *ngIf=\\\"tabsAtBottom\\\">\\n            <ng-container *ngTemplateOutlet=\\\"content\\\">\\n            </ng-container>\\n            <ng-container *ngTemplateOutlet=\\\"heading\\\">\\n            </ng-container>\\n        </ng-container>\\n\\n        <ng-template #heading>\\n            <ul\\n                class=\\\"k-reset k-tabstrip-items\\\"\\n                [style.justifyContent]=\\\"tabsAlignment\\\"\\n                role=\\\"tablist\\\"\\n                (keydown)=\\\"onKeyDown($event)\\\"\\n                #tablist\\n            >\\n                <li *ngFor=\\\"let tab of tabs; let i = index;\\\" (click)=\\\"onTabClick($event, i)\\\"\\n                    #tabHeadingContainer\\n                    role=\\\"tab\\\"\\n                    [id]=\\\"tabId(i)\\\"\\n                    [tabIndex]=\\\"tab.active ? 0 : -1\\\"\\n                    [ngClass]=\\\"tab.cssClass\\\"\\n                    [class.k-item]=\\\"true\\\"\\n                    [class.k-state-default]=\\\"true\\\"\\n                    [class.k-state-active]=\\\"tab.active\\\"\\n                    [class.k-state-disabled]=\\\"tab.disabled\\\"\\n                    [attr.aria-selected]=\\\"tab.active\\\"\\n                    [attr.aria-controls]=\\\"tabPanelId(i)\\\"\\n                    [attr.aria-disabled]=\\\"tab.disabled\\\"\\n                ><span class=\\\"k-link\\\">{{ tab.title }}<ng-template [ngTemplateOutlet]=\\\"tab.tabTitle?.templateRef\\\"></ng-template></span></li>\\n            </ul>\\n        </ng-template>\\n        <ng-template #content>\\n            <ng-template ngFor let-tab [ngForOf]=\\\"tabs\\\" let-i=\\\"index\\\">\\n                <div\\n                    [@state]=\\\"tab.active && _animate ? 'active' : 'inactive'\\\"\\n                    *ngIf=\\\"tab.active || keepTabContent\\\"\\n                    [ngClass]=\\\"contentClass(tab.active)\\\"\\n                    [tabIndex]=\\\"0\\\"\\n                    role=\\\"tabpanel\\\"\\n                    [id]=\\\"tabPanelId(i)\\\"\\n                    [attr.aria-hidden]=\\\"!tab.active\\\"\\n                    [attr.aria-expanded]=\\\"tab.active\\\"\\n                    [attr.aria-labelledby]=\\\"tabId(i)\\\"\\n                    [attr.aria-disabled]=\\\"tab.disabled\\\"\\n                >\\n                    <ng-template [ngTemplateOutlet]=\\\"tab.tabContent?.templateRef\\\"></ng-template>\\n                </div>\\n            </ng-template>\\n        </ng-template>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    TabStripComponent.ctorParameters = function () { return [\n        { type: LocalizationService },\n        { type: Renderer2 },\n        { type: ElementRef }\n    ]; };\n    TabStripComponent.propDecorators = {\n        height: [{ type: Input }],\n        animate: [{ type: Input }],\n        tabAlignment: [{ type: Input }],\n        tabPosition: [{ type: Input }],\n        keepTabContent: [{ type: Input }],\n        tablist: [{ type: ViewChild, args: ['tablist',] }],\n        tabSelect: [{ type: Output }],\n        hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-tabstrip',] }, { type: HostBinding, args: ['class.k-floatwrap',] }, { type: HostBinding, args: ['class.k-header',] }],\n        tabsAtTop: [{ type: HostBinding, args: ['class.k-tabstrip-top',] }],\n        tabsAtRight: [{ type: HostBinding, args: ['class.k-tabstrip-right',] }],\n        tabsAtBottom: [{ type: HostBinding, args: ['class.k-tabstrip-bottom',] }],\n        tabsAtLeft: [{ type: HostBinding, args: ['class.k-tabstrip-left',] }],\n        dir: [{ type: HostBinding, args: ['attr.dir',] }],\n        tabs: [{ type: ContentChildren, args: [TabStripTabComponent,] }],\n        tabHeadingContainers: [{ type: ViewChildren, args: ['tabHeadingContainer',] }]\n    };\n    return TabStripComponent;\n}());\n\n/**\n * Represents a template that defines the content of the Drawer.\n * To define the template, nest an `<ng-template>` tag\n * with the `kendoDrawerTemplate` directive inside the `<kendo-drawer>` tag.\n * Using this template directive will override all other templates,\n * for example, `kendoDrawerHeaderTemplate` and `kendoDrawerItemTemplate`.\n */\nvar DrawerTemplateDirective = /** @class */ (function () {\n    function DrawerTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    DrawerTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDrawerTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    DrawerTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return DrawerTemplateDirective;\n}());\n\n/**\n * Represents a template that defines the item content of the Drawer.\n * To define the template, nest an `<ng-template>` tag\n * with the `kendoDrawerItemTemplate` directive inside the `<kendo-drawer>` tag.\n */\nvar DrawerItemTemplateDirective = /** @class */ (function () {\n    function DrawerItemTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    DrawerItemTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDrawerItemTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    DrawerItemTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return DrawerItemTemplateDirective;\n}());\n\n/**\n * Represents a template that defines the header content of the Drawer.\n * To define the template, nest an `<ng-template>` tag\n * with the `kendoDrawerHeaderTemplate` directive inside the `<kendo-drawer>` tag.\n */\nvar DrawerHeaderTemplateDirective = /** @class */ (function () {\n    function DrawerHeaderTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    DrawerHeaderTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDrawerHeaderTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    DrawerHeaderTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return DrawerHeaderTemplateDirective;\n}());\n\n/**\n * Represents a template that defines the footer content of the Drawer.\n * To define the template, nest an `<ng-template>` tag\n * with the `kendoDrawerFooterTemplate` directive inside the `<kendo-drawer>` tag.\n */\nvar DrawerFooterTemplateDirective = /** @class */ (function () {\n    function DrawerFooterTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    DrawerFooterTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDrawerFooterTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    DrawerFooterTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return DrawerFooterTemplateDirective;\n}());\n\n/**\n * @hidden\n */\nfunction miniExpandPush(duration, width, miniWidth) {\n    return [\n        style({ overflow: 'hidden', flexBasis: miniWidth + \"px\" }),\n        animate(duration + \"ms ease-in\", style({ flexBasis: width + \"px\" }))\n    ];\n}\n/**\n * @hidden\n */\nfunction miniCollapsePush(duration, width, miniWidth) {\n    return [\n        style({ overflow: 'hidden', flexBasis: width + \"px\" }),\n        animate(duration + \"ms ease-in\", style({ flexBasis: miniWidth + \"px\" }))\n    ];\n}\n/**\n * @hidden\n *\n */\nfunction miniExpandOverlay(duration, width, miniWidth) {\n    return [\n        style({ width: miniWidth + \"px\" }),\n        animate(duration + \"ms ease-in\", style({ overflow: 'hidden', width: width + \"px\" }))\n    ];\n}\n/**\n * @hidden\n */\nfunction expandPush(duration, width) {\n    return [\n        style({ overflow: 'hidden', flexBasis: '0px' }),\n        animate(duration + \"ms ease-in\", style({ flexBasis: width + \"px\" }))\n    ];\n}\n/**\n * @hidden\n */\nfunction collapsePush(duration, width) {\n    return [\n        style({ flexBasis: width + \"px\" }),\n        animate(duration + \"ms ease-in\", style({ overflow: 'hidden', flexBasis: \"0px\" }))\n    ];\n}\n/**\n * @hidden\n */\nfunction expandRTLOverlay(duration) {\n    return [\n        style({ transform: \"translateX(100%)\" }),\n        animate(duration + \"ms ease-in\", style({ overflow: 'hidden', transform: \"translateX(0)\" }))\n    ];\n}\n/**\n * @hidden\n */\nfunction expandOverlay(duration, position) {\n    var translateDir = position !== 'end' ? \"-100%\" : \"100%\";\n    return [\n        style({ transform: \"translateX(\" + translateDir + \")\" }),\n        animate(duration + \"ms ease-in\", style({ overflow: 'hidden', transform: \"translateX(0)\" }))\n    ];\n}\n/**\n * @hidden\n */\nfunction miniCollapseOverlay(duration, width, miniWidth) {\n    return [\n        style({ width: width + \"px\" }),\n        animate(duration + \"ms ease-in\", style({ overflow: 'hidden', width: miniWidth + \"px\" }))\n    ];\n}\n/**\n * @hidden\n */\nfunction collapseOverlay(duration, position) {\n    var translateDir = position !== 'end' ? '-100%' : '100%';\n    return [\n        style({ transform: \"translateX(0)\" }),\n        animate(duration + \"ms ease-in\", style({ overflow: 'hidden', transform: \"translateX(\" + translateDir + \")\" }))\n    ];\n}\n/**\n * @hidden\n */\nfunction collapseRTLOverlay(duration) {\n    return [\n        style({ transform: \"translateX(0)\" }),\n        animate(duration + \"ms ease-in\", style({ overflow: 'hidden', transform: \"translateX(100%)\" }))\n    ];\n}\n/**\n * @hidden\n */\nfunction expandAnimation(settings) {\n    var duration = settings.animation.duration;\n    var width = settings.width;\n    var miniWidth = settings.miniWidth;\n    var mode = settings.mode;\n    var mini = settings.mini;\n    var rtl = settings.rtl;\n    var position = settings.position;\n    if (mini && mode === 'push') {\n        return miniExpandPush(duration, width, miniWidth);\n    }\n    if (!mini && mode === 'push') {\n        return expandPush(duration, width);\n    }\n    if (!mini && mode === 'overlay') {\n        return rtl ? expandRTLOverlay(duration) : expandOverlay(duration, position);\n    }\n    if (mini && mode === 'overlay') {\n        return miniExpandOverlay(duration, width, miniWidth);\n    }\n}\n/**\n * @hidden\n */\nfunction collapseAnimation(settings) {\n    var duration = settings.animation.duration;\n    var width = settings.width;\n    var miniWidth = settings.miniWidth;\n    var mode = settings.mode;\n    var mini = settings.mini;\n    var rtl = settings.rtl;\n    var position = settings.position;\n    if (mini && mode === 'push') {\n        return miniCollapsePush(duration, width, miniWidth);\n    }\n    if (!mini && mode === 'push') {\n        return collapsePush(duration, width);\n    }\n    if (!mini && mode === 'overlay') {\n        return rtl ? collapseRTLOverlay(duration) : collapseOverlay(duration, position);\n    }\n    if (mini && mode === 'overlay') {\n        return miniCollapseOverlay(duration, width, miniWidth);\n    }\n}\n\n/**\n * Arguments for the `select` event of the Drawer.\n */\nvar DrawerSelectEvent = /** @class */ (function (_super) {\n    __extends(DrawerSelectEvent, _super);\n    function DrawerSelectEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return DrawerSelectEvent;\n}(PreventableEvent));\n\n/**\n * @hidden\n */\nvar DrawerService = /** @class */ (function () {\n    function DrawerService() {\n        this.selectedIndices = [];\n    }\n    DrawerService.prototype.emit = function (event, args) {\n        var drawer = this.owner;\n        var eventArgs = new DrawerSelectEvent(__assign({}, args, { sender: drawer }));\n        if (hasObservers(drawer[event])) {\n            drawer[event].emit(eventArgs);\n        }\n        return eventArgs.isDefaultPrevented();\n    };\n    DrawerService.prototype.onSelect = function (selectedIdx) {\n        this.selectedIndices = [selectedIdx];\n        var drawer = this.owner;\n        if (drawer.autoCollapse && !drawer.minimized) {\n            drawer.toggle(false);\n        }\n    };\n    DrawerService.prototype.initSelection = function () {\n        var items = this.owner.items;\n        this.selectedIndices = [];\n        for (var i = 0; i < items.length; i++) {\n            if (items[i].selected) {\n                this.selectedIndices.push(i);\n            }\n        }\n    };\n    DrawerService.decorators = [\n        { type: Injectable },\n    ];\n    return DrawerService;\n}());\n\nvar DEFAULT_ANIMATION = { type: 'slide', duration: 200 };\n/**\n * Represents the [Kendo UI Drawer component for Angular]({% slug overview_drawer %}).\n *\n * @example\n * ```ts-preview\n * _@Component({\n *    selector: 'my-app',\n *    template: `\n *        <kendo-drawer [items]=\"items\">\n *        </kendo-drawer>\n *    `\n * })\n * class AppComponent {\n *    public items: any[] = [{ text: 'Inbox', icon: 'k-i-inbox' }];\n * }\n * ```\n */\nvar DrawerComponent = /** @class */ (function () {\n    function DrawerComponent(element, builder, localizationService, drawerService) {\n        var _this = this;\n        this.element = element;\n        this.builder = builder;\n        this.localizationService = localizationService;\n        this.drawerService = drawerService;\n        this.hostClasses = true;\n        /**\n         * Specifies the mode in which the Drawer will be displayed.\n         *\n         * The possible values are:\n         * * (Default) `overlay`\n         * * `push`\n         */\n        this.mode = 'overlay';\n        /**\n         * Specifies the position of the Drawer\n         * ([see example]({% slug positioning_drawer %})).\n         *\n         * The possible values are:\n         * * (Default) `start`\n         * * `end`\n         */\n        this.position = 'start';\n        /**\n         * Enables the mini (compact) view of the Drawer which is displayed when the component is collapsed\n         * ([see example]({% slug expandmodespositions_drawer %}#toc-mini-view)).\n         */\n        this.mini = false;\n        /**\n         * Specifies the state of the Drawer.\n         */\n        this.expanded = false;\n        /**\n         * Defines the width of the Drawer when it is expanded.\n         * Defaults to `240`.\n         */\n        this.width = 240;\n        /**\n         * Defines the width of the Drawer when the mini view is enabled\n         * and the component is collapsed. Defaults to `60`.\n         */\n        this.miniWidth = 50;\n        /**\n         * Specifies if the Drawer will be automatically collapsed when an item\n         * or the overlay is clicked. Defaults to `true`.\n         */\n        this.autoCollapse = true;\n        /**\n         * Specifies the animation settings of the Drawer.\n         * ([see example]({% slug interaction_drawer %}#toc-toggling-between-states)).\n         *\n         * The possible values are:\n         * * Boolean\n         *    * (Default) `true`\n         *    * `false`\n         * * `DrawerAnimation`\n         *    * (Default) `type?: 'slide'`\n         *    * `duration`&mdash;Accepts a number in milliseconds. Defaults to `300ms`.\n         */\n        this.animation = DEFAULT_ANIMATION;\n        /**\n         * Fires when the Drawer is expanded and its animation is complete.\n         */\n        this.expand = new EventEmitter();\n        /**\n         * Fires when the Drawer is collapsed and its animation is complete.\n         */\n        this.collapse = new EventEmitter();\n        /**\n         * Fires when a Drawer item is selected. This event is preventable.\n         */\n        this.select = new EventEmitter();\n        /**\n         * Fires when the `expanded` property of the component was updated.\n         * Used to provide a two-way binding for the `expanded` property.\n         */\n        this.expandedChange = new EventEmitter();\n        this.animationEnd = new EventEmitter();\n        this.rtl = false;\n        this._items = [];\n        this.dynamicRTLSubscription = this.localizationService.changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.rtl = rtl;\n            _this.direction = _this.rtl ? 'rtl' : 'ltr';\n        });\n        this.drawerService.owner = this;\n    }\n    Object.defineProperty(DrawerComponent.prototype, \"startPositionClass\", {\n        get: function () {\n            return this.position === 'start';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DrawerComponent.prototype, \"endPositionClass\", {\n        get: function () {\n            return this.position === 'end';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DrawerComponent.prototype, \"overlayTransofrmStyles\", {\n        get: function () {\n            if (this.mode === 'push') {\n                return;\n            }\n            if (this.expanded || this.minimized) {\n                return \"translateX(0px)\";\n            }\n            return \"translateX(-100%)\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DrawerComponent.prototype, \"flexStyles\", {\n        get: function () {\n            if (this.mode === 'overlay') {\n                return;\n            }\n            if (!this.expanded && !this.minimized) {\n                return 0;\n            }\n            return this.drawerWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DrawerComponent.prototype, \"items\", {\n        get: function () {\n            return this._items;\n        },\n        /**\n         * The collection of items that will be rendered in the Drawer.\n         */\n        set: function (items) {\n            if (isPresent(items) && items.length > 0) {\n                this._items = items;\n                this.drawerService.initSelection();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DrawerComponent.prototype.ngOnDestroy = function () {\n        if (this.dynamicRTLSubscription) {\n            this.dynamicRTLSubscription.unsubscribe();\n        }\n    };\n    Object.defineProperty(DrawerComponent.prototype, \"minimized\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.mini && !this.expanded;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DrawerComponent.prototype, \"drawerWidth\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.minimized ? this.miniWidth : this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Toggles the visibility of the Drawer.\n     *\n     * @param expanded? - Boolean. Specifies if the Drawer will be expanded or collapsed.\n     */\n    DrawerComponent.prototype.toggle = function (expanded) {\n        var _this = this;\n        var previous = this.expanded;\n        var current = isPresent(expanded) ? expanded : !previous;\n        if (current === previous) {\n            return;\n        }\n        if (current === true) {\n            this.setExpanded(true);\n        }\n        else if (current === false && !this.animation) {\n            this.setExpanded(false);\n        }\n        if (this.animation) {\n            this.animationEnd.pipe(take(1))\n                .subscribe(function () { _this.onAnimationEnd(current); });\n            this.animate(current);\n        }\n        else {\n            this[current ? 'expand' : 'collapse'].emit();\n        }\n    };\n    DrawerComponent.prototype.onAnimationEnd = function (currentExpanded) {\n        if (currentExpanded) {\n            this.expand.emit();\n        }\n        else {\n            this.setExpanded(false);\n            this.collapse.emit();\n        }\n    };\n    DrawerComponent.prototype.setExpanded = function (value) {\n        this.expanded = value;\n        this.expandedChange.emit(value);\n    };\n    DrawerComponent.prototype.animate = function (expanded) {\n        var settings = {\n            mode: this.mode,\n            mini: this.mini,\n            miniWidth: this.miniWidth,\n            width: this.width,\n            rtl: this.rtl,\n            position: this.position,\n            animation: (typeof this.animation !== 'boolean') ? this.animation : DEFAULT_ANIMATION\n        };\n        var animation = expanded ? expandAnimation(settings) : collapseAnimation(settings);\n        var player = this.createPlayer(animation, this.element.nativeElement);\n        player.play();\n    };\n    DrawerComponent.prototype.createPlayer = function (animation, animatedElement) {\n        var _this = this;\n        var factory = this.builder.build(animation);\n        var player = factory.create(animatedElement);\n        player.onDone(function () {\n            if (player) {\n                _this.animationEnd.emit();\n                player.destroy();\n                player = null;\n            }\n        });\n        return player;\n    };\n    DrawerComponent.decorators = [\n        { type: Component, args: [{\n                    exportAs: 'kendoDrawer',\n                    providers: [\n                        LocalizationService,\n                        DrawerService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.drawer'\n                        }\n                    ],\n                    selector: 'kendo-drawer',\n                    template: \"\\n        <div class=\\\"k-drawer-wrapper\\\" *ngIf=\\\"expanded || mini\\\" [style.width.px]=\\\"drawerWidth\\\">\\n            <ng-container *ngIf=\\\"!drawerTemplate\\\">\\n                <ng-template *ngIf=\\\"headerTemplate\\\"\\n                    [ngTemplateOutlet]=\\\"headerTemplate?.templateRef\\\">\\n                </ng-template>\\n\\n                <ul kendoDrawerList\\n                    [items]=\\\"items\\\" [mini]=\\\"mini\\\" [expanded]=\\\"expanded\\\"\\n                    [itemTemplate]=\\\"itemTemplate?.templateRef\\\"\\n                    class=\\\"k-drawer-items\\\">\\n                </ul>\\n\\n                <ng-template *ngIf=\\\"footerTemplate\\\"\\n                    [ngTemplateOutlet]=\\\"footerTemplate?.templateRef\\\">\\n                </ng-template>\\n            </ng-container>\\n\\n            <ng-template *ngIf=\\\"drawerTemplate\\\"\\n                [ngTemplateOutlet]=\\\"drawerTemplate?.templateRef\\\">\\n            </ng-template>\\n        </div>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    DrawerComponent.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: AnimationBuilder },\n        { type: LocalizationService },\n        { type: DrawerService }\n    ]; };\n    DrawerComponent.propDecorators = {\n        hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-drawer',] }],\n        startPositionClass: [{ type: HostBinding, args: ['class.k-drawer-start',] }],\n        endPositionClass: [{ type: HostBinding, args: ['class.k-drawer-end',] }],\n        overlayTransofrmStyles: [{ type: HostBinding, args: ['style.transform',] }],\n        flexStyles: [{ type: HostBinding, args: ['style.flexBasis.px',] }],\n        mode: [{ type: Input }],\n        position: [{ type: Input }],\n        mini: [{ type: Input }],\n        expanded: [{ type: Input }],\n        width: [{ type: Input }],\n        miniWidth: [{ type: Input }],\n        autoCollapse: [{ type: Input }],\n        items: [{ type: Input }],\n        direction: [{ type: HostBinding, args: ['attr.dir',] }],\n        animation: [{ type: Input }],\n        expand: [{ type: Output }],\n        collapse: [{ type: Output }],\n        select: [{ type: Output }],\n        expandedChange: [{ type: Output }],\n        drawerTemplate: [{ type: ContentChild, args: [DrawerTemplateDirective,] }],\n        footerTemplate: [{ type: ContentChild, args: [DrawerFooterTemplateDirective,] }],\n        headerTemplate: [{ type: ContentChild, args: [DrawerHeaderTemplateDirective,] }],\n        itemTemplate: [{ type: ContentChild, args: [DrawerItemTemplateDirective,] }]\n    };\n    return DrawerComponent;\n}());\n\n/**\n * Displays images, icons or initials representing people or other entities.\n */\nvar AvatarComponent = /** @class */ (function () {\n    function AvatarComponent() {\n        this.hostClass = true;\n        /**\n         * Sets the shape for the avatar.\n         *\n         * Possible values are:\n         * * (Default) `square`\n         * * `circle`\n         * * `rounded`\n         *\n         */\n        this.shape = 'square';\n        /**\n         * Sets the width of the avatar.\n         */\n        this.width = '32px';\n        /**\n         * Sets the height of the avatar.\n         */\n        this.height = '32px';\n    }\n    Object.defineProperty(AvatarComponent.prototype, \"circleClass\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.shape === 'circle';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AvatarComponent.prototype, \"roundedClass\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.shape === 'rounded';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AvatarComponent.prototype, \"squareClass\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.shape === 'square';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AvatarComponent.prototype, \"avatarWidth\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AvatarComponent.prototype, \"avatarHeight\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AvatarComponent.prototype, \"initialsAvatar\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return Boolean(this.initials);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AvatarComponent.prototype, \"imageAvatar\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return Boolean(this.imageSrc);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AvatarComponent.prototype, \"iconAvatar\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return Boolean(this.icon || this.iconClass);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AvatarComponent.prototype, \"imageUrl\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return \"url(\" + this.imageSrc + \")\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AvatarComponent.prototype.ngOnInit = function () {\n        this.verifyProperties();\n    };\n    /**\n     * @hidden\n     */\n    AvatarComponent.prototype.iconClasses = function () {\n        if (this.icon) {\n            return \"k-icon k-i-\" + this.icon;\n        }\n        if (this.iconClass) {\n            return \"\" + this.iconClass;\n        }\n    };\n    Object.defineProperty(AvatarComponent.prototype, \"customAvatar\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return !(this.imageSrc || this.initials || this.icon || this.iconClass);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AvatarComponent.prototype.verifyProperties = function () {\n        if (!isDevMode()) {\n            return;\n        }\n        var inputs = [this.icon || this.iconClass, this.imageSrc, this.initials];\n        var inputsLength = inputs.filter(function (value) { return value; }).length;\n        if (inputsLength > 1) {\n            throw new Error(\"\\n                Invalid property configuration given.\\n                The kendo-avatar component can accept only one of:\\n                icon, imageSrc or initials properties.\\n            \");\n        }\n    };\n    AvatarComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-avatar',\n                    template: \"\\n        <ng-content *ngIf=\\\"customAvatar\\\"></ng-content>\\n\\n        <ng-container *ngIf=\\\"imageSrc\\\">\\n            <div [style.width]=\\\"width\\\" [style.height]=\\\"height\\\" [ngStyle]=\\\"cssStyle\\\" [style.backgroundImage]=\\\"imageUrl\\\"></div>\\n        </ng-container>\\n\\n        <ng-container *ngIf=\\\"initials\\\">\\n            <span [ngStyle]=\\\"cssStyle\\\">{{ initials.substring(0, 2) }}</span>\\n        </ng-container>\\n\\n        <ng-container *ngIf=\\\"icon || iconClass\\\">\\n            <span [ngStyle]=\\\"cssStyle\\\" [ngClass]=\\\"iconClasses()\\\"></span>\\n        </ng-container>\\n    \"\n                },] },\n    ];\n    AvatarComponent.propDecorators = {\n        hostClass: [{ type: HostBinding, args: ['class.k-avatar',] }],\n        shape: [{ type: Input }],\n        circleClass: [{ type: HostBinding, args: ['class.k-avatar-circle',] }],\n        roundedClass: [{ type: HostBinding, args: ['class.k-avatar-rounded',] }],\n        squareClass: [{ type: HostBinding, args: ['class.k-avatar-square',] }],\n        iconClass: [{ type: Input }],\n        width: [{ type: Input }],\n        avatarWidth: [{ type: HostBinding, args: ['style.width',] }],\n        height: [{ type: Input }],\n        avatarHeight: [{ type: HostBinding, args: ['style.height',] }],\n        initialsAvatar: [{ type: HostBinding, args: ['class.k-avatar-initials',] }],\n        imageAvatar: [{ type: HostBinding, args: ['class.k-avatar-image',] }],\n        iconAvatar: [{ type: HostBinding, args: ['class.k-avatar-icon',] }],\n        cssStyle: [{ type: Input }],\n        initials: [{ type: Input }],\n        icon: [{ type: Input }],\n        imageSrc: [{ type: Input }]\n    };\n    return AvatarComponent;\n}());\n\n/**\n * Represents the [Kendo UI Card component for Angular]({% slug overview_card %})\n */\nvar CardComponent = /** @class */ (function () {\n    function CardComponent(localizationService) {\n        var _this = this;\n        this.localizationService = localizationService;\n        this.hostClass = true;\n        /**\n         * Specifies the layout of the Card content.\n         *\n         * The possible values are:\n         * * (Default) `vertical`\n         * * `horizontal`\n         *\n         */\n        this.orientation = 'vertical';\n        /**\n         * Defines the width of the Card.\n         * Defaults to `285px`.\n         */\n        this.width = '285px';\n        this.rtl = false;\n        this.dynamicRTLSubscription = this.localizationService.changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.rtl = rtl;\n            _this.direction = _this.rtl ? 'rtl' : 'ltr';\n        });\n    }\n    Object.defineProperty(CardComponent.prototype, \"widthStyle\", {\n        get: function () {\n            return this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CardComponent.prototype, \"vertical\", {\n        get: function () {\n            return this.orientation === 'vertical';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CardComponent.prototype, \"horizontal\", {\n        get: function () {\n            return this.orientation === 'horizontal';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CardComponent.prototype.ngOnDestroy = function () {\n        if (this.dynamicRTLSubscription) {\n            this.dynamicRTLSubscription.unsubscribe();\n        }\n    };\n    CardComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-card',\n                    providers: [\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.card.component'\n                        }\n                    ],\n                    template: \"\\n        <ng-content></ng-content>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    CardComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    CardComponent.propDecorators = {\n        hostClass: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-card',] }],\n        widthStyle: [{ type: HostBinding, args: ['style.width',] }],\n        vertical: [{ type: HostBinding, args: ['class.k-card-vertical',] }],\n        horizontal: [{ type: HostBinding, args: ['class.k-card-horizontal',] }],\n        direction: [{ type: HostBinding, args: ['attr.dir',] }],\n        orientation: [{ type: Input }],\n        width: [{ type: Input }]\n    };\n    return CardComponent;\n}());\n\n/**\n * Specifies the content in the Card header.\n */\nvar CardHeaderComponent = /** @class */ (function () {\n    function CardHeaderComponent() {\n        this.hostClass = true;\n    }\n    CardHeaderComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-card-header',\n                    template: \"\\n        <ng-content></ng-content>\\n    \"\n                },] },\n    ];\n    CardHeaderComponent.propDecorators = {\n        hostClass: [{ type: HostBinding, args: ['class.k-card-header',] }]\n    };\n    return CardHeaderComponent;\n}());\n\n/**\n * Specifies the content in the Card body.\n */\nvar CardBodyComponent = /** @class */ (function () {\n    function CardBodyComponent() {\n        this.hostClass = true;\n    }\n    CardBodyComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-card-body',\n                    template: \"\\n        <ng-content></ng-content>\\n    \"\n                },] },\n    ];\n    CardBodyComponent.propDecorators = {\n        hostClass: [{ type: HostBinding, args: ['class.k-card-body',] }]\n    };\n    return CardBodyComponent;\n}());\n\n/**\n * Specifies the content in the Card footer.\n */\nvar CardFooterComponent = /** @class */ (function () {\n    function CardFooterComponent() {\n        this.hostClass = true;\n    }\n    CardFooterComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-card-footer',\n                    template: \"\\n        <ng-content></ng-content>\\n    \"\n                },] },\n    ];\n    CardFooterComponent.propDecorators = {\n        hostClass: [{ type: HostBinding, args: ['class.k-card-footer',] }]\n    };\n    return CardFooterComponent;\n}());\n\n/**\n * Specifies the action buttons of the Card.\n * * ([see example]({% slug actions_card %})).\n */\nvar CardActionsComponent = /** @class */ (function () {\n    function CardActionsComponent() {\n        this.hostClass = true;\n        /**\n         * Specifies the layout of the Card action buttons.\n         *\n         * * The possible values are:\n         * * (Default) `horizontal`\n         * * `vertical`\n         *\n         */\n        this.orientation = 'horizontal';\n        /**\n         * Specifies the layout of the Card action buttons.\n         *\n         * The possible values are:\n         * * (Default) `start`\n         * * `center`\n         * * `end`\n         * * `stretched`\n         *\n         */\n        this.layout = 'start';\n        /**\n         * Fires when the user clicks an action button.\n         */\n        this.action = new EventEmitter();\n    }\n    Object.defineProperty(CardActionsComponent.prototype, \"stretchedClass\", {\n        get: function () {\n            return this.layout === 'stretched';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CardActionsComponent.prototype, \"startClass\", {\n        get: function () {\n            return this.layout === 'start';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CardActionsComponent.prototype, \"endClass\", {\n        get: function () {\n            return this.layout === 'end';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CardActionsComponent.prototype, \"centerClass\", {\n        get: function () {\n            return this.layout === 'center';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CardActionsComponent.prototype, \"verticalClass\", {\n        get: function () {\n            return this.orientation === 'vertical';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CardActionsComponent.prototype, \"horizontalClass\", {\n        get: function () {\n            return this.orientation === 'horizontal';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    CardActionsComponent.prototype.onClick = function (action) {\n        this.action.emit(action);\n    };\n    /**\n     * @hidden\n     */\n    CardActionsComponent.prototype.actionTemplate = function () {\n        return this.actions instanceof TemplateRef;\n    };\n    CardActionsComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-card-actions',\n                    template: \"\\n        <ng-content *ngIf=\\\"!actions\\\"></ng-content>\\n\\n        <ng-container *ngIf=\\\"!actionTemplate()\\\">\\n            <button type=\\\"button\\\"\\n                class=\\\"k-button\\\"\\n                [class.k-primary]=\\\"action.primary\\\"\\n                [class.k-flat]=\\\"action.flat\\\"\\n                (click)=\\\"onClick(action)\\\"\\n                *ngFor=\\\"let action of actions\\\"\\n            >\\n                {{ action.text }}\\n            </button>\\n        </ng-container>\\n\\n        <ng-template [ngTemplateOutlet]=\\\"actions\\\" *ngIf=\\\"actionTemplate()\\\"></ng-template>\\n    \"\n                },] },\n    ];\n    CardActionsComponent.propDecorators = {\n        hostClass: [{ type: HostBinding, args: ['class.k-card-actions',] }],\n        stretchedClass: [{ type: HostBinding, args: ['class.k-card-actions-stretched',] }],\n        startClass: [{ type: HostBinding, args: ['class.k-card-actions-start',] }],\n        endClass: [{ type: HostBinding, args: ['class.k-card-actions-end',] }],\n        centerClass: [{ type: HostBinding, args: ['class.k-card-actions-center',] }],\n        verticalClass: [{ type: HostBinding, args: ['class.k-card-actions-vertical',] }],\n        horizontalClass: [{ type: HostBinding, args: ['class.k-card-actions-horizontal',] }],\n        orientation: [{ type: Input }],\n        layout: [{ type: Input }],\n        actions: [{ type: Input }],\n        action: [{ type: Output }]\n    };\n    return CardActionsComponent;\n}());\n\n/**\n * Specifies a separator in the content of the Card.\n */\nvar CardSeparatorDirective = /** @class */ (function () {\n    function CardSeparatorDirective() {\n        this.hostClass = true;\n        /**\n         * Specifies the orientation of the Card separator.\n         *\n         * The possible values are:\n         * (Default) `horizontal`\n         * `vertical`\n         */\n        this.orientation = 'horizontal';\n    }\n    Object.defineProperty(CardSeparatorDirective.prototype, \"verticalClass\", {\n        get: function () {\n            return this.orientation === 'vertical';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CardSeparatorDirective.prototype, \"horizontalClass\", {\n        get: function () {\n            return this.orientation === 'horizontal';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CardSeparatorDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoCardSeparator]'\n                },] },\n    ];\n    CardSeparatorDirective.propDecorators = {\n        hostClass: [{ type: HostBinding, args: ['class.k-card-separator',] }],\n        verticalClass: [{ type: HostBinding, args: ['class.k-separator-vertical',] }],\n        horizontalClass: [{ type: HostBinding, args: ['class.k-separator-horizontal',] }],\n        color: [{ type: HostBinding, args: ['style.color',] }, { type: Input }],\n        orientation: [{ type: Input }]\n    };\n    return CardSeparatorDirective;\n}());\n\n/**\n * Specifies the text and styles for the title of the Card.\n */\nvar CardTitleDirective = /** @class */ (function () {\n    function CardTitleDirective() {\n        this.hostClass = true;\n    }\n    CardTitleDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoCardTitle]'\n                },] },\n    ];\n    CardTitleDirective.propDecorators = {\n        hostClass: [{ type: HostBinding, args: ['class.k-card-title',] }]\n    };\n    return CardTitleDirective;\n}());\n\n/**\n * Specifies the text and styles for the subtitle of the Card.\n */\nvar CardSubtitleDirective = /** @class */ (function () {\n    function CardSubtitleDirective() {\n        this.hostClass = true;\n    }\n    CardSubtitleDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoCardSubtitle]'\n                },] },\n    ];\n    CardSubtitleDirective.propDecorators = {\n        hostClass: [{ type: HostBinding, args: ['class.k-card-subtitle',] }]\n    };\n    return CardSubtitleDirective;\n}());\n\n/**\n * Specifies any media that will be displayed and aligned in the Card.\n */\nvar CardMediaDirective = /** @class */ (function () {\n    function CardMediaDirective() {\n        this.hostClass = true;\n    }\n    CardMediaDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoCardMedia]'\n                },] },\n    ];\n    CardMediaDirective.propDecorators = {\n        hostClass: [{ type: HostBinding, args: ['class.k-card-media',] }]\n    };\n    return CardMediaDirective;\n}());\n\n/**\n * The settings of the Card action buttons.\n */\nvar CardAction = /** @class */ (function () {\n    function CardAction() {\n    }\n    return CardAction;\n}());\n\nvar exportedModules = [\n    PanelBarComponent,\n    PanelBarItemComponent,\n    PanelBarContentDirective,\n    PanelBarItemTemplateDirective,\n    PanelBarItemTitleDirective\n];\nvar declarations = exportedModules.slice();\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the PanelBar component.\n *\n * The module registers:\n * - `PanelBarComponent`&mdash;The `PanelBar` component class.\n * - `PanelBarItemComponent`&mdash;The `PanelBarItem` component class.\n * - `PanelBarContentComponent`&mdash;The `PanelBarContent` component class.\n * - `PanelBarItemTemplateDirective&mdash;The `PanelBarItemTemplate` directive.\n * - `PanelBarItemTitleDirective&mdash;The `PanelBarItemTitle` directive.\n */\nvar PanelBarModule = /** @class */ (function () {\n    function PanelBarModule() {\n    }\n    PanelBarModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [declarations],\n                    exports: [exportedModules],\n                    imports: [CommonModule]\n                },] },\n    ];\n    return PanelBarModule;\n}());\n\nvar stopPropagation = function (_a) {\n    var event = _a.originalEvent;\n    event.stopPropagation();\n    event.preventDefault();\n};\nvar preventOnDblClick = function (release) { return function (mouseDown) {\n    return of(mouseDown).pipe(delay(150), takeUntil(release));\n}; };\nvar classFromObject = function (classes) { return Object.keys(classes).filter(function (c) { return classes[c]; }).join(' '); };\nvar createMoveStream = function (draggable) { return function (mouseDown) {\n    return draggable.kendoDrag\n        .pipe(takeUntil(draggable.kendoRelease), map(function (_a) {\n        var pageX = _a.pageX, pageY = _a.pageY;\n        return ({\n            originalX: mouseDown.pageX,\n            originalY: mouseDown.pageY,\n            pageX: pageX,\n            pageY: pageY\n        });\n    }));\n}; };\n/**\n * @hidden\n */\nvar SplitterBarComponent = /** @class */ (function () {\n    function SplitterBarComponent(draggable, splitter, localization) {\n        this.draggable = draggable;\n        this.splitter = splitter;\n        this.localization = localization;\n        this.orientation = 'horizontal';\n        this.index = 0;\n        this.ariaRole = 'separator';\n        this.focused = false;\n        this.subscriptions = new Subscription();\n    }\n    Object.defineProperty(SplitterBarComponent.prototype, \"direction\", {\n        get: function () {\n            return this.localization.rtl ? 'rtl' : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitterBarComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.splitter.isStatic(this.index) ? -1 : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitterBarComponent.prototype, \"hostClasses\", {\n        get: function () {\n            var isHorizontal = this.orientation === 'horizontal';\n            var isDraggable = this.splitter.isDraggable(this.index);\n            var isStatic = this.splitter.isStatic(this.index);\n            return classFromObject({\n                'k-state-focused': this.focused,\n                'k-splitbar': true,\n                'k-splitbar-horizontal': isHorizontal,\n                'k-splitbar-vertical': !isHorizontal,\n                'k-splitbar-draggable-horizontal': isHorizontal && isDraggable,\n                'k-splitbar-draggable-vertical': !isHorizontal && isDraggable,\n                'k-splitbar-static-horizontal': isHorizontal && isStatic,\n                'k-splitbar-static-vertical': !isHorizontal && isStatic\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitterBarComponent.prototype, \"touchAction\", {\n        get: function () {\n            if (this.splitter.isDraggable(this.index)) {\n                return 'none';\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitterBarComponent.prototype, \"order\", {\n        get: function () {\n            return 2 * this.index + 1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SplitterBarComponent.prototype.collapseAny = function () {\n        this.tryToggleNearest();\n    };\n    SplitterBarComponent.prototype.onFocusIn = function () {\n        this.focused = true;\n    };\n    SplitterBarComponent.prototype.onFocusOut = function () {\n        this.focused = false;\n    };\n    SplitterBarComponent.prototype.onKeyDown = function (event) {\n        var _this = this;\n        var keyCode = event && event.keyCode;\n        var isHorizontal = this.orientation === 'horizontal';\n        var resize = function (delta) {\n            event.preventDefault();\n            var state$$1 = _this.splitter.dragState(_this.index);\n            _this.splitter.setSize(state$$1, delta);\n        };\n        if (keyCode === Keys.Enter) {\n            event.preventDefault();\n            this.tryToggleNearest();\n        }\n        else if (isHorizontal && keyCode === Keys.ArrowLeft) {\n            resize(-10);\n        }\n        else if (isHorizontal && keyCode === Keys.ArrowRight) {\n            resize(10);\n        }\n        else if (!isHorizontal && keyCode === Keys.ArrowUp) {\n            resize(-10);\n        }\n        else if (!isHorizontal && keyCode === Keys.ArrowDown) {\n            resize(10);\n        }\n    };\n    SplitterBarComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        var state$$1;\n        var listener = this.draggable.kendoPress.pipe(tap(stopPropagation), filter(function () { return _this.splitter.isDraggable(_this.index); }), tap(function () { return state$$1 = _this.splitter.dragState(_this.index); }), tap(function () { return _this.splitter.toggleContentOverlay(_this.index, true); }), switchMap(preventOnDblClick(this.draggable.kendoRelease)), switchMap(createMoveStream(this.draggable))).subscribe(function (_a) {\n            var pageX = _a.pageX, pageY = _a.pageY, originalX = _a.originalX, originalY = _a.originalY;\n            var delta;\n            if (_this.orientation === 'vertical') {\n                delta = pageY - originalY;\n            }\n            else if (_this.direction === 'rtl') {\n                delta = originalX - pageX;\n            }\n            else {\n                delta = pageX - originalX;\n            }\n            _this.splitter.setSize(state$$1, delta);\n        });\n        this.subscriptions.add(listener);\n        this.subscriptions.add(this.draggable.kendoRelease.subscribe(function () { return _this.splitter.toggleContentOverlay(_this.index, false); }));\n    };\n    SplitterBarComponent.prototype.ngOnDestroy = function () {\n        if (this.subscriptions) {\n            this.subscriptions.unsubscribe();\n        }\n    };\n    SplitterBarComponent.prototype.togglePrevious = function () {\n        this.splitter.tryToggle(this.index);\n    };\n    SplitterBarComponent.prototype.toggleNext = function () {\n        this.splitter.tryToggle(this.index + 1);\n    };\n    SplitterBarComponent.prototype.previousArrowClass = function () {\n        var pane = this.splitter.pane(this.index);\n        var nextPane = this.splitter.pane(this.index + 1);\n        var isCollapsible = pane.collapsible;\n        var isCollapsed = pane.collapsed;\n        var isHorizontal = this.orientation === 'horizontal';\n        return classFromObject({\n            'k-icon': true,\n            'k-hidden': !isCollapsible || nextPane.isHidden,\n            'k-collapse-prev': isCollapsible,\n            'k-i-arrow-60-left': isCollapsible && isHorizontal && !isCollapsed,\n            'k-i-arrow-60-right': isCollapsible && isHorizontal && isCollapsed,\n            'k-i-arrow-60-up': isCollapsible && !isHorizontal && !isCollapsed,\n            'k-i-arrow-60-down': isCollapsible && !isHorizontal && isCollapsed\n        });\n    };\n    SplitterBarComponent.prototype.nextArrowClass = function () {\n        var pane = this.splitter.pane(this.index + 1);\n        var prevPane = this.splitter.pane(this.index);\n        var isCollapsible = pane.collapsible;\n        var isCollapsed = pane.collapsed;\n        var isHorizontal = this.orientation === 'horizontal';\n        return classFromObject({\n            'k-icon': true,\n            'k-hidden': !isCollapsible || prevPane.isHidden,\n            'k-collapse-next': isCollapsible,\n            'k-i-arrow-60-right': isCollapsible && isHorizontal && !isCollapsed,\n            'k-i-arrow-60-left': isCollapsible && isHorizontal && isCollapsed,\n            'k-i-arrow-60-down': isCollapsible && !isHorizontal && !isCollapsed,\n            'k-i-arrow-60-up': isCollapsible && !isHorizontal && isCollapsed\n        });\n    };\n    SplitterBarComponent.prototype.tryToggleNearest = function () {\n        var prev = this.index;\n        var next = this.index + 1;\n        if (!this.splitter.tryToggle(prev)) {\n            this.splitter.tryToggle(next);\n        }\n    };\n    SplitterBarComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-splitter-bar',\n                    template: \"\\n      <div [class]=\\\"previousArrowClass()\\\" (click)=\\\"togglePrevious()\\\"></div>\\n      <div class=\\\"k-resize-handle\\\"></div>\\n      <div [class]=\\\"nextArrowClass()\\\" (click)=\\\"toggleNext()\\\"></div>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    SplitterBarComponent.ctorParameters = function () { return [\n        { type: DraggableDirective, decorators: [{ type: Host }] },\n        { type: SplitterService },\n        { type: LocalizationService }\n    ]; };\n    SplitterBarComponent.propDecorators = {\n        orientation: [{ type: Input }, { type: HostBinding, args: ['attr.aria-orientation',] }],\n        index: [{ type: Input }],\n        ariaRole: [{ type: HostBinding, args: ['attr.role',] }],\n        focused: [{ type: HostBinding, args: ['class.k-state-focused',] }],\n        tabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],\n        hostClasses: [{ type: HostBinding, args: ['class',] }],\n        touchAction: [{ type: HostBinding, args: ['style.touch-action',] }],\n        order: [{ type: HostBinding, args: ['style.-ms-flex-order',] }, { type: HostBinding, args: ['style.order',] }],\n        collapseAny: [{ type: HostListener, args: ['dblclick',] }],\n        onFocusIn: [{ type: HostListener, args: ['focusin',] }],\n        onFocusOut: [{ type: HostListener, args: ['focusout',] }],\n        onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]\n    };\n    return SplitterBarComponent;\n}());\n\nvar exportedModules$1 = [\n    SplitterComponent,\n    SplitterPaneComponent\n];\nvar declarations$1 = [\n    SplitterBarComponent\n].concat(exportedModules$1);\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Splitter component.\n *\n * The module registers:\n * - `SplitterComponent`&mdash;The `Splitter` component class.\n * - `SplitterPaneComponent`&mdash;The `SplitterPane` component class.\n */\nvar SplitterModule = /** @class */ (function () {\n    function SplitterModule() {\n    }\n    SplitterModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [declarations$1],\n                    exports: [exportedModules$1],\n                    imports: [\n                        CommonModule,\n                        DraggableModule\n                    ]\n                },] },\n    ];\n    return SplitterModule;\n}());\n\nvar exportedModules$2 = [\n    TabStripComponent,\n    TabStripTabComponent,\n    TabContentDirective,\n    TabTitleDirective\n];\nvar declarations$2 = exportedModules$2.slice();\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the TabStrip component.\n *\n * The module registers:\n * - `TabStripComponent`&mdash;The `TabStrip` component class.\n * - `TabStripTabComponent`&mdash;The `TabStripTab` component class.\n * - `TabContentDirective`&mdash;The tab content directive used on the `<ng-template>` tag.\n * - `TabTitleDirective`&mdash;The tab title directive used on the `<ng-template>` tag.\n */\nvar TabStripModule = /** @class */ (function () {\n    function TabStripModule() {\n    }\n    TabStripModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [declarations$2],\n                    exports: [exportedModules$2],\n                    imports: [CommonModule]\n                },] },\n    ];\n    return TabStripModule;\n}());\n\n/**\n * @hidden\n */\nvar DrawerContainerComponent = /** @class */ (function () {\n    function DrawerContainerComponent(localizationService) {\n        var _this = this;\n        this.localizationService = localizationService;\n        this.rtl = false;\n        this.dynamicRTLSubscription = this.localizationService.changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.rtl = rtl;\n            _this.direction = _this.rtl ? 'rtl' : 'ltr';\n        });\n    }\n    Object.defineProperty(DrawerContainerComponent.prototype, \"hostClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DrawerContainerComponent.prototype, \"overlayClass\", {\n        get: function () {\n            return this.drawer.mode === 'overlay';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DrawerContainerComponent.prototype, \"miniClass\", {\n        get: function () {\n            return this.drawer.mini;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DrawerContainerComponent.prototype, \"pushClass\", {\n        get: function () {\n            return this.drawer.mode === 'push';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DrawerContainerComponent.prototype, \"isExpandedClass\", {\n        get: function () {\n            return this.drawer.expanded;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DrawerContainerComponent.prototype.ngOnDestroy = function () {\n        if (this.dynamicRTLSubscription) {\n            this.dynamicRTLSubscription.unsubscribe();\n        }\n    };\n    Object.defineProperty(DrawerContainerComponent.prototype, \"overlay\", {\n        get: function () {\n            return isPresent(this.drawer) &&\n                this.drawer.expanded &&\n                this.drawer.mode === 'overlay';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    DrawerContainerComponent.prototype.closeDrawer = function () {\n        if (this.overlay && this.drawer.autoCollapse) {\n            this.drawer.toggle(false);\n        }\n    };\n    DrawerContainerComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-drawer-container',\n                    providers: [\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.drawer.container'\n                        }\n                    ],\n                    template: \"\\n        <div class=\\\"k-overlay\\\" *ngIf=\\\"overlay\\\" (click)=\\\"closeDrawer()\\\"></div>\\n        <ng-content></ng-content>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    DrawerContainerComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    DrawerContainerComponent.propDecorators = {\n        hostClass: [{ type: HostBinding, args: ['class.k-drawer-container',] }],\n        overlayClass: [{ type: HostBinding, args: ['class.k-drawer-overlay',] }],\n        miniClass: [{ type: HostBinding, args: ['class.k-drawer-mini',] }],\n        pushClass: [{ type: HostBinding, args: ['class.k-drawer-push',] }],\n        isExpandedClass: [{ type: HostBinding, args: ['class.k-drawer-expanded',] }],\n        direction: [{ type: HostBinding, args: ['attr.dir',] }],\n        drawer: [{ type: ContentChild, args: [DrawerComponent,] }]\n    };\n    return DrawerContainerComponent;\n}());\n\n/**\n * @hidden\n */\nvar DrawerContentComponent = /** @class */ (function () {\n    function DrawerContentComponent() {\n        this.hostClasses = true;\n    }\n    DrawerContentComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-drawer-content',\n                    template: \"\\n        <ng-content></ng-content>\\n    \",\n                    encapsulation: ViewEncapsulation.None\n                },] },\n    ];\n    /** @nocollapse */\n    DrawerContentComponent.ctorParameters = function () { return []; };\n    DrawerContentComponent.propDecorators = {\n        hostClasses: [{ type: HostBinding, args: ['class.k-drawer-content',] }]\n    };\n    return DrawerContentComponent;\n}());\n\n/**\n * @hidden\n */\nvar DrawerItemComponent = /** @class */ (function () {\n    function DrawerItemComponent(drawer) {\n        this.drawer = drawer;\n    }\n    Object.defineProperty(DrawerItemComponent.prototype, \"disabledClass\", {\n        get: function () {\n            return this.item.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DrawerItemComponent.prototype, \"selectedClass\", {\n        get: function () {\n            return this.drawer.selectedIndices.indexOf(this.index) >= 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    DrawerItemComponent.prototype.iconClasses = function (icon) {\n        return \"k-icon \" + icon;\n    };\n    DrawerItemComponent.decorators = [\n        { type: Component, args: [{\n                    selector: '[kendoDrawerItem]',\n                    template: \"\\n        <ng-template *ngIf=\\\"itemTemplate; else defaultTemplate\\\"\\n            [ngTemplateOutlet]=\\\"itemTemplate\\\"\\n            [ngTemplateOutletContext]=\\\"{ $implicit: item }\\\">\\n        </ng-template>\\n\\n        <ng-template #defaultTemplate>\\n            <ng-container *ngIf=\\\"expanded\\\">\\n                <span [ngClass]=\\\"iconClasses(item.icon)\\\"></span>\\n                <span class=\\\"k-item-text\\\">{{ item.text }}</span>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"mini && !expanded\\\">\\n                <span [ngClass]=\\\"iconClasses(item.icon)\\\"></span>\\n            </ng-container>\\n        </ng-template>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    DrawerItemComponent.ctorParameters = function () { return [\n        { type: DrawerService }\n    ]; };\n    DrawerItemComponent.propDecorators = {\n        item: [{ type: Input }],\n        index: [{ type: Input }],\n        itemTemplate: [{ type: Input }],\n        mini: [{ type: Input }],\n        expanded: [{ type: Input }],\n        disabled: [{ type: Input }],\n        cssClass: [{ type: Input }],\n        cssStyle: [{ type: Input }],\n        disabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }],\n        selectedClass: [{ type: HostBinding, args: ['class.k-state-selected',] }]\n    };\n    return DrawerItemComponent;\n}());\n\n/**\n * @hidden\n */\nvar DrawerListComponent = /** @class */ (function () {\n    function DrawerListComponent(drawerService, renderer, ngZone, changeDetector, element) {\n        this.drawerService = drawerService;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.changeDetector = changeDetector;\n        this.element = element;\n    }\n    DrawerListComponent.prototype.ngOnInit = function () {\n        this.initialSelection();\n        this.initDomEvents();\n    };\n    DrawerListComponent.prototype.ngOnDestroy = function () {\n        if (this.clickSubscription) {\n            this.clickSubscription();\n        }\n    };\n    DrawerListComponent.prototype.initialSelection = function () {\n        /* Differentiates a user selected item */\n        if (this.drawerService.selectedIndices.length === 0) {\n            this.drawerService.initSelection();\n        }\n    };\n    DrawerListComponent.prototype.initDomEvents = function () {\n        var _this = this;\n        if (!this.element) {\n            return;\n        }\n        this.ngZone.runOutsideAngular(function () {\n            var nativeElement = _this.element.nativeElement;\n            _this.clickSubscription = _this.renderer.listen(nativeElement, 'click', _this.clickHandler.bind(_this));\n        });\n    };\n    DrawerListComponent.prototype.clickHandler = function (e) {\n        // if (isFocusable(e.target) && !hasClass(e.target, 'k-drawer-item')) {\n        //     return;\n        // }\n        var _this = this;\n        var itemIdx = this.getDrawerItemIndex(e.target);\n        var item = this.items[itemIdx];\n        if (!item) {\n            return;\n        }\n        if (item.disabled) {\n            e.preventDefault();\n            return;\n        }\n        var args = {\n            index: itemIdx,\n            item: item,\n            originalEvent: e\n        };\n        this.ngZone.run(function () {\n            if (!_this.drawerService.emit('select', args)) {\n                _this.drawerService.onSelect(itemIdx);\n                _this.changeDetector.detectChanges();\n            }\n        });\n    };\n    DrawerListComponent.prototype.getDrawerItemIndex = function (target) {\n        var item = closestItem(target, this.element.nativeElement);\n        if (item) {\n            return itemIndex(item);\n        }\n    };\n    DrawerListComponent.decorators = [\n        { type: Component, args: [{\n                    selector: '[kendoDrawerList]',\n                    template: \"\\n        <ng-container *ngFor=\\\"let item of items; let idx = index\\\">\\n            <li *ngIf=\\\"!item.separator\\\" kendoDrawerItem\\n                class=\\\"k-drawer-item\\\"\\n                [item]=\\\"item\\\"\\n                [index]=\\\"idx\\\"\\n                [mini]=\\\"mini\\\"\\n                [expanded]=\\\"expanded\\\"\\n                [itemTemplate]=\\\"itemTemplate\\\"\\n                [attr.\" + ITEM_INDEX + \"]=\\\"idx\\\"\\n                [ngClass]=\\\"item.cssClass\\\"\\n                [ngStyle]=\\\"item.cssStyle\\\">\\n            </li>\\n\\n            <li *ngIf=\\\"item.separator\\\"\\n                class=\\\"k-drawer-item k-drawer-separator\\\"\\n                [ngClass]=\\\"item.cssClass\\\"\\n                [ngStyle]=\\\"item.cssStyle\\\">\\n                &nbsp;\\n            </li>\\n        </ng-container>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    DrawerListComponent.ctorParameters = function () { return [\n        { type: DrawerService },\n        { type: Renderer2 },\n        { type: NgZone },\n        { type: ChangeDetectorRef },\n        { type: ElementRef }\n    ]; };\n    DrawerListComponent.propDecorators = {\n        items: [{ type: Input }],\n        itemTemplate: [{ type: Input }],\n        mini: [{ type: Input }],\n        expanded: [{ type: Input }]\n    };\n    return DrawerListComponent;\n}());\n\nvar templateDirectives = [\n    DrawerTemplateDirective,\n    DrawerHeaderTemplateDirective,\n    DrawerFooterTemplateDirective,\n    DrawerItemTemplateDirective\n];\nvar exportedModules$3 = [\n    DrawerComponent,\n    DrawerContainerComponent,\n    DrawerContentComponent\n].concat(templateDirectives);\nvar declarations$3 = [\n    DrawerItemComponent,\n    DrawerListComponent\n].concat(exportedModules$3);\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Drawer component.\n */\nvar DrawerModule = /** @class */ (function () {\n    function DrawerModule() {\n    }\n    DrawerModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [declarations$3],\n                    exports: [exportedModules$3],\n                    imports: [CommonModule]\n                },] },\n    ];\n    return DrawerModule;\n}());\n\nvar cardDirectives = [\n    CardTitleDirective,\n    CardSubtitleDirective,\n    CardSeparatorDirective,\n    CardMediaDirective\n];\nvar exportedModules$4 = [\n    CardComponent,\n    CardHeaderComponent,\n    CardBodyComponent,\n    CardFooterComponent,\n    CardActionsComponent\n].concat(cardDirectives);\nvar declarations$4 = exportedModules$4.slice();\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Card component.\n */\nvar CardModule = /** @class */ (function () {\n    function CardModule() {\n    }\n    CardModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [declarations$4],\n                    exports: [exportedModules$4],\n                    imports: [CommonModule]\n                },] },\n    ];\n    return CardModule;\n}());\n\nvar exportedModules$5 = [\n    AvatarComponent\n];\nvar declarations$5 = exportedModules$5.slice();\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Avatar component.\n */\nvar AvatarModule = /** @class */ (function () {\n    function AvatarModule() {\n    }\n    AvatarModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [declarations$5],\n                    exports: [exportedModules$5],\n                    imports: [CommonModule]\n                },] },\n    ];\n    return AvatarModule;\n}());\n\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Layout components.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Layout module\n * import { LayoutModule } from '@progress/kendo-angular-layout';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, LayoutModule], // import Layout module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nvar LayoutModule = /** @class */ (function () {\n    function LayoutModule() {\n    }\n    LayoutModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [\n                        PanelBarModule,\n                        SplitterModule,\n                        TabStripModule,\n                        DrawerModule,\n                        AvatarModule,\n                        CardModule\n                    ]\n                },] },\n    ];\n    return LayoutModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { PreventableEvent, DrawerContainerComponent, DrawerContentComponent, DrawerService, DrawerItemComponent, DrawerListComponent, ITEM_INDEX, PanelBarService, SplitterBarComponent, SplitterService, PanelBarComponent, PanelBarItemComponent, PanelBarContentDirective, PanelBarItemTemplateDirective, PanelBarItemTitleDirective, PanelBarExpandMode, SplitterComponent, SplitterPaneComponent, TabStripComponent, TabStripTabComponent, TabContentDirective, TabTitleDirective, SelectEvent, DrawerComponent, DrawerSelectEvent, AvatarComponent, CardComponent, CardHeaderComponent, CardBodyComponent, CardFooterComponent, CardActionsComponent, CardSeparatorDirective, CardTitleDirective, CardSubtitleDirective, CardMediaDirective, CardAction, LayoutModule, PanelBarModule, SplitterModule, TabStripModule, DrawerModule, AvatarModule, CardModule, DrawerTemplateDirective, DrawerItemTemplateDirective, DrawerHeaderTemplateDirective, DrawerFooterTemplateDirective };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmDM,AAGA;;;;;;;gDAE0D;;;;;;;;;;;KAW3D,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA+BJ,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4UH,AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAmCA;;;;;;;;;;KAUD,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsbH,AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA8BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmLA,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6IA,AAGA;;;;;;;;;uEAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAkIF,AAeD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAqCD,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAwCJ,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;MA0BH,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiUA,AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAuBA;;;;;;;;;;;;;;KAcD,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;KAYJ,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;KAYJ,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;KAYJ,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA2LH;;;;;gDAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkQA,AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwJA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0DA,AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;;KAUD,AAMC;;;;;;;;;;;;;;;;;;;;oBAGA;;;;;;;;;;KAUD,AAMC;;;;;;;;;;;;;;;;;;;;oBAGA;;;;;;;;;;KAUD,AAMC;;;;;;;;;;;;;;;;;;;;oBAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyFA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAgCC,AAKD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;KAUD,AAKC;;;;;;;;;;;;;;;;oBAGA;;;;;;;;;;KAUD,AAKC;;;;;;;;;;;;;;;;oBAGA;;;;;;;;;;KAUD,AAKC;;;;;;;;;;;;;;;;oBAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAkCD;;;;;;;;;;;;;;;;;;;gDAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgMA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAoBA;;;;;;;;;;;;;;;;;;;;;KAqBD;;;;;;;;;;;;;;;;;;;;;gDAUC;;;;;;;;;;;;;;;;;;;;;;;KAuBD;;;;;;;;;;;;;;;;;gDAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0EA,AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;;KAUD,AAOC;;;;;;;;;;;;;;;;;;;;;;;oBAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8BA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuEA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAcA;;;;;;;;;;;;;;;;;;;;;;;;;KAyBD;;;;;;;;;;;;;;;;;;;;;;;;;gDAOC;;;;;;;;;;;;;;;;;;;;;;;;KAwBD;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAOC;;;;;;;;;;;;;;KAcD;;;;;;;;;;;gDAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAqCD;;;;;;;;;;;;;;;;;;;;;;;;;;gDAYC;;;;;;;;;"}