{"version":3,"file":"index.js","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-l10n/dist/fesm2015/index.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2019 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { map, skip, tap } from 'rxjs/operators';\n\n/* tslint:disable:max-line-length */\n/**\n * A base class for a service that returns localized messages.\n *\n * For more information, refer to the section on [using the message service]({% slug messages_l10n %}#toc-using-the-message-service).\n */\nclass MessageService {\n    constructor() {\n        /**\n         * @hidden\n         */\n        this.changes = new Subject();\n    }\n    /**\n     * Notifies the components that the messages were changed.\n     *\n     * @param rtl - (Optional) A new value for the [text direction token]({% slug api_l10n_rtl %}).\n     */\n    notify(rtl) {\n        this.changes.next({ rtl });\n    }\n    /**\n     * Returns a localized message for the supplied key.\n     *\n     * @param key - The message key. For example, `\"kendo.grid.noRecords\"`.\n     * @return - The localized message for this key or `undefined` if not found.\n     */\n    get(key) {\n        return undefined;\n    }\n}\nMessageService.decorators = [\n    { type: Injectable },\n];\n\n/**\n * Base class that acts as a component messages container.\n *\n * For internal use.\n * @hidden\n */\nclass ComponentMessages {\n    get override() {\n        return false;\n    }\n    ngOnChanges(changes) {\n        this.register(changes);\n        if (Object.keys(changes).some(field => !changes[field].isFirstChange())) {\n            this.service.notifyChanges();\n        }\n    }\n    ngOnInit() {\n        this.subscription = this.service.changes.pipe(skip(1)).subscribe(() => this.register(this));\n    }\n    register(changes) {\n        const keys = Object.keys(changes);\n        keys.forEach(key => this.service.register(key, this[key], this.override));\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n/**\n * A token that specifies the text direction of Kendo UI for Angular components.\n *\n * @example\n * {% embed_file rtl/app.module.ts preview %}\n * {% embed_file rtl/app.component.ts %}\n * {% embed_file shared/main.ts hidden %}\n *\n */\nconst RTL = new InjectionToken(\"Kendo UI Right-to-Left token\");\n\n/**\n * Localization prefix for the component messages.\n *\n * For internal use.\n * @hidden\n */\nconst L10N_PREFIX = new InjectionToken('Localization key prefix');\n/**\n * Component localization service.\n *\n * For internal use.\n * @hidden\n */\nclass LocalizationService {\n    constructor(prefix, messageService, _rtl) {\n        this.prefix = prefix;\n        this.messageService = messageService;\n        this._rtl = _rtl;\n        this.changes = new BehaviorSubject({ rtl: this._rtl });\n        this.dictionary = {};\n        if (messageService) {\n            this.subscription = messageService.changes\n                .pipe(map(({ rtl }) => rtl !== undefined ? rtl : this._rtl), tap(rtl => this._rtl = rtl))\n                .subscribe(rtl => {\n                this.dictionary = {};\n                this.changes.next({ rtl });\n            });\n        }\n    }\n    get rtl() {\n        return this._rtl;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    get(shortKey) {\n        const key = this.key(shortKey);\n        return this.dictionary[key];\n    }\n    register(shortKey, value, override = false) {\n        const key = this.key(shortKey);\n        let message = value;\n        if (!override) {\n            if (this.dictionary.hasOwnProperty(key)) {\n                return;\n            }\n            message = this.defaultValue(key, value);\n        }\n        this.dictionary[key] = message;\n    }\n    notifyChanges() {\n        this.changes.next({ rtl: this.rtl });\n    }\n    key(shortKey) {\n        return this.prefix + '.' + shortKey;\n    }\n    defaultValue(key, value) {\n        if (!this.messageService) {\n            return value;\n        }\n        const alt = this.messageService.get(key);\n        return (alt === undefined) ? value : alt;\n    }\n}\nLocalizationService.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nLocalizationService.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [L10N_PREFIX,] }] },\n    { type: MessageService, decorators: [{ type: Optional }] },\n    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] }] }\n];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MessageService, ComponentMessages, L10N_PREFIX, LocalizationService, RTL };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;CAwBC;;;gDAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8EA,wHAGC;;;;;;;;;;;;;;;;;;;kCAMA;;;;;;;"}