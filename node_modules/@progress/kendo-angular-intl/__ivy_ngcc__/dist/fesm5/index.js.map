{"version":3,"file":"index.js","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-intl/dist/fesm5/index.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { __extends } from 'tslib';\nimport { EventEmitter, Inject, Injectable, LOCALE_ID, NgModule, Pipe, defineInjectable, inject } from '@angular/core';\nimport { dateFieldName, dateFormatNames, firstDay, format, formatDate, formatNumber, load, localeInfo, numberSymbols, parseDate, parseNumber, setData, splitDateFormat, toString, weekendRange } from '@telerik/kendo-intl';\n\nvar DOCS_URL = 'http://www.telerik.com/kendo-angular-ui/components/internationalization/troubleshooting/';\n/**\n * @hidden\n */\nvar errorSolutions = {\n    'NoCurrency': \"Solution: \" + DOCS_URL + \"#toc-no-currency\",\n    'NoCurrencyDisplay': \"Solution: \" + DOCS_URL + \"#toc-no-currency-display\",\n    'NoCurrencyRegion': \"Solution: \" + DOCS_URL + \"#toc-no-currency-region\",\n    'NoDateFieldNames': \"Solution: \" + DOCS_URL + \"#toc-no-date-filed-names\",\n    'NoFirstDay': \"Solution: \" + DOCS_URL + \"#toc-no-first-day\",\n    'NoGMTInfo': \"Solution: \" + DOCS_URL + \"#toc-no-gmt-info\",\n    'NoLocale': \"Solution: \" + DOCS_URL + \"#toc-no-locale\",\n    'NoValidCurrency': \"Solution: \" + DOCS_URL + \"#toc-no-valid-currency\",\n    'NoWeekData': \"Solution: \" + DOCS_URL + \"#toc-no-week-data\"\n};\n\nfunction formatMessage(error) {\n    var message = error.message;\n    var errorSolution = errorSolutions[Object.keys(errorSolutions).filter(function (key) { return message.indexOf(key) === 0; })[0]];\n    return errorSolution ? message + \" \" + errorSolution : message;\n}\nfunction intlMethod(fn) {\n    return function () {\n        var values = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            values[_i] = arguments[_i];\n        }\n        try {\n            return fn.apply(null, values);\n        }\n        catch (error) {\n            error.message = formatMessage(error);\n            throw error;\n        }\n    };\n}\n/**\n * @hidden\n */\nvar dateFormatNames$1 = intlMethod(dateFormatNames);\n/**\n * @hidden\n */\nvar dateFieldName$1 = intlMethod(dateFieldName);\n/**\n * @hidden\n */\nvar firstDay$1 = intlMethod(firstDay);\n/**\n * @hidden\n */\nvar format$1 = intlMethod(format);\n/**\n * @hidden\n */\nvar formatDate$1 = intlMethod(formatDate);\n/**\n * @hidden\n */\nvar formatNumber$1 = intlMethod(formatNumber);\n/**\n * @hidden\n */\nvar load$1 = intlMethod(load);\n/**\n * @hidden\n */\nvar numberSymbols$1 = intlMethod(numberSymbols);\n/**\n * @hidden\n */\nvar parseDate$1 = intlMethod(parseDate);\n/**\n * @hidden\n */\nvar parseNumber$1 = intlMethod(parseNumber);\n/**\n * @hidden\n */\nvar splitDateFormat$1 = intlMethod(splitDateFormat);\n/**\n * @hidden\n */\nvar toString$1 = intlMethod(toString);\n/**\n * @hidden\n */\nvar weekendRange$1 = intlMethod(weekendRange);\n/**\n * Sets a pre-built locale.\n *\n * @params data - The pre-built locale data.\n */\nvar setData$1 = function (data) { return setData(data); };\n/**\n * Retrieves the locale data for the specified locale.\n *\n * @params locale - The locale id.\n * @returns data - The locale data.\n */\nvar localeData = function (locale) {\n    try {\n        return localeInfo(locale);\n    }\n    catch (error) {\n        error.message = formatMessage(error);\n        throw error;\n    }\n};\n\nvar LOCALE_REGEX = /_/g;\n/**\n * @hidden\n */\nfunction cldrServiceFactory(localeId) {\n    return new CldrIntlService(localeId);\n}\n/**\n * An abstract base class that implements\n * the Internationalization service methods\n * for the current locale.\n */\nvar IntlService = /** @class */ (function () {\n    function IntlService() {\n        /**\n         * @hidden\n         */\n        this.changes = new EventEmitter();\n    }\n    /**\n     * Notifies that the service was changed.\n     */\n    IntlService.prototype.notify = function () {\n        this.changes.emit();\n    };\n    IntlService.decorators = [\n        { type: Injectable, args: [{\n                    providedIn: 'root',\n                    useFactory: cldrServiceFactory,\n                    deps: [LOCALE_ID]\n                },] },\n    ];\n    IntlService.ngInjectableDef = defineInjectable({ factory: function IntlService_Factory() { return cldrServiceFactory(inject(LOCALE_ID)); }, token: IntlService, providedIn: \"root\" });\n    return IntlService;\n}());\n/**\n * The Internationalization service implemented by using\n * the CLDR Database via the `@telerik/kendo-intl` package.\n */\nvar CldrIntlService = /** @class */ (function (_super) {\n    __extends(CldrIntlService, _super);\n    /**\n     * Creates a new instance of the service with the ID of the specified locale.\n     *\n     * Note that the parts of the locale ID can be separated by either `_` (underscore)\n     * or `-` (dash).\n     *\n     * @param localeId - The default locale ID.\n     */\n    function CldrIntlService(localeId) {\n        var _this = _super.call(this) || this;\n        _this.localeId = localeId;\n        return _this;\n    }\n    Object.defineProperty(CldrIntlService.prototype, \"localeId\", {\n        /**\n         * Gets or sets the current locale ID.\n         */\n        get: function () {\n            return this.locale;\n        },\n        set: function (value) {\n            // Angular locales use underscore, for example, en_US\n            // while IETF BCP-47 specifies a dash.\n            // https://tools.ietf.org/html/bcp47\n            var locale = value.replace(LOCALE_REGEX, '-');\n            if (locale !== this.locale) {\n                this.locale = locale;\n                this.notify();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Formats a string with placeholders such as\n     * `Total amount {0:c}`.\n     *\n     * @param format - The format string.\n     * @param values - One or more values to output in the format string placeholders.\n     * @return - The formatted string.\n     */\n    CldrIntlService.prototype.format = function (format$$1) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        return format$1(format$$1, values, this.localeId);\n    };\n    /**\n     * Converts an object into a string based on the specified format.\n     *\n     * @param value - The value to format.\n     * @param format - The format to use.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted object.\n     */\n    CldrIntlService.prototype.toString = function (value, format$$1, localeId) {\n        return toString$1(value, format$$1, localeId || this.localeId);\n    };\n    /**\n     * Converts a `Date` object into a string based on the specified format.\n     * If no format is provided, the default short date format is used.\n     *\n     * @param value - The date to format.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted date.\n     */\n    CldrIntlService.prototype.formatDate = function (value, format$$1, localeId) {\n        return formatDate$1(value, format$$1, localeId || this.localeId);\n    };\n    /**\n     * Converts a string into a `Date` object based on the specified format.\n     *\n     * @param value - The string to convert.\n     * @param format - The format strings or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The parsed date.\n     */\n    CldrIntlService.prototype.parseDate = function (value, format$$1, localeId) {\n        return parseDate$1(value, format$$1, localeId || this.localeId);\n    };\n    /**\n     * Converts a string into a `Number`.\n     *\n     * @param value - The string to convert.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The parsed number.\n     */\n    CldrIntlService.prototype.parseNumber = function (value, format$$1, localeId) {\n        return parseNumber$1(value, localeId || this.localeId, format$$1);\n    };\n    /**\n     * Converts a `Number` into a string based on the specified format.\n     *\n     * @param value - The number to format.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted number.\n     */\n    CldrIntlService.prototype.formatNumber = function (value, format$$1, localeId) {\n        return formatNumber$1(value, format$$1, localeId || this.localeId);\n    };\n    /**\n     * Returns the date names from the current locale based on the option.\n     *\n     * The available `type` values are:\n     * - `era`\n     * - `year`\n     * - `quarter`\n     * - `month`\n     * - `week`\n     * - `day`\n     * - `dayperiod`\n     * - `hour`\n     * - `minute`\n     * - `second`\n     * - `zone`\n     *\n     * The available `nameType` values are:\n     * - `wide`\n     * - `narrow`\n     * - `short`\n     *\n     * @param options - Detailed configuration for the desired date field name.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The day names from the current locale based on the option.\n     * @returns The localized date field name from the current locale based on the option.\n     *\n     * @example\n     * ```\n     * dateFieldName({ type: 'day' });                      //returns 'day';\n     * dateFieldName({ type: 'day', nameType: 'wide' });    //returns 'day';\n     * dateFieldName({ type: 'month', nameType: 'short' }); //returns 'mo.';\n     * dateFieldName({ type: 'month', nameType: 'wide' });  //returns 'month';\n     * ```\n     */\n    CldrIntlService.prototype.dateFieldName = function (options, localeId) {\n        return dateFieldName$1(options, localeId || this.localeId);\n    };\n    /**\n     * Returns a localized date field name based on specific dateFieldName options.\n     *\n     * The available type values are:\n     * - `day`\n     * - `dayperiod`\n     * - `months`\n     * - `quarters`\n     * - `eras`\n     *\n     * @param options - Detailed configuration for the desired date format.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The day names from the current locale based on the option.\n     */\n    CldrIntlService.prototype.dateFormatNames = function (options, localeId) {\n        return dateFormatNames$1(localeId || this.localeId, options);\n    };\n    /**\n     * Splits the date format into objects containing information about each part of the pattern.\n     *\n     * @param format The format string or options.\n     * @param localeId The optional locale id. If not specified, the `\"en\"` locale id is used.\n     * @returns The date format parts.\n     */\n    CldrIntlService.prototype.splitDateFormat = function (format$$1, localeId) {\n        return splitDateFormat$1(format$$1, localeId || this.localeId);\n    };\n    /**\n     * Returns the number symbols from the current locale based on the option.\n     *\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The number symbols from the current locale.\n     */\n    CldrIntlService.prototype.numberSymbols = function (localeId) {\n        return numberSymbols$1(localeId || this.localeId);\n    };\n    /**\n     * Returns the first day index starting from Sunday.\n     *\n     * @param localeId - The locale ID. Defaults to the current locale ID.\n     * @return - The index of the first day of the week (0 == Sunday).\n     */\n    CldrIntlService.prototype.firstDay = function (localeId) {\n        return firstDay$1(localeId || this.localeId);\n    };\n    /**\n     * Returns the start and end index of the locale weekend starting from Sunday.\n     *\n     * @param localeId - The locale ID. Defaults to the current locale ID.\n     * @return - The the start and end index of the locale weekend (0 == Sunday).\n     */\n    CldrIntlService.prototype.weekendRange = function (localeId) {\n        return weekendRange$1(localeId || this.localeId);\n    };\n    CldrIntlService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    CldrIntlService.ctorParameters = function () { return [\n        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n    ]; };\n    return CldrIntlService;\n}(IntlService));\n\nvar isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };\nvar Éµ0 = isNumeric;\n/**\n * Formats a date value to a string based on the requested format.\n * This pipe uses the [IntlService]({% slug api_intl_intlservice %}).\n *\n * @example\n * ```ng-template-no-run\n * <ul>\n *    <li>{{date | kendoDate }}</li>\n *    <li>{{milliseconds | kendoDate: 'M/dd/yyy' }}</li>\n *    <li>{{stringDate | kendoDate: 'G' }}</li>\n * </ul>\n * ```\n */\nvar DatePipe = /** @class */ (function () {\n    /**\n     * @hidden\n     */\n    function DatePipe(intlService) {\n        this.intlService = intlService;\n    }\n    /**\n     * Converts a `Date` object into a string based on the specified format.\n     * If no format is provided, the default short date format is used.\n     *\n     * @param value - The date to format.\n     * @param format - The format string or options.\n     * @param localeId - (Optional) The ID of the locale which will be used instead of the default one.\n     * @return - The formatted date.\n     */\n    DatePipe.prototype.transform = function (value, format$$1, localeId) {\n        if (format$$1 === void 0) { format$$1 = \"\"; }\n        value = this.normalize(value);\n        if (value) {\n            return this.intlService.formatDate(value, format$$1, localeId);\n        }\n        return value;\n    };\n    DatePipe.prototype.normalize = function (value) {\n        if (value && typeof value === 'string') {\n            value = this.intlService.parseDate(value);\n        }\n        else if (value && isNumeric(value)) {\n            value = new Date(parseFloat(value));\n        }\n        return value;\n    };\n    DatePipe.decorators = [\n        { type: Pipe, args: [{\n                    name: 'kendoDate'\n                },] },\n    ];\n    /** @nocollapse */\n    DatePipe.ctorParameters = function () { return [\n        { type: IntlService }\n    ]; };\n    return DatePipe;\n}());\n\n/**\n * Formats a number value to a string based on the requested format.\n * This pipe uses the [`IntlService`]({% slug api_intl_intlservice %}).\n *\n * @example\n * ```ng-template-no-run\n *   <ul>\n *     <li>{{decimal | kendoNumber:'c' }}</li>\n *     <li>{{stringNumber | kendoNumber:'p' }}</li>\n *     <li>{{int | kendoNumber:'##.00' }}</li>\n *  </ul>\n * ```\n */\nvar NumberPipe = /** @class */ (function () {\n    /**\n     * @hidden\n     */\n    function NumberPipe(intlService) {\n        this.intlService = intlService;\n    }\n    /**\n     * Converts a `Number` object into a string based on the specified format.\n     * If no format is provided, the value is formatted as decimal number using the\n     * [`\"n\"`](https://github.com/telerik/kendo-intl/blob/master/docs/num-formatting/index.md#standard) format.\n     *\n     * @param value - The numer that will be formatted.\n     * @param format - The format string or options.\n     * @param localeId - (Optional) The locale ID that will be used in place of the default one.\n     * @return - The formatted number.\n     */\n    NumberPipe.prototype.transform = function (value, format$$1, localeId) {\n        if (typeof value === 'string') {\n            value = this.intlService.parseNumber(value);\n        }\n        if (value !== null && value !== undefined) {\n            return this.intlService.formatNumber(value, format$$1, localeId);\n        }\n        return value;\n    };\n    NumberPipe.decorators = [\n        { type: Pipe, args: [{\n                    name: 'kendoNumber'\n                },] },\n    ];\n    /** @nocollapse */\n    NumberPipe.ctorParameters = function () { return [\n        { type: IntlService }\n    ]; };\n    return NumberPipe;\n}());\n\nvar pipes = [\n    DatePipe,\n    NumberPipe\n];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }}docs/ts/latest/guide/ngmodule.html)\n * definition for the Intl services.\n */\nvar IntlModule = /** @class */ (function () {\n    function IntlModule() {\n    }\n    IntlModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [pipes],\n                    exports: [pipes]\n                },] },\n    ];\n    return IntlModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { cldrServiceFactory, IntlService, CldrIntlService, DatePipe, Éµ0, NumberPipe, IntlModule, dateFormatNames$1 as dateFormatNames, dateFieldName$1 as dateFieldName, firstDay$1 as firstDay, format$1 as format, formatDate$1 as formatDate, formatNumber$1 as formatNumber, load$1 as load, numberSymbols$1 as numberSymbols, parseDate$1 as parseDate, parseNumber$1 as parseNumber, splitDateFormat$1 as splitDateFormat, toString$1 as toString, weekendRange$1 as weekendRange, setData$1 as setData, localeData };\n"],"names":[],"mappings":"AAAA;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsIM,AAOA;;;;;;;;;;;;;;;;gDACoL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA2MpL,AAGA;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmDH,AAKA;;;;;;;;;;;;qEAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0CH,AAKA;;;;;;;;;;;;qEAIG;;;;;;;;;;;;;;KAcJ;;;;;;;;;;;;gDAMC;;;;;;;;;"}