{"version":3,"file":"index.js","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-buttons/dist/fesm5/index.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { Injectable, Directive, ElementRef, Renderer2, Optional, NgZone, Input, Output, HostBinding, HostListener, EventEmitter, isDevMode, Component, ContentChildren, NgModule, TemplateRef, ViewContainerRef, InjectionToken, Inject, ContentChild, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Subject, fromEvent, merge } from 'rxjs';\nimport { Keys, isChanged, isDocumentAvailable, hasObservers, guid } from '@progress/kendo-angular-common';\nimport { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\nimport { filter } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport { PopupService, PopupModule } from '@progress/kendo-angular-popup';\nimport { __extends } from 'tslib';\n\n/**\n * @hidden\n */\nvar KendoButtonService = /** @class */ (function () {\n    function KendoButtonService() {\n        this.buttonLookChange = new BehaviorSubject('default');\n        this.buttonClicked = new Subject();\n        this.buttonClicked$ = this.buttonClicked.asObservable();\n    }\n    KendoButtonService.prototype.click = function (button) {\n        this.buttonClicked.next(button);\n    };\n    KendoButtonService.prototype.setButtonLook = function (look) {\n        this.buttonLookChange.next(look);\n    };\n    KendoButtonService.decorators = [\n        { type: Injectable },\n    ];\n    return KendoButtonService;\n}());\n\nvar SPAN_TAG_NAME = 'SPAN';\n/**\n * Represents the Kendo UI Button component for Angular.\n */\nvar ButtonDirective = /** @class */ (function () {\n    function ButtonDirective(element, renderer, service, localization, ngZone) {\n        var _this = this;\n        this.service = service;\n        this.ngZone = ngZone;\n        /**\n         * Provides visual styling that indicates if the Button is active.\n         * By default, `toggleable` is set to `false`.\n         */\n        this.toggleable = false;\n        /**\n         * Adds visual weight to the Button and makes it primary.\n         */\n        this.primary = false;\n        /**\n         * Changes the visual appearance by using alternative styling options\n         * ([more information and examples]({% slug appearance_button %})).\n         *\n         * The available values are:\n         * * `flat`\n         * * `outline`\n         */\n        this.look = 'default';\n        /**\n         * @hidden\n         */\n        this.role = 'button';\n        /**\n         * Fires each time the selected state of a toggleable button is changed.\n         *\n         * The event argument is the new selected state (boolean).\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Fires each time the user clicks the button.\n         */\n        this.click = new EventEmitter();\n        this.isDisabled = false;\n        this.isIcon = false;\n        this.isIconClass = false;\n        this._focused = false;\n        this.domEvents = [];\n        this.direction = localization.rtl ? 'rtl' : 'ltr';\n        this.localizationChangeSubscription = localization.changes\n            .subscribe(function (_a) {\n            var rtl = _a.rtl;\n            return _this.direction = rtl ? 'rtl' : 'ltr';\n        });\n        this.element = element.nativeElement;\n        this.renderer = renderer;\n    }\n    Object.defineProperty(ButtonDirective.prototype, \"togglable\", {\n        /**\n         * Backwards-compatible alias\n         *\n         * @hidden\n         */\n        get: function () {\n            return this.toggleable;\n        },\n        /**\n         * @hidden\n         */\n        set: function (value) {\n            this.toggleable = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"selected\", {\n        /**\n         * Sets the selected state of the Button.\n         */\n        get: function () {\n            return this._selected || false;\n        },\n        set: function (value) {\n            this._selected = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"tabIndex\", {\n        get: function () {\n            return this.element.tabIndex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (index) {\n            this.element.tabIndex = index;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"icon\", {\n        /**\n         * Defines the name for an existing icon in a Kendo UI theme.\n         * The icon is rendered inside the Button by a `span.k-icon` element.\n         */\n        set: function (icon) {\n            var _this = this;\n            if (icon) {\n                this.iconSetter(icon, function () {\n                    _this.isIcon = true;\n                    var classes = 'k-icon k-i-' + icon;\n                    _this.addIcon(classes);\n                });\n            }\n            else {\n                this.isIcon = false;\n                this.updateIconNode();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"iconClass\", {\n        /**\n         * Defines a CSS class&mdash;or multiple classes separated by spaces&mdash;\n         * which are applied to a `span` element inside the Button. Allows the usage of custom icons.\n         */\n        set: function (iconClassName) {\n            var _this = this;\n            if (iconClassName) {\n                this.iconSetter(iconClassName, function () {\n                    _this.isIconClass = true;\n                    _this.addIcon(iconClassName);\n                });\n            }\n            else {\n                this.isIconClass = false;\n                this.updateIconNode();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"imageUrl\", {\n        /**\n         * Defines a URL which is used for an `img` element inside the Button.\n         * The URL can be relative or absolute. If relative, it is evaluated with relation to the web page URL.\n         */\n        set: function (imageUrl) {\n            if (imageUrl) {\n                this.iconSetter(imageUrl, this.addImgIcon.bind(this));\n            }\n            else {\n                this.removeImageNode();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"disabled\", {\n        get: function () {\n            return this.isDisabled;\n        },\n        /**\n         * If set to `true`, it disables the Button.\n         */\n        set: function (disabled) {\n            this.isDisabled = disabled;\n            this.renderer.setProperty(this.element, 'disabled', disabled);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"isFocused\", {\n        get: function () {\n            return this._focused;\n        },\n        set: function (isFocused) {\n            this.toggleClass('k-state-focused', isFocused);\n            this._focused = isFocused;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"classButton\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"classDisabled\", {\n        get: function () {\n            return this.isDisabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"classPrimary\", {\n        get: function () {\n            return this.primary;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"isFlat\", {\n        get: function () {\n            return this.look === 'flat';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"isBare\", {\n        get: function () {\n            return this.look === 'bare';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"isOutline\", {\n        get: function () {\n            return this.look === 'outline';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"classActive\", {\n        get: function () {\n            return this.selected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"getDirection\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    ButtonDirective.prototype.onFocus = function () {\n        this.isFocused = true;\n    };\n    /**\n     * @hidden\n     */\n    ButtonDirective.prototype.onBlur = function () {\n        this.isFocused = false;\n    };\n    ButtonDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        var isSpan = this.element.tagName === SPAN_TAG_NAME;\n        if (this.service) {\n            this.buttonLookChangeSubscription = this.service.buttonLookChange\n                .pipe(filter(function (look) { return look !== 'default'; }))\n                .subscribe(function (look) { return _this.look = look; });\n        }\n        if (!this.element.hasAttribute('role') && this.togglable) {\n            this.toggleAriaCheckbox(this.toggleable);\n        }\n        if (this.role) {\n            this.setAttribute('role', this.role);\n        }\n        this.ngZone.runOutsideAngular(function () {\n            _this.domEvents.push(_this.renderer.listen(_this.element, 'click', _this._onButtonClick.bind(_this)));\n            _this.domEvents.push(_this.renderer.listen(_this.element, 'keydown', function (event) {\n                if (isSpan && (event.keyCode === Keys.Space || event.keyCode === Keys.Enter)) {\n                    _this.click.emit(event);\n                    _this._onButtonClick();\n                }\n            }));\n        });\n    };\n    ButtonDirective.prototype.ngOnChanges = function (change) {\n        if (isChanged('togglable', change) || isChanged('toggleable', change)) {\n            this.toggleAriaCheckbox(this.toggleable);\n        }\n    };\n    ButtonDirective.prototype.ngAfterViewChecked = function () {\n        this.setIconTextClasses();\n    };\n    ButtonDirective.prototype.ngOnDestroy = function () {\n        this.imageNode = null;\n        this.iconNode = null;\n        this.renderer = null;\n        this.localizationChangeSubscription.unsubscribe();\n        if (this.service && this.buttonLookChangeSubscription) {\n            this.buttonLookChangeSubscription.unsubscribe();\n        }\n        clearTimeout(this.deferTimeout);\n        this.domEvents.forEach(function (unbindHandler) { return unbindHandler(); });\n    };\n    /**\n     * Focuses the Button component.\n     */\n    ButtonDirective.prototype.focus = function () {\n        if (isDocumentAvailable()) {\n            this.element.focus();\n            this.isFocused = true;\n        }\n    };\n    /**\n     * Blurs the Button component.\n     */\n    ButtonDirective.prototype.blur = function () {\n        if (isDocumentAvailable()) {\n            this.element.blur();\n            this.isFocused = false;\n        }\n    };\n    /**\n     * @hidden\n     */\n    ButtonDirective.prototype.setAttribute = function (attribute, value) {\n        this.renderer.setAttribute(this.element, attribute, value);\n    };\n    /**\n     * @hidden\n     */\n    ButtonDirective.prototype.removeAttribute = function (attribute) {\n        this.renderer.removeAttribute(this.element, attribute);\n    };\n    /**\n     * @hidden\n     *\n     * Internal setter that triggers selectedChange\n     */\n    ButtonDirective.prototype.setSelected = function (value) {\n        var _this = this;\n        var changed = this.selected !== value;\n        this.selected = value;\n        this.setAttribute('aria-checked', this.selected.toString());\n        this.toggleClass('k-state-active', this.selected);\n        if (changed && hasObservers(this.selectedChange)) {\n            this.ngZone.run(function () {\n                _this.selectedChange.emit(value);\n            });\n        }\n    };\n    ButtonDirective.prototype.toggleAriaCheckbox = function (shouldSet) {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        if (shouldSet) {\n            this.role = 'checkbox';\n            this.setAttribute('role', this.role);\n            this.setAttribute('aria-checked', this.selected.toString());\n        }\n        else {\n            this.role = 'button';\n            this.setAttribute('role', this.role);\n            this.removeAttribute('aria-checked');\n        }\n    };\n    ButtonDirective.prototype.hasText = function () {\n        if (isDocumentAvailable()) {\n            return String(this.element.textContent).trim().length > 0;\n        }\n        else {\n            return false;\n        }\n    };\n    ButtonDirective.prototype.addImgIcon = function (imageUrl) {\n        var renderer = this.renderer;\n        if (this.imageNode) {\n            renderer.setProperty(this.imageNode, 'src', imageUrl);\n        }\n        else if (isDocumentAvailable()) {\n            this.imageNode = renderer.createElement('img');\n            renderer.setProperty(this.imageNode, 'src', imageUrl);\n            renderer.setProperty(this.imageNode, 'className', 'k-image');\n            renderer.setAttribute(this.imageNode, 'role', 'presentation');\n            this.prependChild(this.imageNode);\n        }\n    };\n    ButtonDirective.prototype.addIcon = function (classNames) {\n        var renderer = this.renderer;\n        if (this.iconNode) {\n            renderer.setProperty(this.iconNode, 'className', classNames);\n        }\n        else if (isDocumentAvailable()) {\n            this.iconNode = renderer.createElement('span');\n            renderer.setProperty(this.iconNode, 'className', classNames);\n            renderer.setAttribute(this.iconNode, 'role', 'presentation');\n            this.prependChild(this.iconNode);\n        }\n    };\n    ButtonDirective.prototype.prependChild = function (node) {\n        var _this = this;\n        this.defer(function () {\n            if (_this.renderer && node !== _this.element.firstChild) {\n                _this.renderer.insertBefore(_this.element, node, _this.element.firstChild);\n            }\n        });\n    };\n    ButtonDirective.prototype.defer = function (callback) {\n        var _this = this;\n        this.ngZone.runOutsideAngular(function () {\n            _this.deferTimeout = setTimeout(callback, 0);\n        });\n    };\n    ButtonDirective.prototype.iconSetter = function (icon, insertIcon) {\n        if (icon) {\n            insertIcon(icon);\n        }\n        this.setIconTextClasses();\n    };\n    ButtonDirective.prototype.removeImageNode = function () {\n        if (this.imageNode && this.renderer.parentNode(this.imageNode)) {\n            this.renderer.removeChild(this.element, this.imageNode);\n            this.imageNode = null;\n        }\n    };\n    ButtonDirective.prototype.removeIconNode = function () {\n        if (this.iconNode && this.renderer.parentNode(this.iconNode)) {\n            this.renderer.removeChild(this.element, this.iconNode);\n            this.iconNode = null;\n        }\n    };\n    ButtonDirective.prototype.updateIconNode = function () {\n        if (!this.isIcon && !this.isIconClass) {\n            this.removeIconNode();\n        }\n    };\n    ButtonDirective.prototype.setIconTextClasses = function () {\n        var hasIcon = this.isIcon || this.isIconClass || this.imageNode;\n        var hasText = this.hasText();\n        this.toggleClass('k-button-icon', hasIcon && !hasText);\n        this.toggleClass('k-button-icontext', hasIcon && hasText);\n    };\n    ButtonDirective.prototype.toggleClass = function (className, add) {\n        if (add) {\n            this.renderer.addClass(this.element, className);\n        }\n        else {\n            this.renderer.removeClass(this.element, className);\n        }\n    };\n    ButtonDirective.prototype._onButtonClick = function () {\n        var _this = this;\n        if (!this.disabled && this.service) {\n            this.ngZone.run(function () {\n                _this.service.click(_this);\n            });\n        }\n        if (this.togglable && !this.service) {\n            this.setSelected(!this.selected);\n        }\n    };\n    ButtonDirective.decorators = [\n        { type: Directive, args: [{\n                    exportAs: 'kendoButton',\n                    providers: [\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.button'\n                        }\n                    ],\n                    selector: 'button[kendoButton], span[kendoButton]' // tslint:disable-line\n                },] },\n    ];\n    /** @nocollapse */\n    ButtonDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: KendoButtonService, decorators: [{ type: Optional }] },\n        { type: LocalizationService },\n        { type: NgZone }\n    ]; };\n    ButtonDirective.propDecorators = {\n        toggleable: [{ type: Input }],\n        togglable: [{ type: Input }],\n        primary: [{ type: Input }],\n        look: [{ type: Input }],\n        selected: [{ type: Input }],\n        tabIndex: [{ type: Input }],\n        icon: [{ type: Input }],\n        iconClass: [{ type: Input }],\n        imageUrl: [{ type: Input }],\n        disabled: [{ type: Input }],\n        role: [{ type: Input }],\n        selectedChange: [{ type: Output }],\n        click: [{ type: Output }],\n        classButton: [{ type: HostBinding, args: ['class.k-button',] }],\n        classDisabled: [{ type: HostBinding, args: ['class.k-state-disabled',] }],\n        classPrimary: [{ type: HostBinding, args: ['class.k-primary',] }],\n        isFlat: [{ type: HostBinding, args: ['class.k-flat',] }],\n        isBare: [{ type: HostBinding, args: ['class.k-bare',] }],\n        isOutline: [{ type: HostBinding, args: ['class.k-outline',] }],\n        classActive: [{ type: HostBinding, args: ['attr.ariaPressed',] }, { type: HostBinding, args: ['class.k-state-active',] }],\n        getDirection: [{ type: HostBinding, args: ['attr.dir',] }],\n        onFocus: [{ type: HostListener, args: ['focus',] }],\n        onBlur: [{ type: HostListener, args: ['blur',] }]\n    };\n    return ButtonDirective;\n}());\n\n/* tslint:disable:no-null-keyword */\n/* tslint:disable:no-bitwise */\nvar resolvedPromise = Promise.resolve(null);\n/**\n * @hidden\n */\nvar isPresent = function (value) { return value !== null && value !== undefined; };\n/**\n * @hidden\n */\nvar tick = function (f) { return (resolvedPromise.then(f)); };\n/**\n * @hidden\n */\nfunction isDocumentNode(container) {\n    return container.nodeType === 9;\n}\n/**\n * @hidden\n */\nfunction closest(element, selector) {\n    if (element.closest) {\n        return element.closest(selector);\n    }\n    var matches = Element.prototype.matches ?\n        function (el, sel) { return el.matches(sel); }\n        : function (el, sel) { return el.msMatchesSelector(sel); };\n    var node = element;\n    while (node && !isDocumentNode(node)) {\n        if (matches(node, selector)) {\n            return node;\n        }\n        node = node.parentNode;\n    }\n}\n\n/**\n * @hidden\n */\nvar PreventableEvent = /** @class */ (function () {\n    function PreventableEvent() {\n        this.prevented = false;\n    }\n    /**\n     * Prevents the default action for a specified event.\n     * In this way, the source component suppresses the built-in behavior that follows the event.\n     */\n    PreventableEvent.prototype.preventDefault = function () {\n        this.prevented = true;\n    };\n    /**\n     * If the event is prevented by any of its subscribers, returns `true`.\n     *\n     * @returns `true` if the default action was prevented. Otherwise, returns `false`.\n     */\n    PreventableEvent.prototype.isDefaultPrevented = function () {\n        return this.prevented;\n    };\n    return PreventableEvent;\n}());\n\n/**\n * @hidden\n */\nvar ariaChecked = 'aria-checked';\n/**\n * @hidden\n */\nvar tabindex = 'tabindex';\n/**\n * Represents the Kendo UI ButtonGroup component for Angular.\n */\nvar ButtonGroupComponent = /** @class */ (function () {\n    function ButtonGroupComponent(service, localization, element) {\n        var _this = this;\n        this.service = service;\n        this.element = element;\n        /**\n         * By default, the selection mode of the ButtonGroup is set to `multiple`.\n         */\n        this.selection = 'multiple';\n        /**\n         * Changes the visual appearance by using alternative styling options\n         * ([more information and examples]({% slug styling_buttongroup %})).\n         * The `look` property of the ButtonGroup takes precedence over the `look` property\n         * of the individual buttons that are part of the group.\n         *\n         * The available values are:\n         * * `flat`\n         * * `outline`\n         */\n        this.look = 'default';\n        /**\n         * Fires every time keyboard navigation occurs.\n         */\n        this.navigate = new EventEmitter();\n        this._tabIndex = 0;\n        this.currentTabIndex = 0;\n        this.localizationChangeSubscription = localization.changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            return _this.direction = rtl ? 'rtl' : 'ltr';\n        });\n    }\n    Object.defineProperty(ButtonGroupComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this._tabIndex;\n        },\n        /**\n         * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        set: function (value) {\n            this._tabIndex = value;\n            this.currentTabIndex = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"wrapperClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"disabledClass\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"stretchedClass\", {\n        get: function () {\n            return !!this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"isFlat\", {\n        get: function () {\n            return this.look === 'flat';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"isBare\", {\n        get: function () {\n            return this.look === 'bare';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"isOutline\", {\n        get: function () {\n            return this.look === 'outline';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"getRole\", {\n        get: function () {\n            return this.isSelectionSingle() ? 'radiogroup' : 'group';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"ariaDisabled\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"wrapperWidth\", {\n        get: function () {\n            return this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"wrapperTabIndex\", {\n        get: function () {\n            return this.disabled ? undefined : this.currentTabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    ButtonGroupComponent.prototype.keydown = function (event) {\n        if (!this.disabled) {\n            this.navigateFocus(event);\n        }\n    };\n    /**\n     * @hidden\n     */\n    ButtonGroupComponent.prototype.onFocus = function () {\n        this.currentTabIndex = -1;\n        var focusedIndex = this.buttons.toArray().findIndex(function (current) { return current.element.tabIndex !== -1; });\n        var index = focusedIndex === -1 ? 0 : focusedIndex;\n        this.focus(this.buttons.filter(function (_current, i) {\n            return i === index;\n        }));\n    };\n    /**\n     * @hidden\n     */\n    ButtonGroupComponent.prototype.focusout = function (event) {\n        if (event.relatedTarget && event.relatedTarget.parentNode !== this.element.nativeElement) {\n            this.defocus(this.buttons.toArray());\n            this.currentTabIndex = this.tabIndex;\n        }\n    };\n    ButtonGroupComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.service.setButtonLook(this.look);\n        this.subscription = this.service.buttonClicked$.subscribe(function (button) {\n            var newSelectionValue;\n            if (_this.isSelectionSingle()) {\n                newSelectionValue = true;\n                _this.deactivate(_this.buttons.filter(function (current) { return current !== button; }));\n            }\n            else {\n                _this.defocus(_this.buttons.toArray());\n                newSelectionValue = !button.selected;\n            }\n            if (button.togglable) {\n                button.setSelected(newSelectionValue);\n                button.setAttribute(ariaChecked, newSelectionValue.toString());\n            }\n            button.setAttribute(tabindex, \"0\");\n        });\n    };\n    ButtonGroupComponent.prototype.ngOnChanges = function (change) {\n        var _this = this;\n        if (isChanged('disabled', change)) {\n            this.buttons.forEach(function (button) {\n                if (isPresent(_this.disabled)) {\n                    button.disabled = _this.disabled;\n                }\n            });\n        }\n    };\n    ButtonGroupComponent.prototype.ngAfterContentInit = function () {\n        var isRadioGroup = this.isSelectionSingle();\n        var buttonsRole = isRadioGroup ? 'radio' : 'checkbox';\n        this.buttons.forEach(function (button) {\n            if (button.togglable) {\n                button.setAttribute(ariaChecked, button.selected.toString());\n                button.setAttribute('role', buttonsRole);\n            }\n            if (button.selected) {\n                button.setAttribute(tabindex, \"0\");\n            }\n            else {\n                button.setAttribute(tabindex, \"-1\");\n            }\n        });\n    };\n    ButtonGroupComponent.prototype.ngAfterViewChecked = function () {\n        if (this.buttons.length) {\n            this.buttons.first.renderer.addClass(this.buttons.first.element, 'k-group-start');\n            this.buttons.last.renderer.addClass(this.buttons.last.element, 'k-group-end');\n        }\n    };\n    ButtonGroupComponent.prototype.ngOnDestroy = function () {\n        this.subscription.unsubscribe();\n        this.localizationChangeSubscription.unsubscribe();\n    };\n    ButtonGroupComponent.prototype.ngAfterContentChecked = function () {\n        this.verifySettings();\n    };\n    ButtonGroupComponent.prototype.navigateFocus = function (event) {\n        var focusedIndex = this.buttons.toArray().findIndex(function (current) { return current.element.tabIndex !== -1; });\n        var firstIndex = 0;\n        var lastIndex = this.buttons.length - 1;\n        var eventArgs = new PreventableEvent();\n        if (event.keyCode === Keys.ArrowRight && focusedIndex < lastIndex) {\n            this.navigate.emit(eventArgs);\n            if (!eventArgs.isDefaultPrevented()) {\n                this.defocus(this.buttons.toArray());\n                this.focus(this.buttons.filter(function (_current, index) {\n                    return index === focusedIndex + 1;\n                }));\n            }\n        }\n        if (event.keyCode === Keys.ArrowLeft && focusedIndex > firstIndex) {\n            this.navigate.emit(eventArgs);\n            if (!eventArgs.isDefaultPrevented()) {\n                this.defocus(this.buttons.toArray());\n                this.focus(this.buttons.filter(function (_current, index) {\n                    return index === focusedIndex - 1;\n                }));\n            }\n        }\n    };\n    ButtonGroupComponent.prototype.deactivate = function (buttons) {\n        buttons.forEach(function (button) {\n            button.setSelected(false);\n            button.setAttribute(ariaChecked, button.selected.toString());\n            button.setAttribute(tabindex, \"-1\");\n        });\n    };\n    ButtonGroupComponent.prototype.activate = function (buttons) {\n        buttons.forEach(function (button) {\n            button.setSelected(true);\n            button.setAttribute(ariaChecked, button.selected.toString());\n            button.setAttribute(tabindex, \"0\");\n            button.focus();\n        });\n    };\n    ButtonGroupComponent.prototype.defocus = function (buttons) {\n        buttons.forEach(function (button) {\n            button.setAttribute(tabindex, \"-1\");\n        });\n    };\n    ButtonGroupComponent.prototype.focus = function (buttons) {\n        buttons.forEach(function (button) {\n            button.setAttribute(tabindex, \"0\");\n            button.focus();\n        });\n    };\n    ButtonGroupComponent.prototype.verifySettings = function () {\n        if (isDevMode()) {\n            if (this.isSelectionSingle() && this.buttons.filter(function (button) { return button.selected; }).length > 1) {\n                throw new Error('Having multiple selected buttons with single selection mode is not supported');\n            }\n        }\n    };\n    ButtonGroupComponent.prototype.isSelectionSingle = function () {\n        return this.selection === 'single';\n    };\n    ButtonGroupComponent.decorators = [\n        { type: Component, args: [{\n                    exportAs: 'kendoButtonGroup',\n                    providers: [\n                        KendoButtonService,\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.buttongroup'\n                        }\n                    ],\n                    selector: 'kendo-buttongroup',\n                    template: \"\\n        <ng-content select=\\\"[kendoButton]\\\"></ng-content>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    ButtonGroupComponent.ctorParameters = function () { return [\n        { type: KendoButtonService },\n        { type: LocalizationService },\n        { type: ElementRef }\n    ]; };\n    ButtonGroupComponent.propDecorators = {\n        disabled: [{ type: Input, args: ['disabled',] }],\n        selection: [{ type: Input, args: ['selection',] }],\n        width: [{ type: Input, args: ['width',] }],\n        look: [{ type: Input }],\n        tabIndex: [{ type: Input }],\n        navigate: [{ type: Output }],\n        buttons: [{ type: ContentChildren, args: [ButtonDirective,] }],\n        wrapperClass: [{ type: HostBinding, args: ['class.k-button-group',] }],\n        disabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }],\n        stretchedClass: [{ type: HostBinding, args: ['class.k-button-group-stretched',] }],\n        isFlat: [{ type: HostBinding, args: ['class.k-button-group-flat',] }],\n        isBare: [{ type: HostBinding, args: ['class.k-button-group-bare',] }],\n        isOutline: [{ type: HostBinding, args: ['class.k-button-group-outline',] }],\n        getRole: [{ type: HostBinding, args: ['attr.role',] }],\n        dir: [{ type: HostBinding, args: ['attr.dir',] }],\n        ariaDisabled: [{ type: HostBinding, args: ['attr.aria-disalbed',] }],\n        wrapperWidth: [{ type: HostBinding, args: ['style.width',] }],\n        wrapperTabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],\n        keydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],\n        onFocus: [{ type: HostListener, args: ['focus',] }],\n        focusout: [{ type: HostListener, args: ['focusout', ['$event'],] }]\n    };\n    return ButtonGroupComponent;\n}());\n\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmodules'] }})\n * definition for the Button directive.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Buttons module\n * import { ButtonModule } from '@progress/kendo-angular-buttons';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, ButtonModule], // import Button module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nvar ButtonModule = /** @class */ (function () {\n    function ButtonModule() {\n    }\n    ButtonModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [ButtonDirective],\n                    exports: [ButtonDirective]\n                },] },\n    ];\n    return ButtonModule;\n}());\n\n/**\n * @hidden\n *\n * The exported package module.\n *\n * The package exports:\n * - `ButtonGroupComponent`&mdash;The ButtonGroupComponent component class.\n */\nvar ButtonGroupModule = /** @class */ (function () {\n    function ButtonGroupModule() {\n    }\n    ButtonGroupModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [ButtonGroupComponent],\n                    exports: [ButtonGroupComponent],\n                    imports: [CommonModule, ButtonModule]\n                },] },\n    ];\n    return ButtonGroupModule;\n}());\n\n/* tslint:disable:directive-selector-name */\n/**\n * Used for rendering the list item content.\n *\n * To define the item template, nest a `<ng-template>` tag with the `kendo<ComponentName>ItemTemplate` directive inside the component tag.\n *\n * For the DropDownButton, use the `kendoDropDownButtonItemTemplate` directive.\n * For the SplitButton, use the `kendoSplitButtonItemTemplate` directive.\n *\n * The template context is set to the current component. To get a reference to the current data item, use the `let-dataItem` directive.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-splitbutton [data]=\"listItems\">\n *    <ng-template kendoSplitButtonItemTemplate let-dataItem>\n *      <span>{{dataItem}} option</span>\n *    </ng-template>\n *  </kendo-splitbutton>\n *  <kendo-dropdownbutton [data]=\"listItems\">\n *    <ng-template kendoDropDownButtonItemTemplate let-dataItem>\n *      <span>{{dataItem}} option</span>\n *    </ng-template>\n *  </kendo-dropdownbutton>\n * `\n * })\n * class AppComponent {\n *   public listItems: Array<any> = [{\n *      text: 'item1',\n *      icon: 'refresh',\n *      disabled: false,\n *      click: (dataItem: any) => {\n *          //action\n *      }\n *  }, {\n *      text: 'item2',\n *      icon: 'refresh',\n *      disabled: false,\n *      click: (dataItem: any) => {\n *          //action\n *      }\n *  }]\n * }\n * ```\n *\n * For more examples, refer to the article on the [DropDownList templates]({% slug overview_ddl %}#templates).\n */\nvar ButtonItemTemplateDirective = /** @class */ (function () {\n    function ButtonItemTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    ButtonItemTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoDropDownButtonItemTemplate],[kendoSplitButtonItemTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    ButtonItemTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return ButtonItemTemplateDirective;\n}());\n\n/**\n * @hidden\n */\nvar ListComponent = /** @class */ (function () {\n    function ListComponent() {\n        this.onItemClick = new EventEmitter();\n        this.onItemBlur = new EventEmitter();\n    }\n    ListComponent.prototype.getText = function (dataItem) {\n        if (dataItem) {\n            return this.textField ? dataItem[this.textField] : dataItem.text || dataItem;\n        }\n        return undefined;\n    };\n    ListComponent.prototype.getIconClasses = function (dataItem) {\n        var icon = dataItem.icon ? 'k-icon k-i-' + dataItem.icon : undefined;\n        var classes = {};\n        classes[icon || dataItem.iconClass] = true;\n        return classes;\n    };\n    ListComponent.prototype.onClick = function (index) {\n        this.onItemClick.emit(index);\n    };\n    ListComponent.prototype.onBlur = function () {\n        this.onItemBlur.emit();\n    };\n    ListComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-button-list',\n                    template: \"\\n        <ul class=\\\"k-list k-reset\\\" unselectable=\\\"on\\\">\\n            <li role=\\\"menuItem\\\" unselectable=\\\"on\\\" tabindex=\\\"-1\\\"\\n                kendoButtonFocusable\\n                *ngFor=\\\"let dataItem of data; let index = index;\\\"\\n                [index]=\\\"index\\\"\\n                [ngClass]=\\\"{'k-item': true, 'k-state-disabled': dataItem.disabled}\\\"\\n                (click)=\\\"onClick(index)\\\"\\n                (blur)=\\\"onBlur()\\\"\\n                [attr.aria-disabled]=\\\"dataItem.disabled ? true : false\\\">\\n                <ng-template *ngIf=\\\"itemTemplate?.templateRef\\\"\\n                    [templateContext]=\\\"{\\n                        templateRef: itemTemplate?.templateRef,\\n                        $implicit: dataItem\\n                    }\\\">\\n                </ng-template>\\n                <ng-template [ngIf]=\\\"!itemTemplate?.templateRef\\\">\\n                    <span\\n                        *ngIf=\\\"dataItem.icon || dataItem.iconClass\\\"\\n                        [ngClass]=\\\"getIconClasses(dataItem)\\\"\\n                    ></span>\\n                    <img\\n                        *ngIf=\\\"dataItem.imageUrl\\\"\\n                        class=\\\"k-image\\\"\\n                        [src]=\\\"dataItem.imageUrl\\\"\\n                        alt=\\\"\\\"\\n                    >\\n                    {{ getText(dataItem) }}\\n                </ng-template>\\n            </li>\\n        </ul>\\n      \"\n                },] },\n    ];\n    ListComponent.propDecorators = {\n        data: [{ type: Input }],\n        textField: [{ type: Input }],\n        itemTemplate: [{ type: Input }],\n        onItemClick: [{ type: Output }],\n        onItemBlur: [{ type: Output }]\n    };\n    return ListComponent;\n}());\n\n/**\n * @hidden\n */\nvar FocusService = /** @class */ (function () {\n    function FocusService() {\n        this.onFocus = new EventEmitter();\n    }\n    FocusService.prototype.isFocused = function (index) {\n        return index === this.focused;\n    };\n    FocusService.prototype.focus = function (index) {\n        if (this.isFocused(index)) {\n            return;\n        }\n        this.focused = index;\n        this.onFocus.emit(index);\n    };\n    FocusService.prototype.resetFocus = function () {\n        this.focused = -1;\n    };\n    Object.defineProperty(FocusService.prototype, \"focused\", {\n        get: function () {\n            return this.focusedIndex;\n        },\n        set: function (index) {\n            this.focusedIndex = index;\n            this.onFocus.emit(index);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FocusService.decorators = [\n        { type: Injectable },\n    ];\n    return FocusService;\n}());\n\n/**\n * @hidden\n */\nvar FocusableDirective = /** @class */ (function () {\n    function FocusableDirective(focusService, elementRef) {\n        this.focusService = focusService;\n        this.element = elementRef.nativeElement;\n        this.subscribeEvents();\n    }\n    Object.defineProperty(FocusableDirective.prototype, \"focusedClassName\", {\n        get: function () {\n            return this.focusService.isFocused(this.index);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    FocusableDirective.prototype.ngOnDestroy = function () {\n        this.unsubscribeEvents();\n    };\n    FocusableDirective.prototype.subscribeEvents = function () {\n        var _this = this;\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.focusSubscription = this.focusService.onFocus.subscribe(function (index) {\n            if (_this.index === index) {\n                _this.element.focus();\n            }\n        });\n    };\n    FocusableDirective.prototype.unsubscribeEvents = function () {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        if (this.focusSubscription) {\n            this.focusSubscription.unsubscribe();\n        }\n    };\n    FocusableDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoButtonFocusable]'\n                },] },\n    ];\n    /** @nocollapse */\n    FocusableDirective.ctorParameters = function () { return [\n        { type: FocusService },\n        { type: ElementRef }\n    ]; };\n    FocusableDirective.propDecorators = {\n        index: [{ type: Input }],\n        focusedClassName: [{ type: HostBinding, args: ['class.k-state-focused',] }]\n    };\n    return FocusableDirective;\n}());\n\n/**\n * @hidden\n */\nvar TemplateContextDirective = /** @class */ (function () {\n    function TemplateContextDirective(viewContainerRef) {\n        this.viewContainerRef = viewContainerRef;\n    }\n    Object.defineProperty(TemplateContextDirective.prototype, \"templateContext\", {\n        set: function (context) {\n            if (this.insertedViewRef) {\n                this.viewContainerRef.remove(this.viewContainerRef.indexOf(this.insertedViewRef));\n                this.insertedViewRef = undefined;\n            }\n            if (context.templateRef) {\n                this.insertedViewRef = this.viewContainerRef.createEmbeddedView(context.templateRef, context);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TemplateContextDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[templateContext]' // tslint:disable-line:directive-selector\n                },] },\n    ];\n    /** @nocollapse */\n    TemplateContextDirective.ctorParameters = function () { return [\n        { type: ViewContainerRef }\n    ]; };\n    TemplateContextDirective.propDecorators = {\n        templateContext: [{ type: Input }]\n    };\n    return TemplateContextDirective;\n}());\n\nvar EXPORTED_DIRECTIVES = [\n    ListComponent,\n    FocusableDirective,\n    ButtonItemTemplateDirective,\n    TemplateContextDirective\n];\n/**\n * @hidden\n */\nvar ListModule = /** @class */ (function () {\n    function ListModule() {\n    }\n    ListModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [EXPORTED_DIRECTIVES],\n                    exports: [EXPORTED_DIRECTIVES],\n                    imports: [CommonModule]\n                },] },\n    ];\n    return ListModule;\n}());\n\n/**\n * @hidden\n */\nvar KeyEvents;\n(function (KeyEvents) {\n    KeyEvents[KeyEvents[\"keydown\"] = 0] = \"keydown\";\n    KeyEvents[KeyEvents[\"keypress\"] = 1] = \"keypress\";\n    KeyEvents[KeyEvents[\"keyup\"] = 2] = \"keyup\";\n})(KeyEvents || (KeyEvents = {}));\n\n/**\n * @hidden\n */\nvar NavigationAction;\n(function (NavigationAction) {\n    NavigationAction[NavigationAction[\"Undefined\"] = 0] = \"Undefined\";\n    NavigationAction[NavigationAction[\"Open\"] = 1] = \"Open\";\n    NavigationAction[NavigationAction[\"Close\"] = 2] = \"Close\";\n    NavigationAction[NavigationAction[\"Enter\"] = 3] = \"Enter\";\n    NavigationAction[NavigationAction[\"EnterPress\"] = 4] = \"EnterPress\";\n    NavigationAction[NavigationAction[\"EnterUp\"] = 5] = \"EnterUp\";\n    NavigationAction[NavigationAction[\"Tab\"] = 6] = \"Tab\";\n    NavigationAction[NavigationAction[\"Esc\"] = 7] = \"Esc\";\n    NavigationAction[NavigationAction[\"Navigate\"] = 8] = \"Navigate\";\n})(NavigationAction || (NavigationAction = {}));\n\n/**\n * @hidden\n */\nvar ListButton = /** @class */ (function () {\n    function ListButton(focusService, navigationService, wrapperRef, _zone, localization) {\n        var _this = this;\n        this.focusService = focusService;\n        this.navigationService = navigationService;\n        this.wrapperRef = wrapperRef;\n        this._zone = _zone;\n        this._open = false;\n        this._disabled = false;\n        this._active = false;\n        this._popupSettings = { animate: true, popupClass: '' };\n        this.listId = guid();\n        this._isFocused = false;\n        this.wrapperBlurred = new EventEmitter();\n        this.focusService = focusService;\n        this.navigationService = navigationService;\n        this.wrapper = wrapperRef.nativeElement;\n        this.localizationChangeSubscription = localization.changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            return _this.direction = rtl ? 'rtl' : 'ltr';\n        });\n        this.subscribeEvents();\n    }\n    Object.defineProperty(ListButton.prototype, \"popupClasses\", {\n        get: function () {\n            var popupClasses = [\n                'k-list-container',\n                'k-reset',\n                'k-group'\n            ];\n            if (this._popupSettings.popupClass) {\n                popupClasses.push(this._popupSettings.popupClass);\n            }\n            return popupClasses.join(' ');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListButton.prototype, \"openState\", {\n        get: function () {\n            return this._open;\n        },\n        set: function (open) {\n            this._open = open;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    ListButton.prototype.togglePopupVisibility = function () {\n        if (this._disabled) {\n            return;\n        }\n        this.openState = !this.openState;\n        if (!this.openState) {\n            this.focusService.focus(-1);\n        }\n    };\n    /**\n     * @hidden\n     */\n    ListButton.prototype.onItemClick = function (index) {\n        var _this = this;\n        this.emitItemClickHandler(index);\n        setTimeout(function () { _this.focusWrapper(); }, 1);\n    };\n    ListButton.prototype.ngOnDestroy = function () {\n        this.openState = false;\n        this.unsubscribeEvents();\n        clearTimeout(this.focusFirstTimeout);\n        clearTimeout(this.blurTimeout);\n        if (this.localizationChangeSubscription) {\n            this.localizationChangeSubscription.unsubscribe();\n        }\n    };\n    ListButton.prototype.subscribeEvents = function () {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.subscribeListItemFocusEvent();\n        this.subscribeComponentBlurredEvent();\n        this.subscribeNavigationEvents();\n    };\n    ListButton.prototype.subscribeListItemFocusEvent = function () {\n        var _this = this;\n        this.focusSubscription = this.focusService.onFocus.subscribe(function () {\n            _this._isFocused = true;\n        });\n    };\n    ListButton.prototype.subscribeComponentBlurredEvent = function () {\n        var _this = this;\n        this._zone.runOutsideAngular(function () {\n            _this.documentClick = fromEvent(document, 'click').pipe(filter(function (event) {\n                return !_this.wrapperContains(event.target);\n            }));\n            _this.tabSubscription = _this.navigationService.tab.pipe(filter(function () { return _this._isFocused; })).subscribe(_this.handleTab.bind(_this));\n            _this.componentBlurredSubscription = merge(_this.documentClick, _this.wrapperBlurred).pipe(filter(function () { return _this._isFocused; })).subscribe(function () { return _this._zone.run(function () { return _this.blurWrapper(); }); });\n        });\n    };\n    ListButton.prototype.subscribeNavigationEvents = function () {\n        var _this = this;\n        this.navigationSubscription = this.navigationService.navigate\n            .subscribe(this.focusService.focus.bind(this.focusService));\n        this.enterPressSubscription = this.navigationService.enterpress.subscribe(function () {\n            if (!_this._disabled && !_this._open) {\n                _this._active = true;\n            }\n        });\n        this.enterUpSubscription = this.navigationService.enterup.subscribe(function () {\n            if (!_this._open) {\n                _this._active = false;\n            }\n            _this.enterHandler();\n            _this.focusWrapper();\n        });\n        this.openSubscription = this.navigationService.open.subscribe(function () {\n            if (!_this._open) {\n                _this.togglePopupVisibility();\n                _this.focusFirstItem();\n            }\n            else {\n                _this.focusWrapper();\n            }\n        });\n        this.closeSubscription = merge(this.navigationService.close, this.navigationService.esc).subscribe(function () { return _this.focusWrapper(); });\n    };\n    ListButton.prototype.enterHandler = function () { }; // tslint:disable-line\n    ListButton.prototype.unsubscribeEvents = function () {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.unsubscribe(this.componentBlurredSubscription);\n        this.unsubscribe(this.focusSubscription);\n        this.unsubscribe(this.navigationSubscription);\n        this.unsubscribe(this.enterPressSubscription);\n        this.unsubscribe(this.enterUpSubscription);\n        this.unsubscribe(this.openSubscription);\n        this.unsubscribe(this.closeSubscription);\n        this.unsubscribe(this.tabSubscription);\n    };\n    ListButton.prototype.unsubscribe = function (subscription) {\n        if (subscription) {\n            subscription.unsubscribe();\n        }\n    };\n    /**\n     * @hidden\n     */\n    ListButton.prototype.keyDownHandler = function (event) {\n        this.keyHandler(event);\n    };\n    /**\n     * @hidden\n     */\n    ListButton.prototype.keyPressHandler = function (event) {\n        this.keyHandler(event, KeyEvents.keypress);\n    };\n    /**\n     * @hidden\n     */\n    ListButton.prototype.keyUpHandler = function (event) {\n        this.keyHandler(event, KeyEvents.keyup);\n    };\n    /**\n     * @hidden\n     */\n    ListButton.prototype.keyHandler = function (event, keyEvent) {\n        if (this._disabled) {\n            return;\n        }\n        var focused = this.focusService.focused || 0;\n        var eventData = event;\n        var action = this.navigationService.process({\n            altKey: eventData.altKey,\n            current: focused,\n            keyCode: eventData.keyCode,\n            keyEvent: keyEvent,\n            max: this._data ? this._data.length - 1 : 0,\n            min: 0\n        });\n        if (action !== NavigationAction.Undefined &&\n            action !== NavigationAction.Tab &&\n            (action !== NavigationAction.Enter || (action === NavigationAction.Enter && this._open))) {\n            eventData.preventDefault();\n        }\n    };\n    ListButton.prototype.emitItemClickHandler = function (index) {\n        var dataItem = this._data[index];\n        if (this._itemClick) {\n            this._itemClick.emit(dataItem);\n        }\n        if (dataItem && dataItem.click && !dataItem.disabled) {\n            dataItem.click(dataItem);\n        }\n    };\n    ListButton.prototype.focusFirstItem = function () {\n        var _this = this;\n        if (this._data && isPresent(this._data[0])) {\n            this.focusFirstTimeout = setTimeout(function () { _this.focusService.focus(0); }, 1);\n        }\n    };\n    ListButton.prototype.focusWrapper = function () {\n        if (this._open) {\n            this.togglePopupVisibility();\n            this.focusButton();\n        }\n    };\n    /**\n     * @hidden\n     */\n    ListButton.prototype.blurHandler = function () {\n        var _this = this;\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.blurTimeout = setTimeout(function () {\n            if (!_this.wrapperContains(document.activeElement)) {\n                _this.blurWrapper();\n            }\n        });\n    };\n    ListButton.prototype.wrapperContains = function (element) {\n        return this.wrapper === element || this.wrapper.contains(element);\n    };\n    ListButton.prototype.blurWrapper = function () {\n        if (this._open) {\n            this.togglePopupVisibility();\n        }\n        this._isFocused = false;\n        this._blur.emit();\n    };\n    ListButton.prototype.focusButton = function () {\n        if (this.button) {\n            this.button.nativeElement.focus();\n        }\n    };\n    ListButton.prototype.handleTab = function () {\n        this.focusButton();\n        this.blurWrapper();\n    };\n    return ListButton;\n}());\n\n/**\n * @hidden\n */\nvar NAVIGATION_CONFIG = new InjectionToken('navigation.config');\n\n/**\n * @hidden\n */\nvar NavigationService = /** @class */ (function () {\n    function NavigationService(config) {\n        this.navigate = new EventEmitter();\n        this.open = new EventEmitter();\n        this.close = new EventEmitter();\n        this.enter = new EventEmitter();\n        this.enterpress = new EventEmitter();\n        this.enterup = new EventEmitter();\n        this.tab = new EventEmitter();\n        this.esc = new EventEmitter();\n        this.useLeftRightArrows = config.useLeftRightArrows;\n    }\n    NavigationService.prototype.process = function (args) {\n        var keyCode = args.keyCode;\n        var keyEvent = args.keyEvent;\n        var index;\n        var action = NavigationAction.Undefined;\n        if (keyEvent === KeyEvents.keypress) {\n            if (this.isEnter(keyCode)) {\n                action = NavigationAction.EnterPress;\n            }\n        }\n        else if (keyEvent === KeyEvents.keyup) {\n            if (this.isEnter(keyCode)) {\n                action = NavigationAction.EnterUp;\n            }\n        }\n        else {\n            if (args.altKey && keyCode === Keys.ArrowDown) {\n                action = NavigationAction.Open;\n            }\n            else if (args.altKey && keyCode === Keys.ArrowUp) {\n                action = NavigationAction.Close;\n            }\n            else if (this.isEnter(keyCode)) {\n                action = NavigationAction.Enter;\n            }\n            else if (keyCode === Keys.Escape) {\n                action = NavigationAction.Esc;\n            }\n            else if (keyCode === Keys.Tab) {\n                action = NavigationAction.Tab;\n            }\n            else if (keyCode === Keys.ArrowUp || (this.useLeftRightArrows && keyCode === Keys.ArrowLeft)) {\n                index = this.next({\n                    current: args.current,\n                    start: args.max,\n                    end: args.min,\n                    step: -1\n                });\n                action = NavigationAction.Navigate;\n            }\n            else if (keyCode === Keys.ArrowDown || (this.useLeftRightArrows && keyCode === Keys.ArrowRight)) {\n                index = this.next({\n                    current: args.current,\n                    start: args.min,\n                    end: args.max,\n                    step: 1\n                });\n                action = NavigationAction.Navigate;\n            }\n        }\n        if (action !== NavigationAction.Undefined) {\n            this[NavigationAction[action].toLowerCase()].emit(index);\n        }\n        return action;\n    };\n    NavigationService.prototype.isEnter = function (keyCode) {\n        return keyCode === Keys.Enter || keyCode === Keys.Space;\n    };\n    NavigationService.prototype.next = function (args) {\n        if (!isPresent(args.current)) {\n            return args.start;\n        }\n        else {\n            return args.current !== args.end ? args.current + args.step : args.end;\n        }\n    };\n    NavigationService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    NavigationService.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [NAVIGATION_CONFIG,] }] }\n    ]; };\n    return NavigationService;\n}());\n\nvar NAVIGATION_SETTINGS = {\n    useLeftRightArrows: true\n};\nvar Éµ0 = NAVIGATION_SETTINGS;\nvar NAVIGATION_SETTINGS_PROVIDER = {\n    provide: NAVIGATION_CONFIG,\n    useValue: Éµ0\n};\n/**\n * Represents the Kendo UI SplitButton component for Angular.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-splitbutton [data]=\"data\" [icon]=\"'paste'\"\n *      (itemClick)=\"onSplitButtonItemClick($event)\"\n *      (buttonClick)=\"onSplitButtonClick()\">Paste</kendo-splitbutton>\n * `\n * })\n *\n * class AppComponent {\n *   public data: Array<any> = [{\n *       text: 'Keep Text Only',\n *       icon: 'paste-plain-text',\n *       click: () => { console.log('Keep Text Only click handler'); }\n *   }, {\n *       text: 'Paste as HTML',\n *       icon: 'paste-as-html'\n *   }, {\n *       text: 'Paste Markdown',\n *       icon: 'paste-markdown'\n *   }, {\n *       text: 'Set Default Paste'\n *   }];\n *\n *   public onSplitButtonClick(dataItem: any): void {\n *       console.log('Paste');\n *   }\n *\n *   public onSplitButtonItemClick(dataItem: any): void {\n *       if (dataItem) {\n *           console.log(dataItem.text);\n *       }\n *   }\n * }\n * ```\n */\nvar SplitButtonComponent = /** @class */ (function (_super) {\n    __extends(SplitButtonComponent, _super);\n    function SplitButtonComponent(focusService, navigationService, wrapperRef, zone, popupService, elRef, localization) {\n        var _this = _super.call(this, focusService, navigationService, wrapperRef, zone, localization) || this;\n        _this.popupService = popupService;\n        _this.elRef = elRef;\n        /**\n         * Sets the text of the SplitButton.\n         */\n        _this.text = '';\n        /**\n         * Defines an icon to be rendered next to the button text\n         * ([see example]({% slug databinding_splitbutton %}#toc-arrays-of-complex-data)).\n         */\n        _this.icon = '';\n        /**\n         * Defines an icon with a custom CSS class to be rendered next to the button text\n         * ([see example]({% slug databinding_splitbutton %}#toc-arrays-of-complex-data)).\n         */\n        _this.iconClass = '';\n        /**\n         * Defines the location of an image to be displayed next to the button text\n         * ([see example]({% slug databinding_splitbutton %}#toc-arrays-of-complex-data)).\n         */\n        _this.imageUrl = '';\n        /**\n         * Changes the visual appearance by using alternative styling options.\n         *\n         * The available values are:\n         * * `flat`\n         * * `outline`\n         */\n        _this.look = 'default';\n        /**\n         * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        _this.tabIndex = 0;\n        /**\n         * Specifies the name of the [font icon]({% slug icons %}#toc-list-of-font-icons) that will\n         * be rendered for the button which opens the popup.\n         */\n        _this.arrowButtonIcon = 'arrow-s';\n        /**\n         * Fires each time the user clicks the main button.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         *    selector: 'my-app',\n         *    template: `\n         *        <kendo-splitbutton (buttonClick)=\"onSplitButtonClick()\" [data]=\"data\">\n         *            Reply\n         *        </kendo-splitbutton>\n         *    `\n         * })\n         * class AppComponent {\n         *    public data: Array<any> = ['Reply All', 'Forward', 'Reply & Delete'];\n         *\n         *    public onSplitButtonClick(): void {\n         *      console.log('SplitButton click');\n         *    }\n         * }\n         * ```\n         *\n         */\n        _this.buttonClick = new EventEmitter();\n        /**\n         * Fires each time the user clicks on the drop-down list. The event data contains the data item bound to the clicked list item.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         *     selector: 'my-app',\n         *    template: `\n         *        <kendo-splitbutton (itemClick)=\"onSplitButtonItemClick($event)\" [data]=\"data\">\n         *          Reply\n         *      </kendo-splitbutton>\n         *    `\n         * })\n         * class AppComponent {\n         *    public data: Array<any> = ['Reply All', 'Forward', 'Reply & Delete'];\n         *\n         *   public onSplitButtonItemClick(dataItem?: string): void {\n         *        if (dataItem) {\n         *            console.log(dataItem);\n         *       }\n         *    }\n         * }\n         * ```\n         *\n         */\n        _this.itemClick = new EventEmitter();\n        /**\n         * Fires each time the SplitButton gets focused.\n         */\n        _this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the SplitButton gets blurred.\n         */\n        _this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the popup is about to open.\n         * This event is preventable. If you cancel the event, the popup will remain closed.\n         */\n        _this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close.\n         * This event is preventable. If you cancel the event, the popup will remain open.\n         */\n        _this.close = new EventEmitter();\n        _this.listId = guid();\n        _this.buttonText = '';\n        _this._itemClick = _this.itemClick;\n        _this._blur = _this.onBlur;\n        return _this;\n    }\n    Object.defineProperty(SplitButtonComponent.prototype, \"disabled\", {\n        get: function () {\n            return this._disabled;\n        },\n        /**\n         * When set to `true`, disables a SplitButton item\n         * ([see example]({% slug databinding_splitbutton %}#toc-arrays-of-complex-data)).\n         */\n        set: function (value) {\n            this._disabled = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"popupSettings\", {\n        get: function () {\n            return this._popupSettings;\n        },\n        /**\n         * Configures the popup of the SplitButton.\n         *\n         * The available options are:\n         * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n         * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n         * - `appendTo: \"root\" | \"component\" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.\n         * - `align: \"left\" | \"center\" | \"right\"`&mdash;Specifies the alignment of the popup.\n         */\n        set: function (settings) {\n            this._popupSettings = Object.assign({ animate: true, popupClass: '' }, settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"data\", {\n        get: function () {\n            if (!this._data) {\n                this.data = [];\n            }\n            return this._data;\n        },\n        /**\n         * Sets the data of the SplitButton.\n         *\n         * > The data has to be provided in an array-like list.\n         */\n        set: function (data) {\n            this._data = data || [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"openState\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this._open;\n        },\n        /**\n         * @hidden\n         */\n        set: function (open) {\n            if (this.disabled) {\n                return;\n            }\n            var eventArgs = new PreventableEvent();\n            if (open) {\n                this.open.emit(eventArgs);\n            }\n            else {\n                this.close.emit(eventArgs);\n            }\n            if (eventArgs.isDefaultPrevented()) {\n                return;\n            }\n            this._toggle(open);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"active\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this._active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"componentTabIndex\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.disabled ? (-1) : this.tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"isFocused\", {\n        get: function () {\n            return this._isFocused && !this._disabled;\n        },\n        set: function (value) {\n            this._isFocused = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"widgetClasses\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"ariaLabel\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.buttonText + \" splitbutton\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    SplitButtonComponent.prototype.onButtonFocus = function () {\n        if (!this.isFocused) {\n            this._isFocused = true;\n            this.onFocus.emit();\n        }\n    };\n    /**\n     * @hidden\n     */\n    SplitButtonComponent.prototype.onButtonClick = function () {\n        this.buttonClick.emit();\n    };\n    /**\n     * @hidden\n     */\n    SplitButtonComponent.prototype.keydown = function (event) {\n        this.keyDownHandler(event);\n    };\n    /**\n     * @hidden\n     */\n    SplitButtonComponent.prototype.keypress = function (event) {\n        this.keyPressHandler(event);\n    };\n    /**\n     * @hidden\n     */\n    SplitButtonComponent.prototype.keyup = function (event) {\n        this.keyUpHandler(event);\n    };\n    /**\n     * @hidden\n     */\n    SplitButtonComponent.prototype.ngAfterViewInit = function () {\n        this.updateButtonText();\n    };\n    /**\n     * @hidden\n     */\n    SplitButtonComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.hasOwnProperty('text')) {\n            this.updateButtonText();\n        }\n    };\n    /**\n     * @hidden\n     */\n    SplitButtonComponent.prototype.togglePopupVisibility = function () {\n        _super.prototype.togglePopupVisibility.call(this);\n        if (isDocumentAvailable()) {\n            this.button.nativeElement.focus();\n        }\n    };\n    /**\n     * @hidden\n     */\n    SplitButtonComponent.prototype.wrapperContains = function (element) {\n        return this.wrapper === element\n            || this.wrapper.contains(element)\n            || (this.popupRef && this.popupRef.popupElement.contains(element));\n    };\n    Object.defineProperty(SplitButtonComponent.prototype, \"anchorAlign\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var align = { horizontal: this.popupSettings.align || 'left', vertical: 'bottom' };\n            if (this.direction === 'rtl' && !isPresent(this.popupSettings.align)) {\n                align.horizontal = 'right';\n            }\n            return align;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitButtonComponent.prototype, \"popupAlign\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var align = { horizontal: this.popupSettings.align || 'left', vertical: 'top' };\n            if (this.direction === 'rtl' && !isPresent(this.popupSettings.align)) {\n                align.horizontal = 'right';\n            }\n            return align;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Focuses the SplitButton component.\n     */\n    SplitButtonComponent.prototype.focus = function () {\n        if (isDocumentAvailable()) {\n            this.button.nativeElement.focus();\n        }\n    };\n    /**\n     * Blurs the SplitButton component.\n     */\n    SplitButtonComponent.prototype.blur = function () {\n        if (isDocumentAvailable()) {\n            this.button.nativeElement.blur();\n            this.blurWrapper();\n        }\n    };\n    SplitButtonComponent.prototype.ngOnDestroy = function () {\n        _super.prototype.ngOnDestroy.call(this);\n        this.destroyPopup();\n    };\n    /**\n     * Toggles the visibility of the popup.\n     * If the `toggle` method is used to open or close the popup, the `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    SplitButtonComponent.prototype.toggle = function (open) {\n        var _this = this;\n        if (this.disabled) {\n            return;\n        }\n        tick(function () { return (_this._toggle((open === undefined) ? !_this._open : open)); });\n    };\n    Object.defineProperty(SplitButtonComponent.prototype, \"isOpen\", {\n        /**\n         * Returns the current open state of the popup.\n         */\n        get: function () {\n            return this.openState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SplitButtonComponent.prototype.enterHandler = function () {\n        if (this.disabled) {\n            return;\n        }\n        if (this.openState) {\n            var focused = this.focusService.focused;\n            if (isPresent(focused) && focused !== -1) {\n                this.emitItemClickHandler(focused);\n            }\n        }\n        else {\n            this.buttonClick.emit();\n        }\n    };\n    SplitButtonComponent.prototype.updateButtonText = function () {\n        var _this = this;\n        if (isDocumentAvailable()) {\n            var innerText_1 = this.wrapper.innerText.split('\\n').join('').trim();\n            //setTimout is needed because of `Expression has changed after it was checked.` error;\n            setTimeout(function () { _this.buttonText = innerText_1; }, 0);\n        }\n    };\n    Object.defineProperty(SplitButtonComponent.prototype, \"appendTo\", {\n        get: function () {\n            var appendTo = this.popupSettings.appendTo;\n            if (!appendTo || appendTo === 'root') {\n                return undefined;\n            }\n            return appendTo === 'component' ? this.containerRef : appendTo;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SplitButtonComponent.prototype._toggle = function (open) {\n        this._open = open;\n        this.destroyPopup();\n        if (this._open) {\n            this.createPopup();\n        }\n    };\n    SplitButtonComponent.prototype.createPopup = function () {\n        var _this = this;\n        this.popupRef = this.popupService.open({\n            anchor: this.elRef,\n            anchorAlign: this.anchorAlign,\n            animate: this.popupSettings.animate,\n            appendTo: this.appendTo,\n            content: this.popupTemplate,\n            popupAlign: this.popupAlign,\n            popupClass: this.popupClasses\n        });\n        this.popupRef.popupAnchorViewportLeave.subscribe(function () { return _this.openState = false; });\n        this.popupRef.popupOpen.subscribe(this.focusFirstItem.bind(this));\n    };\n    SplitButtonComponent.prototype.destroyPopup = function () {\n        if (this.popupRef) {\n            this.popupRef.close();\n            this.popupRef = null;\n        }\n    };\n    SplitButtonComponent.decorators = [\n        { type: Component, args: [{\n                    exportAs: 'kendoSplitButton',\n                    providers: [\n                        FocusService,\n                        NavigationService,\n                        NAVIGATION_SETTINGS_PROVIDER,\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.splitbutton'\n                        }\n                    ],\n                    selector: 'kendo-splitbutton',\n                    template: \"\\n        <button kendoButton\\n            #button\\n            role=\\\"listbox\\\"\\n            type=\\\"button\\\"\\n            [look]=\\\"look\\\"\\n            [tabindex]=\\\"componentTabIndex\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [icon]=\\\"icon\\\"\\n            [class.k-state-active]=\\\"active\\\"\\n            [iconClass]=\\\"iconClass\\\"\\n            [imageUrl]=\\\"imageUrl\\\"\\n            [ngClass]=\\\"buttonClass\\\"\\n            (focus)=\\\"onButtonFocus()\\\"\\n            (click)=\\\"onButtonClick()\\\"\\n            [attr.aria-disabled]=\\\"disabled\\\"\\n            [attr.aria-expanded]=\\\"openState\\\"\\n            [attr.aria-haspopup]=\\\"true\\\"\\n            [attr.aria-owns]=\\\"listId\\\"\\n            [attr.aria-label]=\\\"ariaLabel\\\"\\n            >\\n            {{text}}<ng-content></ng-content>\\n        </button>\\n        <button kendoButton\\n            type=\\\"button\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [icon]=\\\"arrowButtonIcon\\\"\\n            [look]=\\\"look\\\"\\n            [tabindex]=\\\"-1\\\"\\n            [ngClass]=\\\"arrowButtonClass\\\"\\n            (click)=\\\"togglePopupVisibility()\\\">\\n        </button>\\n        <ng-template #popupTemplate>\\n            <kendo-button-list\\n                [id]=\\\"listId\\\"\\n                [data]=\\\"data\\\"\\n                [textField]=\\\"textField\\\"\\n                [itemTemplate]=\\\"itemTemplate\\\"\\n                (onItemBlur)=\\\"blurHandler()\\\"\\n                (onItemClick)=\\\"onItemClick($event)\\\"\\n                (keydown)=\\\"keyDownHandler($event)\\\"\\n                (keypress)=\\\"keyPressHandler($event)\\\"\\n                (keyup)=\\\"keyUpHandler($event)\\\"\\n            >\\n            </kendo-button-list>\\n        </ng-template>\\n        <ng-container #container></ng-container>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    SplitButtonComponent.ctorParameters = function () { return [\n        { type: FocusService },\n        { type: NavigationService },\n        { type: ElementRef },\n        { type: NgZone },\n        { type: PopupService },\n        { type: ElementRef },\n        { type: LocalizationService }\n    ]; };\n    SplitButtonComponent.propDecorators = {\n        text: [{ type: Input }],\n        icon: [{ type: Input }],\n        iconClass: [{ type: Input }],\n        imageUrl: [{ type: Input }],\n        look: [{ type: Input }],\n        disabled: [{ type: Input }],\n        popupSettings: [{ type: Input }],\n        tabIndex: [{ type: Input }],\n        textField: [{ type: Input }],\n        data: [{ type: Input }],\n        buttonClass: [{ type: Input }],\n        arrowButtonClass: [{ type: Input }],\n        arrowButtonIcon: [{ type: Input }],\n        buttonClick: [{ type: Output }],\n        itemClick: [{ type: Output }],\n        onFocus: [{ type: Output, args: ['focus',] }],\n        onBlur: [{ type: Output, args: ['blur',] }],\n        open: [{ type: Output }],\n        close: [{ type: Output }],\n        itemTemplate: [{ type: ContentChild, args: [ButtonItemTemplateDirective,] }],\n        button: [{ type: ViewChild, args: ['button',] }],\n        popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],\n        containerRef: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],\n        isFocused: [{ type: HostBinding, args: ['class.k-state-focused',] }],\n        widgetClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-split-button',] }, { type: HostBinding, args: ['class.k-button-group',] }],\n        dir: [{ type: HostBinding, args: ['attr.dir',] }],\n        keydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],\n        keypress: [{ type: HostListener, args: ['keypress', ['$event'],] }],\n        keyup: [{ type: HostListener, args: ['keyup', ['$event'],] }]\n    };\n    return SplitButtonComponent;\n}(ListButton));\n\n/**\n * @hidden\n *\n * The exported package module.\n *\n * The package exports:\n * - `SplitButtonComponent`&mdash;The SplitButtonComponent component class.\n */\nvar SplitButtonModule = /** @class */ (function () {\n    function SplitButtonModule() {\n    }\n    SplitButtonModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [SplitButtonComponent],\n                    exports: [SplitButtonComponent, ListModule],\n                    imports: [CommonModule, PopupModule, ButtonModule, ListModule]\n                },] },\n    ];\n    return SplitButtonModule;\n}());\n\nvar NAVIGATION_SETTINGS$1 = {\n    useLeftRightArrows: true\n};\nvar Éµ0$1 = NAVIGATION_SETTINGS$1;\nvar NAVIGATION_SETTINGS_PROVIDER$1 = {\n    provide: NAVIGATION_CONFIG,\n    useValue: Éµ0$1\n};\n/**\n * Represents the Kendo UI DropDownButton component for Angular.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-dropdownbutton [data]=\"data\">\n *    User Settings\n *  </kendo-dropdownbutton>\n * `\n * })\n * class AppComponent {\n *   public data: Array<any> = [{\n *       text: 'My Profile'\n *   }, {\n *       text: 'Friend Requests'\n *   }, {\n *       text: 'Account Settings'\n *   }, {\n *       text: 'Support'\n *   }, {\n *       text: 'Log Out'\n *   }];\n * }\n * ```\n */\nvar DropDownButtonComponent = /** @class */ (function (_super) {\n    __extends(DropDownButtonComponent, _super);\n    function DropDownButtonComponent(focusService, navigationService, wrapperRef, zone, popupService, elRef, localization) {\n        var _this = _super.call(this, focusService, navigationService, wrapperRef, zone, localization) || this;\n        _this.popupService = popupService;\n        _this.elRef = elRef;\n        /**\n         * Defines the name of an existing icon in a Kendo UI theme.\n         */\n        _this.icon = '';\n        /**\n         * Defines the list of CSS classes which are used for styling the Button with custom icons.\n         */\n        _this.iconClass = '';\n        /**\n         * Defines a URL for styling the button with a custom image.\n         */\n        _this.imageUrl = '';\n        /**\n         * Adds visual weight to the default button and makes it primary.\n         */\n        _this.primary = false;\n        /**\n         * Changes the visual appearance by using alternative styling options.\n         *\n         * The available values are:\n         * * `flat`\n         * * `outline`\n         */\n        _this.look = 'default';\n        /**\n         * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        _this.tabIndex = 0;\n        /**\n         * Fires each time the user clicks on a drop-down list item. The event data contains the data item bound to the clicked list item.\n         */\n        _this.itemClick = new EventEmitter();\n        /**\n         * Fires each time the popup is about to open.\n         * This event is preventable. If you cancel the event, the popup will remain closed.\n         */\n        _this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close.\n         * This event is preventable. If you cancel the event, the popup will remain open.\n         */\n        _this.close = new EventEmitter();\n        /**\n         * Fires each time the DropDownButton gets focused.\n         */\n        _this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the DropDownButton gets blurred.\n         */\n        _this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        _this.listId = guid();\n        _this._itemClick = _this.itemClick;\n        _this._blur = _this.onBlur;\n        return _this;\n    }\n    Object.defineProperty(DropDownButtonComponent.prototype, \"popupSettings\", {\n        get: function () {\n            return this._popupSettings;\n        },\n        /**\n         * Configures the popup of the DropDownButton.\n         *\n         * The available options are:\n         * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n         * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n         * - `appendTo: \"root\" | \"component\" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.\n         * - `align: \"left\" | \"center\" | \"right\"`&mdash;Specifies the alignment of the popup.\n         */\n        set: function (settings) {\n            this._popupSettings = Object.assign({ animate: true, popupClass: '' }, settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"disabled\", {\n        get: function () {\n            return this._disabled;\n        },\n        /**\n         * Sets the disabled state of the DropDownButton.\n         */\n        set: function (value) {\n            if (value && this.openState) {\n                this.openState = false;\n            }\n            this._disabled = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"data\", {\n        get: function () {\n            return this._data;\n        },\n        /**\n         * Sets or gets the data of the DropDownButton.\n         *\n         * > The data has to be provided in an array-like list.\n         */\n        set: function (data) {\n            this._data = data || [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"openState\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this._open;\n        },\n        /**\n         * @hidden\n         */\n        set: function (open) {\n            if (this.disabled) {\n                return;\n            }\n            var eventArgs = new PreventableEvent();\n            if (open) {\n                this.open.emit(eventArgs);\n            }\n            else {\n                this.close.emit(eventArgs);\n            }\n            if (eventArgs.isDefaultPrevented()) {\n                return;\n            }\n            this._toggle(open);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"componentTabIndex\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.disabled ? (-1) : this.tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"appendTo\", {\n        get: function () {\n            var appendTo = this.popupSettings.appendTo;\n            if (!appendTo || appendTo === 'root') {\n                return undefined;\n            }\n            return appendTo === 'component' ? this.container : appendTo;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"focused\", {\n        get: function () {\n            return this._isFocused && !this._disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"widgetClasses\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"active\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this._active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    DropDownButtonComponent.prototype.keydown = function (event) {\n        this.keyDownHandler(event);\n    };\n    /**\n     * @hidden\n     */\n    DropDownButtonComponent.prototype.keypress = function (event) {\n        this.keyPressHandler(event);\n    };\n    /**\n     * @hidden\n     */\n    DropDownButtonComponent.prototype.keyup = function (event) {\n        this.keyUpHandler(event);\n    };\n    /**\n     * @hidden\n     */\n    DropDownButtonComponent.prototype.mousedown = function (event) {\n        if (this._disabled) {\n            event.preventDefault();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DropDownButtonComponent.prototype.openPopup = function () {\n        this.togglePopupVisibility();\n    };\n    Object.defineProperty(DropDownButtonComponent.prototype, \"anchorAlign\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var align = { horizontal: this.popupSettings.align || 'left', vertical: 'bottom' };\n            if (this.direction === 'rtl' && !isPresent(this.popupSettings.align)) {\n                align.horizontal = 'right';\n            }\n            return align;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownButtonComponent.prototype, \"popupAlign\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var align = { horizontal: this.popupSettings.align || 'left', vertical: 'top' };\n            if (this.direction === 'rtl' && !isPresent(this.popupSettings.align)) {\n                align.horizontal = 'right';\n            }\n            return align;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Focuses the DropDownButton component.\n     */\n    DropDownButtonComponent.prototype.focus = function () {\n        if (isDocumentAvailable()) {\n            this.button.nativeElement.focus();\n        }\n    };\n    /**\n     * Blurs the DropDownButton component.\n     */\n    DropDownButtonComponent.prototype.blur = function () {\n        if (isDocumentAvailable()) {\n            this.button.nativeElement.blur();\n            this.blurWrapper();\n        }\n    };\n    DropDownButtonComponent.prototype.ngOnDestroy = function () {\n        _super.prototype.ngOnDestroy.call(this);\n        this.destroyPopup();\n    };\n    /**\n     * Toggles the visibility of the popup.\n     * If the `toggle` method is used to open or close the popup, the `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    DropDownButtonComponent.prototype.toggle = function (open) {\n        var _this = this;\n        if (this.disabled) {\n            return;\n        }\n        tick(function () { return (_this._toggle((open === undefined) ? !_this._open : open)); });\n    };\n    Object.defineProperty(DropDownButtonComponent.prototype, \"isOpen\", {\n        /**\n         * Returns the current open state of the popup.\n         */\n        get: function () {\n            return this.openState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    DropDownButtonComponent.prototype.handleFocus = function () {\n        if (!this._disabled && !this._isFocused) {\n            this._isFocused = true;\n            this.onFocus.emit();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DropDownButtonComponent.prototype.wrapperContains = function (element) {\n        return this.wrapper === element\n            || this.wrapper.contains(element)\n            || (this.popupRef && this.popupRef.popupElement.contains(element));\n    };\n    DropDownButtonComponent.prototype.subscribeNavigationEvents = function () {\n        this.navigationSubscription = this.navigationService.navigate\n            .subscribe(this.onArrowKeyNavigate.bind(this));\n        this.enterPressSubscription = this.navigationService.enterpress.subscribe(this.onNavigationEnterPress.bind(this));\n        this.enterUpSubscription = this.navigationService.enterup.subscribe(this.onNavigationEnterUp.bind(this));\n        this.openSubscription = this.navigationService.open.subscribe(this.onNavigationOpen.bind(this));\n        this.closeSubscription = merge(this.navigationService.close, this.navigationService.esc).subscribe(this.onNavigationClose.bind(this));\n    };\n    DropDownButtonComponent.prototype.onNavigationEnterPress = function () {\n        if (!this._disabled && !this.openState) {\n            this._active = true;\n        }\n    };\n    DropDownButtonComponent.prototype.onNavigationEnterUp = function () {\n        if (!this._disabled && !this.openState) {\n            this._active = false;\n        }\n        if (this.openState) {\n            var focused = this.focusService.focused;\n            if (isPresent(focused) && focused !== -1) {\n                this.emitItemClickHandler(focused);\n            }\n        }\n        this.togglePopupVisibility();\n        if (!this.openState && isDocumentAvailable()) {\n            this.button.nativeElement.focus();\n        }\n    };\n    DropDownButtonComponent.prototype.onNavigationOpen = function () {\n        if (!this._disabled && !this.openState) {\n            this.togglePopupVisibility();\n        }\n    };\n    DropDownButtonComponent.prototype.onNavigationClose = function () {\n        if (this.openState) {\n            this.togglePopupVisibility();\n            if (isDocumentAvailable()) {\n                this.button.nativeElement.focus();\n            }\n        }\n    };\n    DropDownButtonComponent.prototype.onArrowKeyNavigate = function (index) {\n        this.focusService.focus(index);\n    };\n    DropDownButtonComponent.prototype._toggle = function (open) {\n        if (this._open === open) {\n            return;\n        }\n        this._open = open;\n        this.destroyPopup();\n        if (this._open) {\n            this.createPopup();\n        }\n    };\n    DropDownButtonComponent.prototype.createPopup = function () {\n        var _this = this;\n        this.popupRef = this.popupService.open({\n            anchor: this.elRef,\n            anchorAlign: this.anchorAlign,\n            animate: this.popupSettings.animate,\n            appendTo: this.appendTo,\n            content: this.popupTemplate,\n            popupAlign: this.popupAlign,\n            popupClass: this.popupClasses\n        });\n        this.popupRef.popupAnchorViewportLeave.subscribe(function () { return _this.openState = false; });\n        this.popupRef.popupOpen.subscribe(this.focusFirstItem.bind(this));\n    };\n    DropDownButtonComponent.prototype.destroyPopup = function () {\n        if (this.popupRef) {\n            this.popupRef.close();\n            this.popupRef = null;\n        }\n    };\n    DropDownButtonComponent.decorators = [\n        { type: Component, args: [{\n                    exportAs: 'kendoDropDownButton',\n                    providers: [\n                        FocusService,\n                        NavigationService,\n                        NAVIGATION_SETTINGS_PROVIDER$1,\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.dropdownbutton'\n                        }\n                    ],\n                    selector: 'kendo-dropdownbutton',\n                    template: \"\\n        <button kendoButton #button\\n            role=\\\"menu\\\"\\n            type=\\\"button\\\"\\n            [tabindex]=\\\"componentTabIndex\\\"\\n            [class.k-state-active]=\\\"active\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [icon]=\\\"icon\\\"\\n            [iconClass]=\\\"iconClass\\\"\\n            [imageUrl]=\\\"imageUrl\\\"\\n            [ngClass]=\\\"buttonClass\\\"\\n            (click)=\\\"openPopup()\\\"\\n            (focus)=\\\"handleFocus()\\\"\\n            [attr.aria-disabled]=\\\"disabled\\\"\\n            [attr.aria-expanded]=\\\"openState\\\"\\n            [attr.aria-haspopup]=\\\"true\\\"\\n            [attr.aria-owns]=\\\"listId\\\"\\n            [look]=\\\"look\\\"\\n            [primary]=\\\"primary\\\"\\n            >\\n            <ng-content></ng-content>\\n        </button>\\n        <ng-template #popupTemplate>\\n            <kendo-button-list\\n                #buttonList\\n                [id]=\\\"listId\\\"\\n                [data]=\\\"data\\\"\\n                [textField]=\\\"textField\\\"\\n                [itemTemplate]=\\\"itemTemplate\\\"\\n                (onItemClick)=\\\"onItemClick($event)\\\"\\n                (keydown)=\\\"keyDownHandler($event)\\\"\\n                (keypress)=\\\"keyPressHandler($event)\\\"\\n                (keyup)=\\\"keyUpHandler($event)\\\"\\n            >\\n            </kendo-button-list>\\n        </ng-template>\\n        <ng-container #container></ng-container>\\n    \"\n                },] },\n    ];\n    /** @nocollapse */\n    DropDownButtonComponent.ctorParameters = function () { return [\n        { type: FocusService },\n        { type: NavigationService },\n        { type: ElementRef },\n        { type: NgZone },\n        { type: PopupService },\n        { type: ElementRef },\n        { type: LocalizationService }\n    ]; };\n    DropDownButtonComponent.propDecorators = {\n        icon: [{ type: Input }],\n        iconClass: [{ type: Input }],\n        imageUrl: [{ type: Input }],\n        popupSettings: [{ type: Input }],\n        textField: [{ type: Input }],\n        disabled: [{ type: Input }],\n        data: [{ type: Input }],\n        primary: [{ type: Input }],\n        look: [{ type: Input }],\n        buttonClass: [{ type: Input }],\n        tabIndex: [{ type: Input }],\n        itemClick: [{ type: Output }],\n        open: [{ type: Output }],\n        close: [{ type: Output }],\n        onFocus: [{ type: Output, args: ['focus',] }],\n        onBlur: [{ type: Output, args: ['blur',] }],\n        focused: [{ type: HostBinding, args: ['class.k-state-focused',] }],\n        widgetClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-dropdown-button',] }],\n        dir: [{ type: HostBinding, args: ['attr.dir',] }],\n        itemTemplate: [{ type: ContentChild, args: [ButtonItemTemplateDirective,] }],\n        button: [{ type: ViewChild, args: ['button',] }],\n        buttonList: [{ type: ViewChild, args: ['buttonList',] }],\n        popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],\n        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],\n        keydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],\n        keypress: [{ type: HostListener, args: ['keypress', ['$event'],] }],\n        keyup: [{ type: HostListener, args: ['keyup', ['$event'],] }],\n        mousedown: [{ type: HostListener, args: ['mousedown', ['$event'],] }]\n    };\n    return DropDownButtonComponent;\n}(ListButton));\n\n/**\n * @hidden\n *\n * The exported package module.\n *\n * The package exports:\n * - `DropDownButtonComponent`&mdash;The DropDownButtonComponent component class.\n */\nvar DropDownButtonModule = /** @class */ (function () {\n    function DropDownButtonModule() {\n    }\n    DropDownButtonModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [DropDownButtonComponent],\n                    exports: [DropDownButtonComponent, ListModule],\n                    imports: [CommonModule, PopupModule, ListModule, ButtonModule]\n                },] },\n    ];\n    return DropDownButtonModule;\n}());\n\n/**\n * Displays a Chip that represents an input, attribute or an action.\n */\nvar ChipComponent = /** @class */ (function () {\n    function ChipComponent(element, renderer, localizationService) {\n        this.element = element;\n        this.renderer = renderer;\n        this.localizationService = localizationService;\n        /**\n         * Changes the visual appearance by using alternative styling options.\n         *\n         * The available values are:\n         * * `filled`\n         * * `outlined`\n         */\n        this.look = 'filled';\n        /**\n         * Specifies the selected state of the Chip.\n         */\n        this.selected = false;\n        /**\n         * Specifies if the Chip will be removable or not.\n         * If the property is set to `true`, the Chip renders a remove icon.\n         */\n        this.removable = false;\n        /**\n         * Specifies the Chip type.\n         *\n         * The possible values are:\n         * - `none` (default)\n         * - `success`\n         * - `error`\n         * - `warning`\n         * - `info`\n         */\n        this.type = 'none';\n        /**\n         * If set to `true`, the Chip will be disabled.\n         */\n        this.disabled = false;\n        /**\n         * Fires each time the user clicks the remove icon of the Chip.\n         */\n        this.remove = new EventEmitter();\n        this.tabIndex = 0;\n        this.hostClass = true;\n        this.focused = false;\n        this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n    }\n    Object.defineProperty(ChipComponent.prototype, \"outlineClass\", {\n        get: function () {\n            return this.look === 'outlined';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ChipComponent.prototype, \"filledClass\", {\n        get: function () {\n            return this.look === 'filled';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ChipComponent.prototype, \"hasIconClass\", {\n        get: function () {\n            return this.icon || this.iconClass ? true : false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ChipComponent.prototype, \"disabledClass\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ChipComponent.prototype, \"selectedClass\", {\n        get: function () {\n            return this.selected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ChipComponent.prototype, \"focusedClass\", {\n        get: function () {\n            return this.focused;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    ChipComponent.prototype.onFocus = function () {\n        this.focused = true;\n    };\n    /**\n     * @hidden\n     */\n    ChipComponent.prototype.onBlur = function () {\n        this.focused = false;\n    };\n    ChipComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.dynamicRTLSubscription = this.localizationService.changes\n            .subscribe(function (_a) {\n            var rtl = _a.rtl;\n            return _this.direction = rtl ? 'rtl' : 'ltr';\n        });\n    };\n    ChipComponent.prototype.ngOnDestroy = function () {\n        if (this.dynamicRTLSubscription) {\n            this.dynamicRTLSubscription.unsubscribe();\n        }\n    };\n    ChipComponent.prototype.ngAfterViewInit = function () {\n        var chip = this.element.nativeElement;\n        var typeClass = this.typeClass();\n        if (this.type !== 'none') {\n            this.renderer.addClass(chip, typeClass);\n        }\n    };\n    Object.defineProperty(ChipComponent.prototype, \"iconClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            if (this.icon) {\n                return \"k-icon k-i-\" + this.icon;\n            }\n            if (this.iconClass) {\n                return \"\" + this.iconClass;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ChipComponent.prototype, \"selectedIconClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            if (this.selectedIcon) {\n                return \"\" + this.selectedIcon;\n            }\n            return \"k-icon k-i-check\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ChipComponent.prototype, \"removeIconClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            if (this.removeIcon) {\n                return \"\" + this.removeIcon;\n            }\n            return \"k-icon k-i-close-circle\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    ChipComponent.prototype.typeClass = function () {\n        return {\n            'none': '',\n            'success': 'k-chip-success',\n            'warning': 'k-chip-warning',\n            'error': 'k-chip-error',\n            'info': 'k-chip-info'\n        }[this.type];\n    };\n    /**\n     * Focuses the Chip component.\n     */\n    ChipComponent.prototype.focus = function () {\n        if (isDocumentAvailable()) {\n            this.element.nativeElement.focus();\n            this.focused = true;\n        }\n    };\n    /**\n     * Blurs the Chip component.\n     */\n    ChipComponent.prototype.blur = function () {\n        if (isDocumentAvailable()) {\n            this.element.nativeElement.blur();\n            this.focused = false;\n        }\n    };\n    /**\n     * @hidden\n     */\n    ChipComponent.prototype.onRemoveClick = function () {\n        if (this.removable) {\n            this.remove.emit(this);\n        }\n    };\n    ChipComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-chip',\n                    template: \"\\n        <span class=\\\"k-selected-icon-wrapper\\\">\\n            <span *ngIf=\\\"selected\\\"\\n                class=\\\"k-selected-icon\\\"\\n                [ngClass]=\\\"selectedIconClasses\\\"\\n            >\\n            </span>\\n        </span>\\n\\n        <span *ngIf=\\\"icon || iconClass\\\"\\n            class=\\\"k-chip-icon\\\"\\n            [ngClass]=\\\"iconClasses\\\"\\n        >\\n        </span>\\n\\n        <span class=\\\"k-chip-content\\\">\\n            <span class=\\\"k-chip-label\\\" *ngIf=\\\"label\\\">\\n                {{ label }}\\n            </span>\\n            <ng-content *ngIf=\\\"!label\\\"></ng-content>\\n        </span>\\n\\n        <span *ngIf=\\\"removable\\\"\\n            class=\\\"k-remove-icon\\\"\\n            (click)=\\\"onRemoveClick()\\\"\\n        >\\n            <span [ngClass]=\\\"removeIconClasses\\\"></span>\\n        </span>\\n    \",\n                    providers: [\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.chip'\n                        }\n                    ]\n                },] },\n    ];\n    /** @nocollapse */\n    ChipComponent.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: LocalizationService }\n    ]; };\n    ChipComponent.propDecorators = {\n        look: [{ type: Input }],\n        label: [{ type: Input }],\n        icon: [{ type: Input }],\n        iconClass: [{ type: Input }],\n        selected: [{ type: Input }],\n        selectedIcon: [{ type: Input }],\n        removable: [{ type: Input }],\n        removeIcon: [{ type: Input }],\n        type: [{ type: Input }],\n        disabled: [{ type: Input }],\n        remove: [{ type: Output }],\n        tabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],\n        hostClass: [{ type: HostBinding, args: ['class.k-chip',] }],\n        outlineClass: [{ type: HostBinding, args: ['class.k-chip-outline',] }],\n        filledClass: [{ type: HostBinding, args: ['class.k-chip-filled',] }],\n        hasIconClass: [{ type: HostBinding, args: ['class.k-chip-has-icon',] }],\n        disabledClass: [{ type: HostBinding, args: ['class.k-chip-disabled',] }],\n        selectedClass: [{ type: HostBinding, args: ['class.k-chip-selected',] }],\n        focusedClass: [{ type: HostBinding, args: ['class.k-chip-focused',] }],\n        direction: [{ type: HostBinding, args: ['attr.dir',] }],\n        onFocus: [{ type: HostListener, args: ['focus',] }],\n        onBlur: [{ type: HostListener, args: ['blur',] }]\n    };\n    return ChipComponent;\n}());\n\nvar ChipListComponent = /** @class */ (function () {\n    function ChipListComponent(localizationService) {\n        this.localizationService = localizationService;\n        this.hostClass = true;\n        /**\n         * Sets the selection mode of the ChipList.\n         *\n         * The available values are:\n         * * `none` (default)\n         * * `single`\n         * * `multiple`\n         */\n        this.selection = 'none';\n        /**\n         * Fires each time when the ChipList selection is changed.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Fires each time the user clicks on the remove icon of the Chip.\n         */\n        this.remove = new EventEmitter();\n        this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n    }\n    Object.defineProperty(ChipListComponent.prototype, \"single\", {\n        get: function () {\n            return this.selection === 'single';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ChipListComponent.prototype, \"multiple\", {\n        get: function () {\n            return this.selection === 'multiple';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    ChipListComponent.prototype.onClick = function (target) {\n        var isRemoveClicked = closest(target, '.k-remove-icon');\n        var clickedChip = closest(target, '.k-chip');\n        var chip = this.chips.find(function (chip) { return clickedChip === chip.element.nativeElement; });\n        if (isRemoveClicked && clickedChip) {\n            this.remove.emit(chip);\n            return;\n        }\n        if (this.selection !== 'none' && clickedChip && !isRemoveClicked) {\n            this.setSelection(chip);\n        }\n    };\n    ChipListComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.dynamicRTLSubscription = this.localizationService.changes\n            .subscribe(function (_a) {\n            var rtl = _a.rtl;\n            return _this.direction = rtl ? 'rtl' : 'ltr';\n        });\n    };\n    ChipListComponent.prototype.ngOnDestroy = function () {\n        if (this.dynamicRTLSubscription) {\n            this.dynamicRTLSubscription.unsubscribe();\n        }\n    };\n    ChipListComponent.prototype.selectedChips = function () {\n        return this.chips.reduce(function (acc, cur, idx) { return cur.selected ? acc.concat(idx) : acc; }, []);\n    };\n    /**\n     * Updates the selection on click of a Chip. Emits events.\n     */\n    ChipListComponent.prototype.setSelection = function (chip) {\n        if (this.selection === 'single') {\n            this.clearSelection(chip);\n        }\n        chip.selected = !chip.selected;\n        this.selectedChange.emit(this.selectedChips());\n    };\n    ChipListComponent.prototype.clearSelection = function (chip) {\n        this.chips.forEach(function (c) {\n            if (chip !== c) {\n                c.selected = false;\n            }\n        });\n    };\n    ChipListComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'kendo-chip-list',\n                    template: \"\\n        <ng-content></ng-content>\\n    \",\n                    providers: [\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.chip-list'\n                        }\n                    ]\n                },] },\n    ];\n    /** @nocollapse */\n    ChipListComponent.ctorParameters = function () { return [\n        { type: LocalizationService }\n    ]; };\n    ChipListComponent.propDecorators = {\n        hostClass: [{ type: HostBinding, args: ['class.k-chip-list',] }],\n        direction: [{ type: HostBinding, args: ['attr.dir',] }],\n        selection: [{ type: Input }],\n        selectedChange: [{ type: Output }],\n        remove: [{ type: Output }],\n        chips: [{ type: ContentChildren, args: [ChipComponent,] }],\n        single: [{ type: HostBinding, args: ['class.k-selection-single',] }],\n        multiple: [{ type: HostBinding, args: ['class.k-selection-multiple',] }],\n        onClick: [{ type: HostListener, args: ['click', ['$event.target'],] }]\n    };\n    return ChipListComponent;\n}());\n\nvar exportedModules = [\n    ChipComponent,\n    ChipListComponent\n];\nvar declarations = exportedModules.slice();\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Chip component.\n */\nvar ChipModule = /** @class */ (function () {\n    function ChipModule() {\n    }\n    ChipModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [declarations],\n                    exports: [exportedModules],\n                    imports: [CommonModule]\n                },] },\n    ];\n    return ChipModule;\n}());\n\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmodules'] }})\n * definition for the Buttons components.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Buttons module\n * import { ButtonsModule } from '@progress/kendo-angular-buttons';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, ButtonsModule], // import Buttons module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nvar ButtonsModule = /** @class */ (function () {\n    function ButtonsModule() {\n    }\n    ButtonsModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [ButtonGroupModule, ButtonModule, SplitButtonModule, DropDownButtonModule, ChipModule]\n                },] },\n    ];\n    return ButtonsModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { KendoButtonService, FocusService, FocusableDirective, ButtonItemTemplateDirective, ListButton, ListComponent, ListModule, TemplateContextDirective, NAVIGATION_CONFIG, NavigationService, ButtonDirective, ButtonDirective as Button, ButtonGroupComponent, ButtonGroupComponent as ButtonGroup, ButtonGroupModule, ButtonModule, ButtonsModule, SplitButtonComponent, SplitButtonComponent as SplitButton, SplitButtonModule, DropDownButtonComponent, DropDownButtonComponent as DropDownButton, DropDownButtonModule, ChipComponent, ChipListComponent, ChipModule };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;MAWM;;;;;gDAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAscA,AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwVA,AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAqCD;;;;;;;;;;gDAMC;;;;;;;;;;;;;;KAcD;;;;;;;;;;;;gDAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAwDD,AAKC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6BH,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAkCC;;;;;gDAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4CA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;;;;;;;;;;;;;;;;OAuBC,AAKD;;;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;KAeD;;;;;;;;;;;;;;;;;gDAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkRA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyFA,AAGA;;;;;;;;;;;;kkfH,AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAyCA;;;;;;;;;;;;;;KAcD;;;;;;;;;;;;;;;gDAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0aA,AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAwCA;;;;;;;;;;;;;;KAcD;;;;;;;;;;;;;;;gDAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6MA,AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA8BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwFA,AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAeA;;;;;;;;;;;;;;;KAeD;;;;;;;;;;;;;gDAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAqCD;;;;;;;;;;;;;;;;;gDAKC;;;;;;;;;"}