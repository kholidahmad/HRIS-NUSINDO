{"version":3,"file":"index.js","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-buttons/dist/fesm2015/index.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { Injectable, EventEmitter, Directive, ElementRef, Renderer2, Optional, NgZone, Input, Output, HostBinding, HostListener, isDevMode, Component, ContentChildren, NgModule, TemplateRef, ViewContainerRef, InjectionToken, Inject, ContentChild, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Subject, fromEvent, merge } from 'rxjs';\nimport { Keys, isChanged, isDocumentAvailable, hasObservers, guid } from '@progress/kendo-angular-common';\nimport { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\nimport { filter } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport { PopupService, PopupModule } from '@progress/kendo-angular-popup';\n\n/**\n * @hidden\n */\nclass KendoButtonService {\n    constructor() {\n        this.buttonLookChange = new BehaviorSubject('default');\n        this.buttonClicked = new Subject();\n        this.buttonClicked$ = this.buttonClicked.asObservable();\n    }\n    click(button) {\n        this.buttonClicked.next(button);\n    }\n    setButtonLook(look) {\n        this.buttonLookChange.next(look);\n    }\n}\nKendoButtonService.decorators = [\n    { type: Injectable },\n];\n\nconst SPAN_TAG_NAME = 'SPAN';\n/**\n * Represents the Kendo UI Button component for Angular.\n */\nclass ButtonDirective {\n    constructor(element, renderer, service, localization, ngZone) {\n        this.service = service;\n        this.ngZone = ngZone;\n        /**\n         * Provides visual styling that indicates if the Button is active.\n         * By default, `toggleable` is set to `false`.\n         */\n        this.toggleable = false;\n        /**\n         * Adds visual weight to the Button and makes it primary.\n         */\n        this.primary = false;\n        /**\n         * Changes the visual appearance by using alternative styling options\n         * ([more information and examples]({% slug appearance_button %})).\n         *\n         * The available values are:\n         * * `flat`\n         * * `outline`\n         */\n        this.look = 'default';\n        /**\n         * @hidden\n         */\n        this.role = 'button';\n        /**\n         * Fires each time the selected state of a toggleable button is changed.\n         *\n         * The event argument is the new selected state (boolean).\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Fires each time the user clicks the button.\n         */\n        this.click = new EventEmitter();\n        this.isDisabled = false;\n        this.isIcon = false;\n        this.isIconClass = false;\n        this._focused = false;\n        this.domEvents = [];\n        this.direction = localization.rtl ? 'rtl' : 'ltr';\n        this.localizationChangeSubscription = localization.changes\n            .subscribe(({ rtl }) => this.direction = rtl ? 'rtl' : 'ltr');\n        this.element = element.nativeElement;\n        this.renderer = renderer;\n    }\n    /**\n     * Backwards-compatible alias\n     *\n     * @hidden\n     */\n    get togglable() {\n        return this.toggleable;\n    }\n    /**\n     * @hidden\n     */\n    set togglable(value) {\n        this.toggleable = value;\n    }\n    /**\n     * Sets the selected state of the Button.\n     */\n    get selected() {\n        return this._selected || false;\n    }\n    set selected(value) {\n        this._selected = value;\n    }\n    /**\n     * @hidden\n     */\n    set tabIndex(index) {\n        this.element.tabIndex = index;\n    }\n    get tabIndex() {\n        return this.element.tabIndex;\n    }\n    /**\n     * Defines the name for an existing icon in a Kendo UI theme.\n     * The icon is rendered inside the Button by a `span.k-icon` element.\n     */\n    set icon(icon) {\n        if (icon) {\n            this.iconSetter(icon, () => {\n                this.isIcon = true;\n                const classes = 'k-icon k-i-' + icon;\n                this.addIcon(classes);\n            });\n        }\n        else {\n            this.isIcon = false;\n            this.updateIconNode();\n        }\n    }\n    /**\n     * Defines a CSS class&mdash;or multiple classes separated by spaces&mdash;\n     * which are applied to a `span` element inside the Button. Allows the usage of custom icons.\n     */\n    set iconClass(iconClassName) {\n        if (iconClassName) {\n            this.iconSetter(iconClassName, () => {\n                this.isIconClass = true;\n                this.addIcon(iconClassName);\n            });\n        }\n        else {\n            this.isIconClass = false;\n            this.updateIconNode();\n        }\n    }\n    /**\n     * Defines a URL which is used for an `img` element inside the Button.\n     * The URL can be relative or absolute. If relative, it is evaluated with relation to the web page URL.\n     */\n    set imageUrl(imageUrl) {\n        if (imageUrl) {\n            this.iconSetter(imageUrl, this.addImgIcon.bind(this));\n        }\n        else {\n            this.removeImageNode();\n        }\n    }\n    /**\n     * If set to `true`, it disables the Button.\n     */\n    set disabled(disabled) {\n        this.isDisabled = disabled;\n        this.renderer.setProperty(this.element, 'disabled', disabled);\n    }\n    get disabled() {\n        return this.isDisabled;\n    }\n    set isFocused(isFocused) {\n        this.toggleClass('k-state-focused', isFocused);\n        this._focused = isFocused;\n    }\n    get isFocused() {\n        return this._focused;\n    }\n    get classButton() {\n        return true;\n    }\n    get classDisabled() {\n        return this.isDisabled;\n    }\n    get classPrimary() {\n        return this.primary;\n    }\n    get isFlat() {\n        return this.look === 'flat';\n    }\n    get isBare() {\n        return this.look === 'bare';\n    }\n    get isOutline() {\n        return this.look === 'outline';\n    }\n    get classActive() {\n        return this.selected;\n    }\n    get getDirection() {\n        return this.direction;\n    }\n    /**\n     * @hidden\n     */\n    onFocus() {\n        this.isFocused = true;\n    }\n    /**\n     * @hidden\n     */\n    onBlur() {\n        this.isFocused = false;\n    }\n    ngOnInit() {\n        const isSpan = this.element.tagName === SPAN_TAG_NAME;\n        if (this.service) {\n            this.buttonLookChangeSubscription = this.service.buttonLookChange\n                .pipe(filter((look) => look !== 'default'))\n                .subscribe((look) => this.look = look);\n        }\n        if (!this.element.hasAttribute('role') && this.togglable) {\n            this.toggleAriaCheckbox(this.toggleable);\n        }\n        if (this.role) {\n            this.setAttribute('role', this.role);\n        }\n        this.ngZone.runOutsideAngular(() => {\n            this.domEvents.push(this.renderer.listen(this.element, 'click', this._onButtonClick.bind(this)));\n            this.domEvents.push(this.renderer.listen(this.element, 'keydown', (event) => {\n                if (isSpan && (event.keyCode === Keys.Space || event.keyCode === Keys.Enter)) {\n                    this.click.emit(event);\n                    this._onButtonClick();\n                }\n            }));\n        });\n    }\n    ngOnChanges(change) {\n        if (isChanged('togglable', change) || isChanged('toggleable', change)) {\n            this.toggleAriaCheckbox(this.toggleable);\n        }\n    }\n    ngAfterViewChecked() {\n        this.setIconTextClasses();\n    }\n    ngOnDestroy() {\n        this.imageNode = null;\n        this.iconNode = null;\n        this.renderer = null;\n        this.localizationChangeSubscription.unsubscribe();\n        if (this.service && this.buttonLookChangeSubscription) {\n            this.buttonLookChangeSubscription.unsubscribe();\n        }\n        clearTimeout(this.deferTimeout);\n        this.domEvents.forEach(unbindHandler => unbindHandler());\n    }\n    /**\n     * Focuses the Button component.\n     */\n    focus() {\n        if (isDocumentAvailable()) {\n            this.element.focus();\n            this.isFocused = true;\n        }\n    }\n    /**\n     * Blurs the Button component.\n     */\n    blur() {\n        if (isDocumentAvailable()) {\n            this.element.blur();\n            this.isFocused = false;\n        }\n    }\n    /**\n     * @hidden\n     */\n    setAttribute(attribute, value) {\n        this.renderer.setAttribute(this.element, attribute, value);\n    }\n    /**\n     * @hidden\n     */\n    removeAttribute(attribute) {\n        this.renderer.removeAttribute(this.element, attribute);\n    }\n    /**\n     * @hidden\n     *\n     * Internal setter that triggers selectedChange\n     */\n    setSelected(value) {\n        const changed = this.selected !== value;\n        this.selected = value;\n        this.setAttribute('aria-checked', this.selected.toString());\n        this.toggleClass('k-state-active', this.selected);\n        if (changed && hasObservers(this.selectedChange)) {\n            this.ngZone.run(() => {\n                this.selectedChange.emit(value);\n            });\n        }\n    }\n    toggleAriaCheckbox(shouldSet) {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        if (shouldSet) {\n            this.role = 'checkbox';\n            this.setAttribute('role', this.role);\n            this.setAttribute('aria-checked', this.selected.toString());\n        }\n        else {\n            this.role = 'button';\n            this.setAttribute('role', this.role);\n            this.removeAttribute('aria-checked');\n        }\n    }\n    hasText() {\n        if (isDocumentAvailable()) {\n            return String(this.element.textContent).trim().length > 0;\n        }\n        else {\n            return false;\n        }\n    }\n    addImgIcon(imageUrl) {\n        let renderer = this.renderer;\n        if (this.imageNode) {\n            renderer.setProperty(this.imageNode, 'src', imageUrl);\n        }\n        else if (isDocumentAvailable()) {\n            this.imageNode = renderer.createElement('img');\n            renderer.setProperty(this.imageNode, 'src', imageUrl);\n            renderer.setProperty(this.imageNode, 'className', 'k-image');\n            renderer.setAttribute(this.imageNode, 'role', 'presentation');\n            this.prependChild(this.imageNode);\n        }\n    }\n    addIcon(classNames) {\n        let renderer = this.renderer;\n        if (this.iconNode) {\n            renderer.setProperty(this.iconNode, 'className', classNames);\n        }\n        else if (isDocumentAvailable()) {\n            this.iconNode = renderer.createElement('span');\n            renderer.setProperty(this.iconNode, 'className', classNames);\n            renderer.setAttribute(this.iconNode, 'role', 'presentation');\n            this.prependChild(this.iconNode);\n        }\n    }\n    prependChild(node) {\n        this.defer(() => {\n            if (this.renderer && node !== this.element.firstChild) {\n                this.renderer.insertBefore(this.element, node, this.element.firstChild);\n            }\n        });\n    }\n    defer(callback) {\n        this.ngZone.runOutsideAngular(() => {\n            this.deferTimeout = setTimeout(callback, 0);\n        });\n    }\n    iconSetter(icon, insertIcon) {\n        if (icon) {\n            insertIcon(icon);\n        }\n        this.setIconTextClasses();\n    }\n    removeImageNode() {\n        if (this.imageNode && this.renderer.parentNode(this.imageNode)) {\n            this.renderer.removeChild(this.element, this.imageNode);\n            this.imageNode = null;\n        }\n    }\n    removeIconNode() {\n        if (this.iconNode && this.renderer.parentNode(this.iconNode)) {\n            this.renderer.removeChild(this.element, this.iconNode);\n            this.iconNode = null;\n        }\n    }\n    updateIconNode() {\n        if (!this.isIcon && !this.isIconClass) {\n            this.removeIconNode();\n        }\n    }\n    setIconTextClasses() {\n        const hasIcon = this.isIcon || this.isIconClass || this.imageNode;\n        const hasText = this.hasText();\n        this.toggleClass('k-button-icon', hasIcon && !hasText);\n        this.toggleClass('k-button-icontext', hasIcon && hasText);\n    }\n    toggleClass(className, add) {\n        if (add) {\n            this.renderer.addClass(this.element, className);\n        }\n        else {\n            this.renderer.removeClass(this.element, className);\n        }\n    }\n    _onButtonClick() {\n        if (!this.disabled && this.service) {\n            this.ngZone.run(() => {\n                this.service.click(this);\n            });\n        }\n        if (this.togglable && !this.service) {\n            this.setSelected(!this.selected);\n        }\n    }\n}\nButtonDirective.decorators = [\n    { type: Directive, args: [{\n                exportAs: 'kendoButton',\n                providers: [\n                    LocalizationService,\n                    {\n                        provide: L10N_PREFIX,\n                        useValue: 'kendo.button'\n                    }\n                ],\n                selector: 'button[kendoButton], span[kendoButton]' // tslint:disable-line\n            },] },\n];\n/** @nocollapse */\nButtonDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: KendoButtonService, decorators: [{ type: Optional }] },\n    { type: LocalizationService },\n    { type: NgZone }\n];\nButtonDirective.propDecorators = {\n    toggleable: [{ type: Input }],\n    togglable: [{ type: Input }],\n    primary: [{ type: Input }],\n    look: [{ type: Input }],\n    selected: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    icon: [{ type: Input }],\n    iconClass: [{ type: Input }],\n    imageUrl: [{ type: Input }],\n    disabled: [{ type: Input }],\n    role: [{ type: Input }],\n    selectedChange: [{ type: Output }],\n    click: [{ type: Output }],\n    classButton: [{ type: HostBinding, args: ['class.k-button',] }],\n    classDisabled: [{ type: HostBinding, args: ['class.k-state-disabled',] }],\n    classPrimary: [{ type: HostBinding, args: ['class.k-primary',] }],\n    isFlat: [{ type: HostBinding, args: ['class.k-flat',] }],\n    isBare: [{ type: HostBinding, args: ['class.k-bare',] }],\n    isOutline: [{ type: HostBinding, args: ['class.k-outline',] }],\n    classActive: [{ type: HostBinding, args: ['attr.ariaPressed',] }, { type: HostBinding, args: ['class.k-state-active',] }],\n    getDirection: [{ type: HostBinding, args: ['attr.dir',] }],\n    onFocus: [{ type: HostListener, args: ['focus',] }],\n    onBlur: [{ type: HostListener, args: ['blur',] }]\n};\n\n/* tslint:disable:no-null-keyword */\n/* tslint:disable:no-bitwise */\nconst resolvedPromise = Promise.resolve(null);\n/**\n * @hidden\n */\nconst isPresent = (value) => value !== null && value !== undefined;\n/**\n * @hidden\n */\nconst tick = (f) => (resolvedPromise.then(f));\n/**\n * @hidden\n */\nfunction isDocumentNode(container) {\n    return container.nodeType === 9;\n}\n/**\n * @hidden\n */\nfunction closest(element, selector) {\n    if (element.closest) {\n        return element.closest(selector);\n    }\n    const matches = Element.prototype.matches ?\n        (el, sel) => el.matches(sel)\n        : (el, sel) => el.msMatchesSelector(sel);\n    let node = element;\n    while (node && !isDocumentNode(node)) {\n        if (matches(node, selector)) {\n            return node;\n        }\n        node = node.parentNode;\n    }\n}\n\n/**\n * @hidden\n */\nclass PreventableEvent {\n    constructor() {\n        this.prevented = false;\n    }\n    /**\n     * Prevents the default action for a specified event.\n     * In this way, the source component suppresses the built-in behavior that follows the event.\n     */\n    preventDefault() {\n        this.prevented = true;\n    }\n    /**\n     * If the event is prevented by any of its subscribers, returns `true`.\n     *\n     * @returns `true` if the default action was prevented. Otherwise, returns `false`.\n     */\n    isDefaultPrevented() {\n        return this.prevented;\n    }\n}\n\n/**\n * @hidden\n */\nconst ariaChecked = 'aria-checked';\n/**\n * @hidden\n */\nconst tabindex = 'tabindex';\n/**\n * Represents the Kendo UI ButtonGroup component for Angular.\n */\nclass ButtonGroupComponent {\n    constructor(service, localization, element) {\n        this.service = service;\n        this.element = element;\n        /**\n         * By default, the selection mode of the ButtonGroup is set to `multiple`.\n         */\n        this.selection = 'multiple';\n        /**\n         * Changes the visual appearance by using alternative styling options\n         * ([more information and examples]({% slug styling_buttongroup %})).\n         * The `look` property of the ButtonGroup takes precedence over the `look` property\n         * of the individual buttons that are part of the group.\n         *\n         * The available values are:\n         * * `flat`\n         * * `outline`\n         */\n        this.look = 'default';\n        /**\n         * Fires every time keyboard navigation occurs.\n         */\n        this.navigate = new EventEmitter();\n        this._tabIndex = 0;\n        this.currentTabIndex = 0;\n        this.localizationChangeSubscription = localization.changes.subscribe(({ rtl }) => this.direction = rtl ? 'rtl' : 'ltr');\n    }\n    /**\n     * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n    set tabIndex(value) {\n        this._tabIndex = value;\n        this.currentTabIndex = value;\n    }\n    get tabIndex() {\n        return this._tabIndex;\n    }\n    get wrapperClass() {\n        return true;\n    }\n    get disabledClass() {\n        return this.disabled;\n    }\n    get stretchedClass() {\n        return !!this.width;\n    }\n    get isFlat() {\n        return this.look === 'flat';\n    }\n    get isBare() {\n        return this.look === 'bare';\n    }\n    get isOutline() {\n        return this.look === 'outline';\n    }\n    get getRole() {\n        return this.isSelectionSingle() ? 'radiogroup' : 'group';\n    }\n    get dir() {\n        return this.direction;\n    }\n    get ariaDisabled() {\n        return this.disabled;\n    }\n    get wrapperWidth() {\n        return this.width;\n    }\n    get wrapperTabIndex() {\n        return this.disabled ? undefined : this.currentTabIndex;\n    }\n    /**\n     * @hidden\n     */\n    keydown(event) {\n        if (!this.disabled) {\n            this.navigateFocus(event);\n        }\n    }\n    /**\n     * @hidden\n     */\n    onFocus() {\n        this.currentTabIndex = -1;\n        const focusedIndex = this.buttons.toArray().findIndex(current => current.element.tabIndex !== -1);\n        const index = focusedIndex === -1 ? 0 : focusedIndex;\n        this.focus(this.buttons.filter((_current, i) => {\n            return i === index;\n        }));\n    }\n    /**\n     * @hidden\n     */\n    focusout(event) {\n        if (event.relatedTarget && event.relatedTarget.parentNode !== this.element.nativeElement) {\n            this.defocus(this.buttons.toArray());\n            this.currentTabIndex = this.tabIndex;\n        }\n    }\n    ngOnInit() {\n        this.service.setButtonLook(this.look);\n        this.subscription = this.service.buttonClicked$.subscribe((button) => {\n            let newSelectionValue;\n            if (this.isSelectionSingle()) {\n                newSelectionValue = true;\n                this.deactivate(this.buttons.filter(current => current !== button));\n            }\n            else {\n                this.defocus(this.buttons.toArray());\n                newSelectionValue = !button.selected;\n            }\n            if (button.togglable) {\n                button.setSelected(newSelectionValue);\n                button.setAttribute(ariaChecked, newSelectionValue.toString());\n            }\n            button.setAttribute(tabindex, \"0\");\n        });\n    }\n    ngOnChanges(change) {\n        if (isChanged('disabled', change)) {\n            this.buttons.forEach((button) => {\n                if (isPresent(this.disabled)) {\n                    button.disabled = this.disabled;\n                }\n            });\n        }\n    }\n    ngAfterContentInit() {\n        const isRadioGroup = this.isSelectionSingle();\n        const buttonsRole = isRadioGroup ? 'radio' : 'checkbox';\n        this.buttons.forEach((button) => {\n            if (button.togglable) {\n                button.setAttribute(ariaChecked, button.selected.toString());\n                button.setAttribute('role', buttonsRole);\n            }\n            if (button.selected) {\n                button.setAttribute(tabindex, \"0\");\n            }\n            else {\n                button.setAttribute(tabindex, \"-1\");\n            }\n        });\n    }\n    ngAfterViewChecked() {\n        if (this.buttons.length) {\n            this.buttons.first.renderer.addClass(this.buttons.first.element, 'k-group-start');\n            this.buttons.last.renderer.addClass(this.buttons.last.element, 'k-group-end');\n        }\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n        this.localizationChangeSubscription.unsubscribe();\n    }\n    ngAfterContentChecked() {\n        this.verifySettings();\n    }\n    navigateFocus(event) {\n        let focusedIndex = this.buttons.toArray().findIndex(current => current.element.tabIndex !== -1);\n        const firstIndex = 0;\n        const lastIndex = this.buttons.length - 1;\n        const eventArgs = new PreventableEvent();\n        if (event.keyCode === Keys.ArrowRight && focusedIndex < lastIndex) {\n            this.navigate.emit(eventArgs);\n            if (!eventArgs.isDefaultPrevented()) {\n                this.defocus(this.buttons.toArray());\n                this.focus(this.buttons.filter((_current, index) => {\n                    return index === focusedIndex + 1;\n                }));\n            }\n        }\n        if (event.keyCode === Keys.ArrowLeft && focusedIndex > firstIndex) {\n            this.navigate.emit(eventArgs);\n            if (!eventArgs.isDefaultPrevented()) {\n                this.defocus(this.buttons.toArray());\n                this.focus(this.buttons.filter((_current, index) => {\n                    return index === focusedIndex - 1;\n                }));\n            }\n        }\n    }\n    deactivate(buttons) {\n        buttons.forEach((button) => {\n            button.setSelected(false);\n            button.setAttribute(ariaChecked, button.selected.toString());\n            button.setAttribute(tabindex, \"-1\");\n        });\n    }\n    activate(buttons) {\n        buttons.forEach((button) => {\n            button.setSelected(true);\n            button.setAttribute(ariaChecked, button.selected.toString());\n            button.setAttribute(tabindex, \"0\");\n            button.focus();\n        });\n    }\n    defocus(buttons) {\n        buttons.forEach((button) => {\n            button.setAttribute(tabindex, \"-1\");\n        });\n    }\n    focus(buttons) {\n        buttons.forEach((button) => {\n            button.setAttribute(tabindex, \"0\");\n            button.focus();\n        });\n    }\n    verifySettings() {\n        if (isDevMode()) {\n            if (this.isSelectionSingle() && this.buttons.filter(button => button.selected).length > 1) {\n                throw new Error('Having multiple selected buttons with single selection mode is not supported');\n            }\n        }\n    }\n    isSelectionSingle() {\n        return this.selection === 'single';\n    }\n}\nButtonGroupComponent.decorators = [\n    { type: Component, args: [{\n                exportAs: 'kendoButtonGroup',\n                providers: [\n                    KendoButtonService,\n                    LocalizationService,\n                    {\n                        provide: L10N_PREFIX,\n                        useValue: 'kendo.buttongroup'\n                    }\n                ],\n                selector: 'kendo-buttongroup',\n                template: `\n        <ng-content select=\"[kendoButton]\"></ng-content>\n    `\n            },] },\n];\n/** @nocollapse */\nButtonGroupComponent.ctorParameters = () => [\n    { type: KendoButtonService },\n    { type: LocalizationService },\n    { type: ElementRef }\n];\nButtonGroupComponent.propDecorators = {\n    disabled: [{ type: Input, args: ['disabled',] }],\n    selection: [{ type: Input, args: ['selection',] }],\n    width: [{ type: Input, args: ['width',] }],\n    look: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    navigate: [{ type: Output }],\n    buttons: [{ type: ContentChildren, args: [ButtonDirective,] }],\n    wrapperClass: [{ type: HostBinding, args: ['class.k-button-group',] }],\n    disabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }],\n    stretchedClass: [{ type: HostBinding, args: ['class.k-button-group-stretched',] }],\n    isFlat: [{ type: HostBinding, args: ['class.k-button-group-flat',] }],\n    isBare: [{ type: HostBinding, args: ['class.k-button-group-bare',] }],\n    isOutline: [{ type: HostBinding, args: ['class.k-button-group-outline',] }],\n    getRole: [{ type: HostBinding, args: ['attr.role',] }],\n    dir: [{ type: HostBinding, args: ['attr.dir',] }],\n    ariaDisabled: [{ type: HostBinding, args: ['attr.aria-disalbed',] }],\n    wrapperWidth: [{ type: HostBinding, args: ['style.width',] }],\n    wrapperTabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],\n    keydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],\n    onFocus: [{ type: HostListener, args: ['focus',] }],\n    focusout: [{ type: HostListener, args: ['focusout', ['$event'],] }]\n};\n\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmodules'] }})\n * definition for the Button directive.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Buttons module\n * import { ButtonModule } from '@progress/kendo-angular-buttons';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, ButtonModule], // import Button module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nclass ButtonModule {\n}\nButtonModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [ButtonDirective],\n                exports: [ButtonDirective]\n            },] },\n];\n\n/**\n * @hidden\n *\n * The exported package module.\n *\n * The package exports:\n * - `ButtonGroupComponent`&mdash;The ButtonGroupComponent component class.\n */\nclass ButtonGroupModule {\n}\nButtonGroupModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [ButtonGroupComponent],\n                exports: [ButtonGroupComponent],\n                imports: [CommonModule, ButtonModule]\n            },] },\n];\n\n/* tslint:disable:directive-selector-name */\n/**\n * Used for rendering the list item content.\n *\n * To define the item template, nest a `<ng-template>` tag with the `kendo<ComponentName>ItemTemplate` directive inside the component tag.\n *\n * For the DropDownButton, use the `kendoDropDownButtonItemTemplate` directive.\n * For the SplitButton, use the `kendoSplitButtonItemTemplate` directive.\n *\n * The template context is set to the current component. To get a reference to the current data item, use the `let-dataItem` directive.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-splitbutton [data]=\"listItems\">\n *    <ng-template kendoSplitButtonItemTemplate let-dataItem>\n *      <span>{{dataItem}} option</span>\n *    </ng-template>\n *  </kendo-splitbutton>\n *  <kendo-dropdownbutton [data]=\"listItems\">\n *    <ng-template kendoDropDownButtonItemTemplate let-dataItem>\n *      <span>{{dataItem}} option</span>\n *    </ng-template>\n *  </kendo-dropdownbutton>\n * `\n * })\n * class AppComponent {\n *   public listItems: Array<any> = [{\n *      text: 'item1',\n *      icon: 'refresh',\n *      disabled: false,\n *      click: (dataItem: any) => {\n *          //action\n *      }\n *  }, {\n *      text: 'item2',\n *      icon: 'refresh',\n *      disabled: false,\n *      click: (dataItem: any) => {\n *          //action\n *      }\n *  }]\n * }\n * ```\n *\n * For more examples, refer to the article on the [DropDownList templates]({% slug overview_ddl %}#templates).\n */\nclass ButtonItemTemplateDirective {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nButtonItemTemplateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[kendoDropDownButtonItemTemplate],[kendoSplitButtonItemTemplate]'\n            },] },\n];\n/** @nocollapse */\nButtonItemTemplateDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\n\n/**\n * @hidden\n */\nclass ListComponent {\n    constructor() {\n        this.onItemClick = new EventEmitter();\n        this.onItemBlur = new EventEmitter();\n    }\n    getText(dataItem) {\n        if (dataItem) {\n            return this.textField ? dataItem[this.textField] : dataItem.text || dataItem;\n        }\n        return undefined;\n    }\n    getIconClasses(dataItem) {\n        const icon = dataItem.icon ? 'k-icon k-i-' + dataItem.icon : undefined;\n        const classes = {};\n        classes[icon || dataItem.iconClass] = true;\n        return classes;\n    }\n    onClick(index) {\n        this.onItemClick.emit(index);\n    }\n    onBlur() {\n        this.onItemBlur.emit();\n    }\n}\nListComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'kendo-button-list',\n                template: `\n        <ul class=\"k-list k-reset\" unselectable=\"on\">\n            <li role=\"menuItem\" unselectable=\"on\" tabindex=\"-1\"\n                kendoButtonFocusable\n                *ngFor=\"let dataItem of data; let index = index;\"\n                [index]=\"index\"\n                [ngClass]=\"{'k-item': true, 'k-state-disabled': dataItem.disabled}\"\n                (click)=\"onClick(index)\"\n                (blur)=\"onBlur()\"\n                [attr.aria-disabled]=\"dataItem.disabled ? true : false\">\n                <ng-template *ngIf=\"itemTemplate?.templateRef\"\n                    [templateContext]=\"{\n                        templateRef: itemTemplate?.templateRef,\n                        $implicit: dataItem\n                    }\">\n                </ng-template>\n                <ng-template [ngIf]=\"!itemTemplate?.templateRef\">\n                    <span\n                        *ngIf=\"dataItem.icon || dataItem.iconClass\"\n                        [ngClass]=\"getIconClasses(dataItem)\"\n                    ></span>\n                    <img\n                        *ngIf=\"dataItem.imageUrl\"\n                        class=\"k-image\"\n                        [src]=\"dataItem.imageUrl\"\n                        alt=\"\"\n                    >\n                    {{ getText(dataItem) }}\n                </ng-template>\n            </li>\n        </ul>\n      `\n            },] },\n];\nListComponent.propDecorators = {\n    data: [{ type: Input }],\n    textField: [{ type: Input }],\n    itemTemplate: [{ type: Input }],\n    onItemClick: [{ type: Output }],\n    onItemBlur: [{ type: Output }]\n};\n\n/**\n * @hidden\n */\nclass FocusService {\n    constructor() {\n        this.onFocus = new EventEmitter();\n    }\n    isFocused(index) {\n        return index === this.focused;\n    }\n    focus(index) {\n        if (this.isFocused(index)) {\n            return;\n        }\n        this.focused = index;\n        this.onFocus.emit(index);\n    }\n    resetFocus() {\n        this.focused = -1;\n    }\n    get focused() {\n        return this.focusedIndex;\n    }\n    set focused(index) {\n        this.focusedIndex = index;\n        this.onFocus.emit(index);\n    }\n}\nFocusService.decorators = [\n    { type: Injectable },\n];\n\n/**\n * @hidden\n */\nclass FocusableDirective {\n    constructor(focusService, elementRef) {\n        this.focusService = focusService;\n        this.element = elementRef.nativeElement;\n        this.subscribeEvents();\n    }\n    get focusedClassName() {\n        return this.focusService.isFocused(this.index);\n    }\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this.unsubscribeEvents();\n    }\n    subscribeEvents() {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.focusSubscription = this.focusService.onFocus.subscribe((index) => {\n            if (this.index === index) {\n                this.element.focus();\n            }\n        });\n    }\n    unsubscribeEvents() {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        if (this.focusSubscription) {\n            this.focusSubscription.unsubscribe();\n        }\n    }\n}\nFocusableDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[kendoButtonFocusable]'\n            },] },\n];\n/** @nocollapse */\nFocusableDirective.ctorParameters = () => [\n    { type: FocusService },\n    { type: ElementRef }\n];\nFocusableDirective.propDecorators = {\n    index: [{ type: Input }],\n    focusedClassName: [{ type: HostBinding, args: ['class.k-state-focused',] }]\n};\n\n/**\n * @hidden\n */\nclass TemplateContextDirective {\n    constructor(viewContainerRef) {\n        this.viewContainerRef = viewContainerRef;\n    }\n    set templateContext(context) {\n        if (this.insertedViewRef) {\n            this.viewContainerRef.remove(this.viewContainerRef.indexOf(this.insertedViewRef));\n            this.insertedViewRef = undefined;\n        }\n        if (context.templateRef) {\n            this.insertedViewRef = this.viewContainerRef.createEmbeddedView(context.templateRef, context);\n        }\n    }\n}\nTemplateContextDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[templateContext]' // tslint:disable-line:directive-selector\n            },] },\n];\n/** @nocollapse */\nTemplateContextDirective.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\nTemplateContextDirective.propDecorators = {\n    templateContext: [{ type: Input }]\n};\n\nconst EXPORTED_DIRECTIVES = [\n    ListComponent,\n    FocusableDirective,\n    ButtonItemTemplateDirective,\n    TemplateContextDirective\n];\n/**\n * @hidden\n */\nclass ListModule {\n}\nListModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [EXPORTED_DIRECTIVES],\n                exports: [EXPORTED_DIRECTIVES],\n                imports: [CommonModule]\n            },] },\n];\n\n/**\n * @hidden\n */\nvar KeyEvents;\n(function (KeyEvents) {\n    KeyEvents[KeyEvents[\"keydown\"] = 0] = \"keydown\";\n    KeyEvents[KeyEvents[\"keypress\"] = 1] = \"keypress\";\n    KeyEvents[KeyEvents[\"keyup\"] = 2] = \"keyup\";\n})(KeyEvents || (KeyEvents = {}));\n\n/**\n * @hidden\n */\nvar NavigationAction;\n(function (NavigationAction) {\n    NavigationAction[NavigationAction[\"Undefined\"] = 0] = \"Undefined\";\n    NavigationAction[NavigationAction[\"Open\"] = 1] = \"Open\";\n    NavigationAction[NavigationAction[\"Close\"] = 2] = \"Close\";\n    NavigationAction[NavigationAction[\"Enter\"] = 3] = \"Enter\";\n    NavigationAction[NavigationAction[\"EnterPress\"] = 4] = \"EnterPress\";\n    NavigationAction[NavigationAction[\"EnterUp\"] = 5] = \"EnterUp\";\n    NavigationAction[NavigationAction[\"Tab\"] = 6] = \"Tab\";\n    NavigationAction[NavigationAction[\"Esc\"] = 7] = \"Esc\";\n    NavigationAction[NavigationAction[\"Navigate\"] = 8] = \"Navigate\";\n})(NavigationAction || (NavigationAction = {}));\n\n/**\n * @hidden\n */\nclass ListButton {\n    constructor(focusService, navigationService, wrapperRef, _zone, localization) {\n        this.focusService = focusService;\n        this.navigationService = navigationService;\n        this.wrapperRef = wrapperRef;\n        this._zone = _zone;\n        this._open = false;\n        this._disabled = false;\n        this._active = false;\n        this._popupSettings = { animate: true, popupClass: '' };\n        this.listId = guid();\n        this._isFocused = false;\n        this.wrapperBlurred = new EventEmitter();\n        this.focusService = focusService;\n        this.navigationService = navigationService;\n        this.wrapper = wrapperRef.nativeElement;\n        this.localizationChangeSubscription = localization.changes.subscribe(({ rtl }) => this.direction = rtl ? 'rtl' : 'ltr');\n        this.subscribeEvents();\n    }\n    get popupClasses() {\n        var popupClasses = [\n            'k-list-container',\n            'k-reset',\n            'k-group'\n        ];\n        if (this._popupSettings.popupClass) {\n            popupClasses.push(this._popupSettings.popupClass);\n        }\n        return popupClasses.join(' ');\n    }\n    get openState() {\n        return this._open;\n    }\n    set openState(open) {\n        this._open = open;\n    }\n    /**\n     * @hidden\n     */\n    togglePopupVisibility() {\n        if (this._disabled) {\n            return;\n        }\n        this.openState = !this.openState;\n        if (!this.openState) {\n            this.focusService.focus(-1);\n        }\n    }\n    /**\n     * @hidden\n     */\n    onItemClick(index) {\n        this.emitItemClickHandler(index);\n        setTimeout(() => { this.focusWrapper(); }, 1);\n    }\n    ngOnDestroy() {\n        this.openState = false;\n        this.unsubscribeEvents();\n        clearTimeout(this.focusFirstTimeout);\n        clearTimeout(this.blurTimeout);\n        if (this.localizationChangeSubscription) {\n            this.localizationChangeSubscription.unsubscribe();\n        }\n    }\n    subscribeEvents() {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.subscribeListItemFocusEvent();\n        this.subscribeComponentBlurredEvent();\n        this.subscribeNavigationEvents();\n    }\n    subscribeListItemFocusEvent() {\n        this.focusSubscription = this.focusService.onFocus.subscribe(() => {\n            this._isFocused = true;\n        });\n    }\n    subscribeComponentBlurredEvent() {\n        this._zone.runOutsideAngular(() => {\n            this.documentClick = fromEvent(document, 'click').pipe(filter((event) => {\n                return !this.wrapperContains(event.target);\n            }));\n            this.tabSubscription = this.navigationService.tab.pipe(filter(() => this._isFocused)).subscribe(this.handleTab.bind(this));\n            this.componentBlurredSubscription = merge(this.documentClick, this.wrapperBlurred).pipe(filter(() => this._isFocused)).subscribe(() => this._zone.run(() => this.blurWrapper()));\n        });\n    }\n    subscribeNavigationEvents() {\n        this.navigationSubscription = this.navigationService.navigate\n            .subscribe(this.focusService.focus.bind(this.focusService));\n        this.enterPressSubscription = this.navigationService.enterpress.subscribe(() => {\n            if (!this._disabled && !this._open) {\n                this._active = true;\n            }\n        });\n        this.enterUpSubscription = this.navigationService.enterup.subscribe(() => {\n            if (!this._open) {\n                this._active = false;\n            }\n            this.enterHandler();\n            this.focusWrapper();\n        });\n        this.openSubscription = this.navigationService.open.subscribe(() => {\n            if (!this._open) {\n                this.togglePopupVisibility();\n                this.focusFirstItem();\n            }\n            else {\n                this.focusWrapper();\n            }\n        });\n        this.closeSubscription = merge(this.navigationService.close, this.navigationService.esc).subscribe(() => this.focusWrapper());\n    }\n    enterHandler() { } // tslint:disable-line\n    unsubscribeEvents() {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.unsubscribe(this.componentBlurredSubscription);\n        this.unsubscribe(this.focusSubscription);\n        this.unsubscribe(this.navigationSubscription);\n        this.unsubscribe(this.enterPressSubscription);\n        this.unsubscribe(this.enterUpSubscription);\n        this.unsubscribe(this.openSubscription);\n        this.unsubscribe(this.closeSubscription);\n        this.unsubscribe(this.tabSubscription);\n    }\n    unsubscribe(subscription) {\n        if (subscription) {\n            subscription.unsubscribe();\n        }\n    }\n    /**\n     * @hidden\n     */\n    keyDownHandler(event) {\n        this.keyHandler(event);\n    }\n    /**\n     * @hidden\n     */\n    keyPressHandler(event) {\n        this.keyHandler(event, KeyEvents.keypress);\n    }\n    /**\n     * @hidden\n     */\n    keyUpHandler(event) {\n        this.keyHandler(event, KeyEvents.keyup);\n    }\n    /**\n     * @hidden\n     */\n    keyHandler(event, keyEvent) {\n        if (this._disabled) {\n            return;\n        }\n        let focused = this.focusService.focused || 0;\n        const eventData = event;\n        const action = this.navigationService.process({\n            altKey: eventData.altKey,\n            current: focused,\n            keyCode: eventData.keyCode,\n            keyEvent: keyEvent,\n            max: this._data ? this._data.length - 1 : 0,\n            min: 0\n        });\n        if (action !== NavigationAction.Undefined &&\n            action !== NavigationAction.Tab &&\n            (action !== NavigationAction.Enter || (action === NavigationAction.Enter && this._open))) {\n            eventData.preventDefault();\n        }\n    }\n    emitItemClickHandler(index) {\n        const dataItem = this._data[index];\n        if (this._itemClick) {\n            this._itemClick.emit(dataItem);\n        }\n        if (dataItem && dataItem.click && !dataItem.disabled) {\n            dataItem.click(dataItem);\n        }\n    }\n    focusFirstItem() {\n        if (this._data && isPresent(this._data[0])) {\n            this.focusFirstTimeout = setTimeout(() => { this.focusService.focus(0); }, 1);\n        }\n    }\n    focusWrapper() {\n        if (this._open) {\n            this.togglePopupVisibility();\n            this.focusButton();\n        }\n    }\n    /**\n     * @hidden\n     */\n    blurHandler() {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.blurTimeout = setTimeout(() => {\n            if (!this.wrapperContains(document.activeElement)) {\n                this.blurWrapper();\n            }\n        });\n    }\n    wrapperContains(element) {\n        return this.wrapper === element || this.wrapper.contains(element);\n    }\n    blurWrapper() {\n        if (this._open) {\n            this.togglePopupVisibility();\n        }\n        this._isFocused = false;\n        this._blur.emit();\n    }\n    focusButton() {\n        if (this.button) {\n            this.button.nativeElement.focus();\n        }\n    }\n    handleTab() {\n        this.focusButton();\n        this.blurWrapper();\n    }\n}\n\n/**\n * @hidden\n */\nconst NAVIGATION_CONFIG = new InjectionToken('navigation.config');\n\n/**\n * @hidden\n */\nclass NavigationService {\n    constructor(config) {\n        this.navigate = new EventEmitter();\n        this.open = new EventEmitter();\n        this.close = new EventEmitter();\n        this.enter = new EventEmitter();\n        this.enterpress = new EventEmitter();\n        this.enterup = new EventEmitter();\n        this.tab = new EventEmitter();\n        this.esc = new EventEmitter();\n        this.useLeftRightArrows = config.useLeftRightArrows;\n    }\n    process(args) {\n        const keyCode = args.keyCode;\n        const keyEvent = args.keyEvent;\n        let index;\n        let action = NavigationAction.Undefined;\n        if (keyEvent === KeyEvents.keypress) {\n            if (this.isEnter(keyCode)) {\n                action = NavigationAction.EnterPress;\n            }\n        }\n        else if (keyEvent === KeyEvents.keyup) {\n            if (this.isEnter(keyCode)) {\n                action = NavigationAction.EnterUp;\n            }\n        }\n        else {\n            if (args.altKey && keyCode === Keys.ArrowDown) {\n                action = NavigationAction.Open;\n            }\n            else if (args.altKey && keyCode === Keys.ArrowUp) {\n                action = NavigationAction.Close;\n            }\n            else if (this.isEnter(keyCode)) {\n                action = NavigationAction.Enter;\n            }\n            else if (keyCode === Keys.Escape) {\n                action = NavigationAction.Esc;\n            }\n            else if (keyCode === Keys.Tab) {\n                action = NavigationAction.Tab;\n            }\n            else if (keyCode === Keys.ArrowUp || (this.useLeftRightArrows && keyCode === Keys.ArrowLeft)) {\n                index = this.next({\n                    current: args.current,\n                    start: args.max,\n                    end: args.min,\n                    step: -1\n                });\n                action = NavigationAction.Navigate;\n            }\n            else if (keyCode === Keys.ArrowDown || (this.useLeftRightArrows && keyCode === Keys.ArrowRight)) {\n                index = this.next({\n                    current: args.current,\n                    start: args.min,\n                    end: args.max,\n                    step: 1\n                });\n                action = NavigationAction.Navigate;\n            }\n        }\n        if (action !== NavigationAction.Undefined) {\n            this[NavigationAction[action].toLowerCase()].emit(index);\n        }\n        return action;\n    }\n    isEnter(keyCode) {\n        return keyCode === Keys.Enter || keyCode === Keys.Space;\n    }\n    next(args) {\n        if (!isPresent(args.current)) {\n            return args.start;\n        }\n        else {\n            return args.current !== args.end ? args.current + args.step : args.end;\n        }\n    }\n}\nNavigationService.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nNavigationService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [NAVIGATION_CONFIG,] }] }\n];\n\n/* tslint:disable:no-access-missing-member */\nconst NAVIGATION_SETTINGS = {\n    useLeftRightArrows: true\n};\nconst Éµ0 = NAVIGATION_SETTINGS;\nconst NAVIGATION_SETTINGS_PROVIDER = {\n    provide: NAVIGATION_CONFIG,\n    useValue: Éµ0\n};\n/**\n * Represents the Kendo UI SplitButton component for Angular.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-splitbutton [data]=\"data\" [icon]=\"'paste'\"\n *      (itemClick)=\"onSplitButtonItemClick($event)\"\n *      (buttonClick)=\"onSplitButtonClick()\">Paste</kendo-splitbutton>\n * `\n * })\n *\n * class AppComponent {\n *   public data: Array<any> = [{\n *       text: 'Keep Text Only',\n *       icon: 'paste-plain-text',\n *       click: () => { console.log('Keep Text Only click handler'); }\n *   }, {\n *       text: 'Paste as HTML',\n *       icon: 'paste-as-html'\n *   }, {\n *       text: 'Paste Markdown',\n *       icon: 'paste-markdown'\n *   }, {\n *       text: 'Set Default Paste'\n *   }];\n *\n *   public onSplitButtonClick(dataItem: any): void {\n *       console.log('Paste');\n *   }\n *\n *   public onSplitButtonItemClick(dataItem: any): void {\n *       if (dataItem) {\n *           console.log(dataItem.text);\n *       }\n *   }\n * }\n * ```\n */\nclass SplitButtonComponent extends ListButton {\n    constructor(focusService, navigationService, wrapperRef, zone, popupService, elRef, localization) {\n        super(focusService, navigationService, wrapperRef, zone, localization);\n        this.popupService = popupService;\n        this.elRef = elRef;\n        /**\n         * Sets the text of the SplitButton.\n         */\n        this.text = '';\n        /**\n         * Defines an icon to be rendered next to the button text\n         * ([see example]({% slug databinding_splitbutton %}#toc-arrays-of-complex-data)).\n         */\n        this.icon = '';\n        /**\n         * Defines an icon with a custom CSS class to be rendered next to the button text\n         * ([see example]({% slug databinding_splitbutton %}#toc-arrays-of-complex-data)).\n         */\n        this.iconClass = '';\n        /**\n         * Defines the location of an image to be displayed next to the button text\n         * ([see example]({% slug databinding_splitbutton %}#toc-arrays-of-complex-data)).\n         */\n        this.imageUrl = '';\n        /**\n         * Changes the visual appearance by using alternative styling options.\n         *\n         * The available values are:\n         * * `flat`\n         * * `outline`\n         */\n        this.look = 'default';\n        /**\n         * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        this.tabIndex = 0;\n        /**\n         * Specifies the name of the [font icon]({% slug icons %}#toc-list-of-font-icons) that will\n         * be rendered for the button which opens the popup.\n         */\n        this.arrowButtonIcon = 'arrow-s';\n        /**\n         * Fires each time the user clicks the main button.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         *    selector: 'my-app',\n         *    template: `\n         *        <kendo-splitbutton (buttonClick)=\"onSplitButtonClick()\" [data]=\"data\">\n         *            Reply\n         *        </kendo-splitbutton>\n         *    `\n         * })\n         * class AppComponent {\n         *    public data: Array<any> = ['Reply All', 'Forward', 'Reply & Delete'];\n         *\n         *    public onSplitButtonClick(): void {\n         *      console.log('SplitButton click');\n         *    }\n         * }\n         * ```\n         *\n         */\n        this.buttonClick = new EventEmitter();\n        /**\n         * Fires each time the user clicks on the drop-down list. The event data contains the data item bound to the clicked list item.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         *     selector: 'my-app',\n         *    template: `\n         *        <kendo-splitbutton (itemClick)=\"onSplitButtonItemClick($event)\" [data]=\"data\">\n         *          Reply\n         *      </kendo-splitbutton>\n         *    `\n         * })\n         * class AppComponent {\n         *    public data: Array<any> = ['Reply All', 'Forward', 'Reply & Delete'];\n         *\n         *   public onSplitButtonItemClick(dataItem?: string): void {\n         *        if (dataItem) {\n         *            console.log(dataItem);\n         *       }\n         *    }\n         * }\n         * ```\n         *\n         */\n        this.itemClick = new EventEmitter();\n        /**\n         * Fires each time the SplitButton gets focused.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the SplitButton gets blurred.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the popup is about to open.\n         * This event is preventable. If you cancel the event, the popup will remain closed.\n         */\n        this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close.\n         * This event is preventable. If you cancel the event, the popup will remain open.\n         */\n        this.close = new EventEmitter();\n        this.listId = guid();\n        this.buttonText = '';\n        this._itemClick = this.itemClick;\n        this._blur = this.onBlur;\n    }\n    /**\n     * When set to `true`, disables a SplitButton item\n     * ([see example]({% slug databinding_splitbutton %}#toc-arrays-of-complex-data)).\n     */\n    set disabled(value) {\n        this._disabled = value;\n    }\n    get disabled() {\n        return this._disabled;\n    }\n    /**\n     * Configures the popup of the SplitButton.\n     *\n     * The available options are:\n     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n     * - `appendTo: \"root\" | \"component\" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.\n     * - `align: \"left\" | \"center\" | \"right\"`&mdash;Specifies the alignment of the popup.\n     */\n    set popupSettings(settings) {\n        this._popupSettings = Object.assign({ animate: true, popupClass: '' }, settings);\n    }\n    get popupSettings() {\n        return this._popupSettings;\n    }\n    /**\n     * Sets the data of the SplitButton.\n     *\n     * > The data has to be provided in an array-like list.\n     */\n    set data(data) {\n        this._data = data || [];\n    }\n    get data() {\n        if (!this._data) {\n            this.data = [];\n        }\n        return this._data;\n    }\n    /**\n     * @hidden\n     */\n    set openState(open) {\n        if (this.disabled) {\n            return;\n        }\n        const eventArgs = new PreventableEvent();\n        if (open) {\n            this.open.emit(eventArgs);\n        }\n        else {\n            this.close.emit(eventArgs);\n        }\n        if (eventArgs.isDefaultPrevented()) {\n            return;\n        }\n        this._toggle(open);\n    }\n    /**\n     * @hidden\n     */\n    get openState() {\n        return this._open;\n    }\n    /**\n     * @hidden\n     */\n    get active() {\n        return this._active;\n    }\n    /**\n     * @hidden\n     */\n    get componentTabIndex() {\n        return this.disabled ? (-1) : this.tabIndex;\n    }\n    set isFocused(value) {\n        this._isFocused = value;\n    }\n    get isFocused() {\n        return this._isFocused && !this._disabled;\n    }\n    get widgetClasses() {\n        return true;\n    }\n    get dir() {\n        return this.direction;\n    }\n    /**\n     * @hidden\n     */\n    get ariaLabel() {\n        return `${this.buttonText} splitbutton`;\n    }\n    /**\n     * @hidden\n     */\n    onButtonFocus() {\n        if (!this.isFocused) {\n            this._isFocused = true;\n            this.onFocus.emit();\n        }\n    }\n    /**\n     * @hidden\n     */\n    onButtonClick() {\n        this.buttonClick.emit();\n    }\n    /**\n     * @hidden\n     */\n    keydown(event) {\n        this.keyDownHandler(event);\n    }\n    /**\n     * @hidden\n     */\n    keypress(event) {\n        this.keyPressHandler(event);\n    }\n    /**\n     * @hidden\n     */\n    keyup(event) {\n        this.keyUpHandler(event);\n    }\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.updateButtonText();\n    }\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes) {\n        if (changes.hasOwnProperty('text')) {\n            this.updateButtonText();\n        }\n    }\n    /**\n     * @hidden\n     */\n    togglePopupVisibility() {\n        super.togglePopupVisibility();\n        if (isDocumentAvailable()) {\n            this.button.nativeElement.focus();\n        }\n    }\n    /**\n     * @hidden\n     */\n    wrapperContains(element) {\n        return this.wrapper === element\n            || this.wrapper.contains(element)\n            || (this.popupRef && this.popupRef.popupElement.contains(element));\n    }\n    /**\n     * @hidden\n     */\n    get anchorAlign() {\n        let align = { horizontal: this.popupSettings.align || 'left', vertical: 'bottom' };\n        if (this.direction === 'rtl' && !isPresent(this.popupSettings.align)) {\n            align.horizontal = 'right';\n        }\n        return align;\n    }\n    /**\n     * @hidden\n     */\n    get popupAlign() {\n        let align = { horizontal: this.popupSettings.align || 'left', vertical: 'top' };\n        if (this.direction === 'rtl' && !isPresent(this.popupSettings.align)) {\n            align.horizontal = 'right';\n        }\n        return align;\n    }\n    /**\n     * Focuses the SplitButton component.\n     */\n    focus() {\n        if (isDocumentAvailable()) {\n            this.button.nativeElement.focus();\n        }\n    }\n    /**\n     * Blurs the SplitButton component.\n     */\n    blur() {\n        if (isDocumentAvailable()) {\n            this.button.nativeElement.blur();\n            this.blurWrapper();\n        }\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this.destroyPopup();\n    }\n    /**\n     * Toggles the visibility of the popup.\n     * If the `toggle` method is used to open or close the popup, the `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    toggle(open) {\n        if (this.disabled) {\n            return;\n        }\n        tick(() => (this._toggle((open === undefined) ? !this._open : open)));\n    }\n    /**\n     * Returns the current open state of the popup.\n     */\n    get isOpen() {\n        return this.openState;\n    }\n    enterHandler() {\n        if (this.disabled) {\n            return;\n        }\n        if (this.openState) {\n            let focused = this.focusService.focused;\n            if (isPresent(focused) && focused !== -1) {\n                this.emitItemClickHandler(focused);\n            }\n        }\n        else {\n            this.buttonClick.emit();\n        }\n    }\n    updateButtonText() {\n        if (isDocumentAvailable()) {\n            let innerText = this.wrapper.innerText.split('\\n').join('').trim();\n            //setTimout is needed because of `Expression has changed after it was checked.` error;\n            setTimeout(() => { this.buttonText = innerText; }, 0);\n        }\n    }\n    get appendTo() {\n        const { appendTo } = this.popupSettings;\n        if (!appendTo || appendTo === 'root') {\n            return undefined;\n        }\n        return appendTo === 'component' ? this.containerRef : appendTo;\n    }\n    _toggle(open) {\n        this._open = open;\n        this.destroyPopup();\n        if (this._open) {\n            this.createPopup();\n        }\n    }\n    createPopup() {\n        this.popupRef = this.popupService.open({\n            anchor: this.elRef,\n            anchorAlign: this.anchorAlign,\n            animate: this.popupSettings.animate,\n            appendTo: this.appendTo,\n            content: this.popupTemplate,\n            popupAlign: this.popupAlign,\n            popupClass: this.popupClasses\n        });\n        this.popupRef.popupAnchorViewportLeave.subscribe(() => this.openState = false);\n        this.popupRef.popupOpen.subscribe(this.focusFirstItem.bind(this));\n    }\n    destroyPopup() {\n        if (this.popupRef) {\n            this.popupRef.close();\n            this.popupRef = null;\n        }\n    }\n}\nSplitButtonComponent.decorators = [\n    { type: Component, args: [{\n                exportAs: 'kendoSplitButton',\n                providers: [\n                    FocusService,\n                    NavigationService,\n                    NAVIGATION_SETTINGS_PROVIDER,\n                    LocalizationService,\n                    {\n                        provide: L10N_PREFIX,\n                        useValue: 'kendo.splitbutton'\n                    }\n                ],\n                selector: 'kendo-splitbutton',\n                template: `\n        <button kendoButton\n            #button\n            role=\"listbox\"\n            type=\"button\"\n            [look]=\"look\"\n            [tabindex]=\"componentTabIndex\"\n            [disabled]=\"disabled\"\n            [icon]=\"icon\"\n            [class.k-state-active]=\"active\"\n            [iconClass]=\"iconClass\"\n            [imageUrl]=\"imageUrl\"\n            [ngClass]=\"buttonClass\"\n            (focus)=\"onButtonFocus()\"\n            (click)=\"onButtonClick()\"\n            [attr.aria-disabled]=\"disabled\"\n            [attr.aria-expanded]=\"openState\"\n            [attr.aria-haspopup]=\"true\"\n            [attr.aria-owns]=\"listId\"\n            [attr.aria-label]=\"ariaLabel\"\n            >\n            {{text}}<ng-content></ng-content>\n        </button>\n        <button kendoButton\n            type=\"button\"\n            [disabled]=\"disabled\"\n            [icon]=\"arrowButtonIcon\"\n            [look]=\"look\"\n            [tabindex]=\"-1\"\n            [ngClass]=\"arrowButtonClass\"\n            (click)=\"togglePopupVisibility()\">\n        </button>\n        <ng-template #popupTemplate>\n            <kendo-button-list\n                [id]=\"listId\"\n                [data]=\"data\"\n                [textField]=\"textField\"\n                [itemTemplate]=\"itemTemplate\"\n                (onItemBlur)=\"blurHandler()\"\n                (onItemClick)=\"onItemClick($event)\"\n                (keydown)=\"keyDownHandler($event)\"\n                (keypress)=\"keyPressHandler($event)\"\n                (keyup)=\"keyUpHandler($event)\"\n            >\n            </kendo-button-list>\n        </ng-template>\n        <ng-container #container></ng-container>\n    `\n            },] },\n];\n/** @nocollapse */\nSplitButtonComponent.ctorParameters = () => [\n    { type: FocusService },\n    { type: NavigationService },\n    { type: ElementRef },\n    { type: NgZone },\n    { type: PopupService },\n    { type: ElementRef },\n    { type: LocalizationService }\n];\nSplitButtonComponent.propDecorators = {\n    text: [{ type: Input }],\n    icon: [{ type: Input }],\n    iconClass: [{ type: Input }],\n    imageUrl: [{ type: Input }],\n    look: [{ type: Input }],\n    disabled: [{ type: Input }],\n    popupSettings: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    textField: [{ type: Input }],\n    data: [{ type: Input }],\n    buttonClass: [{ type: Input }],\n    arrowButtonClass: [{ type: Input }],\n    arrowButtonIcon: [{ type: Input }],\n    buttonClick: [{ type: Output }],\n    itemClick: [{ type: Output }],\n    onFocus: [{ type: Output, args: ['focus',] }],\n    onBlur: [{ type: Output, args: ['blur',] }],\n    open: [{ type: Output }],\n    close: [{ type: Output }],\n    itemTemplate: [{ type: ContentChild, args: [ButtonItemTemplateDirective,] }],\n    button: [{ type: ViewChild, args: ['button',] }],\n    popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],\n    containerRef: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],\n    isFocused: [{ type: HostBinding, args: ['class.k-state-focused',] }],\n    widgetClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-split-button',] }, { type: HostBinding, args: ['class.k-button-group',] }],\n    dir: [{ type: HostBinding, args: ['attr.dir',] }],\n    keydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],\n    keypress: [{ type: HostListener, args: ['keypress', ['$event'],] }],\n    keyup: [{ type: HostListener, args: ['keyup', ['$event'],] }]\n};\n\n/**\n * @hidden\n *\n * The exported package module.\n *\n * The package exports:\n * - `SplitButtonComponent`&mdash;The SplitButtonComponent component class.\n */\nclass SplitButtonModule {\n}\nSplitButtonModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [SplitButtonComponent],\n                exports: [SplitButtonComponent, ListModule],\n                imports: [CommonModule, PopupModule, ButtonModule, ListModule]\n            },] },\n];\n\n/* tslint:disable:no-access-missing-member */\nconst NAVIGATION_SETTINGS$1 = {\n    useLeftRightArrows: true\n};\nconst Éµ0$1 = NAVIGATION_SETTINGS$1;\nconst NAVIGATION_SETTINGS_PROVIDER$1 = {\n    provide: NAVIGATION_CONFIG,\n    useValue: Éµ0$1\n};\n/**\n * Represents the Kendo UI DropDownButton component for Angular.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-dropdownbutton [data]=\"data\">\n *    User Settings\n *  </kendo-dropdownbutton>\n * `\n * })\n * class AppComponent {\n *   public data: Array<any> = [{\n *       text: 'My Profile'\n *   }, {\n *       text: 'Friend Requests'\n *   }, {\n *       text: 'Account Settings'\n *   }, {\n *       text: 'Support'\n *   }, {\n *       text: 'Log Out'\n *   }];\n * }\n * ```\n */\nclass DropDownButtonComponent extends ListButton {\n    constructor(focusService, navigationService, wrapperRef, zone, popupService, elRef, localization) {\n        super(focusService, navigationService, wrapperRef, zone, localization);\n        this.popupService = popupService;\n        this.elRef = elRef;\n        /**\n         * Defines the name of an existing icon in a Kendo UI theme.\n         */\n        this.icon = '';\n        /**\n         * Defines the list of CSS classes which are used for styling the Button with custom icons.\n         */\n        this.iconClass = '';\n        /**\n         * Defines a URL for styling the button with a custom image.\n         */\n        this.imageUrl = '';\n        /**\n         * Adds visual weight to the default button and makes it primary.\n         */\n        this.primary = false;\n        /**\n         * Changes the visual appearance by using alternative styling options.\n         *\n         * The available values are:\n         * * `flat`\n         * * `outline`\n         */\n        this.look = 'default';\n        /**\n         * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        this.tabIndex = 0;\n        /**\n         * Fires each time the user clicks on a drop-down list item. The event data contains the data item bound to the clicked list item.\n         */\n        this.itemClick = new EventEmitter();\n        /**\n         * Fires each time the popup is about to open.\n         * This event is preventable. If you cancel the event, the popup will remain closed.\n         */\n        this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close.\n         * This event is preventable. If you cancel the event, the popup will remain open.\n         */\n        this.close = new EventEmitter();\n        /**\n         * Fires each time the DropDownButton gets focused.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the DropDownButton gets blurred.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        this.listId = guid();\n        this._itemClick = this.itemClick;\n        this._blur = this.onBlur;\n    }\n    /**\n     * Configures the popup of the DropDownButton.\n     *\n     * The available options are:\n     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n     * - `appendTo: \"root\" | \"component\" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.\n     * - `align: \"left\" | \"center\" | \"right\"`&mdash;Specifies the alignment of the popup.\n     */\n    set popupSettings(settings) {\n        this._popupSettings = Object.assign({ animate: true, popupClass: '' }, settings);\n    }\n    get popupSettings() {\n        return this._popupSettings;\n    }\n    /**\n     * Sets the disabled state of the DropDownButton.\n     */\n    set disabled(value) {\n        if (value && this.openState) {\n            this.openState = false;\n        }\n        this._disabled = value;\n    }\n    get disabled() {\n        return this._disabled;\n    }\n    /**\n     * Sets or gets the data of the DropDownButton.\n     *\n     * > The data has to be provided in an array-like list.\n     */\n    set data(data) {\n        this._data = data || [];\n    }\n    get data() {\n        return this._data;\n    }\n    /**\n     * @hidden\n     */\n    set openState(open) {\n        if (this.disabled) {\n            return;\n        }\n        const eventArgs = new PreventableEvent();\n        if (open) {\n            this.open.emit(eventArgs);\n        }\n        else {\n            this.close.emit(eventArgs);\n        }\n        if (eventArgs.isDefaultPrevented()) {\n            return;\n        }\n        this._toggle(open);\n    }\n    /**\n     * @hidden\n     */\n    get openState() {\n        return this._open;\n    }\n    /**\n     * @hidden\n     */\n    get componentTabIndex() {\n        return this.disabled ? (-1) : this.tabIndex;\n    }\n    get appendTo() {\n        const { appendTo } = this.popupSettings;\n        if (!appendTo || appendTo === 'root') {\n            return undefined;\n        }\n        return appendTo === 'component' ? this.container : appendTo;\n    }\n    get focused() {\n        return this._isFocused && !this._disabled;\n    }\n    get widgetClasses() {\n        return true;\n    }\n    get dir() {\n        return this.direction;\n    }\n    /**\n     * @hidden\n     */\n    get active() {\n        return this._active;\n    }\n    /**\n     * @hidden\n     */\n    keydown(event) {\n        this.keyDownHandler(event);\n    }\n    /**\n     * @hidden\n     */\n    keypress(event) {\n        this.keyPressHandler(event);\n    }\n    /**\n     * @hidden\n     */\n    keyup(event) {\n        this.keyUpHandler(event);\n    }\n    /**\n     * @hidden\n     */\n    mousedown(event) {\n        if (this._disabled) {\n            event.preventDefault();\n        }\n    }\n    /**\n     * @hidden\n     */\n    openPopup() {\n        this.togglePopupVisibility();\n    }\n    /**\n     * @hidden\n     */\n    get anchorAlign() {\n        let align = { horizontal: this.popupSettings.align || 'left', vertical: 'bottom' };\n        if (this.direction === 'rtl' && !isPresent(this.popupSettings.align)) {\n            align.horizontal = 'right';\n        }\n        return align;\n    }\n    /**\n     * @hidden\n     */\n    get popupAlign() {\n        let align = { horizontal: this.popupSettings.align || 'left', vertical: 'top' };\n        if (this.direction === 'rtl' && !isPresent(this.popupSettings.align)) {\n            align.horizontal = 'right';\n        }\n        return align;\n    }\n    /**\n     * Focuses the DropDownButton component.\n     */\n    focus() {\n        if (isDocumentAvailable()) {\n            this.button.nativeElement.focus();\n        }\n    }\n    /**\n     * Blurs the DropDownButton component.\n     */\n    blur() {\n        if (isDocumentAvailable()) {\n            this.button.nativeElement.blur();\n            this.blurWrapper();\n        }\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this.destroyPopup();\n    }\n    /**\n     * Toggles the visibility of the popup.\n     * If the `toggle` method is used to open or close the popup, the `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    toggle(open) {\n        if (this.disabled) {\n            return;\n        }\n        tick(() => (this._toggle((open === undefined) ? !this._open : open)));\n    }\n    /**\n     * Returns the current open state of the popup.\n     */\n    get isOpen() {\n        return this.openState;\n    }\n    /**\n     * @hidden\n     */\n    handleFocus() {\n        if (!this._disabled && !this._isFocused) {\n            this._isFocused = true;\n            this.onFocus.emit();\n        }\n    }\n    /**\n     * @hidden\n     */\n    wrapperContains(element) {\n        return this.wrapper === element\n            || this.wrapper.contains(element)\n            || (this.popupRef && this.popupRef.popupElement.contains(element));\n    }\n    subscribeNavigationEvents() {\n        this.navigationSubscription = this.navigationService.navigate\n            .subscribe(this.onArrowKeyNavigate.bind(this));\n        this.enterPressSubscription = this.navigationService.enterpress.subscribe(this.onNavigationEnterPress.bind(this));\n        this.enterUpSubscription = this.navigationService.enterup.subscribe(this.onNavigationEnterUp.bind(this));\n        this.openSubscription = this.navigationService.open.subscribe(this.onNavigationOpen.bind(this));\n        this.closeSubscription = merge(this.navigationService.close, this.navigationService.esc).subscribe(this.onNavigationClose.bind(this));\n    }\n    onNavigationEnterPress() {\n        if (!this._disabled && !this.openState) {\n            this._active = true;\n        }\n    }\n    onNavigationEnterUp() {\n        if (!this._disabled && !this.openState) {\n            this._active = false;\n        }\n        if (this.openState) {\n            let focused = this.focusService.focused;\n            if (isPresent(focused) && focused !== -1) {\n                this.emitItemClickHandler(focused);\n            }\n        }\n        this.togglePopupVisibility();\n        if (!this.openState && isDocumentAvailable()) {\n            this.button.nativeElement.focus();\n        }\n    }\n    onNavigationOpen() {\n        if (!this._disabled && !this.openState) {\n            this.togglePopupVisibility();\n        }\n    }\n    onNavigationClose() {\n        if (this.openState) {\n            this.togglePopupVisibility();\n            if (isDocumentAvailable()) {\n                this.button.nativeElement.focus();\n            }\n        }\n    }\n    onArrowKeyNavigate(index) {\n        this.focusService.focus(index);\n    }\n    _toggle(open) {\n        if (this._open === open) {\n            return;\n        }\n        this._open = open;\n        this.destroyPopup();\n        if (this._open) {\n            this.createPopup();\n        }\n    }\n    createPopup() {\n        this.popupRef = this.popupService.open({\n            anchor: this.elRef,\n            anchorAlign: this.anchorAlign,\n            animate: this.popupSettings.animate,\n            appendTo: this.appendTo,\n            content: this.popupTemplate,\n            popupAlign: this.popupAlign,\n            popupClass: this.popupClasses\n        });\n        this.popupRef.popupAnchorViewportLeave.subscribe(() => this.openState = false);\n        this.popupRef.popupOpen.subscribe(this.focusFirstItem.bind(this));\n    }\n    destroyPopup() {\n        if (this.popupRef) {\n            this.popupRef.close();\n            this.popupRef = null;\n        }\n    }\n}\nDropDownButtonComponent.decorators = [\n    { type: Component, args: [{\n                exportAs: 'kendoDropDownButton',\n                providers: [\n                    FocusService,\n                    NavigationService,\n                    NAVIGATION_SETTINGS_PROVIDER$1,\n                    LocalizationService,\n                    {\n                        provide: L10N_PREFIX,\n                        useValue: 'kendo.dropdownbutton'\n                    }\n                ],\n                selector: 'kendo-dropdownbutton',\n                template: `\n        <button kendoButton #button\n            role=\"menu\"\n            type=\"button\"\n            [tabindex]=\"componentTabIndex\"\n            [class.k-state-active]=\"active\"\n            [disabled]=\"disabled\"\n            [icon]=\"icon\"\n            [iconClass]=\"iconClass\"\n            [imageUrl]=\"imageUrl\"\n            [ngClass]=\"buttonClass\"\n            (click)=\"openPopup()\"\n            (focus)=\"handleFocus()\"\n            [attr.aria-disabled]=\"disabled\"\n            [attr.aria-expanded]=\"openState\"\n            [attr.aria-haspopup]=\"true\"\n            [attr.aria-owns]=\"listId\"\n            [look]=\"look\"\n            [primary]=\"primary\"\n            >\n            <ng-content></ng-content>\n        </button>\n        <ng-template #popupTemplate>\n            <kendo-button-list\n                #buttonList\n                [id]=\"listId\"\n                [data]=\"data\"\n                [textField]=\"textField\"\n                [itemTemplate]=\"itemTemplate\"\n                (onItemClick)=\"onItemClick($event)\"\n                (keydown)=\"keyDownHandler($event)\"\n                (keypress)=\"keyPressHandler($event)\"\n                (keyup)=\"keyUpHandler($event)\"\n            >\n            </kendo-button-list>\n        </ng-template>\n        <ng-container #container></ng-container>\n    `\n            },] },\n];\n/** @nocollapse */\nDropDownButtonComponent.ctorParameters = () => [\n    { type: FocusService },\n    { type: NavigationService },\n    { type: ElementRef },\n    { type: NgZone },\n    { type: PopupService },\n    { type: ElementRef },\n    { type: LocalizationService }\n];\nDropDownButtonComponent.propDecorators = {\n    icon: [{ type: Input }],\n    iconClass: [{ type: Input }],\n    imageUrl: [{ type: Input }],\n    popupSettings: [{ type: Input }],\n    textField: [{ type: Input }],\n    disabled: [{ type: Input }],\n    data: [{ type: Input }],\n    primary: [{ type: Input }],\n    look: [{ type: Input }],\n    buttonClass: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    itemClick: [{ type: Output }],\n    open: [{ type: Output }],\n    close: [{ type: Output }],\n    onFocus: [{ type: Output, args: ['focus',] }],\n    onBlur: [{ type: Output, args: ['blur',] }],\n    focused: [{ type: HostBinding, args: ['class.k-state-focused',] }],\n    widgetClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-dropdown-button',] }],\n    dir: [{ type: HostBinding, args: ['attr.dir',] }],\n    itemTemplate: [{ type: ContentChild, args: [ButtonItemTemplateDirective,] }],\n    button: [{ type: ViewChild, args: ['button',] }],\n    buttonList: [{ type: ViewChild, args: ['buttonList',] }],\n    popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],\n    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],\n    keydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],\n    keypress: [{ type: HostListener, args: ['keypress', ['$event'],] }],\n    keyup: [{ type: HostListener, args: ['keyup', ['$event'],] }],\n    mousedown: [{ type: HostListener, args: ['mousedown', ['$event'],] }]\n};\n\n/**\n * @hidden\n *\n * The exported package module.\n *\n * The package exports:\n * - `DropDownButtonComponent`&mdash;The DropDownButtonComponent component class.\n */\nclass DropDownButtonModule {\n}\nDropDownButtonModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [DropDownButtonComponent],\n                exports: [DropDownButtonComponent, ListModule],\n                imports: [CommonModule, PopupModule, ListModule, ButtonModule]\n            },] },\n];\n\n/**\n * Displays a Chip that represents an input, attribute or an action.\n */\nclass ChipComponent {\n    constructor(element, renderer, localizationService) {\n        this.element = element;\n        this.renderer = renderer;\n        this.localizationService = localizationService;\n        /**\n         * Changes the visual appearance by using alternative styling options.\n         *\n         * The available values are:\n         * * `filled`\n         * * `outlined`\n         */\n        this.look = 'filled';\n        /**\n         * Specifies the selected state of the Chip.\n         */\n        this.selected = false;\n        /**\n         * Specifies if the Chip will be removable or not.\n         * If the property is set to `true`, the Chip renders a remove icon.\n         */\n        this.removable = false;\n        /**\n         * Specifies the Chip type.\n         *\n         * The possible values are:\n         * - `none` (default)\n         * - `success`\n         * - `error`\n         * - `warning`\n         * - `info`\n         */\n        this.type = 'none';\n        /**\n         * If set to `true`, the Chip will be disabled.\n         */\n        this.disabled = false;\n        /**\n         * Fires each time the user clicks the remove icon of the Chip.\n         */\n        this.remove = new EventEmitter();\n        this.tabIndex = 0;\n        this.hostClass = true;\n        this.focused = false;\n        this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n    }\n    get outlineClass() {\n        return this.look === 'outlined';\n    }\n    get filledClass() {\n        return this.look === 'filled';\n    }\n    get hasIconClass() {\n        return this.icon || this.iconClass ? true : false;\n    }\n    get disabledClass() {\n        return this.disabled;\n    }\n    get selectedClass() {\n        return this.selected;\n    }\n    get focusedClass() {\n        return this.focused;\n    }\n    /**\n     * @hidden\n     */\n    onFocus() {\n        this.focused = true;\n    }\n    /**\n     * @hidden\n     */\n    onBlur() {\n        this.focused = false;\n    }\n    ngOnInit() {\n        this.dynamicRTLSubscription = this.localizationService.changes\n            .subscribe(({ rtl }) => this.direction = rtl ? 'rtl' : 'ltr');\n    }\n    ngOnDestroy() {\n        if (this.dynamicRTLSubscription) {\n            this.dynamicRTLSubscription.unsubscribe();\n        }\n    }\n    ngAfterViewInit() {\n        const chip = this.element.nativeElement;\n        const typeClass = this.typeClass();\n        if (this.type !== 'none') {\n            this.renderer.addClass(chip, typeClass);\n        }\n    }\n    /**\n     * @hidden\n     */\n    get iconClasses() {\n        if (this.icon) {\n            return `k-icon k-i-${this.icon}`;\n        }\n        if (this.iconClass) {\n            return `${this.iconClass}`;\n        }\n    }\n    /**\n     * @hidden\n     */\n    get selectedIconClasses() {\n        if (this.selectedIcon) {\n            return `${this.selectedIcon}`;\n        }\n        return `k-icon k-i-check`;\n    }\n    /**\n     * @hidden\n     */\n    get removeIconClasses() {\n        if (this.removeIcon) {\n            return `${this.removeIcon}`;\n        }\n        return `k-icon k-i-close-circle`;\n    }\n    /**\n     * @hidden\n     */\n    typeClass() {\n        return {\n            'none': '',\n            'success': 'k-chip-success',\n            'warning': 'k-chip-warning',\n            'error': 'k-chip-error',\n            'info': 'k-chip-info'\n        }[this.type];\n    }\n    /**\n     * Focuses the Chip component.\n     */\n    focus() {\n        if (isDocumentAvailable()) {\n            this.element.nativeElement.focus();\n            this.focused = true;\n        }\n    }\n    /**\n     * Blurs the Chip component.\n     */\n    blur() {\n        if (isDocumentAvailable()) {\n            this.element.nativeElement.blur();\n            this.focused = false;\n        }\n    }\n    /**\n     * @hidden\n     */\n    onRemoveClick() {\n        if (this.removable) {\n            this.remove.emit(this);\n        }\n    }\n}\nChipComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'kendo-chip',\n                template: `\n        <span class=\"k-selected-icon-wrapper\">\n            <span *ngIf=\"selected\"\n                class=\"k-selected-icon\"\n                [ngClass]=\"selectedIconClasses\"\n            >\n            </span>\n        </span>\n\n        <span *ngIf=\"icon || iconClass\"\n            class=\"k-chip-icon\"\n            [ngClass]=\"iconClasses\"\n        >\n        </span>\n\n        <span class=\"k-chip-content\">\n            <span class=\"k-chip-label\" *ngIf=\"label\">\n                {{ label }}\n            </span>\n            <ng-content *ngIf=\"!label\"></ng-content>\n        </span>\n\n        <span *ngIf=\"removable\"\n            class=\"k-remove-icon\"\n            (click)=\"onRemoveClick()\"\n        >\n            <span [ngClass]=\"removeIconClasses\"></span>\n        </span>\n    `,\n                providers: [\n                    LocalizationService,\n                    {\n                        provide: L10N_PREFIX,\n                        useValue: 'kendo.chip'\n                    }\n                ]\n            },] },\n];\n/** @nocollapse */\nChipComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: LocalizationService }\n];\nChipComponent.propDecorators = {\n    look: [{ type: Input }],\n    label: [{ type: Input }],\n    icon: [{ type: Input }],\n    iconClass: [{ type: Input }],\n    selected: [{ type: Input }],\n    selectedIcon: [{ type: Input }],\n    removable: [{ type: Input }],\n    removeIcon: [{ type: Input }],\n    type: [{ type: Input }],\n    disabled: [{ type: Input }],\n    remove: [{ type: Output }],\n    tabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],\n    hostClass: [{ type: HostBinding, args: ['class.k-chip',] }],\n    outlineClass: [{ type: HostBinding, args: ['class.k-chip-outline',] }],\n    filledClass: [{ type: HostBinding, args: ['class.k-chip-filled',] }],\n    hasIconClass: [{ type: HostBinding, args: ['class.k-chip-has-icon',] }],\n    disabledClass: [{ type: HostBinding, args: ['class.k-chip-disabled',] }],\n    selectedClass: [{ type: HostBinding, args: ['class.k-chip-selected',] }],\n    focusedClass: [{ type: HostBinding, args: ['class.k-chip-focused',] }],\n    direction: [{ type: HostBinding, args: ['attr.dir',] }],\n    onFocus: [{ type: HostListener, args: ['focus',] }],\n    onBlur: [{ type: HostListener, args: ['blur',] }]\n};\n\nclass ChipListComponent {\n    constructor(localizationService) {\n        this.localizationService = localizationService;\n        this.hostClass = true;\n        /**\n         * Sets the selection mode of the ChipList.\n         *\n         * The available values are:\n         * * `none` (default)\n         * * `single`\n         * * `multiple`\n         */\n        this.selection = 'none';\n        /**\n         * Fires each time when the ChipList selection is changed.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Fires each time the user clicks on the remove icon of the Chip.\n         */\n        this.remove = new EventEmitter();\n        this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n    }\n    get single() {\n        return this.selection === 'single';\n    }\n    get multiple() {\n        return this.selection === 'multiple';\n    }\n    /**\n     * @hidden\n     */\n    onClick(target) {\n        const isRemoveClicked = closest(target, '.k-remove-icon');\n        const clickedChip = closest(target, '.k-chip');\n        const chip = this.chips.find((chip) => clickedChip === chip.element.nativeElement);\n        if (isRemoveClicked && clickedChip) {\n            this.remove.emit(chip);\n            return;\n        }\n        if (this.selection !== 'none' && clickedChip && !isRemoveClicked) {\n            this.setSelection(chip);\n        }\n    }\n    ngOnInit() {\n        this.dynamicRTLSubscription = this.localizationService.changes\n            .subscribe(({ rtl }) => this.direction = rtl ? 'rtl' : 'ltr');\n    }\n    ngOnDestroy() {\n        if (this.dynamicRTLSubscription) {\n            this.dynamicRTLSubscription.unsubscribe();\n        }\n    }\n    selectedChips() {\n        return this.chips.reduce((acc, cur, idx) => { return cur.selected ? acc.concat(idx) : acc; }, []);\n    }\n    /**\n     * Updates the selection on click of a Chip. Emits events.\n     */\n    setSelection(chip) {\n        if (this.selection === 'single') {\n            this.clearSelection(chip);\n        }\n        chip.selected = !chip.selected;\n        this.selectedChange.emit(this.selectedChips());\n    }\n    clearSelection(chip) {\n        this.chips.forEach((c) => {\n            if (chip !== c) {\n                c.selected = false;\n            }\n        });\n    }\n}\nChipListComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'kendo-chip-list',\n                template: `\n        <ng-content></ng-content>\n    `,\n                providers: [\n                    LocalizationService,\n                    {\n                        provide: L10N_PREFIX,\n                        useValue: 'kendo.chip-list'\n                    }\n                ]\n            },] },\n];\n/** @nocollapse */\nChipListComponent.ctorParameters = () => [\n    { type: LocalizationService }\n];\nChipListComponent.propDecorators = {\n    hostClass: [{ type: HostBinding, args: ['class.k-chip-list',] }],\n    direction: [{ type: HostBinding, args: ['attr.dir',] }],\n    selection: [{ type: Input }],\n    selectedChange: [{ type: Output }],\n    remove: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [ChipComponent,] }],\n    single: [{ type: HostBinding, args: ['class.k-selection-single',] }],\n    multiple: [{ type: HostBinding, args: ['class.k-selection-multiple',] }],\n    onClick: [{ type: HostListener, args: ['click', ['$event.target'],] }]\n};\n\nconst exportedModules = [\n    ChipComponent,\n    ChipListComponent\n];\nconst declarations = [\n    ...exportedModules\n];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Chip component.\n */\nclass ChipModule {\n}\nChipModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [declarations],\n                exports: [exportedModules],\n                imports: [CommonModule]\n            },] },\n];\n\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmodules'] }})\n * definition for the Buttons components.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Buttons module\n * import { ButtonsModule } from '@progress/kendo-angular-buttons';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, ButtonsModule], // import Buttons module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nclass ButtonsModule {\n}\nButtonsModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [ButtonGroupModule, ButtonModule, SplitButtonModule, DropDownButtonModule, ChipModule]\n            },] },\n];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { KendoButtonService, FocusService, FocusableDirective, ButtonItemTemplateDirective, ListButton, ListComponent, ListModule, TemplateContextDirective, NAVIGATION_CONFIG, NavigationService, ButtonDirective, ButtonDirective as Button, ButtonGroupComponent, ButtonGroupComponent as ButtonGroup, ButtonGroupModule, ButtonModule, ButtonsModule, SplitButtonComponent, SplitButtonComponent as SplitButton, SplitButtonModule, DropDownButtonComponent, DropDownButtonComponent as DropDownButton, DropDownButtonModule, ChipComponent, ChipListComponent, ChipModule };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;CAYC;;;gDAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0XD,6CAaC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgSD,4BAiBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkCD;;;;;;;;0BAMC;;;;;;;;;;;;;CAWD;;;;;;;;;;0BAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuDD,sMAKC;;;;;;;;;;4EAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4BD,6JAqCC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6BD;;;gDAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsCD,sCAKC;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;;;;;;;;;;;;;CAkBD,sLAKC;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;CAYD;;;;;;;;;;;;;;;0BAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+PD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAwFA,kHAGC;;;;;;;;;;kCAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqbD,0FAgEC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAyCA;;;;;;;;;;;;;;CAWD;;;;;;;;;;;;0BAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkXD,0FAsDC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAwCA;;;;;;;;;;;;;;CAWD;;;;;;;;;;;;0BAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoKD,uEAyCC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA8BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2ED,4BAeC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAeA;;;;;;;;;;;;;;;;CAcD;;;;;;;;;;;0BAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkCD;;;;;;;;;;;0BAKC;;;;;;;"}