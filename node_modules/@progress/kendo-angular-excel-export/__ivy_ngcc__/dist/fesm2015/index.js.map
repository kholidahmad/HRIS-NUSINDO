{"version":3,"file":"index.js","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-excel-export/dist/fesm2015/index.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { Input, ContentChildren, QueryList, Component, NgZone, Directive, TemplateRef, Optional, forwardRef, SkipSelf, Host, ContentChild, NgModule } from '@angular/core';\nimport { saveAs } from '@progress/kendo-file-saver';\nimport { IntlService, ExcelExporter, Workbook } from '@progress/kendo-ooxml';\nexport * from '@progress/kendo-ooxml';\nimport { toString } from '@telerik/kendo-intl';\nimport { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\n\n/* tslint:disable align */\n/* tslint:disable:no-use-before-declare */\nconst compileTemplate = (templateRef, context, updateContext) => {\n    let embeddedView = templateRef.createEmbeddedView(context);\n    const result = (data) => {\n        updateContext(context, data);\n        embeddedView.detectChanges();\n        return embeddedView.rootNodes.reduce((content, rootNode) => {\n            return content + rootNode.textContent;\n        }, '').trim();\n    };\n    result.destroy = () => {\n        embeddedView.destroy();\n        embeddedView = null;\n    };\n    return result;\n};\nconst updateGroupHeaderContext = (context, data) => {\n    context.$implicit = context.group = data;\n    context.field = data.field;\n    context.value = data.value;\n    context.aggregates = data.aggregates;\n};\nconst updateGroupFooterContext = (context, data) => {\n    context.group = data.group;\n    context.$implicit = context.aggregates = data;\n};\nconst updateFooterContext = (context, data) => {\n    context.aggregates = data.aggregates;\n};\n/**\n * @hidden\n */\nconst toExporterColumns = (sourceColumns) => {\n    const exporterColumns = [];\n    let columnIndex = 0;\n    const addColumns = (columns, result, level) => {\n        columns.forEach((column) => {\n            if (column.level === level) {\n                const exporterColumn = new ExporterColumn(column, columnIndex);\n                result.push(exporterColumn);\n                if (column.children && column.children.some(c => c !== column)) {\n                    const children = exporterColumn.columns = [];\n                    addColumns(column.children, children, level + 1);\n                }\n                else {\n                    columnIndex++;\n                }\n            }\n        });\n    };\n    addColumns(sourceColumns, exporterColumns, 0);\n    return exporterColumns;\n};\n/**\n * @hidden\n */\nconst destroyColumns = (columns) => {\n    if (columns) {\n        columns.forEach(column => {\n            column.destroy();\n        });\n    }\n};\n/**\n * @hidden\n */\nclass ExporterColumn {\n    constructor(column, columnIndex) {\n        this.title = column.title;\n        this.field = column.field;\n        this.hidden = column.hidden;\n        this.locked = column.locked;\n        this.width = column.width;\n        this.headerCellOptions = column.headerCellOptions;\n        this.cellOptions = column.cellOptions;\n        this.groupHeaderCellOptions = column.groupHeaderCellOptions;\n        this.groupFooterCellOptions = column.groupFooterCellOptions;\n        this.footerCellOptions = column.footerCellOptions;\n        if (column.footerTemplate) {\n            this.footerTemplate = compileTemplate(column.footerTemplate.templateRef, {\n                $implicit: column,\n                column: column,\n                columnIndex: columnIndex\n            }, updateFooterContext);\n        }\n        if (column.groupFooterTemplate) {\n            this.groupFooterTemplate = compileTemplate(column.groupFooterTemplate.templateRef, {\n                column: column,\n                field: column.field\n            }, updateGroupFooterContext);\n        }\n        if (column.groupHeaderTemplate) {\n            this.groupHeaderTemplate = compileTemplate(column.groupHeaderTemplate.templateRef, {}, updateGroupHeaderContext);\n        }\n        if (column.groupHeaderColumnTemplate) {\n            this.groupHeaderColumnTemplate = compileTemplate(column.groupHeaderColumnTemplate.templateRef, {}, updateGroupHeaderContext);\n        }\n    }\n    destroy() {\n        if (this.footerTemplate) {\n            this.footerTemplate.destroy();\n        }\n        if (this.groupFooterTemplate) {\n            this.groupFooterTemplate.destroy();\n        }\n        if (this.groupHeaderTemplate) {\n            this.groupHeaderTemplate.destroy();\n        }\n        if (this.groupHeaderColumnTemplate) {\n            this.groupHeaderColumnTemplate.destroy();\n        }\n        destroyColumns(this.columns);\n    }\n}\n\nIntlService.register({ toString });\n/**\n *\n * @hidden\n */\nconst workbookOptions = (options) => {\n    const columns = toExporterColumns(options.columns);\n    const exporter = new ExcelExporter({\n        columns: columns,\n        data: options.data,\n        filterable: options.filterable,\n        groups: options.group,\n        paddingCellOptions: options.paddingCellOptions,\n        headerPaddingCellOptions: options.headerPaddingCellOptions,\n        collapsible: options.collapsible,\n        hierarchy: options.hierarchy,\n        aggregates: options.aggregates\n    });\n    const result = exporter.workbook();\n    result.creator = options.creator;\n    result.date = options.date;\n    result.rtl = options.rtl;\n    destroyColumns(columns);\n    return result;\n};\n/**\n * @hidden\n */\nconst toDataURL = (options) => {\n    const workbook = new Workbook(options);\n    return workbook.toDataURL();\n};\n/**\n * @hidden\n */\nconst isWorkbookOptions = (value) => {\n    return value && value.sheets;\n};\n\n/**\n * @hidden\n */\nclass ColumnBase {\n    constructor(parent) {\n        this.parent = parent;\n    }\n    /**\n     * @hidden\n     */\n    get level() {\n        return this.parent ? this.parent.level + 1 : 0;\n    }\n}\nColumnBase.propDecorators = {\n    title: [{ type: Input }],\n    width: [{ type: Input }],\n    locked: [{ type: Input }],\n    hidden: [{ type: Input }],\n    headerCellOptions: [{ type: Input }],\n    children: [{ type: ContentChildren, args: [ColumnBase,] }]\n};\n\n// tslint:disable:max-line-length\n/**\n * Represents the [Kendo UI Excel Export component for Angular]({% slug overview_excelexport %}).\n * Configures the settings for the Excel export of the Kendo UI Grid.\n */\nclass ExcelExportComponent {\n    constructor(localization, zone) {\n        this.localization = localization;\n        this.zone = zone;\n        /**\n         * Specifies the name of the file that is exported to Excel.\n         * @default \"Export.xlsx\"\n         */\n        this.fileName = 'Export.xlsx';\n        /**\n         * @hidden\n         */\n        this.columns = new QueryList();\n        this.saveFile = this.saveFile.bind(this);\n    }\n    /**\n     * Saves the data to Excel.\n     *\n     * @param exportData - An optional parameter. Can be the data that will be exported or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}).\n     */\n    save(exportData) {\n        this.toDataURL(exportData).then(this.saveFile);\n    }\n    /**\n     * Based on the specified columns and data, returns\n     * [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %})\n     * ([see example]({% slug customrowsandcells_excelexport %})).\n     *\n     * @param exportData - The optional data to be exported.\n     * @returns {WorkbookOptions} - The workbook options.\n     */\n    workbookOptions(exportData) {\n        const currentData = this.getExportData(exportData);\n        const options = workbookOptions({\n            columns: this.columns,\n            data: currentData.data,\n            group: currentData.group,\n            filterable: this.filterable,\n            creator: this.creator,\n            date: this.date,\n            rtl: this.localization.rtl,\n            paddingCellOptions: this.paddingCellOptions,\n            headerPaddingCellOptions: this.headerPaddingCellOptions,\n            collapsible: this.collapsible\n        });\n        return options;\n    }\n    /**\n     * Returns a promise which will be resolved with the file data URI\n     * ([see example]({% slug filesaving_excelexport %})).\n     *\n     * @param exportData - The optional data or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}) that will be used to generate the data URI.\n     * @returns {Promise<string>} - The promise that will be resolved by the file data URI.\n     */\n    toDataURL(exportData) {\n        const options = isWorkbookOptions(exportData) ?\n            exportData :\n            this.workbookOptions(exportData);\n        return this.zone.runOutsideAngular(() => toDataURL(options));\n    }\n    getExportData(exportData) {\n        let result;\n        if (exportData) {\n            if (Array.isArray(exportData)) {\n                result = {\n                    data: exportData\n                };\n            }\n            else {\n                result = exportData;\n            }\n        }\n        else {\n            result = {\n                data: this.data,\n                group: this.group\n            };\n        }\n        return result;\n    }\n    saveFile(dataURL) {\n        saveAs(dataURL, this.fileName, {\n            forceProxy: this.forceProxy,\n            proxyURL: this.proxyURL\n        });\n    }\n}\nExcelExportComponent.decorators = [\n    { type: Component, args: [{\n                exportAs: 'kendoExcelExport',\n                selector: 'kendo-excelexport',\n                providers: [\n                    LocalizationService,\n                    {\n                        provide: L10N_PREFIX,\n                        useValue: 'kendo.excelexport'\n                    }\n                ],\n                template: ``\n            },] },\n];\n/** @nocollapse */\nExcelExportComponent.ctorParameters = () => [\n    { type: LocalizationService },\n    { type: NgZone }\n];\nExcelExportComponent.propDecorators = {\n    fileName: [{ type: Input }],\n    filterable: [{ type: Input }],\n    collapsible: [{ type: Input }],\n    creator: [{ type: Input }],\n    date: [{ type: Input }],\n    forceProxy: [{ type: Input }],\n    proxyURL: [{ type: Input }],\n    data: [{ type: Input }],\n    group: [{ type: Input }],\n    paddingCellOptions: [{ type: Input }],\n    headerPaddingCellOptions: [{ type: Input }],\n    columns: [{ type: ContentChildren, args: [ColumnBase, { descendants: true },] }]\n};\n\n/**\n * Represents the group header cell template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-group-header-template)).\n * Enables you to customize the content of the group header item.\n */\nclass GroupHeaderTemplateDirective {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nGroupHeaderTemplateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[kendoExcelExportGroupHeaderTemplate]'\n            },] },\n];\n/** @nocollapse */\nGroupHeaderTemplateDirective.ctorParameters = () => [\n    { type: TemplateRef, decorators: [{ type: Optional }] }\n];\n\n/**\n * Represents the group header column template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-group-header-column-template)).\n */\nclass GroupHeaderColumnTemplateDirective {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nGroupHeaderColumnTemplateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[kendoExcelExportGroupHeaderColumnTemplate]'\n            },] },\n];\n/** @nocollapse */\nGroupHeaderColumnTemplateDirective.ctorParameters = () => [\n    { type: TemplateRef, decorators: [{ type: Optional }] }\n];\n\n/**\n * Represents the group footer cell template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-group-footer-template)).\n * Enables you to customize the group footer cell of the column.\n */\nclass GroupFooterTemplateDirective {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nGroupFooterTemplateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[kendoExcelExportGroupFooterTemplate]'\n            },] },\n];\n/** @nocollapse */\nGroupFooterTemplateDirective.ctorParameters = () => [\n    { type: TemplateRef, decorators: [{ type: Optional }] }\n];\n\n/**\n * Represents the footer cell template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-footer-template)).\n * Enables you to customize the footer cell of the column.\n */\nclass FooterTemplateDirective {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nFooterTemplateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[kendoExcelExportFooterTemplate]'\n            },] },\n];\n/** @nocollapse */\nFooterTemplateDirective.ctorParameters = () => [\n    { type: TemplateRef, decorators: [{ type: Optional }] }\n];\n\n/**\n * Represents the columns of the Kendo UI Excel Export component for Angular.\n */\nclass ColumnComponent extends ColumnBase {\n    constructor(parent) {\n        super(parent);\n    }\n}\nColumnComponent.decorators = [\n    { type: Component, args: [{\n                providers: [\n                    {\n                        provide: ColumnBase,\n                        useExisting: forwardRef(() => ColumnComponent) // tslint:disable-line:no-forward-ref\n                    }\n                ],\n                selector: 'kendo-excelexport-column',\n                template: ``\n            },] },\n];\n/** @nocollapse */\nColumnComponent.ctorParameters = () => [\n    { type: ColumnBase, decorators: [{ type: SkipSelf }, { type: Host }, { type: Optional }] }\n];\nColumnComponent.propDecorators = {\n    field: [{ type: Input }],\n    cellOptions: [{ type: Input }],\n    groupHeaderCellOptions: [{ type: Input }],\n    groupFooterCellOptions: [{ type: Input }],\n    footerCellOptions: [{ type: Input }],\n    groupHeaderTemplate: [{ type: ContentChild, args: [GroupHeaderTemplateDirective,] }],\n    groupHeaderColumnTemplate: [{ type: ContentChild, args: [GroupHeaderColumnTemplateDirective,] }],\n    groupFooterTemplate: [{ type: ContentChild, args: [GroupFooterTemplateDirective,] }],\n    footerTemplate: [{ type: ContentChild, args: [FooterTemplateDirective,] }]\n};\n\n/**\n * Represents the column group component of the Kendo UI Excel Export component.\n */\nclass ColumnGroupComponent extends ColumnBase {\n    constructor(parent) {\n        super(parent);\n        this.parent = parent;\n    }\n}\nColumnGroupComponent.decorators = [\n    { type: Component, args: [{\n                providers: [\n                    {\n                        provide: ColumnBase,\n                        useExisting: forwardRef(() => ColumnGroupComponent) // tslint:disable-line:no-forward-ref\n                    }\n                ],\n                selector: 'kendo-excelexport-column-group',\n                template: ``\n            },] },\n];\n/** @nocollapse */\nColumnGroupComponent.ctorParameters = () => [\n    { type: ColumnBase, decorators: [{ type: SkipSelf }, { type: Host }, { type: Optional }] }\n];\n\nconst declarations = [\n    ExcelExportComponent,\n    ColumnComponent,\n    ColumnGroupComponent,\n    FooterTemplateDirective,\n    GroupFooterTemplateDirective,\n    GroupHeaderTemplateDirective,\n    GroupHeaderColumnTemplateDirective\n];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Excel Export component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the ExcelExportModule module\n * import { ExcelExportModule } from '@progress/kendo-angular-excel-export';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, ExcelExportModule], // import ExcelExportModule module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nclass ExcelExportModule {\n}\nExcelExportModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [declarations],\n                exports: [declarations]\n            },] },\n];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GroupHeaderColumnTemplateDirective, ExcelExportComponent, ExcelExportModule, ColumnBase, ColumnComponent, ColumnGroupComponent, FooterTemplateDirective, GroupFooterTemplateDirective, GroupHeaderTemplateDirective, workbookOptions, toDataURL, isWorkbookOptions };\n"],"names":[],"mappings":"AAAA;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mIA4KC;;;;;;;;;AAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6FD,kHAcC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAmBA;;;;;;;;;;;;;CAWD,kKAKC;;;;;;;;;;;;kCAIA;;;;;;;;;;;;CAUD,oLAKC;;;;;;;;;;;;kCAIA;;;;;;;;;;;;;CAWD,kKAKC;;;;;;;;;;;;kCAIA;;;;;;;;;;;;;CAWD,mJAKC;;;;;;;;;;;;kCAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;CASD,gJAYC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAeA;;;;;;;;;;;;;;;;;CAUD,qJAYC;;;;;;;;;;;;;;;;;;;;;;;kCAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2CD;;;;;;;;;;;;;;;;;;;;0BAMC;;;;;;;"}