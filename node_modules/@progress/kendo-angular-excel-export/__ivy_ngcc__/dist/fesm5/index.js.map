{"version":3,"file":"index.js","sources":["D:/project/projek_angular/hris_rni/node_modules/@progress/kendo-angular-excel-export/dist/fesm5/index.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { Input, ContentChildren, Component, NgZone, QueryList, Directive, TemplateRef, Optional, forwardRef, SkipSelf, Host, ContentChild, NgModule } from '@angular/core';\nimport { saveAs } from '@progress/kendo-file-saver';\nimport { IntlService, ExcelExporter, Workbook } from '@progress/kendo-ooxml';\nexport * from '@progress/kendo-ooxml';\nimport { toString } from '@telerik/kendo-intl';\nimport { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\nimport { __extends } from 'tslib';\n\n/* tslint:disable align */\n/* tslint:disable:no-use-before-declare */\nvar compileTemplate = function (templateRef, context, updateContext) {\n    var embeddedView = templateRef.createEmbeddedView(context);\n    var result = function (data) {\n        updateContext(context, data);\n        embeddedView.detectChanges();\n        return embeddedView.rootNodes.reduce(function (content, rootNode) {\n            return content + rootNode.textContent;\n        }, '').trim();\n    };\n    result.destroy = function () {\n        embeddedView.destroy();\n        embeddedView = null;\n    };\n    return result;\n};\nvar updateGroupHeaderContext = function (context, data) {\n    context.$implicit = context.group = data;\n    context.field = data.field;\n    context.value = data.value;\n    context.aggregates = data.aggregates;\n};\nvar updateGroupFooterContext = function (context, data) {\n    context.group = data.group;\n    context.$implicit = context.aggregates = data;\n};\nvar updateFooterContext = function (context, data) {\n    context.aggregates = data.aggregates;\n};\n/**\n * @hidden\n */\nvar toExporterColumns = function (sourceColumns) {\n    var exporterColumns = [];\n    var columnIndex = 0;\n    var addColumns = function (columns, result, level) {\n        columns.forEach(function (column) {\n            if (column.level === level) {\n                var exporterColumn = new ExporterColumn(column, columnIndex);\n                result.push(exporterColumn);\n                if (column.children && column.children.some(function (c) { return c !== column; })) {\n                    var children = exporterColumn.columns = [];\n                    addColumns(column.children, children, level + 1);\n                }\n                else {\n                    columnIndex++;\n                }\n            }\n        });\n    };\n    addColumns(sourceColumns, exporterColumns, 0);\n    return exporterColumns;\n};\n/**\n * @hidden\n */\nvar destroyColumns = function (columns) {\n    if (columns) {\n        columns.forEach(function (column) {\n            column.destroy();\n        });\n    }\n};\n/**\n * @hidden\n */\nvar ExporterColumn = /** @class */ (function () {\n    function ExporterColumn(column, columnIndex) {\n        this.title = column.title;\n        this.field = column.field;\n        this.hidden = column.hidden;\n        this.locked = column.locked;\n        this.width = column.width;\n        this.headerCellOptions = column.headerCellOptions;\n        this.cellOptions = column.cellOptions;\n        this.groupHeaderCellOptions = column.groupHeaderCellOptions;\n        this.groupFooterCellOptions = column.groupFooterCellOptions;\n        this.footerCellOptions = column.footerCellOptions;\n        if (column.footerTemplate) {\n            this.footerTemplate = compileTemplate(column.footerTemplate.templateRef, {\n                $implicit: column,\n                column: column,\n                columnIndex: columnIndex\n            }, updateFooterContext);\n        }\n        if (column.groupFooterTemplate) {\n            this.groupFooterTemplate = compileTemplate(column.groupFooterTemplate.templateRef, {\n                column: column,\n                field: column.field\n            }, updateGroupFooterContext);\n        }\n        if (column.groupHeaderTemplate) {\n            this.groupHeaderTemplate = compileTemplate(column.groupHeaderTemplate.templateRef, {}, updateGroupHeaderContext);\n        }\n        if (column.groupHeaderColumnTemplate) {\n            this.groupHeaderColumnTemplate = compileTemplate(column.groupHeaderColumnTemplate.templateRef, {}, updateGroupHeaderContext);\n        }\n    }\n    ExporterColumn.prototype.destroy = function () {\n        if (this.footerTemplate) {\n            this.footerTemplate.destroy();\n        }\n        if (this.groupFooterTemplate) {\n            this.groupFooterTemplate.destroy();\n        }\n        if (this.groupHeaderTemplate) {\n            this.groupHeaderTemplate.destroy();\n        }\n        if (this.groupHeaderColumnTemplate) {\n            this.groupHeaderColumnTemplate.destroy();\n        }\n        destroyColumns(this.columns);\n    };\n    return ExporterColumn;\n}());\n\nIntlService.register({ toString: toString });\n/**\n *\n * @hidden\n */\nvar workbookOptions = function (options) {\n    var columns = toExporterColumns(options.columns);\n    var exporter = new ExcelExporter({\n        columns: columns,\n        data: options.data,\n        filterable: options.filterable,\n        groups: options.group,\n        paddingCellOptions: options.paddingCellOptions,\n        headerPaddingCellOptions: options.headerPaddingCellOptions,\n        collapsible: options.collapsible,\n        hierarchy: options.hierarchy,\n        aggregates: options.aggregates\n    });\n    var result = exporter.workbook();\n    result.creator = options.creator;\n    result.date = options.date;\n    result.rtl = options.rtl;\n    destroyColumns(columns);\n    return result;\n};\n/**\n * @hidden\n */\nvar toDataURL = function (options) {\n    var workbook = new Workbook(options);\n    return workbook.toDataURL();\n};\n/**\n * @hidden\n */\nvar isWorkbookOptions = function (value) {\n    return value && value.sheets;\n};\n\n/**\n * @hidden\n */\nvar ColumnBase = /** @class */ (function () {\n    function ColumnBase(parent) {\n        this.parent = parent;\n    }\n    Object.defineProperty(ColumnBase.prototype, \"level\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.parent ? this.parent.level + 1 : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColumnBase.propDecorators = {\n        title: [{ type: Input }],\n        width: [{ type: Input }],\n        locked: [{ type: Input }],\n        hidden: [{ type: Input }],\n        headerCellOptions: [{ type: Input }],\n        children: [{ type: ContentChildren, args: [ColumnBase,] }]\n    };\n    return ColumnBase;\n}());\n\n// tslint:disable:max-line-length\n/**\n * Represents the [Kendo UI Excel Export component for Angular]({% slug overview_excelexport %}).\n * Configures the settings for the Excel export of the Kendo UI Grid.\n */\nvar ExcelExportComponent = /** @class */ (function () {\n    function ExcelExportComponent(localization, zone) {\n        this.localization = localization;\n        this.zone = zone;\n        /**\n         * Specifies the name of the file that is exported to Excel.\n         * @default \"Export.xlsx\"\n         */\n        this.fileName = 'Export.xlsx';\n        /**\n         * @hidden\n         */\n        this.columns = new QueryList();\n        this.saveFile = this.saveFile.bind(this);\n    }\n    /**\n     * Saves the data to Excel.\n     *\n     * @param exportData - An optional parameter. Can be the data that will be exported or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}).\n     */\n    ExcelExportComponent.prototype.save = function (exportData) {\n        this.toDataURL(exportData).then(this.saveFile);\n    };\n    /**\n     * Based on the specified columns and data, returns\n     * [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %})\n     * ([see example]({% slug customrowsandcells_excelexport %})).\n     *\n     * @param exportData - The optional data to be exported.\n     * @returns {WorkbookOptions} - The workbook options.\n     */\n    ExcelExportComponent.prototype.workbookOptions = function (exportData) {\n        var currentData = this.getExportData(exportData);\n        var options = workbookOptions({\n            columns: this.columns,\n            data: currentData.data,\n            group: currentData.group,\n            filterable: this.filterable,\n            creator: this.creator,\n            date: this.date,\n            rtl: this.localization.rtl,\n            paddingCellOptions: this.paddingCellOptions,\n            headerPaddingCellOptions: this.headerPaddingCellOptions,\n            collapsible: this.collapsible\n        });\n        return options;\n    };\n    /**\n     * Returns a promise which will be resolved with the file data URI\n     * ([see example]({% slug filesaving_excelexport %})).\n     *\n     * @param exportData - The optional data or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}) that will be used to generate the data URI.\n     * @returns {Promise<string>} - The promise that will be resolved by the file data URI.\n     */\n    ExcelExportComponent.prototype.toDataURL = function (exportData) {\n        var options = isWorkbookOptions(exportData) ?\n            exportData :\n            this.workbookOptions(exportData);\n        return this.zone.runOutsideAngular(function () { return toDataURL(options); });\n    };\n    ExcelExportComponent.prototype.getExportData = function (exportData) {\n        var result;\n        if (exportData) {\n            if (Array.isArray(exportData)) {\n                result = {\n                    data: exportData\n                };\n            }\n            else {\n                result = exportData;\n            }\n        }\n        else {\n            result = {\n                data: this.data,\n                group: this.group\n            };\n        }\n        return result;\n    };\n    ExcelExportComponent.prototype.saveFile = function (dataURL) {\n        saveAs(dataURL, this.fileName, {\n            forceProxy: this.forceProxy,\n            proxyURL: this.proxyURL\n        });\n    };\n    ExcelExportComponent.decorators = [\n        { type: Component, args: [{\n                    exportAs: 'kendoExcelExport',\n                    selector: 'kendo-excelexport',\n                    providers: [\n                        LocalizationService,\n                        {\n                            provide: L10N_PREFIX,\n                            useValue: 'kendo.excelexport'\n                        }\n                    ],\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    ExcelExportComponent.ctorParameters = function () { return [\n        { type: LocalizationService },\n        { type: NgZone }\n    ]; };\n    ExcelExportComponent.propDecorators = {\n        fileName: [{ type: Input }],\n        filterable: [{ type: Input }],\n        collapsible: [{ type: Input }],\n        creator: [{ type: Input }],\n        date: [{ type: Input }],\n        forceProxy: [{ type: Input }],\n        proxyURL: [{ type: Input }],\n        data: [{ type: Input }],\n        group: [{ type: Input }],\n        paddingCellOptions: [{ type: Input }],\n        headerPaddingCellOptions: [{ type: Input }],\n        columns: [{ type: ContentChildren, args: [ColumnBase, { descendants: true },] }]\n    };\n    return ExcelExportComponent;\n}());\n\n/**\n * Represents the group header cell template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-group-header-template)).\n * Enables you to customize the content of the group header item.\n */\nvar GroupHeaderTemplateDirective = /** @class */ (function () {\n    function GroupHeaderTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    GroupHeaderTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoExcelExportGroupHeaderTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    GroupHeaderTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return GroupHeaderTemplateDirective;\n}());\n\n/**\n * Represents the group header column template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-group-header-column-template)).\n */\nvar GroupHeaderColumnTemplateDirective = /** @class */ (function () {\n    function GroupHeaderColumnTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    GroupHeaderColumnTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoExcelExportGroupHeaderColumnTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    GroupHeaderColumnTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return GroupHeaderColumnTemplateDirective;\n}());\n\n/**\n * Represents the group footer cell template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-group-footer-template)).\n * Enables you to customize the group footer cell of the column.\n */\nvar GroupFooterTemplateDirective = /** @class */ (function () {\n    function GroupFooterTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    GroupFooterTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoExcelExportGroupFooterTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    GroupFooterTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return GroupFooterTemplateDirective;\n}());\n\n/**\n * Represents the footer cell template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-footer-template)).\n * Enables you to customize the footer cell of the column.\n */\nvar FooterTemplateDirective = /** @class */ (function () {\n    function FooterTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    FooterTemplateDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[kendoExcelExportFooterTemplate]'\n                },] },\n    ];\n    /** @nocollapse */\n    FooterTemplateDirective.ctorParameters = function () { return [\n        { type: TemplateRef, decorators: [{ type: Optional }] }\n    ]; };\n    return FooterTemplateDirective;\n}());\n\n/**\n * Represents the columns of the Kendo UI Excel Export component for Angular.\n */\nvar ColumnComponent = /** @class */ (function (_super) {\n    __extends(ColumnComponent, _super);\n    function ColumnComponent(parent) {\n        return _super.call(this, parent) || this;\n    }\n    ColumnComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: ColumnBase,\n                            useExisting: forwardRef(function () { return ColumnComponent; }) // tslint:disable-line:no-forward-ref\n                        }\n                    ],\n                    selector: 'kendo-excelexport-column',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    ColumnComponent.ctorParameters = function () { return [\n        { type: ColumnBase, decorators: [{ type: SkipSelf }, { type: Host }, { type: Optional }] }\n    ]; };\n    ColumnComponent.propDecorators = {\n        field: [{ type: Input }],\n        cellOptions: [{ type: Input }],\n        groupHeaderCellOptions: [{ type: Input }],\n        groupFooterCellOptions: [{ type: Input }],\n        footerCellOptions: [{ type: Input }],\n        groupHeaderTemplate: [{ type: ContentChild, args: [GroupHeaderTemplateDirective,] }],\n        groupHeaderColumnTemplate: [{ type: ContentChild, args: [GroupHeaderColumnTemplateDirective,] }],\n        groupFooterTemplate: [{ type: ContentChild, args: [GroupFooterTemplateDirective,] }],\n        footerTemplate: [{ type: ContentChild, args: [FooterTemplateDirective,] }]\n    };\n    return ColumnComponent;\n}(ColumnBase));\n\n/**\n * Represents the column group component of the Kendo UI Excel Export component.\n */\nvar ColumnGroupComponent = /** @class */ (function (_super) {\n    __extends(ColumnGroupComponent, _super);\n    function ColumnGroupComponent(parent) {\n        var _this = _super.call(this, parent) || this;\n        _this.parent = parent;\n        return _this;\n    }\n    ColumnGroupComponent.decorators = [\n        { type: Component, args: [{\n                    providers: [\n                        {\n                            provide: ColumnBase,\n                            useExisting: forwardRef(function () { return ColumnGroupComponent; }) // tslint:disable-line:no-forward-ref\n                        }\n                    ],\n                    selector: 'kendo-excelexport-column-group',\n                    template: \"\"\n                },] },\n    ];\n    /** @nocollapse */\n    ColumnGroupComponent.ctorParameters = function () { return [\n        { type: ColumnBase, decorators: [{ type: SkipSelf }, { type: Host }, { type: Optional }] }\n    ]; };\n    return ColumnGroupComponent;\n}(ColumnBase));\n\nvar declarations = [\n    ExcelExportComponent,\n    ColumnComponent,\n    ColumnGroupComponent,\n    FooterTemplateDirective,\n    GroupFooterTemplateDirective,\n    GroupHeaderTemplateDirective,\n    GroupHeaderColumnTemplateDirective\n];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Excel Export component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the ExcelExportModule module\n * import { ExcelExportModule } from '@progress/kendo-angular-excel-export';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, ExcelExportModule], // import ExcelExportModule module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nvar ExcelExportModule = /** @class */ (function () {\n    function ExcelExportModule() {\n    }\n    ExcelExportModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [declarations],\n                    exports: [declarations]\n                },] },\n    ];\n    return ExcelExportModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GroupHeaderColumnTemplateDirective, ExcelExportComponent, ExcelExportModule, ColumnBase, ColumnComponent, ColumnGroupComponent, FooterTemplateDirective, GroupFooterTemplateDirective, GroupHeaderTemplateDirective, workbookOptions, toDataURL, isWorkbookOptions };\n"],"names":[],"mappings":"AAAA;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyLM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8FA,AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAmBA;;;;;;;;;;;;KAYD,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;KAWJ,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;KAYJ,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;KAYJ,AAKC;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;KAWJ,AAYC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAeA;;;;;;;;;;;;;KAaD,AAYC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA8CJ;;;;;;;;;;;;;;;;;;;;;;gDAMC;;;;;;;;;"}