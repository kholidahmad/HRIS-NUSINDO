{"version":3,"sources":["D:/project/projek_angular/hris_rni/node_modules/ngx-ui-switch/ui-switch.es2015.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoNC,uDA4BC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA0BA;;;;;;;;;;;;;;;;;;;;;;;;;CAmBD;;;;;;;;;;;;;;;;;;;0BAeC","file":"ui-switch.es2015.js","sourcesContent":["import { ChangeDetectorRef, Component, EventEmitter, HostListener, Inject, InjectionToken, Input, NgModule, Optional, Output, forwardRef } from '@angular/core';\nimport { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport 'rxjs';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst UI_SWITCH_OPTIONS = new InjectionToken('UI_SWITCH_OPTIONS');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst UI_SWITCH_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    /* tslint:disable-next-line: no-use-before-declare */\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => UiSwitchComponent)),\n    multi: true,\n};\nclass UiSwitchComponent {\n    /**\n     * @param {?=} config\n     * @param {?=} cdr\n     */\n    constructor(config = {}, cdr) {\n        this.cdr = cdr;\n        /**\n         * Emits changed value\n         */\n        this.change = new EventEmitter();\n        /**\n         * Emits DOM event\n         */\n        this.changeEvent = new EventEmitter();\n        /**\n         * Emits changed value\n         */\n        this.valueChange = new EventEmitter();\n        this.onTouchedCallback = (/**\n         * @param {?} v\n         * @return {?}\n         */\n        (v) => { });\n        this.onChangeCallback = (/**\n         * @param {?} v\n         * @return {?}\n         */\n        (v) => { });\n        this.size = config && config.size || 'medium';\n        this.color = config && config.color;\n        this.switchOffColor = config && config.switchOffColor;\n        this.switchColor = config && config.switchColor;\n        this.defaultBgColor = config && config.defaultBgColor;\n        this.defaultBoColor = config && config.defaultBoColor;\n        this.checkedLabel = config && config.checkedLabel;\n        this.uncheckedLabel = config && config.uncheckedLabel;\n        this.checkedTextColor = config && config.checkedTextColor;\n        this.uncheckedTextColor = config && config.uncheckedTextColor;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set checked(v) {\n        this._checked = v !== false;\n    }\n    /**\n     * @return {?}\n     */\n    get checked() {\n        return this._checked;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set disabled(v) {\n        this._disabled = v !== false;\n    }\n    /**\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set reverse(v) {\n        this._reverse = v !== false;\n    }\n    /**\n     * @return {?}\n     */\n    get reverse() {\n        return this._reverse;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set loading(v) {\n        this._loading = v !== false;\n    }\n    /**\n     * @return {?}\n     */\n    get loading() {\n        return this._loading;\n    }\n    /**\n     * @param {?=} flag\n     * @return {?}\n     */\n    getColor(flag = '') {\n        if (flag === 'borderColor') {\n            return this.defaultBoColor;\n        }\n        if (flag === 'switchColor') {\n            if (this.reverse) {\n                return !this.checked ? this.switchColor : this.switchOffColor || this.switchColor;\n            }\n            return this.checked ? this.switchColor : this.switchOffColor || this.switchColor;\n        }\n        if (flag === 'checkedTextColor') {\n            return this.reverse ? this.uncheckedTextColor : this.checkedTextColor;\n        }\n        if (flag === 'uncheckedTextColor') {\n            return this.reverse ? this.checkedTextColor : this.uncheckedTextColor;\n        }\n        if (this.reverse) {\n            return !this.checked ? this.color : this.defaultBgColor;\n        }\n        return this.checked ? this.color : this.defaultBgColor;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onClick(event) {\n        if (this.disabled) {\n            return;\n        }\n        this.checked = !this.checked;\n        // Component events\n        this.change.emit(this.checked);\n        this.valueChange.emit(this.checked);\n        this.changeEvent.emit(event);\n        // value accessor callbacks\n        this.onChangeCallback(this.checked);\n        this.onTouchedCallback(this.checked);\n        this.cdr.markForCheck();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onToggle(event) {\n        if (this.beforeChange) {\n            this._beforeChange = this.beforeChange.subscribe((/**\n             * @param {?} confirm\n             * @return {?}\n             */\n            (confirm) => {\n                if (confirm) {\n                    this.onClick(event);\n                }\n            }));\n        }\n        else {\n            this.onClick(event);\n        }\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    writeValue(obj) {\n        if (obj !== this.checked) {\n            this.checked = !!obj;\n        }\n        if (this.cdr) {\n            this.cdr.markForCheck();\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChangeCallback = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouchedCallback = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._beforeChange) {\n            this._beforeChange.unsubscribe();\n        }\n    }\n}\nUiSwitchComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ui-switch',\n                template: `\n    <span class=\"switch\"\n    [class.checked]=\"checked\"\n    [class.disabled]=\"disabled\"\n    [class.loading]=\"loading\"\n    [class.switch-large]=\"size === 'large'\"\n    [class.switch-medium]=\"size === 'medium'\"\n    [class.switch-small]=\"size === 'small'\"\n    [style.background-color]=\"getColor()\"\n    [style.border-color]=\"getColor('borderColor')\"\n    >\n    <span class=\"switch-pane\" *ngIf=\"checkedLabel || uncheckedLabel\">\n      <span class=\"switch-label-checked\"\n      [style.color]=\"getColor('checkedTextColor')\">{{ this.checkedLabel }}</span>\n      <span class=\"switch-label-unchecked\"\n      [style.color]=\"getColor('uncheckedTextColor')\">{{ this.uncheckedLabel }}</span>\n    </span>\n    <small [style.background]=\"getColor('switchColor')\">\n      <ng-content></ng-content>\n    </small>\n    </span>\n  `,\n                providers: [UI_SWITCH_CONTROL_VALUE_ACCESSOR],\n            },] },\n];\n/** @nocollapse */\nUiSwitchComponent.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [UI_SWITCH_OPTIONS,] }, { type: Optional }] },\n    { type: ChangeDetectorRef }\n];\nUiSwitchComponent.propDecorators = {\n    size: [{ type: Input }],\n    color: [{ type: Input }],\n    switchOffColor: [{ type: Input }],\n    switchColor: [{ type: Input }],\n    defaultBgColor: [{ type: Input }],\n    defaultBoColor: [{ type: Input }],\n    checkedLabel: [{ type: Input }],\n    uncheckedLabel: [{ type: Input }],\n    checkedTextColor: [{ type: Input }],\n    uncheckedTextColor: [{ type: Input }],\n    beforeChange: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    reverse: [{ type: Input }],\n    loading: [{ type: Input }],\n    change: [{ type: Output }],\n    changeEvent: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    onToggle: [{ type: HostListener, args: ['click', ['$event'],] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass UiSwitchModule {\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    static forRoot(config) {\n        return {\n            ngModule: UiSwitchModule,\n            providers: [\n                { provide: UI_SWITCH_OPTIONS, useValue: config || {} }\n            ]\n        };\n    }\n}\nUiSwitchModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    UiSwitchComponent\n                ],\n                imports: [\n                    CommonModule,\n                    FormsModule\n                ],\n                exports: [\n                    FormsModule,\n                    UiSwitchComponent\n                ]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { UiSwitchComponent, UiSwitchModule, UI_SWITCH_OPTIONS as Éµa };\n"]}