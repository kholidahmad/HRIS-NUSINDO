{"version":3,"file":"ui-switch.component.d.ts","sources":["D:/project/projek_angular/hris_rni/node_modules/ngx-ui-switch/ui-switch/ui-switch.component.d.ts"],"sourcesContent":["import { ChangeDetectorRef, EventEmitter, OnDestroy } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { UiSwitchModuleConfig } from './ui-switch.config';\nimport { Observable } from 'rxjs';\nexport declare class UiSwitchComponent implements ControlValueAccessor, OnDestroy {\n    private cdr;\n    private _checked;\n    private _disabled;\n    private _reverse;\n    private _loading;\n    private _beforeChange;\n    size: any;\n    color: any;\n    switchOffColor: any;\n    switchColor: any;\n    defaultBgColor: any;\n    defaultBoColor: any;\n    checkedLabel: any;\n    uncheckedLabel: any;\n    checkedTextColor: any;\n    uncheckedTextColor: any;\n    beforeChange: Observable<boolean>;\n    checked: boolean;\n    disabled: boolean;\n    reverse: boolean;\n    loading: boolean;\n    /**\n     * Emits changed value\n     */\n    change: EventEmitter<boolean>;\n    /**\n     * Emits DOM event\n     */\n    changeEvent: EventEmitter<MouseEvent>;\n    /**\n     * Emits changed value\n     */\n    valueChange: EventEmitter<boolean>;\n    constructor(config: UiSwitchModuleConfig | undefined, cdr: ChangeDetectorRef);\n    getColor(flag?: string): any;\n    onClick(event: MouseEvent): void;\n    onToggle(event: MouseEvent): void;\n    writeValue(obj: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    private onTouchedCallback;\n    private onChangeCallback;\n    ngOnDestroy(): void;\n}\n"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;"}