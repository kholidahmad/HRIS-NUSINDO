{"version":3,"sources":["D:/project/projek_angular/hris_rni/node_modules/ng-chartist/fesm5/ng-chartist.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkHM,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;KAUD;;;;;;;;;;;gDAOC","file":"ng-chartist.js","sourcesContent":["import { __read, __spread, __values } from 'tslib';\nimport * as Chartist from 'chartist';\nimport { Component, ElementRef, Input, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar ChartistComponent = /** @class */ (function () {\n    function ChartistComponent(element) {\n        this.element = element.nativeElement;\n    }\n    /**\n     * @return {?}\n     */\n    ChartistComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.type || !this.data) {\n            Promise.reject('Expected at least type and data.');\n        }\n        return this.renderChart().then(function (chart) {\n            if (_this.events !== undefined) {\n                _this.bindEvents(chart);\n            }\n            return chart;\n        });\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ChartistComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        this.update(changes);\n    };\n    /**\n     * @return {?}\n     */\n    ChartistComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.chart) {\n            this.chart.detach();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ChartistComponent.prototype.renderChart = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var promises = [\n            this.type,\n            this.element,\n            this.data,\n            this.options,\n            this.responsiveOptions\n        ];\n        return Promise.all(promises).then(function (values) {\n            var _a = __read(values), type = _a[0], args = _a.slice(1);\n            if (!(type in Chartist)) {\n                throw new Error(type + \" is not a valid chart type\");\n            }\n            _this.chart = ((/** @type {?} */ (Chartist)))[type].apply(((/** @type {?} */ (Chartist))), __spread(args));\n            return _this.chart;\n        });\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ChartistComponent.prototype.update = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (!this.chart || 'type' in changes) {\n            this.renderChart();\n        }\n        else {\n            if (changes.data) {\n                this.data = changes.data.currentValue;\n            }\n            if (changes.options) {\n                this.options = changes.options.currentValue;\n            }\n            ((/** @type {?} */ (this.chart))).update(this.data, this.options);\n        }\n    };\n    /**\n     * @param {?} chart\n     * @return {?}\n     */\n    ChartistComponent.prototype.bindEvents = /**\n     * @param {?} chart\n     * @return {?}\n     */\n    function (chart) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(Object.keys(this.events)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var event_1 = _c.value;\n                chart.on(event_1, this.events[event_1]);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    ChartistComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'x-chartist',\n                    template: '<ng-content></ng-content>'\n                }] }\n    ];\n    /** @nocollapse */\n    ChartistComponent.ctorParameters = function () { return [\n        { type: ElementRef }\n    ]; };\n    ChartistComponent.propDecorators = {\n        data: [{ type: Input }],\n        type: [{ type: Input }],\n        options: [{ type: Input }],\n        responsiveOptions: [{ type: Input }],\n        events: [{ type: Input }]\n    };\n    return ChartistComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar ChartistModule = /** @class */ (function () {\n    function ChartistModule() {\n    }\n    ChartistModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [ChartistComponent],\n                    imports: [],\n                    exports: [ChartistComponent]\n                },] }\n    ];\n    return ChartistModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { ChartistComponent, ChartistModule };\n"]}