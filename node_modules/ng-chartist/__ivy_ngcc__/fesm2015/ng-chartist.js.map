{"version":3,"sources":["D:/project/projek_angular/hris_rni/node_modules/ng-chartist/fesm2015/ng-chartist.js"],"names":[],"mappings":"AAAA;;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoFC,4BAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;CAOD;;;;;;;;;0BAOC","file":"ng-chartist.js","sourcesContent":["import * as Chartist from 'chartist';\nimport { Component, ElementRef, Input, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ChartistComponent {\n    /**\n     * @param {?} element\n     */\n    constructor(element) {\n        this.element = element.nativeElement;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.type || !this.data) {\n            Promise.reject('Expected at least type and data.');\n        }\n        return this.renderChart().then((chart) => {\n            if (this.events !== undefined) {\n                this.bindEvents(chart);\n            }\n            return chart;\n        });\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this.update(changes);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.chart) {\n            this.chart.detach();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    renderChart() {\n        /** @type {?} */\n        const promises = [\n            this.type,\n            this.element,\n            this.data,\n            this.options,\n            this.responsiveOptions\n        ];\n        return Promise.all(promises).then((values) => {\n            const [type, ...args] = values;\n            if (!(type in Chartist)) {\n                throw new Error(`${type} is not a valid chart type`);\n            }\n            this.chart = ((/** @type {?} */ (Chartist)))[type](...args);\n            return this.chart;\n        });\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    update(changes) {\n        if (!this.chart || 'type' in changes) {\n            this.renderChart();\n        }\n        else {\n            if (changes.data) {\n                this.data = changes.data.currentValue;\n            }\n            if (changes.options) {\n                this.options = changes.options.currentValue;\n            }\n            ((/** @type {?} */ (this.chart))).update(this.data, this.options);\n        }\n    }\n    /**\n     * @param {?} chart\n     * @return {?}\n     */\n    bindEvents(chart) {\n        for (const event of Object.keys(this.events)) {\n            chart.on(event, this.events[event]);\n        }\n    }\n}\nChartistComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'x-chartist',\n                template: '<ng-content></ng-content>'\n            }] }\n];\n/** @nocollapse */\nChartistComponent.ctorParameters = () => [\n    { type: ElementRef }\n];\nChartistComponent.propDecorators = {\n    data: [{ type: Input }],\n    type: [{ type: Input }],\n    options: [{ type: Input }],\n    responsiveOptions: [{ type: Input }],\n    events: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ChartistModule {\n}\nChartistModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [ChartistComponent],\n                imports: [],\n                exports: [ChartistComponent]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { ChartistComponent, ChartistModule };\n"]}