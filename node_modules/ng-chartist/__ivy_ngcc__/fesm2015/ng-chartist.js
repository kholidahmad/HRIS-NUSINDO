import * as Chartist from 'chartist';
import { Component, ElementRef, Input, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
class ChartistComponent {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.type || !this.data) {
            Promise.reject('Expected at least type and data.');
        }
        return this.renderChart().then((chart) => {
            if (this.events !== undefined) {
                this.bindEvents(chart);
            }
            return chart;
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.update(changes);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.chart) {
            this.chart.detach();
        }
    }
    /**
     * @return {?}
     */
    renderChart() {
        /** @type {?} */
        const promises = [
            this.type,
            this.element,
            this.data,
            this.options,
            this.responsiveOptions
        ];
        return Promise.all(promises).then((values) => {
            const [type, ...args] = values;
            if (!(type in Chartist)) {
                throw new Error(`${type} is not a valid chart type`);
            }
            this.chart = ((/** @type {?} */ (Chartist)))[type](...args);
            return this.chart;
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    update(changes) {
        if (!this.chart || 'type' in changes) {
            this.renderChart();
        }
        else {
            if (changes.data) {
                this.data = changes.data.currentValue;
            }
            if (changes.options) {
                this.options = changes.options.currentValue;
            }
            ((/** @type {?} */ (this.chart))).update(this.data, this.options);
        }
    }
    /**
     * @param {?} chart
     * @return {?}
     */
    bindEvents(chart) {
        for (const event of Object.keys(this.events)) {
            chart.on(event, this.events[event]);
        }
    }
}
ChartistComponent.ɵfac = function ChartistComponent_Factory(t) { return new (t || ChartistComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ChartistComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ChartistComponent, selectors: [["x-chartist"]], inputs: { data: "data", options: "options", type: "type", responsiveOptions: "responsiveOptions", events: "events" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ChartistComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/** @nocollapse */
ChartistComponent.ctorParameters = () => [
    { type: ElementRef }
];
ChartistComponent.propDecorators = {
    data: [{ type: Input }],
    type: [{ type: Input }],
    options: [{ type: Input }],
    responsiveOptions: [{ type: Input }],
    events: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChartistComponent, [{
        type: Component,
        args: [{
                selector: 'x-chartist',
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { data: [{
            type: Input
        }], options: [{
            type: Input
        }], type: [{
            type: Input
        }], responsiveOptions: [{
            type: Input
        }], events: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChartistModule {
}
ChartistModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ChartistModule });
ChartistModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ChartistModule_Factory(t) { return new (t || ChartistModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ChartistModule, { declarations: [ChartistComponent], exports: [ChartistComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChartistModule, [{
        type: NgModule,
        args: [{
                declarations: [ChartistComponent],
                imports: [],
                exports: [ChartistComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ChartistComponent, ChartistModule };

//# sourceMappingURL=ng-chartist.js.map